
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    	  path: basedir,
    	  exports: {},
    	  require: function (path, base) {
          return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
        }
    	}, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var p5_min = createCommonjsModule(function (module, exports) {
    /*! p5.js v1.1.9 July 22, 2020 */

    !function(e){module.exports=e();}(function(){return function o(i,s,l){function p(t,e){if(!s[t]){if(!i[t]){var r="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&r)return r(t,!0);if(u)return u(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var a=s[t]={exports:{}};i[t][0].call(a.exports,function(e){return p(i[t][1][e]||e)},a,a.exports,o,i,s,l);}return s[t].exports}for(var u="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<l.length;e++)p(l[e]);return p}({1:[function(e,t,r){t.exports={p5:{alpha:{name:"alpha",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},blue:{name:"blue",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},brightness:{name:"brightness",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},color:{name:"color",class:"p5",module:"Color",overloads:[{params:[{name:"gray",description:"<p>number specifying value between white and black.</p>\n",type:"Number"},{name:"alpha",description:"<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n",type:"Number",optional:!0}]},{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}]},{params:[{name:"value",description:"<p>a color string</p>\n",type:"String"}]},{params:[{name:"values",description:"<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",type:"Number[]"}]},{params:[{name:"color",description:"",type:"p5.Color"}]}]},green:{name:"green",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},hue:{name:"hue",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},lerpColor:{name:"lerpColor",params:[{name:"c1",description:"<p>interpolate from this color</p>\n",type:"p5.Color"},{name:"c2",description:"<p>interpolate to this color</p>\n",type:"p5.Color"},{name:"amt",description:"<p>number between 0 and 1</p>\n",type:"Number"}],class:"p5",module:"Color"},lightness:{name:"lightness",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},red:{name:"red",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},saturation:{name:"saturation",params:[{name:"color",description:'<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',type:"p5.Color|Number[]|String"}],class:"p5",module:"Color"},background:{name:"background",class:"p5",module:"Color",overloads:[{params:[{name:"color",description:'<p>any value created by the <a href="#/p5/color">color()</a> function</p>\n',type:"p5.Color"}],chainable:1},{params:[{name:"colorstring",description:"<p>color string, possible formats include: integer\n                        rgb() or rgba(), percentage rgb() or rgba(),\n                        3-digit hex, 6-digit hex</p>\n",type:"String"},{name:"a",description:"<p>opacity of the background relative to current\n                            color range (default is 0-255)</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"gray",description:"<p>specifies a value between white and black</p>\n",type:"Number"},{name:"a",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"v1",description:"<p>red or hue value (depending on the current color\n                       mode)</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value (depending on the current\n                       color mode)</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value (depending on the current\n                       color mode)</p>\n",type:"Number"},{name:"a",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"values",description:"<p>an array containing the red, green, blue\n                                and alpha components of the color</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"image",description:'<p>image created with <a href="#/p5/loadImage">loadImage()</a> or <a href="#/p5/createImage">createImage()</a>,\n                            to set as background\n                            (must be same size as the sketch window)</p>\n',type:"p5.Image"},{name:"a",description:"",type:"Number",optional:!0}],chainable:1}]},clear:{name:"clear",class:"p5",module:"Color"},colorMode:{name:"colorMode",class:"p5",module:"Color",overloads:[{params:[{name:"mode",description:"<p>either RGB, HSB or HSL, corresponding to\n                         Red/Green/Blue and Hue/Saturation/Brightness\n                         (or Lightness)</p>\n",type:"Constant"},{name:"max",description:"<p>range for all values</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"mode",description:"",type:"Constant"},{name:"max1",description:"<p>range for the red or hue depending on the\n                             current color mode</p>\n",type:"Number"},{name:"max2",description:"<p>range for the green or saturation depending\n                             on the current color mode</p>\n",type:"Number"},{name:"max3",description:"<p>range for the blue or brightness/lightness\n                             depending on the current color mode</p>\n",type:"Number"},{name:"maxA",description:"<p>range for the alpha</p>\n",type:"Number",optional:!0}],chainable:1}]},fill:{name:"fill",class:"p5",module:"Color",overloads:[{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"value",description:"<p>a color string</p>\n",type:"String"}],chainable:1},{params:[{name:"gray",description:"<p>a gray value</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"values",description:"<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"color",description:"<p>the fill color</p>\n",type:"p5.Color"}],chainable:1}]},noFill:{name:"noFill",class:"p5",module:"Color"},noStroke:{name:"noStroke",class:"p5",module:"Color"},stroke:{name:"stroke",class:"p5",module:"Color",overloads:[{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"value",description:"<p>a color string</p>\n",type:"String"}],chainable:1},{params:[{name:"gray",description:"<p>a gray value</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"values",description:"<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"color",description:"<p>the stroke color</p>\n",type:"p5.Color"}],chainable:1}]},erase:{name:"erase",params:[{name:"strengthFill",description:"<p>A number (0-255) for the strength of erasing for a shape's fill.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",type:"Number",optional:!0},{name:"strengthStroke",description:"<p>A number (0-255) for the strength of erasing for a shape's stroke.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",type:"Number",optional:!0}],class:"p5",module:"Color"},noErase:{name:"noErase",class:"p5",module:"Color"},arc:{name:"arc",params:[{name:"x",description:"<p>x-coordinate of the arc's ellipse</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the arc's ellipse</p>\n",type:"Number"},{name:"w",description:"<p>width of the arc's ellipse by default</p>\n",type:"Number"},{name:"h",description:"<p>height of the arc's ellipse by default</p>\n",type:"Number"},{name:"start",description:"<p>angle to start the arc, specified in radians</p>\n",type:"Number"},{name:"stop",description:"<p>angle to stop the arc, specified in radians</p>\n",type:"Number"},{name:"mode",description:"<p>optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE or OPEN</p>\n",type:"Constant",optional:!0},{name:"detail",description:"<p>optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25.</p>\n",type:"Number",optional:!0}],class:"p5",module:"Shape"},ellipse:{name:"ellipse",class:"p5",module:"Shape",overloads:[{params:[{name:"x",description:"<p>x-coordinate of the center of ellipse.</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the center of ellipse.</p>\n",type:"Number"},{name:"w",description:"<p>width of the ellipse.</p>\n",type:"Number"},{name:"h",description:"<p>height of the ellipse.</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"w",description:"",type:"Number"},{name:"h",description:"",type:"Number"},{name:"detail",description:"<p>number of radial sectors to draw (for WebGL mode)</p>\n",type:"Integer"}]}]},circle:{name:"circle",params:[{name:"x",description:"<p>x-coordinate of the centre of the circle.</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the centre of the circle.</p>\n",type:"Number"},{name:"d",description:"<p>diameter of the circle.</p>\n",type:"Number"}],class:"p5",module:"Shape"},line:{name:"line",class:"p5",module:"Shape",overloads:[{params:[{name:"x1",description:"<p>the x-coordinate of the first point</p>\n",type:"Number"},{name:"y1",description:"<p>the y-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"<p>the x-coordinate of the second point</p>\n",type:"Number"},{name:"y2",description:"<p>the y-coordinate of the second point</p>\n",type:"Number"}],chainable:1},{params:[{name:"x1",description:"",type:"Number"},{name:"y1",description:"",type:"Number"},{name:"z1",description:"<p>the z-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"",type:"Number"},{name:"y2",description:"",type:"Number"},{name:"z2",description:"<p>the z-coordinate of the second point</p>\n",type:"Number"}],chainable:1}]},point:{name:"point",class:"p5",module:"Shape",overloads:[{params:[{name:"x",description:"<p>the x-coordinate</p>\n",type:"Number"},{name:"y",description:"<p>the y-coordinate</p>\n",type:"Number"},{name:"z",description:"<p>the z-coordinate (for WebGL mode)</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"coordinate_vector",description:"<p>the coordinate vector</p>\n",type:"p5.Vector"}],chainable:1}]},quad:{name:"quad",class:"p5",module:"Shape",overloads:[{params:[{name:"x1",description:"<p>the x-coordinate of the first point</p>\n",type:"Number"},{name:"y1",description:"<p>the y-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"<p>the x-coordinate of the second point</p>\n",type:"Number"},{name:"y2",description:"<p>the y-coordinate of the second point</p>\n",type:"Number"},{name:"x3",description:"<p>the x-coordinate of the third point</p>\n",type:"Number"},{name:"y3",description:"<p>the y-coordinate of the third point</p>\n",type:"Number"},{name:"x4",description:"<p>the x-coordinate of the fourth point</p>\n",type:"Number"},{name:"y4",description:"<p>the y-coordinate of the fourth point</p>\n",type:"Number"}],chainable:1},{params:[{name:"x1",description:"",type:"Number"},{name:"y1",description:"",type:"Number"},{name:"z1",description:"<p>the z-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"",type:"Number"},{name:"y2",description:"",type:"Number"},{name:"z2",description:"<p>the z-coordinate of the second point</p>\n",type:"Number"},{name:"x3",description:"",type:"Number"},{name:"y3",description:"",type:"Number"},{name:"z3",description:"<p>the z-coordinate of the third point</p>\n",type:"Number"},{name:"x4",description:"",type:"Number"},{name:"y4",description:"",type:"Number"},{name:"z4",description:"<p>the z-coordinate of the fourth point</p>\n",type:"Number"}],chainable:1}]},rect:{name:"rect",class:"p5",module:"Shape",overloads:[{params:[{name:"x",description:"<p>x-coordinate of the rectangle.</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the rectangle.</p>\n",type:"Number"},{name:"w",description:"<p>width of the rectangle.</p>\n",type:"Number"},{name:"h",description:"<p>height of the rectangle.</p>\n",type:"Number",optional:!0},{name:"tl",description:"<p>optional radius of top-left corner.</p>\n",type:"Number",optional:!0},{name:"tr",description:"<p>optional radius of top-right corner.</p>\n",type:"Number",optional:!0},{name:"br",description:"<p>optional radius of bottom-right corner.</p>\n",type:"Number",optional:!0},{name:"bl",description:"<p>optional radius of bottom-left corner.</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"w",description:"",type:"Number"},{name:"h",description:"",type:"Number"},{name:"detailX",description:"<p>number of segments in the x-direction (for WebGL mode)</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>number of segments in the y-direction (for WebGL mode)</p>\n",type:"Integer",optional:!0}],chainable:1}]},square:{name:"square",params:[{name:"x",description:"<p>x-coordinate of the square.</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the square.</p>\n",type:"Number"},{name:"s",description:"<p>side size of the square.</p>\n",type:"Number"},{name:"tl",description:"<p>optional radius of top-left corner.</p>\n",type:"Number",optional:!0},{name:"tr",description:"<p>optional radius of top-right corner.</p>\n",type:"Number",optional:!0},{name:"br",description:"<p>optional radius of bottom-right corner.</p>\n",type:"Number",optional:!0},{name:"bl",description:"<p>optional radius of bottom-left corner.</p>\n",type:"Number",optional:!0}],class:"p5",module:"Shape"},triangle:{name:"triangle",params:[{name:"x1",description:"<p>x-coordinate of the first point</p>\n",type:"Number"},{name:"y1",description:"<p>y-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"<p>x-coordinate of the second point</p>\n",type:"Number"},{name:"y2",description:"<p>y-coordinate of the second point</p>\n",type:"Number"},{name:"x3",description:"<p>x-coordinate of the third point</p>\n",type:"Number"},{name:"y3",description:"<p>y-coordinate of the third point</p>\n",type:"Number"}],class:"p5",module:"Shape"},ellipseMode:{name:"ellipseMode",params:[{name:"mode",description:"<p>either CENTER, RADIUS, CORNER, or CORNERS</p>\n",type:"Constant"}],class:"p5",module:"Shape"},noSmooth:{name:"noSmooth",class:"p5",module:"Shape"},rectMode:{name:"rectMode",params:[{name:"mode",description:"<p>either CORNER, CORNERS, CENTER, or RADIUS</p>\n",type:"Constant"}],class:"p5",module:"Shape"},smooth:{name:"smooth",class:"p5",module:"Shape"},strokeCap:{name:"strokeCap",params:[{name:"cap",description:"<p>either ROUND, SQUARE or PROJECT</p>\n",type:"Constant"}],class:"p5",module:"Shape"},strokeJoin:{name:"strokeJoin",params:[{name:"join",description:"<p>either MITER, BEVEL, ROUND</p>\n",type:"Constant"}],class:"p5",module:"Shape"},strokeWeight:{name:"strokeWeight",params:[{name:"weight",description:"<p>the weight of the stroke (in pixels)</p>\n",type:"Number"}],class:"p5",module:"Shape"},bezier:{name:"bezier",class:"p5",module:"Shape",overloads:[{params:[{name:"x1",description:"<p>x-coordinate for the first anchor point</p>\n",type:"Number"},{name:"y1",description:"<p>y-coordinate for the first anchor point</p>\n",type:"Number"},{name:"x2",description:"<p>x-coordinate for the first control point</p>\n",type:"Number"},{name:"y2",description:"<p>y-coordinate for the first control point</p>\n",type:"Number"},{name:"x3",description:"<p>x-coordinate for the second control point</p>\n",type:"Number"},{name:"y3",description:"<p>y-coordinate for the second control point</p>\n",type:"Number"},{name:"x4",description:"<p>x-coordinate for the second anchor point</p>\n",type:"Number"},{name:"y4",description:"<p>y-coordinate for the second anchor point</p>\n",type:"Number"}],chainable:1},{params:[{name:"x1",description:"",type:"Number"},{name:"y1",description:"",type:"Number"},{name:"z1",description:"<p>z-coordinate for the first anchor point</p>\n",type:"Number"},{name:"x2",description:"",type:"Number"},{name:"y2",description:"",type:"Number"},{name:"z2",description:"<p>z-coordinate for the first control point</p>\n",type:"Number"},{name:"x3",description:"",type:"Number"},{name:"y3",description:"",type:"Number"},{name:"z3",description:"<p>z-coordinate for the second control point</p>\n",type:"Number"},{name:"x4",description:"",type:"Number"},{name:"y4",description:"",type:"Number"},{name:"z4",description:"<p>z-coordinate for the second anchor point</p>\n",type:"Number"}],chainable:1}]},bezierDetail:{name:"bezierDetail",params:[{name:"detail",description:"<p>resolution of the curves</p>\n",type:"Number"}],class:"p5",module:"Shape"},bezierPoint:{name:"bezierPoint",params:[{name:"a",description:"<p>coordinate of first point on the curve</p>\n",type:"Number"},{name:"b",description:"<p>coordinate of first control point</p>\n",type:"Number"},{name:"c",description:"<p>coordinate of second control point</p>\n",type:"Number"},{name:"d",description:"<p>coordinate of second point on the curve</p>\n",type:"Number"},{name:"t",description:"<p>value between 0 and 1</p>\n",type:"Number"}],class:"p5",module:"Shape"},bezierTangent:{name:"bezierTangent",params:[{name:"a",description:"<p>coordinate of first point on the curve</p>\n",type:"Number"},{name:"b",description:"<p>coordinate of first control point</p>\n",type:"Number"},{name:"c",description:"<p>coordinate of second control point</p>\n",type:"Number"},{name:"d",description:"<p>coordinate of second point on the curve</p>\n",type:"Number"},{name:"t",description:"<p>value between 0 and 1</p>\n",type:"Number"}],class:"p5",module:"Shape"},curve:{name:"curve",class:"p5",module:"Shape",overloads:[{params:[{name:"x1",description:"<p>x-coordinate for the beginning control point</p>\n",type:"Number"},{name:"y1",description:"<p>y-coordinate for the beginning control point</p>\n",type:"Number"},{name:"x2",description:"<p>x-coordinate for the first point</p>\n",type:"Number"},{name:"y2",description:"<p>y-coordinate for the first point</p>\n",type:"Number"},{name:"x3",description:"<p>x-coordinate for the second point</p>\n",type:"Number"},{name:"y3",description:"<p>y-coordinate for the second point</p>\n",type:"Number"},{name:"x4",description:"<p>x-coordinate for the ending control point</p>\n",type:"Number"},{name:"y4",description:"<p>y-coordinate for the ending control point</p>\n",type:"Number"}],chainable:1},{params:[{name:"x1",description:"",type:"Number"},{name:"y1",description:"",type:"Number"},{name:"z1",description:"<p>z-coordinate for the beginning control point</p>\n",type:"Number"},{name:"x2",description:"",type:"Number"},{name:"y2",description:"",type:"Number"},{name:"z2",description:"<p>z-coordinate for the first point</p>\n",type:"Number"},{name:"x3",description:"",type:"Number"},{name:"y3",description:"",type:"Number"},{name:"z3",description:"<p>z-coordinate for the second point</p>\n",type:"Number"},{name:"x4",description:"",type:"Number"},{name:"y4",description:"",type:"Number"},{name:"z4",description:"<p>z-coordinate for the ending control point</p>\n",type:"Number"}],chainable:1}]},curveDetail:{name:"curveDetail",params:[{name:"resolution",description:"<p>resolution of the curves</p>\n",type:"Number"}],class:"p5",module:"Shape"},curveTightness:{name:"curveTightness",params:[{name:"amount",description:"<p>amount of deformation from the original vertices</p>\n",type:"Number"}],class:"p5",module:"Shape"},curvePoint:{name:"curvePoint",params:[{name:"a",description:"<p>coordinate of first control point of the curve</p>\n",type:"Number"},{name:"b",description:"<p>coordinate of first point</p>\n",type:"Number"},{name:"c",description:"<p>coordinate of second point</p>\n",type:"Number"},{name:"d",description:"<p>coordinate of second control point</p>\n",type:"Number"},{name:"t",description:"<p>value between 0 and 1</p>\n",type:"Number"}],class:"p5",module:"Shape"},curveTangent:{name:"curveTangent",params:[{name:"a",description:"<p>coordinate of first control point</p>\n",type:"Number"},{name:"b",description:"<p>coordinate of first point on the curve</p>\n",type:"Number"},{name:"c",description:"<p>coordinate of second point on the curve</p>\n",type:"Number"},{name:"d",description:"<p>coordinate of second conrol point</p>\n",type:"Number"},{name:"t",description:"<p>value between 0 and 1</p>\n",type:"Number"}],class:"p5",module:"Shape"},beginContour:{name:"beginContour",class:"p5",module:"Shape"},beginShape:{name:"beginShape",params:[{name:"kind",description:"<p>either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS</p>\n",type:"Constant",optional:!0}],class:"p5",module:"Shape"},bezierVertex:{name:"bezierVertex",class:"p5",module:"Shape",overloads:[{params:[{name:"x2",description:"<p>x-coordinate for the first control point</p>\n",type:"Number"},{name:"y2",description:"<p>y-coordinate for the first control point</p>\n",type:"Number"},{name:"x3",description:"<p>x-coordinate for the second control point</p>\n",type:"Number"},{name:"y3",description:"<p>y-coordinate for the second control point</p>\n",type:"Number"},{name:"x4",description:"<p>x-coordinate for the anchor point</p>\n",type:"Number"},{name:"y4",description:"<p>y-coordinate for the anchor point</p>\n",type:"Number"}],chainable:1},{params:[{name:"x2",description:"",type:"Number"},{name:"y2",description:"",type:"Number"},{name:"z2",description:"<p>z-coordinate for the first control point (for WebGL mode)</p>\n",type:"Number"},{name:"x3",description:"",type:"Number"},{name:"y3",description:"",type:"Number"},{name:"z3",description:"<p>z-coordinate for the second control point (for WebGL mode)</p>\n",type:"Number"},{name:"x4",description:"",type:"Number"},{name:"y4",description:"",type:"Number"},{name:"z4",description:"<p>z-coordinate for the anchor point (for WebGL mode)</p>\n",type:"Number"}],chainable:1}]},curveVertex:{name:"curveVertex",class:"p5",module:"Shape",overloads:[{params:[{name:"x",description:"<p>x-coordinate of the vertex</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the vertex</p>\n",type:"Number"}],chainable:1},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"<p>z-coordinate of the vertex (for WebGL mode)</p>\n",type:"Number",optional:!0}],chainable:1}]},endContour:{name:"endContour",class:"p5",module:"Shape"},endShape:{name:"endShape",params:[{name:"mode",description:"<p>use CLOSE to close the shape</p>\n",type:"Constant",optional:!0}],class:"p5",module:"Shape"},quadraticVertex:{name:"quadraticVertex",class:"p5",module:"Shape",overloads:[{params:[{name:"cx",description:"<p>x-coordinate for the control point</p>\n",type:"Number"},{name:"cy",description:"<p>y-coordinate for the control point</p>\n",type:"Number"},{name:"x3",description:"<p>x-coordinate for the anchor point</p>\n",type:"Number"},{name:"y3",description:"<p>y-coordinate for the anchor point</p>\n",type:"Number"}],chainable:1},{params:[{name:"cx",description:"",type:"Number"},{name:"cy",description:"",type:"Number"},{name:"cz",description:"<p>z-coordinate for the control point (for WebGL mode)</p>\n",type:"Number"},{name:"x3",description:"",type:"Number"},{name:"y3",description:"",type:"Number"},{name:"z3",description:"<p>z-coordinate for the anchor point (for WebGL mode)</p>\n",type:"Number"}],chainable:1}]},vertex:{name:"vertex",class:"p5",module:"Shape",overloads:[{params:[{name:"x",description:"<p>x-coordinate of the vertex</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the vertex</p>\n",type:"Number"}],chainable:1},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"<p>z-coordinate of the vertex</p>\n",type:"Number"},{name:"u",description:"<p>the vertex's texture u-coordinate</p>\n",type:"Number",optional:!0},{name:"v",description:"<p>the vertex's texture v-coordinate</p>\n",type:"Number",optional:!0}],chainable:1}]},P2D:{name:"P2D",class:"p5",module:"Constants"},WEBGL:{name:"WEBGL",class:"p5",module:"Constants"},ARROW:{name:"ARROW",class:"p5",module:"Constants"},CROSS:{name:"CROSS",class:"p5",module:"Constants"},HAND:{name:"HAND",class:"p5",module:"Constants"},MOVE:{name:"MOVE",class:"p5",module:"Constants"},TEXT:{name:"TEXT",class:"p5",module:"Constants"},WAIT:{name:"WAIT",class:"p5",module:"Constants"},HALF_PI:{name:"HALF_PI",class:"p5",module:"Constants"},PI:{name:"PI",class:"p5",module:"Constants"},QUARTER_PI:{name:"QUARTER_PI",class:"p5",module:"Constants"},TAU:{name:"TAU",class:"p5",module:"Constants"},TWO_PI:{name:"TWO_PI",class:"p5",module:"Constants"},DEGREES:{name:"DEGREES",class:"p5",module:"Constants"},RADIANS:{name:"RADIANS",class:"p5",module:"Constants"},CORNER:{name:"CORNER",class:"p5",module:"Constants"},CORNERS:{name:"CORNERS",class:"p5",module:"Constants"},RADIUS:{name:"RADIUS",class:"p5",module:"Constants"},RIGHT:{name:"RIGHT",class:"p5",module:"Constants"},LEFT:{name:"LEFT",class:"p5",module:"Constants"},CENTER:{name:"CENTER",class:"p5",module:"Constants"},TOP:{name:"TOP",class:"p5",module:"Constants"},BOTTOM:{name:"BOTTOM",class:"p5",module:"Constants"},BASELINE:{name:"BASELINE",class:"p5",module:"Constants"},POINTS:{name:"POINTS",class:"p5",module:"Constants"},LINES:{name:"LINES",class:"p5",module:"Constants"},LINE_STRIP:{name:"LINE_STRIP",class:"p5",module:"Constants"},LINE_LOOP:{name:"LINE_LOOP",class:"p5",module:"Constants"},TRIANGLES:{name:"TRIANGLES",class:"p5",module:"Constants"},TRIANGLE_FAN:{name:"TRIANGLE_FAN",class:"p5",module:"Constants"},TRIANGLE_STRIP:{name:"TRIANGLE_STRIP",class:"p5",module:"Constants"},QUADS:{name:"QUADS",class:"p5",module:"Constants"},QUAD_STRIP:{name:"QUAD_STRIP",class:"p5",module:"Constants"},TESS:{name:"TESS",class:"p5",module:"Constants"},CLOSE:{name:"CLOSE",class:"p5",module:"Constants"},OPEN:{name:"OPEN",class:"p5",module:"Constants"},CHORD:{name:"CHORD",class:"p5",module:"Constants"},PIE:{name:"PIE",class:"p5",module:"Constants"},PROJECT:{name:"PROJECT",class:"p5",module:"Constants"},SQUARE:{name:"SQUARE",class:"p5",module:"Constants"},ROUND:{name:"ROUND",class:"p5",module:"Constants"},BEVEL:{name:"BEVEL",class:"p5",module:"Constants"},MITER:{name:"MITER",class:"p5",module:"Constants"},RGB:{name:"RGB",class:"p5",module:"Constants"},HSB:{name:"HSB",class:"p5",module:"Constants"},HSL:{name:"HSL",class:"p5",module:"Constants"},AUTO:{name:"AUTO",class:"p5",module:"Constants"},ALT:{name:"ALT",class:"p5",module:"Constants"},BACKSPACE:{name:"BACKSPACE",class:"p5",module:"Constants"},CONTROL:{name:"CONTROL",class:"p5",module:"Constants"},DELETE:{name:"DELETE",class:"p5",module:"Constants"},DOWN_ARROW:{name:"DOWN_ARROW",class:"p5",module:"Constants"},ENTER:{name:"ENTER",class:"p5",module:"Constants"},ESCAPE:{name:"ESCAPE",class:"p5",module:"Constants"},LEFT_ARROW:{name:"LEFT_ARROW",class:"p5",module:"Constants"},OPTION:{name:"OPTION",class:"p5",module:"Constants"},RETURN:{name:"RETURN",class:"p5",module:"Constants"},RIGHT_ARROW:{name:"RIGHT_ARROW",class:"p5",module:"Constants"},SHIFT:{name:"SHIFT",class:"p5",module:"Constants"},TAB:{name:"TAB",class:"p5",module:"Constants"},UP_ARROW:{name:"UP_ARROW",class:"p5",module:"Constants"},BLEND:{name:"BLEND",class:"p5",module:"Constants"},REMOVE:{name:"REMOVE",class:"p5",module:"Constants"},ADD:{name:"ADD",class:"p5",module:"Constants"},DARKEST:{name:"DARKEST",class:"p5",module:"Constants"},LIGHTEST:{name:"LIGHTEST",class:"p5",module:"Constants"},DIFFERENCE:{name:"DIFFERENCE",class:"p5",module:"Constants"},SUBTRACT:{name:"SUBTRACT",class:"p5",module:"Constants"},EXCLUSION:{name:"EXCLUSION",class:"p5",module:"Constants"},MULTIPLY:{name:"MULTIPLY",class:"p5",module:"Constants"},SCREEN:{name:"SCREEN",class:"p5",module:"Constants"},REPLACE:{name:"REPLACE",class:"p5",module:"Constants"},OVERLAY:{name:"OVERLAY",class:"p5",module:"Constants"},HARD_LIGHT:{name:"HARD_LIGHT",class:"p5",module:"Constants"},SOFT_LIGHT:{name:"SOFT_LIGHT",class:"p5",module:"Constants"},DODGE:{name:"DODGE",class:"p5",module:"Constants"},BURN:{name:"BURN",class:"p5",module:"Constants"},THRESHOLD:{name:"THRESHOLD",class:"p5",module:"Constants"},GRAY:{name:"GRAY",class:"p5",module:"Constants"},OPAQUE:{name:"OPAQUE",class:"p5",module:"Constants"},INVERT:{name:"INVERT",class:"p5",module:"Constants"},POSTERIZE:{name:"POSTERIZE",class:"p5",module:"Constants"},DILATE:{name:"DILATE",class:"p5",module:"Constants"},ERODE:{name:"ERODE",class:"p5",module:"Constants"},BLUR:{name:"BLUR",class:"p5",module:"Constants"},NORMAL:{name:"NORMAL",class:"p5",module:"Constants"},ITALIC:{name:"ITALIC",class:"p5",module:"Constants"},BOLD:{name:"BOLD",class:"p5",module:"Constants"},BOLDITALIC:{name:"BOLDITALIC",class:"p5",module:"Constants"},LINEAR:{name:"LINEAR",class:"p5",module:"Constants"},QUADRATIC:{name:"QUADRATIC",class:"p5",module:"Constants"},BEZIER:{name:"BEZIER",class:"p5",module:"Constants"},CURVE:{name:"CURVE",class:"p5",module:"Constants"},STROKE:{name:"STROKE",class:"p5",module:"Constants"},FILL:{name:"FILL",class:"p5",module:"Constants"},TEXTURE:{name:"TEXTURE",class:"p5",module:"Constants"},IMMEDIATE:{name:"IMMEDIATE",class:"p5",module:"Constants"},IMAGE:{name:"IMAGE",class:"p5",module:"Constants"},NEAREST:{name:"NEAREST",class:"p5",module:"Constants"},REPEAT:{name:"REPEAT",class:"p5",module:"Constants"},CLAMP:{name:"CLAMP",class:"p5",module:"Constants"},MIRROR:{name:"MIRROR",class:"p5",module:"Constants"},LANDSCAPE:{name:"LANDSCAPE",class:"p5",module:"Constants"},PORTRAIT:{name:"PORTRAIT",class:"p5",module:"Constants"},GRID:{name:"GRID",class:"p5",module:"Constants"},AXES:{name:"AXES",class:"p5",module:"Constants"},print:{name:"print",params:[{name:"contents",description:"<p>any combination of Number, String, Object, Boolean,\n                      Array to print</p>\n",type:"Any"}],class:"p5",module:"Environment"},frameCount:{name:"frameCount",class:"p5",module:"Environment"},deltaTime:{name:"deltaTime",class:"p5",module:"Environment"},focused:{name:"focused",class:"p5",module:"Environment"},cursor:{name:"cursor",params:[{name:"type",description:"<p>Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n                              Native CSS properties: 'grab', 'progress', 'cell' etc.\n                              External: path for cursor's images\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n                              For more information on Native CSS cursors and url visit:\n                              <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a></p>\n",type:"String|Constant"},{name:"x",description:"<p>the horizontal active spot of the cursor (must be less than 32)</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>the vertical active spot of the cursor (must be less than 32)</p>\n",type:"Number",optional:!0}],class:"p5",module:"Environment"},frameRate:{name:"frameRate",class:"p5",module:"Environment",overloads:[{params:[{name:"fps",description:"<p>number of frames to be displayed every second</p>\n",type:"Number"}],chainable:1},{params:[]}]},noCursor:{name:"noCursor",class:"p5",module:"Environment"},displayWidth:{name:"displayWidth",class:"p5",module:"Environment"},displayHeight:{name:"displayHeight",class:"p5",module:"Environment"},windowWidth:{name:"windowWidth",class:"p5",module:"Environment"},windowHeight:{name:"windowHeight",class:"p5",module:"Environment"},windowResized:{name:"windowResized",class:"p5",module:"Environment"},width:{name:"width",class:"p5",module:"Environment"},height:{name:"height",class:"p5",module:"Environment"},fullscreen:{name:"fullscreen",params:[{name:"val",description:"<p>whether the sketch should be in fullscreen mode\nor not</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"Environment"},pixelDensity:{name:"pixelDensity",class:"p5",module:"Environment",overloads:[{params:[{name:"val",description:"<p>whether or how much the sketch should scale</p>\n",type:"Number"}],chainable:1},{params:[]}]},displayDensity:{name:"displayDensity",class:"p5",module:"Environment"},getURL:{name:"getURL",class:"p5",module:"Environment"},getURLPath:{name:"getURLPath",class:"p5",module:"Environment"},getURLParams:{name:"getURLParams",class:"p5",module:"Environment"},preload:{name:"preload",class:"p5",module:"Structure"},setup:{name:"setup",class:"p5",module:"Structure"},draw:{name:"draw",class:"p5",module:"Structure"},remove:{name:"remove",class:"p5",module:"Structure"},disableFriendlyErrors:{name:"disableFriendlyErrors",class:"p5",module:"Structure"},let:{name:"let",class:"p5",module:"Foundation"},const:{name:"const",class:"p5",module:"Foundation"},"===":{name:"===",class:"p5",module:"Foundation"},">":{name:">",class:"p5",module:"Foundation"},">=":{name:">=",class:"p5",module:"Foundation"},"<":{name:"<",class:"p5",module:"Foundation"},"<=":{name:"<=",class:"p5",module:"Foundation"},"if-else":{name:"if-else",class:"p5",module:"Foundation"},function:{name:"function",class:"p5",module:"Foundation"},return:{name:"return",class:"p5",module:"Foundation"},boolean:{name:"boolean",params:[{name:"n",description:"<p>value to parse</p>\n",type:"String|Boolean|Number|Array"}],class:"p5",module:"Data"},string:{name:"string",class:"p5",module:"Foundation"},number:{name:"number",class:"p5",module:"Foundation"},object:{name:"object",class:"p5",module:"Foundation"},class:{name:"class",class:"p5",module:"Foundation"},for:{name:"for",class:"p5",module:"Foundation"},while:{name:"while",class:"p5",module:"Foundation"},createCanvas:{name:"createCanvas",params:[{name:"w",description:"<p>width of the canvas</p>\n",type:"Number"},{name:"h",description:"<p>height of the canvas</p>\n",type:"Number"},{name:"renderer",description:"<p>either P2D or WEBGL</p>\n",type:"Constant",optional:!0}],class:"p5",module:"Rendering"},resizeCanvas:{name:"resizeCanvas",params:[{name:"w",description:"<p>width of the canvas</p>\n",type:"Number"},{name:"h",description:"<p>height of the canvas</p>\n",type:"Number"},{name:"noRedraw",description:"<p>don't redraw the canvas immediately</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"Rendering"},noCanvas:{name:"noCanvas",class:"p5",module:"Rendering"},createGraphics:{name:"createGraphics",params:[{name:"w",description:"<p>width of the offscreen graphics buffer</p>\n",type:"Number"},{name:"h",description:"<p>height of the offscreen graphics buffer</p>\n",type:"Number"},{name:"renderer",description:"<p>either P2D or WEBGL\n                              undefined defaults to p2d</p>\n",type:"Constant",optional:!0}],class:"p5",module:"Rendering"},blendMode:{name:"blendMode",params:[{name:"mode",description:"<p>blend mode to set for canvas.\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n               SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT</p>\n",type:"Constant"}],class:"p5",module:"Rendering"},drawingContext:{name:"drawingContext",class:"p5",module:"Rendering"},noLoop:{name:"noLoop",class:"p5",module:"Structure"},loop:{name:"loop",class:"p5",module:"Structure"},isLooping:{name:"isLooping",class:"p5",module:"Structure"},push:{name:"push",class:"p5",module:"Structure"},pop:{name:"pop",class:"p5",module:"Structure"},redraw:{name:"redraw",params:[{name:"n",description:"<p>Redraw for n-times. The default value is 1.</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Structure"},p5:{name:"p5",params:[{name:"sketch",description:"<p>a function containing a p5.js sketch</p>\n",type:"Object"},{name:"node",description:"<p>ID or pointer to HTML DOM node to contain sketch in</p>\n",type:"String|Object"}],class:"p5",module:"Structure"},applyMatrix:{name:"applyMatrix",params:[{name:"a",description:"<p>numbers which define the 2x3 matrix to be multiplied</p>\n",type:"Number"},{name:"b",description:"<p>numbers which define the 2x3 matrix to be multiplied</p>\n",type:"Number"},{name:"c",description:"<p>numbers which define the 2x3 matrix to be multiplied</p>\n",type:"Number"},{name:"d",description:"<p>numbers which define the 2x3 matrix to be multiplied</p>\n",type:"Number"},{name:"e",description:"<p>numbers which define the 2x3 matrix to be multiplied</p>\n",type:"Number"},{name:"f",description:"<p>numbers which define the 2x3 matrix to be multiplied</p>\n",type:"Number"}],class:"p5",module:"Transform"},resetMatrix:{name:"resetMatrix",class:"p5",module:"Transform"},rotate:{name:"rotate",params:[{name:"angle",description:"<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",type:"Number"},{name:"axis",description:"<p>(in 3d) the axis to rotate around</p>\n",type:"p5.Vector|Number[]",optional:!0}],class:"p5",module:"Transform"},rotateX:{name:"rotateX",params:[{name:"angle",description:"<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",type:"Number"}],class:"p5",module:"Transform"},rotateY:{name:"rotateY",params:[{name:"angle",description:"<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",type:"Number"}],class:"p5",module:"Transform"},rotateZ:{name:"rotateZ",params:[{name:"angle",description:"<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",type:"Number"}],class:"p5",module:"Transform"},scale:{name:"scale",class:"p5",module:"Transform",overloads:[{params:[{name:"s",description:"<p>percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given</p>\n",type:"Number|p5.Vector|Number[]"},{name:"y",description:"<p>percent to scale the object in the y-axis</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>percent to scale the object in the z-axis (webgl only)</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"scales",description:"<p>per-axis percents to scale the object</p>\n",type:"p5.Vector|Number[]"}],chainable:1}]},shearX:{name:"shearX",params:[{name:"angle",description:"<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n",type:"Number"}],class:"p5",module:"Transform"},shearY:{name:"shearY",params:[{name:"angle",description:"<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n",type:"Number"}],class:"p5",module:"Transform"},translate:{name:"translate",class:"p5",module:"Transform",overloads:[{params:[{name:"x",description:"<p>left/right translation</p>\n",type:"Number"},{name:"y",description:"<p>up/down translation</p>\n",type:"Number"},{name:"z",description:"<p>forward/backward translation (webgl only)</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"vector",description:"<p>the vector to translate by</p>\n",type:"p5.Vector"}],chainable:1}]},storeItem:{name:"storeItem",params:[{name:"key",description:"",type:"String"},{name:"value",description:"",type:"String|Number|Object|Boolean|p5.Color|p5.Vector"}],class:"p5",module:"Data"},getItem:{name:"getItem",params:[{name:"key",description:"<p>name that you wish to use to store in local storage</p>\n",type:"String"}],class:"p5",module:"Data"},clearStorage:{name:"clearStorage",class:"p5",module:"Data"},removeItem:{name:"removeItem",params:[{name:"key",description:"",type:"String"}],class:"p5",module:"Data"},createStringDict:{name:"createStringDict",class:"p5",module:"Data",overloads:[{params:[{name:"key",description:"",type:"String"},{name:"value",description:"",type:"String"}]},{params:[{name:"object",description:"<p>object</p>\n",type:"Object"}]}]},createNumberDict:{name:"createNumberDict",class:"p5",module:"Data",overloads:[{params:[{name:"key",description:"",type:"Number"},{name:"value",description:"",type:"Number"}]},{params:[{name:"object",description:"<p>object</p>\n",type:"Object"}]}]},select:{name:"select",params:[{name:"selectors",description:"<p>CSS selector string of element to search for</p>\n",type:"String"},{name:"container",description:'<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>, or\n                                            HTML element to search within</p>\n',type:"String|p5.Element|HTMLElement",optional:!0}],class:"p5",module:"DOM"},selectAll:{name:"selectAll",params:[{name:"selectors",description:"<p>CSS selector string of elements to search for</p>\n",type:"String"},{name:"container",description:'<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>\n                                            , or HTML element to search within</p>\n',type:"String|p5.Element|HTMLElement",optional:!0}],class:"p5",module:"DOM"},removeElements:{name:"removeElements",class:"p5",module:"DOM"},changed:{name:"changed",params:[{name:"fxn",description:"<p>function to be fired when the value of\n                               an element changes.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5",module:"DOM"},input:{name:"input",params:[{name:"fxn",description:"<p>function to be fired when any user input is\n                               detected within the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5",module:"DOM"},createDiv:{name:"createDiv",params:[{name:"html",description:"<p>inner HTML for element created</p>\n",type:"String",optional:!0}],class:"p5",module:"DOM"},createP:{name:"createP",params:[{name:"html",description:"<p>inner HTML for element created</p>\n",type:"String",optional:!0}],class:"p5",module:"DOM"},createSpan:{name:"createSpan",params:[{name:"html",description:"<p>inner HTML for element created</p>\n",type:"String",optional:!0}],class:"p5",module:"DOM"},createImg:{name:"createImg",class:"p5",module:"DOM",overloads:[{params:[{name:"src",description:"<p>src path or url for image</p>\n",type:"String"},{name:"alt",description:'<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes">alternate text</a> to be used if image does not load. You can use also an empty string (<code>""</code>) if that an image is not intended to be viewed.</p>\n',type:"String"}]},{params:[{name:"src",description:"",type:"String"},{name:"alt",description:"",type:"String"},{name:"crossOrigin",description:"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the <code>img</code> element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>\"\"</code>) is passed, CORS is not used</p>\n",type:"String"},{name:"successCallback",description:'<p>callback to be called once image data is loaded with the <a href="#/p5.Element">p5.Element</a> as argument</p>\n',type:"Function",optional:!0}]}]},createA:{name:"createA",params:[{name:"href",description:"<p>url of page to link to</p>\n",type:"String"},{name:"html",description:"<p>inner html of link element to display</p>\n",type:"String"},{name:"target",description:"<p>target where new link should open,\n                            could be _blank, _self, _parent, _top.</p>\n",type:"String",optional:!0}],class:"p5",module:"DOM"},createSlider:{name:"createSlider",params:[{name:"min",description:"<p>minimum value of the slider</p>\n",type:"Number"},{name:"max",description:"<p>maximum value of the slider</p>\n",type:"Number"},{name:"value",description:"<p>default value of the slider</p>\n",type:"Number",optional:!0},{name:"step",description:"<p>step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)</p>\n",type:"Number",optional:!0}],class:"p5",module:"DOM"},createButton:{name:"createButton",params:[{name:"label",description:"<p>label displayed on the button</p>\n",type:"String"},{name:"value",description:"<p>value of the button</p>\n",type:"String",optional:!0}],class:"p5",module:"DOM"},createCheckbox:{name:"createCheckbox",params:[{name:"label",description:"<p>label displayed after checkbox</p>\n",type:"String",optional:!0},{name:"value",description:"<p>value of the checkbox; checked is true, unchecked is false</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"DOM"},createSelect:{name:"createSelect",class:"p5",module:"DOM",overloads:[{params:[{name:"multiple",description:"<p>true if dropdown should support multiple selections</p>\n",type:"Boolean",optional:!0}]},{params:[{name:"existing",description:"<p>DOM select element</p>\n",type:"Object"}]}]},createRadio:{name:"createRadio",class:"p5",module:"DOM",overloads:[{params:[{name:"containerElement",description:"<p>An container HTML Element either a div\nor span inside which all existing radio inputs will be considered as options.</p>\n",type:"Object"},{name:"name",description:"<p>A name parameter for each Input Element.</p>\n",type:"String",optional:!0}]},{params:[{name:"name",description:"",type:"String"}]},{params:[]}]},createColorPicker:{name:"createColorPicker",params:[{name:"value",description:"<p>default color of element</p>\n",type:"String|p5.Color",optional:!0}],class:"p5",module:"DOM"},createInput:{name:"createInput",class:"p5",module:"DOM",overloads:[{params:[{name:"value",description:"<p>default value of the input box</p>\n",type:"String"},{name:"type",description:"<p>type of text, ie text, password etc. Defaults to text.\n  Needs a value to be specified first.</p>\n",type:"String",optional:!0}]},{params:[{name:"value",description:"",type:"String",optional:!0}]}]},createFileInput:{name:"createFileInput",params:[{name:"callback",description:"<p>callback function for when a file is loaded</p>\n",type:"Function"},{name:"multiple",description:"<p>optional, to allow multiple files to be selected</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"DOM"},createVideo:{name:"createVideo",params:[{name:"src",description:"<p>path to a video file, or array of paths for\n                            supporting different browsers</p>\n",type:"String|String[]"},{name:"callback",description:"<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",type:"Function",optional:!0}],class:"p5",module:"DOM"},createAudio:{name:"createAudio",params:[{name:"src",description:"<p>path to an audio file, or array of paths\n                            for supporting different browsers</p>\n",type:"String|String[]",optional:!0},{name:"callback",description:"<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",type:"Function",optional:!0}],class:"p5",module:"DOM"},VIDEO:{name:"VIDEO",class:"p5",module:"DOM"},AUDIO:{name:"AUDIO",class:"p5",module:"DOM"},createCapture:{name:"createCapture",params:[{name:"type",description:"<p>type of capture, either VIDEO or\n                                  AUDIO if none specified, default both,\n                                  or a Constraints object</p>\n",type:"String|Constant|Object"},{name:"callback",description:"<p>function to be called once\n                                  stream has loaded</p>\n",type:"Function",optional:!0}],class:"p5",module:"DOM"},createElement:{name:"createElement",params:[{name:"tag",description:"<p>tag for the new element</p>\n",type:"String"},{name:"content",description:"<p>html content to be inserted into the element</p>\n",type:"String",optional:!0}],class:"p5",module:"DOM"},deviceOrientation:{name:"deviceOrientation",class:"p5",module:"Events"},accelerationX:{name:"accelerationX",class:"p5",module:"Events"},accelerationY:{name:"accelerationY",class:"p5",module:"Events"},accelerationZ:{name:"accelerationZ",class:"p5",module:"Events"},pAccelerationX:{name:"pAccelerationX",class:"p5",module:"Events"},pAccelerationY:{name:"pAccelerationY",class:"p5",module:"Events"},pAccelerationZ:{name:"pAccelerationZ",class:"p5",module:"Events"},rotationX:{name:"rotationX",class:"p5",module:"Events"},rotationY:{name:"rotationY",class:"p5",module:"Events"},rotationZ:{name:"rotationZ",class:"p5",module:"Events"},pRotationX:{name:"pRotationX",class:"p5",module:"Events"},pRotationY:{name:"pRotationY",class:"p5",module:"Events"},pRotationZ:{name:"pRotationZ",class:"p5",module:"Events"},turnAxis:{name:"turnAxis",class:"p5",module:"Events"},setMoveThreshold:{name:"setMoveThreshold",params:[{name:"value",description:"<p>The threshold value</p>\n",type:"Number"}],class:"p5",module:"Events"},setShakeThreshold:{name:"setShakeThreshold",params:[{name:"value",description:"<p>The threshold value</p>\n",type:"Number"}],class:"p5",module:"Events"},deviceMoved:{name:"deviceMoved",class:"p5",module:"Events"},deviceTurned:{name:"deviceTurned",class:"p5",module:"Events"},deviceShaken:{name:"deviceShaken",class:"p5",module:"Events"},keyIsPressed:{name:"keyIsPressed",class:"p5",module:"Events"},key:{name:"key",class:"p5",module:"Events"},keyCode:{name:"keyCode",class:"p5",module:"Events"},keyPressed:{name:"keyPressed",class:"p5",module:"Events"},keyReleased:{name:"keyReleased",class:"p5",module:"Events"},keyTyped:{name:"keyTyped",class:"p5",module:"Events"},keyIsDown:{name:"keyIsDown",params:[{name:"code",description:"<p>The key to check for.</p>\n",type:"Number"}],class:"p5",module:"Events"},movedX:{name:"movedX",class:"p5",module:"Events"},movedY:{name:"movedY",class:"p5",module:"Events"},mouseX:{name:"mouseX",class:"p5",module:"Events"},mouseY:{name:"mouseY",class:"p5",module:"Events"},pmouseX:{name:"pmouseX",class:"p5",module:"Events"},pmouseY:{name:"pmouseY",class:"p5",module:"Events"},winMouseX:{name:"winMouseX",class:"p5",module:"Events"},winMouseY:{name:"winMouseY",class:"p5",module:"Events"},pwinMouseX:{name:"pwinMouseX",class:"p5",module:"Events"},pwinMouseY:{name:"pwinMouseY",class:"p5",module:"Events"},mouseButton:{name:"mouseButton",class:"p5",module:"Events"},mouseIsPressed:{name:"mouseIsPressed",class:"p5",module:"Events"},mouseMoved:{name:"mouseMoved",params:[{name:"event",description:"<p>optional MouseEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},mouseDragged:{name:"mouseDragged",params:[{name:"event",description:"<p>optional MouseEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},mousePressed:{name:"mousePressed",params:[{name:"event",description:"<p>optional MouseEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},mouseReleased:{name:"mouseReleased",params:[{name:"event",description:"<p>optional MouseEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},mouseClicked:{name:"mouseClicked",params:[{name:"event",description:"<p>optional MouseEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},doubleClicked:{name:"doubleClicked",params:[{name:"event",description:"<p>optional MouseEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},mouseWheel:{name:"mouseWheel",params:[{name:"event",description:"<p>optional WheelEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},requestPointerLock:{name:"requestPointerLock",class:"p5",module:"Events"},exitPointerLock:{name:"exitPointerLock",class:"p5",module:"Events"},touches:{name:"touches",class:"p5",module:"Events"},touchStarted:{name:"touchStarted",params:[{name:"event",description:"<p>optional TouchEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},touchMoved:{name:"touchMoved",params:[{name:"event",description:"<p>optional TouchEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},touchEnded:{name:"touchEnded",params:[{name:"event",description:"<p>optional TouchEvent callback argument.</p>\n",type:"Object",optional:!0}],class:"p5",module:"Events"},createImage:{name:"createImage",params:[{name:"width",description:"<p>width in pixels</p>\n",type:"Integer"},{name:"height",description:"<p>height in pixels</p>\n",type:"Integer"}],class:"p5",module:"Image"},saveCanvas:{name:"saveCanvas",class:"p5",module:"Image",overloads:[{params:[{name:"selectedCanvas",description:"<p>a variable\n                                representing a specific html5 canvas (optional)</p>\n",type:"p5.Element|HTMLCanvasElement"},{name:"filename",description:"",type:"String",optional:!0},{name:"extension",description:"<p>'jpg' or 'png'</p>\n",type:"String",optional:!0}]},{params:[{name:"filename",description:"",type:"String",optional:!0},{name:"extension",description:"",type:"String",optional:!0}]}]},saveFrames:{name:"saveFrames",params:[{name:"filename",description:"",type:"String"},{name:"extension",description:"<p>'jpg' or 'png'</p>\n",type:"String"},{name:"duration",description:"<p>Duration in seconds to save the frames for.</p>\n",type:"Number"},{name:"framerate",description:"<p>Framerate to save the frames in.</p>\n",type:"Number"},{name:"callback",description:"<p>A callback function that will be executed\n                                to handle the image data. This function\n                                should accept an array as argument. The\n                                array will contain the specified number of\n                                frames of objects. Each object has three\n                                properties: imageData - an\n                                image/octet-stream, filename and extension.</p>\n",type:"Function(Array)",optional:!0}],class:"p5",module:"Image"},loadImage:{name:"loadImage",params:[{name:"path",description:"<p>Path of the image to be loaded</p>\n",type:"String"},{name:"successCallback",description:'<p>Function to be called once\n                               the image is loaded. Will be passed the\n                               <a href="#/p5.Image">p5.Image</a>.</p>\n',type:"function(p5.Image)",optional:!0},{name:"failureCallback",description:"<p>called with event error if\n                               the image fails to load.</p>\n",type:"Function(Event)",optional:!0}],class:"p5",module:"Image"},image:{name:"image",class:"p5",module:"Image",overloads:[{params:[{name:"img",description:"<p>the image to display</p>\n",type:"p5.Image|p5.Element"},{name:"x",description:"<p>the x-coordinate of the top-left corner of the image</p>\n",type:"Number"},{name:"y",description:"<p>the y-coordinate of the top-left corner of the image</p>\n",type:"Number"},{name:"width",description:"<p>the width to draw the image</p>\n",type:"Number",optional:!0},{name:"height",description:"<p>the height to draw the image</p>\n",type:"Number",optional:!0}]},{params:[{name:"img",description:"",type:"p5.Image|p5.Element"},{name:"dx",description:"<p>the x-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n",type:"Number"},{name:"dy",description:"<p>the y-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n",type:"Number"},{name:"dWidth",description:"<p>the width of the destination rectangle</p>\n",type:"Number"},{name:"dHeight",description:"<p>the height of the destination rectangle</p>\n",type:"Number"},{name:"sx",description:"<p>the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n",type:"Number"},{name:"sy",description:"<p>the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n",type:"Number"},{name:"sWidth",description:"<p>the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle</p>\n",type:"Number",optional:!0},{name:"sHeight",description:"<p>the height of the subsection of the\n                           source image to draw into the destination rectangle</p>\n",type:"Number",optional:!0}]}]},tint:{name:"tint",class:"p5",module:"Image",overloads:[{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}]},{params:[{name:"value",description:"<p>a color string</p>\n",type:"String"}]},{params:[{name:"gray",description:"<p>a gray value</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}]},{params:[{name:"values",description:"<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",type:"Number[]"}]},{params:[{name:"color",description:"<p>the tint color</p>\n",type:"p5.Color"}]}]},noTint:{name:"noTint",class:"p5",module:"Image"},imageMode:{name:"imageMode",params:[{name:"mode",description:"<p>either CORNER, CORNERS, or CENTER</p>\n",type:"Constant"}],class:"p5",module:"Image"},pixels:{name:"pixels",class:"p5",module:"Image"},blend:{name:"blend",class:"p5",module:"Image",overloads:[{params:[{name:"srcImage",description:"<p>source image</p>\n",type:"p5.Image"},{name:"sx",description:"<p>X coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sy",description:"<p>Y coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sw",description:"<p>source image width</p>\n",type:"Integer"},{name:"sh",description:"<p>source image height</p>\n",type:"Integer"},{name:"dx",description:"<p>X coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dy",description:"<p>Y coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dw",description:"<p>destination image width</p>\n",type:"Integer"},{name:"dh",description:"<p>destination image height</p>\n",type:"Integer"},{name:"blendMode",description:"<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n",type:"Constant"}]},{params:[{name:"sx",description:"",type:"Integer"},{name:"sy",description:"",type:"Integer"},{name:"sw",description:"",type:"Integer"},{name:"sh",description:"",type:"Integer"},{name:"dx",description:"",type:"Integer"},{name:"dy",description:"",type:"Integer"},{name:"dw",description:"",type:"Integer"},{name:"dh",description:"",type:"Integer"},{name:"blendMode",description:"",type:"Constant"}]}]},copy:{name:"copy",class:"p5",module:"Image",overloads:[{params:[{name:"srcImage",description:"<p>source image</p>\n",type:"p5.Image|p5.Element"},{name:"sx",description:"<p>X coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sy",description:"<p>Y coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sw",description:"<p>source image width</p>\n",type:"Integer"},{name:"sh",description:"<p>source image height</p>\n",type:"Integer"},{name:"dx",description:"<p>X coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dy",description:"<p>Y coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dw",description:"<p>destination image width</p>\n",type:"Integer"},{name:"dh",description:"<p>destination image height</p>\n",type:"Integer"}]},{params:[{name:"sx",description:"",type:"Integer"},{name:"sy",description:"",type:"Integer"},{name:"sw",description:"",type:"Integer"},{name:"sh",description:"",type:"Integer"},{name:"dx",description:"",type:"Integer"},{name:"dy",description:"",type:"Integer"},{name:"dw",description:"",type:"Integer"},{name:"dh",description:"",type:"Integer"}]}]},filter:{name:"filter",params:[{name:"filterType",description:"<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n",type:"Constant"},{name:"filterParam",description:"<p>an optional parameter unique\n                               to each filter, see above</p>\n",type:"Number",optional:!0}],class:"p5",module:"Image"},get:{name:"get",class:"p5",module:"Image",overloads:[{params:[{name:"x",description:"<p>x-coordinate of the pixel</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the pixel</p>\n",type:"Number"},{name:"w",description:"<p>width</p>\n",type:"Number"},{name:"h",description:"<p>height</p>\n",type:"Number"}]},{params:[]},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"}]}]},loadPixels:{name:"loadPixels",class:"p5",module:"Image"},set:{name:"set",params:[{name:"x",description:"<p>x-coordinate of the pixel</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the pixel</p>\n",type:"Number"},{name:"c",description:'<p>insert a grayscale value | a pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> object | a <a href="#/p5.Image">p5.Image</a> to copy</p>\n',type:"Number|Number[]|Object"}],class:"p5",module:"Image"},updatePixels:{name:"updatePixels",params:[{name:"x",description:"<p>x-coordinate of the upper-left corner of region\n                        to update</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>y-coordinate of the upper-left corner of region\n                        to update</p>\n",type:"Number",optional:!0},{name:"w",description:"<p>width of region to update</p>\n",type:"Number",optional:!0},{name:"h",description:"<p>height of region to update</p>\n",type:"Number",optional:!0}],class:"p5",module:"Image"},loadJSON:{name:"loadJSON",class:"p5",module:"IO",overloads:[{params:[{name:"path",description:"<p>name of the file or url to load</p>\n",type:"String"},{name:"jsonpOptions",description:"<p>options object for jsonp related settings</p>\n",type:"Object",optional:!0},{name:"datatype",description:'<p>"json" or "jsonp"</p>\n',type:"String",optional:!0},{name:"callback",description:'<p>function to be executed after\n                                   <a href="#/p5/loadJSON">loadJSON()</a> completes, data is passed\n                                   in as first argument</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"datatype",description:"",type:"String"},{name:"callback",description:"",type:"Function",optional:!0},{name:"errorCallback",description:"",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"callback",description:"",type:"Function"},{name:"errorCallback",description:"",type:"Function",optional:!0}]}]},loadStrings:{name:"loadStrings",params:[{name:"filename",description:"<p>name of the file or url to load</p>\n",type:"String"},{name:"callback",description:'<p>function to be executed after <a href="#/p5/loadStrings">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n",type:"Function",optional:!0}],class:"p5",module:"IO"},loadTable:{name:"loadTable",params:[{name:"filename",description:"<p>name of the file or URL to load</p>\n",type:"String"},{name:"extension",description:'<p>parse the table by comma-separated values "csv", semicolon-separated\n                                     values "ssv", or tab-separated values "tsv"</p>\n',type:"String",optional:!0},{name:"header",description:'<p>"header" to indicate table has header row</p>\n',type:"String",optional:!0},{name:"callback",description:'<p>function to be executed after\n                                     <a href="#/p5/loadTable">loadTable()</a> completes. On success, the\n                                     <a href="#/p5.Table">Table</a> object is passed in as the\n                                     first argument.</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                                     there is an error, response is passed\n                                     in as first argument</p>\n",type:"Function",optional:!0}],class:"p5",module:"IO"},loadXML:{name:"loadXML",params:[{name:"filename",description:"<p>name of the file or URL to load</p>\n",type:"String"},{name:"callback",description:'<p>function to be executed after <a href="#/p5/loadXML">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n",type:"Function",optional:!0}],class:"p5",module:"IO"},loadBytes:{name:"loadBytes",params:[{name:"file",description:"<p>name of the file or URL to load</p>\n",type:"String"},{name:"callback",description:'<p>function to be executed after <a href="#/p5/loadBytes">loadBytes()</a>\n                                   completes</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if there\n                                   is an error</p>\n",type:"Function",optional:!0}],class:"p5",module:"IO"},httpGet:{name:"httpGet",class:"p5",module:"IO",overloads:[{params:[{name:"path",description:"<p>name of the file or url to load</p>\n",type:"String"},{name:"datatype",description:'<p>"json", "jsonp", "binary", "arrayBuffer",\n                                   "xml", or "text"</p>\n',type:"String",optional:!0},{name:"data",description:"<p>param data passed sent with request</p>\n",type:"Object|Boolean",optional:!0},{name:"callback",description:'<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"data",description:"",type:"Object|Boolean"},{name:"callback",description:"",type:"Function",optional:!0},{name:"errorCallback",description:"",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"callback",description:"",type:"Function"},{name:"errorCallback",description:"",type:"Function",optional:!0}]}]},httpPost:{name:"httpPost",class:"p5",module:"IO",overloads:[{params:[{name:"path",description:"<p>name of the file or url to load</p>\n",type:"String"},{name:"datatype",description:'<p>"json", "jsonp", "xml", or "text".\n                                   If omitted, <a href="#/p5/httpPost">httpPost()</a> will guess.</p>\n',type:"String",optional:!0},{name:"data",description:"<p>param data passed sent with request</p>\n",type:"Object|Boolean",optional:!0},{name:"callback",description:'<p>function to be executed after\n                                   <a href="#/p5/httpPost">httpPost()</a> completes, data is passed in\n                                   as first argument</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"data",description:"",type:"Object|Boolean"},{name:"callback",description:"",type:"Function",optional:!0},{name:"errorCallback",description:"",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"callback",description:"",type:"Function"},{name:"errorCallback",description:"",type:"Function",optional:!0}]}]},httpDo:{name:"httpDo",class:"p5",module:"IO",overloads:[{params:[{name:"path",description:"<p>name of the file or url to load</p>\n",type:"String"},{name:"method",description:'<p>either "GET", "POST", or "PUT",\n                                   defaults to "GET"</p>\n',type:"String",optional:!0},{name:"datatype",description:'<p>"json", "jsonp", "xml", or "text"</p>\n',type:"String",optional:!0},{name:"data",description:"<p>param data passed sent with request</p>\n",type:"Object",optional:!0},{name:"callback",description:'<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",type:"Function",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"options",description:'<p>Request object options as documented in the\n                                   "fetch" API\n<a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API">reference</a></p>\n',type:"Object"},{name:"callback",description:"",type:"Function",optional:!0},{name:"errorCallback",description:"",type:"Function",optional:!0}]}]},createWriter:{name:"createWriter",params:[{name:"name",description:"<p>name of the file to be created</p>\n",type:"String"},{name:"extension",description:"",type:"String",optional:!0}],class:"p5",module:"IO"},save:{name:"save",params:[{name:"objectOrFilename",description:"<p>If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).</p>\n",type:"Object|String",optional:!0},{name:"filename",description:"<p>If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).</p>\n",type:"String",optional:!0},{name:"options",description:"<p>Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.</p>\n",type:"Boolean|String",optional:!0}],class:"p5",module:"IO"},saveJSON:{name:"saveJSON",params:[{name:"json",description:"",type:"Array|Object"},{name:"filename",description:"",type:"String"},{name:"optimize",description:"<p>If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"IO"},saveStrings:{name:"saveStrings",params:[{name:"list",description:"<p>string array to be written</p>\n",type:"String[]"},{name:"filename",description:"<p>filename for output</p>\n",type:"String"},{name:"extension",description:"<p>the filename's extension</p>\n",type:"String",optional:!0},{name:"isCRLF",description:"<p>if true, change line-break to CRLF</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"IO"},saveTable:{name:"saveTable",params:[{name:"Table",description:'<p>the <a href="#/p5.Table">Table</a> object to save to a file</p>\n',type:"p5.Table"},{name:"filename",description:"<p>the filename to which the Table should be saved</p>\n",type:"String"},{name:"options",description:'<p>can be one of "tsv", "csv", or "html"</p>\n',type:"String",optional:!0}],class:"p5",module:"IO"},abs:{name:"abs",params:[{name:"n",description:"<p>number to compute</p>\n",type:"Number"}],class:"p5",module:"Math"},ceil:{name:"ceil",params:[{name:"n",description:"<p>number to round up</p>\n",type:"Number"}],class:"p5",module:"Math"},constrain:{name:"constrain",params:[{name:"n",description:"<p>number to constrain</p>\n",type:"Number"},{name:"low",description:"<p>minimum limit</p>\n",type:"Number"},{name:"high",description:"<p>maximum limit</p>\n",type:"Number"}],class:"p5",module:"Math"},dist:{name:"dist",class:"p5",module:"Math",overloads:[{params:[{name:"x1",description:"<p>x-coordinate of the first point</p>\n",type:"Number"},{name:"y1",description:"<p>y-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"<p>x-coordinate of the second point</p>\n",type:"Number"},{name:"y2",description:"<p>y-coordinate of the second point</p>\n",type:"Number"}]},{params:[{name:"x1",description:"",type:"Number"},{name:"y1",description:"",type:"Number"},{name:"z1",description:"<p>z-coordinate of the first point</p>\n",type:"Number"},{name:"x2",description:"",type:"Number"},{name:"y2",description:"",type:"Number"},{name:"z2",description:"<p>z-coordinate of the second point</p>\n",type:"Number"}]}]},exp:{name:"exp",params:[{name:"n",description:"<p>exponent to raise</p>\n",type:"Number"}],class:"p5",module:"Math"},floor:{name:"floor",params:[{name:"n",description:"<p>number to round down</p>\n",type:"Number"}],class:"p5",module:"Math"},lerp:{name:"lerp",params:[{name:"start",description:"<p>first value</p>\n",type:"Number"},{name:"stop",description:"<p>second value</p>\n",type:"Number"},{name:"amt",description:"<p>number</p>\n",type:"Number"}],class:"p5",module:"Math"},log:{name:"log",params:[{name:"n",description:"<p>number greater than 0</p>\n",type:"Number"}],class:"p5",module:"Math"},mag:{name:"mag",params:[{name:"a",description:"<p>first value</p>\n",type:"Number"},{name:"b",description:"<p>second value</p>\n",type:"Number"}],class:"p5",module:"Math"},map:{name:"map",params:[{name:"value",description:"<p>the incoming value to be converted</p>\n",type:"Number"},{name:"start1",description:"<p>lower bound of the value's current range</p>\n",type:"Number"},{name:"stop1",description:"<p>upper bound of the value's current range</p>\n",type:"Number"},{name:"start2",description:"<p>lower bound of the value's target range</p>\n",type:"Number"},{name:"stop2",description:"<p>upper bound of the value's target range</p>\n",type:"Number"},{name:"withinBounds",description:"<p>constrain the value to the newly mapped range</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"Math"},max:{name:"max",class:"p5",module:"Math",overloads:[{params:[{name:"n0",description:"<p>Number to compare</p>\n",type:"Number"},{name:"n1",description:"<p>Number to compare</p>\n",type:"Number"}]},{params:[{name:"nums",description:"<p>Numbers to compare</p>\n",type:"Number[]"}]}]},min:{name:"min",class:"p5",module:"Math",overloads:[{params:[{name:"n0",description:"<p>Number to compare</p>\n",type:"Number"},{name:"n1",description:"<p>Number to compare</p>\n",type:"Number"}]},{params:[{name:"nums",description:"<p>Numbers to compare</p>\n",type:"Number[]"}]}]},norm:{name:"norm",params:[{name:"value",description:"<p>incoming value to be normalized</p>\n",type:"Number"},{name:"start",description:"<p>lower bound of the value's current range</p>\n",type:"Number"},{name:"stop",description:"<p>upper bound of the value's current range</p>\n",type:"Number"}],class:"p5",module:"Math"},pow:{name:"pow",params:[{name:"n",description:"<p>base of the exponential expression</p>\n",type:"Number"},{name:"e",description:"<p>power by which to raise the base</p>\n",type:"Number"}],class:"p5",module:"Math"},round:{name:"round",params:[{name:"n",description:"<p>number to round</p>\n",type:"Number"},{name:"decimals",description:"<p>number of decimal places to round to, default is 0</p>\n",type:"Number",optional:!0}],class:"p5",module:"Math"},sq:{name:"sq",params:[{name:"n",description:"<p>number to square</p>\n",type:"Number"}],class:"p5",module:"Math"},sqrt:{name:"sqrt",params:[{name:"n",description:"<p>non-negative number to square root</p>\n",type:"Number"}],class:"p5",module:"Math"},fract:{name:"fract",params:[{name:"num",description:"<p>Number whose fractional part needs to be found out</p>\n",type:"Number"}],class:"p5",module:"Math"},createVector:{name:"createVector",params:[{name:"x",description:"<p>x component of the vector</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>y component of the vector</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>z component of the vector</p>\n",type:"Number",optional:!0}],class:"p5",module:"Math"},noise:{name:"noise",params:[{name:"x",description:"<p>x-coordinate in noise space</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate in noise space</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>z-coordinate in noise space</p>\n",type:"Number",optional:!0}],class:"p5",module:"Math"},noiseDetail:{name:"noiseDetail",params:[{name:"lod",description:"<p>number of octaves to be used by the noise</p>\n",type:"Number"},{name:"falloff",description:"<p>falloff factor for each octave</p>\n",type:"Number"}],class:"p5",module:"Math"},noiseSeed:{name:"noiseSeed",params:[{name:"seed",description:"<p>the seed value</p>\n",type:"Number"}],class:"p5",module:"Math"},randomSeed:{name:"randomSeed",params:[{name:"seed",description:"<p>the seed value</p>\n",type:"Number"}],class:"p5",module:"Math"},random:{name:"random",class:"p5",module:"Math",overloads:[{params:[{name:"min",description:"<p>the lower bound (inclusive)</p>\n",type:"Number",optional:!0},{name:"max",description:"<p>the upper bound (exclusive)</p>\n",type:"Number",optional:!0}]},{params:[{name:"choices",description:"<p>the array to choose from</p>\n",type:"Array"}]}]},randomGaussian:{name:"randomGaussian",params:[{name:"mean",description:"<p>the mean</p>\n",type:"Number"},{name:"sd",description:"<p>the standard deviation</p>\n",type:"Number"}],class:"p5",module:"Math"},acos:{name:"acos",params:[{name:"value",description:"<p>the value whose arc cosine is to be returned</p>\n",type:"Number"}],class:"p5",module:"Math"},asin:{name:"asin",params:[{name:"value",description:"<p>the value whose arc sine is to be returned</p>\n",type:"Number"}],class:"p5",module:"Math"},atan:{name:"atan",params:[{name:"value",description:"<p>the value whose arc tangent is to be returned</p>\n",type:"Number"}],class:"p5",module:"Math"},atan2:{name:"atan2",params:[{name:"y",description:"<p>y-coordinate of the point</p>\n",type:"Number"},{name:"x",description:"<p>x-coordinate of the point</p>\n",type:"Number"}],class:"p5",module:"Math"},cos:{name:"cos",params:[{name:"angle",description:"<p>the angle</p>\n",type:"Number"}],class:"p5",module:"Math"},sin:{name:"sin",params:[{name:"angle",description:"<p>the angle</p>\n",type:"Number"}],class:"p5",module:"Math"},tan:{name:"tan",params:[{name:"angle",description:"<p>the angle</p>\n",type:"Number"}],class:"p5",module:"Math"},degrees:{name:"degrees",params:[{name:"radians",description:"<p>the radians value to convert to degrees</p>\n",type:"Number"}],class:"p5",module:"Math"},radians:{name:"radians",params:[{name:"degrees",description:"<p>the degree value to convert to radians</p>\n",type:"Number"}],class:"p5",module:"Math"},angleMode:{name:"angleMode",params:[{name:"mode",description:"<p>either RADIANS or DEGREES</p>\n",type:"Constant"}],class:"p5",module:"Math"},textAlign:{name:"textAlign",class:"p5",module:"Typography",overloads:[{params:[{name:"horizAlign",description:"<p>horizontal alignment, either LEFT,\n                           CENTER, or RIGHT</p>\n",type:"Constant"},{name:"vertAlign",description:"<p>vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE</p>\n",type:"Constant",optional:!0}],chainable:1},{params:[]}]},textLeading:{name:"textLeading",class:"p5",module:"Typography",overloads:[{params:[{name:"leading",description:"<p>the size in pixels for spacing between lines</p>\n",type:"Number"}],chainable:1},{params:[]}]},textSize:{name:"textSize",class:"p5",module:"Typography",overloads:[{params:[{name:"theSize",description:"<p>the size of the letters in units of pixels</p>\n",type:"Number"}],chainable:1},{params:[]}]},textStyle:{name:"textStyle",class:"p5",module:"Typography",overloads:[{params:[{name:"theStyle",description:"<p>styling for text, either NORMAL,\n                           ITALIC, BOLD or BOLDITALIC</p>\n",type:"Constant"}],chainable:1},{params:[]}]},textWidth:{name:"textWidth",params:[{name:"theText",description:"<p>the String of characters to measure</p>\n",type:"String"}],class:"p5",module:"Typography"},textAscent:{name:"textAscent",class:"p5",module:"Typography"},textDescent:{name:"textDescent",class:"p5",module:"Typography"},loadFont:{name:"loadFont",params:[{name:"path",description:"<p>name of the file or url to load</p>\n",type:"String"},{name:"callback",description:'<p>function to be executed after\n                                   <a href="#/p5/loadFont">loadFont()</a> completes</p>\n',type:"Function",optional:!0},{name:"onError",description:"<p>function to be executed if\n                                   an error occurs</p>\n",type:"Function",optional:!0}],class:"p5",module:"Typography"},text:{name:"text",params:[{name:"str",description:"<p>the alphanumeric\n                                            symbols to be displayed</p>\n",type:"String|Object|Array|Number|Boolean"},{name:"x",description:"<p>x-coordinate of text</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of text</p>\n",type:"Number"},{name:"x2",description:'<p>by default, the width of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',type:"Number",optional:!0},{name:"y2",description:'<p>by default, the height of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',type:"Number",optional:!0}],class:"p5",module:"Typography"},textFont:{name:"textFont",class:"p5",module:"Typography",overloads:[{params:[]},{params:[{name:"font",description:'<p>a font loaded via <a href="#/p5/loadFont">loadFont()</a>,\nor a String representing a <a href="https://mzl.la/2dOw8WD">web safe font</a>\n(a font that is generally available across all systems)</p>\n',type:"Object|String"},{name:"size",description:"<p>the font size to use</p>\n",type:"Number",optional:!0}],chainable:1}]},append:{name:"append",params:[{name:"array",description:"<p>Array to append</p>\n",type:"Array"},{name:"value",description:"<p>to be added to the Array</p>\n",type:"Any"}],class:"p5",module:"Data"},arrayCopy:{name:"arrayCopy",class:"p5",module:"Data",overloads:[{params:[{name:"src",description:"<p>the source Array</p>\n",type:"Array"},{name:"srcPosition",description:"<p>starting position in the source Array</p>\n",type:"Integer"},{name:"dst",description:"<p>the destination Array</p>\n",type:"Array"},{name:"dstPosition",description:"<p>starting position in the destination Array</p>\n",type:"Integer"},{name:"length",description:"<p>number of Array elements to be copied</p>\n",type:"Integer"}]},{params:[{name:"src",description:"",type:"Array"},{name:"dst",description:"",type:"Array"},{name:"length",description:"",type:"Integer",optional:!0}]}]},concat:{name:"concat",params:[{name:"a",description:"<p>first Array to concatenate</p>\n",type:"Array"},{name:"b",description:"<p>second Array to concatenate</p>\n",type:"Array"}],class:"p5",module:"Data"},reverse:{name:"reverse",params:[{name:"list",description:"<p>Array to reverse</p>\n",type:"Array"}],class:"p5",module:"Data"},shorten:{name:"shorten",params:[{name:"list",description:"<p>Array to shorten</p>\n",type:"Array"}],class:"p5",module:"Data"},shuffle:{name:"shuffle",params:[{name:"array",description:"<p>Array to shuffle</p>\n",type:"Array"},{name:"bool",description:"<p>modify passed array</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"Data"},sort:{name:"sort",params:[{name:"list",description:"<p>Array to sort</p>\n",type:"Array"},{name:"count",description:"<p>number of elements to sort, starting from 0</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Data"},splice:{name:"splice",params:[{name:"list",description:"<p>Array to splice into</p>\n",type:"Array"},{name:"value",description:"<p>value to be spliced in</p>\n",type:"Any"},{name:"position",description:"<p>in the array from which to insert data</p>\n",type:"Integer"}],class:"p5",module:"Data"},subset:{name:"subset",params:[{name:"list",description:"<p>Array to extract from</p>\n",type:"Array"},{name:"start",description:"<p>position to begin</p>\n",type:"Integer"},{name:"count",description:"<p>number of values to extract</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Data"},float:{name:"float",params:[{name:"str",description:"<p>float string to parse</p>\n",type:"String"}],class:"p5",module:"Data"},int:{name:"int",class:"p5",module:"Data",overloads:[{params:[{name:"n",description:"<p>value to parse</p>\n",type:"String|Boolean|Number"},{name:"radix",description:"<p>the radix to convert to (default: 10)</p>\n",type:"Integer",optional:!0}]},{params:[{name:"ns",description:"<p>values to parse</p>\n",type:"Array"}]}]},str:{name:"str",params:[{name:"n",description:"<p>value to parse</p>\n",type:"String|Boolean|Number|Array"}],class:"p5",module:"Data"},byte:{name:"byte",class:"p5",module:"Data",overloads:[{params:[{name:"n",description:"<p>value to parse</p>\n",type:"String|Boolean|Number"}]},{params:[{name:"ns",description:"<p>values to parse</p>\n",type:"Array"}]}]},char:{name:"char",class:"p5",module:"Data",overloads:[{params:[{name:"n",description:"<p>value to parse</p>\n",type:"String|Number"}]},{params:[{name:"ns",description:"<p>values to parse</p>\n",type:"Array"}]}]},unchar:{name:"unchar",class:"p5",module:"Data",overloads:[{params:[{name:"n",description:"<p>value to parse</p>\n",type:"String"}]},{params:[{name:"ns",description:"<p>values to parse</p>\n",type:"Array"}]}]},hex:{name:"hex",class:"p5",module:"Data",overloads:[{params:[{name:"n",description:"<p>value to parse</p>\n",type:"Number"},{name:"digits",description:"",type:"Number",optional:!0}]},{params:[{name:"ns",description:"<p>array of values to parse</p>\n",type:"Number[]"},{name:"digits",description:"",type:"Number",optional:!0}]}]},unhex:{name:"unhex",class:"p5",module:"Data",overloads:[{params:[{name:"n",description:"<p>value to parse</p>\n",type:"String"}]},{params:[{name:"ns",description:"<p>values to parse</p>\n",type:"Array"}]}]},join:{name:"join",params:[{name:"list",description:"<p>array of Strings to be joined</p>\n",type:"Array"},{name:"separator",description:"<p>String to be placed between each item</p>\n",type:"String"}],class:"p5",module:"Data"},match:{name:"match",params:[{name:"str",description:"<p>the String to be searched</p>\n",type:"String"},{name:"regexp",description:"<p>the regexp to be used for matching</p>\n",type:"String"}],class:"p5",module:"Data"},matchAll:{name:"matchAll",params:[{name:"str",description:"<p>the String to be searched</p>\n",type:"String"},{name:"regexp",description:"<p>the regexp to be used for matching</p>\n",type:"String"}],class:"p5",module:"Data"},nf:{name:"nf",class:"p5",module:"Data",overloads:[{params:[{name:"num",description:"<p>the Number to format</p>\n",type:"Number|String"},{name:"left",description:"<p>number of digits to the left of the\n                               decimal point</p>\n",type:"Integer|String",optional:!0},{name:"right",description:"<p>number of digits to the right of the\n                               decimal point</p>\n",type:"Integer|String",optional:!0}]},{params:[{name:"nums",description:"<p>the Numbers to format</p>\n",type:"Array"},{name:"left",description:"",type:"Integer|String",optional:!0},{name:"right",description:"",type:"Integer|String",optional:!0}]}]},nfc:{name:"nfc",class:"p5",module:"Data",overloads:[{params:[{name:"num",description:"<p>the Number to format</p>\n",type:"Number|String"},{name:"right",description:"<p>number of digits to the right of the\n                                 decimal point</p>\n",type:"Integer|String",optional:!0}]},{params:[{name:"nums",description:"<p>the Numbers to format</p>\n",type:"Array"},{name:"right",description:"",type:"Integer|String",optional:!0}]}]},nfp:{name:"nfp",class:"p5",module:"Data",overloads:[{params:[{name:"num",description:"<p>the Number to format</p>\n",type:"Number"},{name:"left",description:"<p>number of digits to the left of the decimal\n                               point</p>\n",type:"Integer",optional:!0},{name:"right",description:"<p>number of digits to the right of the\n                               decimal point</p>\n",type:"Integer",optional:!0}]},{params:[{name:"nums",description:"<p>the Numbers to format</p>\n",type:"Number[]"},{name:"left",description:"",type:"Integer",optional:!0},{name:"right",description:"",type:"Integer",optional:!0}]}]},nfs:{name:"nfs",class:"p5",module:"Data",overloads:[{params:[{name:"num",description:"<p>the Number to format</p>\n",type:"Number"},{name:"left",description:"<p>number of digits to the left of the decimal\n                               point</p>\n",type:"Integer",optional:!0},{name:"right",description:"<p>number of digits to the right of the\n                               decimal point</p>\n",type:"Integer",optional:!0}]},{params:[{name:"nums",description:"<p>the Numbers to format</p>\n",type:"Array"},{name:"left",description:"",type:"Integer",optional:!0},{name:"right",description:"",type:"Integer",optional:!0}]}]},split:{name:"split",params:[{name:"value",description:"<p>the String to be split</p>\n",type:"String"},{name:"delim",description:"<p>the String used to separate the data</p>\n",type:"String"}],class:"p5",module:"Data"},splitTokens:{name:"splitTokens",params:[{name:"value",description:"<p>the String to be split</p>\n",type:"String"},{name:"delim",description:"<p>list of individual Strings that will be used as\n                         separators</p>\n",type:"String",optional:!0}],class:"p5",module:"Data"},trim:{name:"trim",class:"p5",module:"Data",overloads:[{params:[{name:"str",description:"<p>a String to be trimmed</p>\n",type:"String"}]},{params:[{name:"strs",description:"<p>an Array of Strings to be trimmed</p>\n",type:"Array"}]}]},day:{name:"day",class:"p5",module:"IO"},hour:{name:"hour",class:"p5",module:"IO"},minute:{name:"minute",class:"p5",module:"IO"},millis:{name:"millis",class:"p5",module:"IO"},month:{name:"month",class:"p5",module:"IO"},second:{name:"second",class:"p5",module:"IO"},year:{name:"year",class:"p5",module:"IO"},plane:{name:"plane",params:[{name:"width",description:"<p>width of the plane</p>\n",type:"Number",optional:!0},{name:"height",description:"<p>height of the plane</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>Optional number of triangle\n                            subdivisions in x-dimension</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>Optional number of triangle\n                            subdivisions in y-dimension</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Shape"},box:{name:"box",params:[{name:"width",description:"<p>width of the box</p>\n",type:"Number",optional:!0},{name:"Height",description:"<p>height of the box</p>\n",type:"Number",optional:!0},{name:"depth",description:"<p>depth of the box</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>Optional number of triangle\n                           subdivisions in x-dimension</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>Optional number of triangle\n                           subdivisions in y-dimension</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Shape"},sphere:{name:"sphere",params:[{name:"radius",description:"<p>radius of circle</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>optional number of subdivisions in x-dimension</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>optional number of subdivisions in y-dimension</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Shape"},cylinder:{name:"cylinder",params:[{name:"radius",description:"<p>radius of the surface</p>\n",type:"Number",optional:!0},{name:"height",description:"<p>height of the cylinder</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>number of subdivisions in x-dimension;\n                              default is 24</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>number of subdivisions in y-dimension;\n                              default is 1</p>\n",type:"Integer",optional:!0},{name:"bottomCap",description:"<p>whether to draw the bottom of the cylinder</p>\n",type:"Boolean",optional:!0},{name:"topCap",description:"<p>whether to draw the top of the cylinder</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"Shape"},cone:{name:"cone",params:[{name:"radius",description:"<p>radius of the bottom surface</p>\n",type:"Number",optional:!0},{name:"height",description:"<p>height of the cone</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 24</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 1</p>\n",type:"Integer",optional:!0},{name:"cap",description:"<p>whether to draw the base of the cone</p>\n",type:"Boolean",optional:!0}],class:"p5",module:"Shape"},ellipsoid:{name:"ellipsoid",params:[{name:"radiusx",description:"<p>x-radius of ellipsoid</p>\n",type:"Number",optional:!0},{name:"radiusy",description:"<p>y-radius of ellipsoid</p>\n",type:"Number",optional:!0},{name:"radiusz",description:"<p>z-radius of ellipsoid</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Shape"},torus:{name:"torus",params:[{name:"radius",description:"<p>radius of the whole ring</p>\n",type:"Number",optional:!0},{name:"tubeRadius",description:"<p>radius of the tube</p>\n",type:"Number",optional:!0},{name:"detailX",description:"<p>number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24</p>\n",type:"Integer",optional:!0},{name:"detailY",description:"<p>number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16</p>\n",type:"Integer",optional:!0}],class:"p5",module:"Shape"},orbitControl:{name:"orbitControl",params:[{name:"sensitivityX",description:"<p>sensitivity to mouse movement along X axis</p>\n",type:"Number",optional:!0},{name:"sensitivityY",description:"<p>sensitivity to mouse movement along Y axis</p>\n",type:"Number",optional:!0},{name:"sensitivityZ",description:"<p>sensitivity to scroll movement along Z axis</p>\n",type:"Number",optional:!0}],class:"p5",module:"Lights, Camera"},debugMode:{name:"debugMode",class:"p5",module:"Lights, Camera",overloads:[{params:[]},{params:[{name:"mode",description:"<p>either GRID or AXES</p>\n",type:"Constant"}]},{params:[{name:"mode",description:"",type:"Constant"},{name:"gridSize",description:"<p>size of one side of the grid</p>\n",type:"Number",optional:!0},{name:"gridDivisions",description:"<p>number of divisions in the grid</p>\n",type:"Number",optional:!0},{name:"xOff",description:"<p>X axis offset from origin (0,0,0)</p>\n",type:"Number",optional:!0},{name:"yOff",description:"<p>Y axis offset from origin (0,0,0)</p>\n",type:"Number",optional:!0},{name:"zOff",description:"<p>Z axis offset from origin (0,0,0)</p>\n",type:"Number",optional:!0}]},{params:[{name:"mode",description:"",type:"Constant"},{name:"axesSize",description:"<p>size of axes icon</p>\n",type:"Number",optional:!0},{name:"xOff",description:"",type:"Number",optional:!0},{name:"yOff",description:"",type:"Number",optional:!0},{name:"zOff",description:"",type:"Number",optional:!0}]},{params:[{name:"gridSize",description:"",type:"Number",optional:!0},{name:"gridDivisions",description:"",type:"Number",optional:!0},{name:"gridXOff",description:"",type:"Number",optional:!0},{name:"gridYOff",description:"",type:"Number",optional:!0},{name:"gridZOff",description:"",type:"Number",optional:!0},{name:"axesSize",description:"",type:"Number",optional:!0},{name:"axesXOff",description:"",type:"Number",optional:!0},{name:"axesYOff",description:"",type:"Number",optional:!0},{name:"axesZOff",description:"",type:"Number",optional:!0}]}]},noDebugMode:{name:"noDebugMode",class:"p5",module:"Lights, Camera"},ambientLight:{name:"ambientLight",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"},{name:"alpha",description:"<p>the alpha value</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"value",description:"<p>a color string</p>\n",type:"String"}],chainable:1},{params:[{name:"gray",description:"<p>a gray value</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"values",description:"<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"color",description:"<p>the ambient light color</p>\n",type:"p5.Color"}],chainable:1}]},specularColor:{name:"specularColor",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"}],chainable:1},{params:[{name:"value",description:"<p>a color string</p>\n",type:"String"}],chainable:1},{params:[{name:"gray",description:"<p>a gray value</p>\n",type:"Number"}],chainable:1},{params:[{name:"values",description:"<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"color",description:"<p>the ambient light color</p>\n",type:"p5.Color"}],chainable:1}]},directionalLight:{name:"directionalLight",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>red or hue value (depending on the current\ncolor mode),</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value</p>\n",type:"Number"},{name:"position",description:"<p>the direction of the light</p>\n",type:"p5.Vector"}],chainable:1},{params:[{name:"color",description:'<p>color Array, CSS color string,\n                                            or <a href="#/p5.Color">p5.Color</a> value</p>\n',type:"Number[]|String|p5.Color"},{name:"x",description:"<p>x axis direction</p>\n",type:"Number"},{name:"y",description:"<p>y axis direction</p>\n",type:"Number"},{name:"z",description:"<p>z axis direction</p>\n",type:"Number"}],chainable:1},{params:[{name:"color",description:"",type:"Number[]|String|p5.Color"},{name:"position",description:"",type:"p5.Vector"}],chainable:1},{params:[{name:"v1",description:"",type:"Number"},{name:"v2",description:"",type:"Number"},{name:"v3",description:"",type:"Number"},{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number"}],chainable:1}]},pointLight:{name:"pointLight",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>red or hue value (depending on the current\ncolor mode),</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value</p>\n",type:"Number"},{name:"x",description:"<p>x axis position</p>\n",type:"Number"},{name:"y",description:"<p>y axis position</p>\n",type:"Number"},{name:"z",description:"<p>z axis position</p>\n",type:"Number"}],chainable:1},{params:[{name:"v1",description:"",type:"Number"},{name:"v2",description:"",type:"Number"},{name:"v3",description:"",type:"Number"},{name:"position",description:"<p>the position of the light</p>\n",type:"p5.Vector"}],chainable:1},{params:[{name:"color",description:'<p>color Array, CSS color string,\nor <a href="#/p5.Color">p5.Color</a> value</p>\n',type:"Number[]|String|p5.Color"},{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number"}],chainable:1},{params:[{name:"color",description:"",type:"Number[]|String|p5.Color"},{name:"position",description:"",type:"p5.Vector"}],chainable:1}]},lights:{name:"lights",class:"p5",module:"Lights, Camera"},lightFalloff:{name:"lightFalloff",params:[{name:"constant",description:"<p>constant value for determining falloff</p>\n",type:"Number"},{name:"linear",description:"<p>linear value for determining falloff</p>\n",type:"Number"},{name:"quadratic",description:"<p>quadratic value for determining falloff</p>\n",type:"Number"}],class:"p5",module:"Lights, Camera"},spotLight:{name:"spotLight",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>red or hue value (depending on the current\ncolor mode),</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value</p>\n",type:"Number"},{name:"x",description:"<p>x axis position</p>\n",type:"Number"},{name:"y",description:"<p>y axis position</p>\n",type:"Number"},{name:"z",description:"<p>z axis position</p>\n",type:"Number"},{name:"rx",description:"<p>x axis direction of light</p>\n",type:"Number"},{name:"ry",description:"<p>y axis direction of light</p>\n",type:"Number"},{name:"rz",description:"<p>z axis direction of light</p>\n",type:"Number"},{name:"angle",description:"<p>optional parameter for angle. Defaults to PI/3</p>\n",type:"Number",optional:!0},{name:"conc",description:"<p>optional parameter for concentration. Defaults to 100</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"color",description:'<p>color Array, CSS color string,\nor <a href="#/p5.Color">p5.Color</a> value</p>\n',type:"Number[]|String|p5.Color"},{name:"position",description:"<p>the position of the light</p>\n",type:"p5.Vector"},{name:"direction",description:"<p>the direction of the light</p>\n",type:"p5.Vector"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]},{params:[{name:"v1",description:"",type:"Number"},{name:"v2",description:"",type:"Number"},{name:"v3",description:"",type:"Number"},{name:"position",description:"",type:"p5.Vector"},{name:"direction",description:"",type:"p5.Vector"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]},{params:[{name:"color",description:"",type:"Number[]|String|p5.Color"},{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number"},{name:"direction",description:"",type:"p5.Vector"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]},{params:[{name:"color",description:"",type:"Number[]|String|p5.Color"},{name:"position",description:"",type:"p5.Vector"},{name:"rx",description:"",type:"Number"},{name:"ry",description:"",type:"Number"},{name:"rz",description:"",type:"Number"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]},{params:[{name:"v1",description:"",type:"Number"},{name:"v2",description:"",type:"Number"},{name:"v3",description:"",type:"Number"},{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number"},{name:"direction",description:"",type:"p5.Vector"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]},{params:[{name:"v1",description:"",type:"Number"},{name:"v2",description:"",type:"Number"},{name:"v3",description:"",type:"Number"},{name:"position",description:"",type:"p5.Vector"},{name:"rx",description:"",type:"Number"},{name:"ry",description:"",type:"Number"},{name:"rz",description:"",type:"Number"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]},{params:[{name:"color",description:"",type:"Number[]|String|p5.Color"},{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number"},{name:"rx",description:"",type:"Number"},{name:"ry",description:"",type:"Number"},{name:"rz",description:"",type:"Number"},{name:"angle",description:"",type:"Number",optional:!0},{name:"conc",description:"",type:"Number",optional:!0}]}]},noLights:{name:"noLights",class:"p5",module:"Lights, Camera"},loadModel:{name:"loadModel",class:"p5",module:"Shape",overloads:[{params:[{name:"path",description:"<p>Path of the model to be loaded</p>\n",type:"String"},{name:"normalize",description:"<p>If true, scale the model to a\n                                     standardized size when loading</p>\n",type:"Boolean"},{name:"successCallback",description:"<p>Function to be called\n                                    once the model is loaded. Will be passed\n                                    the 3D model object.</p>\n",type:"function(p5.Geometry)",optional:!0},{name:"failureCallback",description:"<p>called with event error if\n                                        the model fails to load.</p>\n",type:"Function(Event)",optional:!0},{name:"fileType",description:"<p>The file extension of the model\n                                     (<code>.stl</code>, <code>.obj</code>).</p>\n",type:"String",optional:!0}]},{params:[{name:"path",description:"",type:"String"},{name:"successCallback",description:"",type:"function(p5.Geometry)",optional:!0},{name:"failureCallback",description:"",type:"Function(Event)",optional:!0},{name:"fileType",description:"",type:"String",optional:!0}]}]},model:{name:"model",params:[{name:"model",description:"<p>Loaded 3d model to be rendered</p>\n",type:"p5.Geometry"}],class:"p5",module:"Shape"},loadShader:{name:"loadShader",params:[{name:"vertFilename",description:"<p>path to file containing vertex shader\nsource code</p>\n",type:"String"},{name:"fragFilename",description:"<p>path to file containing fragment shader\nsource code</p>\n",type:"String"},{name:"callback",description:"<p>callback to be executed after loadShader\ncompletes. On success, the Shader object is passed as the first argument.</p>\n",type:"Function",optional:!0},{name:"errorCallback",description:"<p>callback to be executed when an error\noccurs inside loadShader. On error, the error is passed as the first\nargument.</p>\n",type:"Function",optional:!0}],class:"p5",module:"Lights, Camera"},createShader:{name:"createShader",params:[{name:"vertSrc",description:"<p>source code for the vertex shader</p>\n",type:"String"},{name:"fragSrc",description:"<p>source code for the fragment shader</p>\n",type:"String"}],class:"p5",module:"Lights, Camera"},shader:{name:"shader",params:[{name:"s",description:'<p>the desired <a href="#/p5.Shader">p5.Shader</a> to use for rendering\nshapes.</p>\n',type:"p5.Shader",optional:!0}],class:"p5",module:"Lights, Camera"},resetShader:{name:"resetShader",class:"p5",module:"Lights, Camera"},normalMaterial:{name:"normalMaterial",class:"p5",module:"Lights, Camera"},texture:{name:"texture",params:[{name:"tex",description:"<p>2-dimensional graphics\n                   to render as texture</p>\n",type:"p5.Image|p5.MediaElement|p5.Graphics"}],class:"p5",module:"Lights, Camera"},textureMode:{name:"textureMode",params:[{name:"mode",description:"<p>either IMAGE or NORMAL</p>\n",type:"Constant"}],class:"p5",module:"Lights, Camera"},textureWrap:{name:"textureWrap",params:[{name:"wrapX",description:"<p>either CLAMP, REPEAT, or MIRROR</p>\n",type:"Constant"},{name:"wrapY",description:"<p>either CLAMP, REPEAT, or MIRROR</p>\n",type:"Constant",optional:!0}],class:"p5",module:"Lights, Camera"},ambientMaterial:{name:"ambientMaterial",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>gray value, red or hue value\n                        (depending on the current color mode),</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value</p>\n",type:"Number",optional:!0},{name:"v3",description:"<p>blue or brightness value</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"color",description:"<p>color, color Array, or CSS color string</p>\n",type:"Number[]|String|p5.Color"}],chainable:1}]},emissiveMaterial:{name:"emissiveMaterial",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"v1",description:"<p>gray value, red or hue value\n                        (depending on the current color mode),</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value</p>\n",type:"Number",optional:!0},{name:"v3",description:"<p>blue or brightness value</p>\n",type:"Number",optional:!0},{name:"a",description:"<p>opacity</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"color",description:"<p>color, color Array, or CSS color string</p>\n",type:"Number[]|String|p5.Color"}],chainable:1}]},specularMaterial:{name:"specularMaterial",class:"p5",module:"Lights, Camera",overloads:[{params:[{name:"gray",description:"<p>number specifying value between white and black.</p>\n",type:"Number"},{name:"alpha",description:"<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"v1",description:"<p>red or hue value relative to\n                                the current color range</p>\n",type:"Number"},{name:"v2",description:"<p>green or saturation value\n                                relative to the current color range</p>\n",type:"Number"},{name:"v3",description:"<p>blue or brightness value\n                                relative to the current color range</p>\n",type:"Number"},{name:"alpha",description:"",type:"Number",optional:!0}],chainable:1},{params:[{name:"color",description:"<p>color Array, or CSS color string</p>\n",type:"Number[]|String|p5.Color"}],chainable:1}]},shininess:{name:"shininess",params:[{name:"shine",description:"<p>Degree of Shininess.\n                      Defaults to 1.</p>\n",type:"Number"}],class:"p5",module:"Lights, Camera"},camera:{name:"camera",params:[{name:"x",description:"<p>camera position value on x axis</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>camera position value on y axis</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>camera position value on z axis</p>\n",type:"Number",optional:!0},{name:"centerX",description:"<p>x coordinate representing center of the sketch</p>\n",type:"Number",optional:!0},{name:"centerY",description:"<p>y coordinate representing center of the sketch</p>\n",type:"Number",optional:!0},{name:"centerZ",description:"<p>z coordinate representing center of the sketch</p>\n",type:"Number",optional:!0},{name:"upX",description:"<p>x component of direction 'up' from camera</p>\n",type:"Number",optional:!0},{name:"upY",description:"<p>y component of direction 'up' from camera</p>\n",type:"Number",optional:!0},{name:"upZ",description:"<p>z component of direction 'up' from camera</p>\n",type:"Number",optional:!0}],class:"p5",module:"Lights, Camera"},perspective:{name:"perspective",params:[{name:"fovy",description:'<p>camera frustum vertical field of view,\n                          from bottom to top of view, in <a href="#/p5/angleMode">angleMode</a> units</p>\n',type:"Number",optional:!0},{name:"aspect",description:"<p>camera frustum aspect ratio</p>\n",type:"Number",optional:!0},{name:"near",description:"<p>frustum near plane length</p>\n",type:"Number",optional:!0},{name:"far",description:"<p>frustum far plane length</p>\n",type:"Number",optional:!0}],class:"p5",module:"Lights, Camera"},ortho:{name:"ortho",params:[{name:"left",description:"<p>camera frustum left plane</p>\n",type:"Number",optional:!0},{name:"right",description:"<p>camera frustum right plane</p>\n",type:"Number",optional:!0},{name:"bottom",description:"<p>camera frustum bottom plane</p>\n",type:"Number",optional:!0},{name:"top",description:"<p>camera frustum top plane</p>\n",type:"Number",optional:!0},{name:"near",description:"<p>camera frustum near plane</p>\n",type:"Number",optional:!0},{name:"far",description:"<p>camera frustum far plane</p>\n",type:"Number",optional:!0}],class:"p5",module:"Lights, Camera"},frustum:{name:"frustum",params:[{name:"left",description:"<p>camera frustum left plane</p>\n",type:"Number",optional:!0},{name:"right",description:"<p>camera frustum right plane</p>\n",type:"Number",optional:!0},{name:"bottom",description:"<p>camera frustum bottom plane</p>\n",type:"Number",optional:!0},{name:"top",description:"<p>camera frustum top plane</p>\n",type:"Number",optional:!0},{name:"near",description:"<p>camera frustum near plane</p>\n",type:"Number",optional:!0},{name:"far",description:"<p>camera frustum far plane</p>\n",type:"Number",optional:!0}],class:"p5",module:"Lights, Camera"},createCamera:{name:"createCamera",class:"p5",module:"Lights, Camera"},setCamera:{name:"setCamera",params:[{name:"cam",description:"<p>p5.Camera object</p>\n",type:"p5.Camera"}],class:"p5",module:"Lights, Camera"},setAttributes:{name:"setAttributes",class:"p5",module:"Rendering",overloads:[{params:[{name:"key",description:"<p>Name of attribute</p>\n",type:"String"},{name:"value",description:"<p>New value of named attribute</p>\n",type:"Boolean"}]},{params:[{name:"obj",description:"<p>object with key-value pairs</p>\n",type:"Object"}]}]},sampleRate:{name:"sampleRate",class:"p5",module:"p5.sound"},freqToMidi:{name:"freqToMidi",params:[{name:"frequency",description:'<p>A freqeuncy, for example, the "A"\n                           above Middle C is 440Hz</p>\n',type:"Number"}],class:"p5",module:"p5.sound"},midiToFreq:{name:"midiToFreq",params:[{name:"midiNote",description:"<p>The number of a MIDI note</p>\n",type:"Number"}],class:"p5",module:"p5.sound"},soundFormats:{name:"soundFormats",params:[{name:"formats",description:"<p>i.e. 'mp3', 'wav', 'ogg'</p>\n",type:"String",optional:!0,multiple:!0}],class:"p5",module:"p5.sound"},getAudioContext:{name:"getAudioContext",class:"p5",module:"p5.sound"},userStartAudio:{params:[{name:"element(s)",description:"<p>This argument can be an Element,\n                              Selector String, NodeList, p5.Element,\n                              jQuery Element, or an Array of any of those.</p>\n",type:"Element|Array",optional:!0},{name:"callback",description:"<p>Callback to invoke when the AudioContext\n                              has started</p>\n",type:"Function",optional:!0}],name:"userStartAudio",class:"p5",module:"p5.sound"},loadSound:{name:"loadSound",params:[{name:"path",description:"<p>Path to the sound file, or an array with\n                                  paths to soundfiles in multiple formats\n                                  i.e. ['sound.ogg', 'sound.mp3'].\n                                  Alternately, accepts an object: either\n                                  from the HTML5 File API, or a p5.File.</p>\n",type:"String|Array"},{name:"successCallback",description:"<p>Name of a function to call once file loads</p>\n",type:"Function",optional:!0},{name:"errorCallback",description:"<p>Name of a function to call if there is\n                                    an error loading the file.</p>\n",type:"Function",optional:!0},{name:"whileLoading",description:"<p>Name of a function to call while file is loading.\n                               This function will receive the percentage loaded\n                               so far, from 0.0 to 1.0.</p>\n",type:"Function",optional:!0}],class:"p5",module:"p5.sound"},createConvolver:{name:"createConvolver",params:[{name:"path",description:"<p>path to a sound file</p>\n",type:"String"},{name:"callback",description:"<p>function to call if loading is successful.\n                              The object will be passed in as the argument\n                              to the callback function.</p>\n",type:"Function",optional:!0},{name:"errorCallback",description:"<p>function to call if loading is not successful.\n                              A custom error will be passed in as the argument\n                              to the callback function.</p>\n",type:"Function",optional:!0}],class:"p5",module:"p5.sound"},setBPM:{name:"setBPM",params:[{name:"BPM",description:"<p>Beats Per Minute</p>\n",type:"Number"},{name:"rampTime",description:"<p>Seconds from now</p>\n",type:"Number"}],class:"p5",module:"p5.sound"},saveSound:{name:"saveSound",params:[{name:"soundFile",description:"<p>p5.SoundFile that you wish to save</p>\n",type:"p5.SoundFile"},{name:"fileName",description:"<p>name of the resulting .wav file.</p>\n",type:"String"}],class:"p5",module:"p5.sound"}},"p5.Color":{toString:{name:"toString",params:[{name:"format",description:"<p>How the color string will be formatted.\nLeaving this empty formats the string as rgba(r, g, b, a).\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.</p>\n",type:"String",optional:!0}],class:"p5.Color",module:"Color"},setRed:{name:"setRed",params:[{name:"red",description:"<p>the new red value</p>\n",type:"Number"}],class:"p5.Color",module:"Color"},setGreen:{name:"setGreen",params:[{name:"green",description:"<p>the new green value</p>\n",type:"Number"}],class:"p5.Color",module:"Color"},setBlue:{name:"setBlue",params:[{name:"blue",description:"<p>the new blue value</p>\n",type:"Number"}],class:"p5.Color",module:"Color"},setAlpha:{name:"setAlpha",params:[{name:"alpha",description:"<p>the new alpha value</p>\n",type:"Number"}],class:"p5.Color",module:"Color"}},"p5.Element":{elt:{name:"elt",class:"p5.Element",module:"DOM"},parent:{name:"parent",class:"p5.Element",module:"DOM",overloads:[{params:[{name:"parent",description:'<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                         of desired parent element</p>\n',type:"String|p5.Element|Object"}],chainable:1},{params:[]}]},id:{name:"id",class:"p5.Element",module:"DOM",overloads:[{params:[{name:"id",description:"<p>ID of the element</p>\n",type:"String"}],chainable:1},{params:[]}]},class:{name:"class",class:"p5.Element",module:"DOM",overloads:[{params:[{name:"class",description:"<p>class to add</p>\n",type:"String"}],chainable:1},{params:[]}]},mousePressed:{name:"mousePressed",params:[{name:"fxn",description:"<p>function to be fired when mouse is\n                               pressed over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},doubleClicked:{name:"doubleClicked",params:[{name:"fxn",description:"<p>function to be fired when mouse is\n                               double clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},mouseWheel:{name:"mouseWheel",params:[{name:"fxn",description:"<p>function to be fired when mouse is\n                               scrolled over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},mouseReleased:{name:"mouseReleased",params:[{name:"fxn",description:"<p>function to be fired when mouse is\n                               released over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},mouseClicked:{name:"mouseClicked",params:[{name:"fxn",description:"<p>function to be fired when mouse is\n                               clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},mouseMoved:{name:"mouseMoved",params:[{name:"fxn",description:"<p>function to be fired when a mouse moves\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},mouseOver:{name:"mouseOver",params:[{name:"fxn",description:"<p>function to be fired when a mouse moves\n                               onto the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},mouseOut:{name:"mouseOut",params:[{name:"fxn",description:"<p>function to be fired when a mouse\n                               moves off of an element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},touchStarted:{name:"touchStarted",params:[{name:"fxn",description:"<p>function to be fired when a touch\n                               starts over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},touchMoved:{name:"touchMoved",params:[{name:"fxn",description:"<p>function to be fired when a touch moves over\n                               the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},touchEnded:{name:"touchEnded",params:[{name:"fxn",description:"<p>function to be fired when a touch ends\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},dragOver:{name:"dragOver",params:[{name:"fxn",description:"<p>function to be fired when a file is\n                               dragged over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},dragLeave:{name:"dragLeave",params:[{name:"fxn",description:"<p>function to be fired when a file is\n                               dragged off the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",type:"Function|Boolean"}],class:"p5.Element",module:"DOM"},addClass:{name:"addClass",params:[{name:"class",description:"<p>name of class to add</p>\n",type:"String"}],class:"p5.Element",module:"DOM"},removeClass:{name:"removeClass",params:[{name:"class",description:"<p>name of class to remove</p>\n",type:"String"}],class:"p5.Element",module:"DOM"},hasClass:{name:"hasClass",params:[{name:"c",description:"<p>class name of class to check</p>\n",type:"String"}],class:"p5.Element",module:"DOM"},toggleClass:{name:"toggleClass",params:[{name:"c",description:"<p>class name to toggle</p>\n",type:"String"}],class:"p5.Element",module:"DOM"},child:{name:"child",class:"p5.Element",module:"DOM",overloads:[{params:[]},{params:[{name:"child",description:'<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                        to add to the current element</p>\n',type:"String|p5.Element",optional:!0}],chainable:1}]},center:{name:"center",params:[{name:"align",description:"<p>passing 'vertical', 'horizontal' aligns element accordingly</p>\n",type:"String",optional:!0}],class:"p5.Element",module:"DOM"},html:{name:"html",class:"p5.Element",module:"DOM",overloads:[{params:[]},{params:[{name:"html",description:"<p>the HTML to be placed inside the element</p>\n",type:"String",optional:!0},{name:"append",description:"<p>whether to append HTML to existing</p>\n",type:"Boolean",optional:!0}],chainable:1}]},position:{name:"position",class:"p5.Element",module:"DOM",overloads:[{params:[]},{params:[{name:"x",description:"<p>x-position relative to upper left of window (optional)</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>y-position relative to upper left of window (optional)</p>\n",type:"Number",optional:!0},{name:"positionType",description:"<p>it can be static, fixed, relative, sticky, initial or inherit (optional)</p>\n",type:"String"}],chainable:1}]},style:{name:"style",class:"p5.Element",module:"DOM",overloads:[{params:[{name:"property",description:"<p>property to be set</p>\n",type:"String"}]},{params:[{name:"property",description:"",type:"String"},{name:"value",description:"<p>value to assign to property</p>\n",type:"String|p5.Color"}],chainable:1}]},attribute:{name:"attribute",class:"p5.Element",module:"DOM",overloads:[{params:[]},{params:[{name:"attr",description:"<p>attribute to set</p>\n",type:"String"},{name:"value",description:"<p>value to assign to attribute</p>\n",type:"String"}],chainable:1}]},removeAttribute:{name:"removeAttribute",params:[{name:"attr",description:"<p>attribute to remove</p>\n",type:"String"}],class:"p5.Element",module:"DOM"},value:{name:"value",class:"p5.Element",module:"DOM",overloads:[{params:[]},{params:[{name:"value",description:"",type:"String|Number"}],chainable:1}]},show:{name:"show",class:"p5.Element",module:"DOM"},hide:{name:"hide",class:"p5.Element",module:"DOM"},size:{name:"size",class:"p5.Element",module:"DOM",overloads:[{params:[]},{params:[{name:"w",description:"<p>width of the element, either AUTO, or a number</p>\n",type:"Number|Constant"},{name:"h",description:"<p>height of the element, either AUTO, or a number</p>\n",type:"Number|Constant",optional:!0}],chainable:1}]},remove:{name:"remove",class:"p5.Element",module:"DOM"},drop:{name:"drop",params:[{name:"callback",description:"<p>callback to receive loaded file, called for each file dropped.</p>\n",type:"Function"},{name:"fxn",description:"<p>callback triggered once when files are dropped with the drop event.</p>\n",type:"Function",optional:!0}],class:"p5.Element",module:"DOM"}},"p5.Graphics":{reset:{name:"reset",class:"p5.Graphics",module:"Rendering"},remove:{name:"remove",class:"p5.Graphics",module:"Rendering"}},JSON:{stringify:{name:"stringify",params:[{name:"object",description:"<p>:Javascript object that you would like to convert to JSON</p>\n",type:"Object"}],class:"JSON",module:"Foundation"}},console:{log:{name:"log",params:[{name:"message",description:"<p>:Message that you would like to print to the console</p>\n",type:"String|Expression|Object"}],class:"console",module:"Foundation"}},"p5.TypedDict":{size:{name:"size",class:"p5.TypedDict",module:"Data"},hasKey:{name:"hasKey",params:[{name:"key",description:"<p>that you want to look up</p>\n",type:"Number|String"}],class:"p5.TypedDict",module:"Data"},get:{name:"get",params:[{name:"the",description:"<p>key you want to access</p>\n",type:"Number|String"}],class:"p5.TypedDict",module:"Data"},set:{name:"set",params:[{name:"key",description:"",type:"Number|String"},{name:"value",description:"",type:"Number|String"}],class:"p5.TypedDict",module:"Data"},create:{name:"create",class:"p5.TypedDict",module:"Data",overloads:[{params:[{name:"key",description:"",type:"Number|String"},{name:"value",description:"",type:"Number|String"}]},{params:[{name:"obj",description:"<p>key/value pair</p>\n",type:"Object"}]}]},clear:{name:"clear",class:"p5.TypedDict",module:"Data"},remove:{name:"remove",params:[{name:"key",description:"<p>for the pair to remove</p>\n",type:"Number|String"}],class:"p5.TypedDict",module:"Data"},print:{name:"print",class:"p5.TypedDict",module:"Data"},saveTable:{name:"saveTable",class:"p5.TypedDict",module:"Data"},saveJSON:{name:"saveJSON",class:"p5.TypedDict",module:"Data"}},"p5.NumberDict":{add:{name:"add",params:[{name:"Key",description:"<p>for the value you wish to add to</p>\n",type:"Number"},{name:"Number",description:"<p>to add to the value</p>\n",type:"Number"}],class:"p5.NumberDict",module:"Data"},sub:{name:"sub",params:[{name:"Key",description:"<p>for the value you wish to subtract from</p>\n",type:"Number"},{name:"Number",description:"<p>to subtract from the value</p>\n",type:"Number"}],class:"p5.NumberDict",module:"Data"},mult:{name:"mult",params:[{name:"Key",description:"<p>for value you wish to multiply</p>\n",type:"Number"},{name:"Amount",description:"<p>to multiply the value by</p>\n",type:"Number"}],class:"p5.NumberDict",module:"Data"},div:{name:"div",params:[{name:"Key",description:"<p>for value you wish to divide</p>\n",type:"Number"},{name:"Amount",description:"<p>to divide the value by</p>\n",type:"Number"}],class:"p5.NumberDict",module:"Data"},minValue:{name:"minValue",class:"p5.NumberDict",module:"Data"},maxValue:{name:"maxValue",class:"p5.NumberDict",module:"Data"},minKey:{name:"minKey",class:"p5.NumberDict",module:"Data"},maxKey:{name:"maxKey",class:"p5.NumberDict",module:"Data"}},"p5.MediaElement":{src:{name:"src",class:"p5.MediaElement",module:"DOM"},play:{name:"play",class:"p5.MediaElement",module:"DOM"},stop:{name:"stop",class:"p5.MediaElement",module:"DOM"},pause:{name:"pause",class:"p5.MediaElement",module:"DOM"},loop:{name:"loop",class:"p5.MediaElement",module:"DOM"},noLoop:{name:"noLoop",class:"p5.MediaElement",module:"DOM"},autoplay:{name:"autoplay",params:[{name:"shouldAutoplay",description:"<p>whether the element should autoplay</p>\n",type:"Boolean"}],class:"p5.MediaElement",module:"DOM"},volume:{name:"volume",class:"p5.MediaElement",module:"DOM",overloads:[{params:[]},{params:[{name:"val",description:"<p>volume between 0.0 and 1.0</p>\n",type:"Number"}],chainable:1}]},speed:{name:"speed",class:"p5.MediaElement",module:"DOM",overloads:[{params:[]},{params:[{name:"speed",description:"<p>speed multiplier for element playback</p>\n",type:"Number"}],chainable:1}]},time:{name:"time",class:"p5.MediaElement",module:"DOM",overloads:[{params:[]},{params:[{name:"time",description:"<p>time to jump to (in seconds)</p>\n",type:"Number"}],chainable:1}]},duration:{name:"duration",class:"p5.MediaElement",module:"DOM"},onended:{name:"onended",params:[{name:"callback",description:"<p>function to call when the\n                            soundfile has ended. The\n                            media element will be passed\n                            in as the argument to the\n                            callback.</p>\n",type:"Function"}],class:"p5.MediaElement",module:"DOM"},connect:{name:"connect",params:[{name:"audioNode",description:"<p>AudioNode from the Web Audio API,\nor an object from the p5.sound library</p>\n",type:"AudioNode|Object"}],class:"p5.MediaElement",module:"DOM"},disconnect:{name:"disconnect",class:"p5.MediaElement",module:"DOM"},showControls:{name:"showControls",class:"p5.MediaElement",module:"DOM"},hideControls:{name:"hideControls",class:"p5.MediaElement",module:"DOM"},addCue:{name:"addCue",params:[{name:"time",description:"<p>Time in seconds, relative to this media\n                            element's playback. For example, to trigger\n                            an event every time playback reaches two\n                            seconds, pass in the number 2. This will be\n                            passed as the first parameter to\n                            the callback function.</p>\n",type:"Number"},{name:"callback",description:"<p>Name of a function that will be\n                            called at the given time. The callback will\n                            receive time and (optionally) param as its\n                            two parameters.</p>\n",type:"Function"},{name:"value",description:"<p>An object to be passed as the\n                            second parameter to the\n                            callback function.</p>\n",type:"Object",optional:!0}],class:"p5.MediaElement",module:"DOM"},removeCue:{name:"removeCue",params:[{name:"id",description:"<p>ID of the cue, as returned by addCue</p>\n",type:"Number"}],class:"p5.MediaElement",module:"DOM"},clearCues:{name:"clearCues",params:[{name:"id",description:"<p>ID of the cue, as returned by addCue</p>\n",type:"Number"}],class:"p5.MediaElement",module:"DOM"}},"p5.File":{file:{name:"file",class:"p5.File",module:"DOM"},type:{name:"type",class:"p5.File",module:"DOM"},subtype:{name:"subtype",class:"p5.File",module:"DOM"},name:{name:"name",class:"p5.File",module:"DOM"},size:{name:"size",class:"p5.File",module:"DOM"},data:{name:"data",class:"p5.File",module:"DOM"}},"p5.Image":{width:{name:"width",class:"p5.Image",module:"Image"},height:{name:"height",class:"p5.Image",module:"Image"},pixels:{name:"pixels",class:"p5.Image",module:"Image"},loadPixels:{name:"loadPixels",class:"p5.Image",module:"Image"},updatePixels:{name:"updatePixels",class:"p5.Image",module:"Image",overloads:[{params:[{name:"x",description:"<p>x-offset of the target update area for the\n                             underlying canvas</p>\n",type:"Integer"},{name:"y",description:"<p>y-offset of the target update area for the\n                             underlying canvas</p>\n",type:"Integer"},{name:"w",description:"<p>height of the target update area for the\n                             underlying canvas</p>\n",type:"Integer"},{name:"h",description:"<p>height of the target update area for the\n                             underlying canvas</p>\n",type:"Integer"}]},{params:[]}]},get:{name:"get",class:"p5.Image",module:"Image",overloads:[{params:[{name:"x",description:"<p>x-coordinate of the pixel</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the pixel</p>\n",type:"Number"},{name:"w",description:"<p>width</p>\n",type:"Number"},{name:"h",description:"<p>height</p>\n",type:"Number"}]},{params:[]},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"}]}]},set:{name:"set",params:[{name:"x",description:"<p>x-coordinate of the pixel</p>\n",type:"Number"},{name:"y",description:"<p>y-coordinate of the pixel</p>\n",type:"Number"},{name:"a",description:'<p>grayscale value | pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> | image to copy</p>\n',type:"Number|Number[]|Object"}],class:"p5.Image",module:"Image"},resize:{name:"resize",params:[{name:"width",description:"<p>the resized image width</p>\n",type:"Number"},{name:"height",description:"<p>the resized image height</p>\n",type:"Number"}],class:"p5.Image",module:"Image"},copy:{name:"copy",class:"p5.Image",module:"Image",overloads:[{params:[{name:"srcImage",description:"<p>source image</p>\n",type:"p5.Image|p5.Element"},{name:"sx",description:"<p>X coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sy",description:"<p>Y coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sw",description:"<p>source image width</p>\n",type:"Integer"},{name:"sh",description:"<p>source image height</p>\n",type:"Integer"},{name:"dx",description:"<p>X coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dy",description:"<p>Y coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dw",description:"<p>destination image width</p>\n",type:"Integer"},{name:"dh",description:"<p>destination image height</p>\n",type:"Integer"}]},{params:[{name:"sx",description:"",type:"Integer"},{name:"sy",description:"",type:"Integer"},{name:"sw",description:"",type:"Integer"},{name:"sh",description:"",type:"Integer"},{name:"dx",description:"",type:"Integer"},{name:"dy",description:"",type:"Integer"},{name:"dw",description:"",type:"Integer"},{name:"dh",description:"",type:"Integer"}]}]},mask:{name:"mask",params:[{name:"srcImage",description:"<p>source image</p>\n",type:"p5.Image"}],class:"p5.Image",module:"Image"},filter:{name:"filter",params:[{name:"filterType",description:"<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n",type:"Constant"},{name:"filterParam",description:"<p>an optional parameter unique\n                               to each filter, see above</p>\n",type:"Number",optional:!0}],class:"p5.Image",module:"Image"},blend:{name:"blend",class:"p5.Image",module:"Image",overloads:[{params:[{name:"srcImage",description:"<p>source image</p>\n",type:"p5.Image"},{name:"sx",description:"<p>X coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sy",description:"<p>Y coordinate of the source's upper left corner</p>\n",type:"Integer"},{name:"sw",description:"<p>source image width</p>\n",type:"Integer"},{name:"sh",description:"<p>source image height</p>\n",type:"Integer"},{name:"dx",description:"<p>X coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dy",description:"<p>Y coordinate of the destination's upper left corner</p>\n",type:"Integer"},{name:"dw",description:"<p>destination image width</p>\n",type:"Integer"},{name:"dh",description:"<p>destination image height</p>\n",type:"Integer"},{name:"blendMode",description:'<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n<p>Available blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity</p>\n<p><a href="http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a></p>\n',type:"Constant"}]},{params:[{name:"sx",description:"",type:"Integer"},{name:"sy",description:"",type:"Integer"},{name:"sw",description:"",type:"Integer"},{name:"sh",description:"",type:"Integer"},{name:"dx",description:"",type:"Integer"},{name:"dy",description:"",type:"Integer"},{name:"dw",description:"",type:"Integer"},{name:"dh",description:"",type:"Integer"},{name:"blendMode",description:"",type:"Constant"}]}]},save:{name:"save",params:[{name:"filename",description:"<p>give your file a name</p>\n",type:"String"},{name:"extension",description:"<p>'png' or 'jpg'</p>\n",type:"String"}],class:"p5.Image",module:"Image"},reset:{name:"reset",class:"p5.Image",module:"Image"},getCurrentFrame:{name:"getCurrentFrame",class:"p5.Image",module:"Image"},setFrame:{name:"setFrame",params:[{name:"index",description:"<p>the index for the frame that should be displayed</p>\n",type:"Number"}],class:"p5.Image",module:"Image"},numFrames:{name:"numFrames",class:"p5.Image",module:"Image"},play:{name:"play",class:"p5.Image",module:"Image"},pause:{name:"pause",class:"p5.Image",module:"Image"},delay:{name:"delay",params:[{name:"d",description:"<p>the amount in milliseconds to delay between switching frames</p>\n",type:"Number"},{name:"index",description:"<p>the index of the frame that should have the new delay value {optional}</p>\n",type:"Number",optional:!0}],class:"p5.Image",module:"Image"}},"p5.PrintWriter":{write:{name:"write",params:[{name:"data",description:"<p>all data to be written by the PrintWriter</p>\n",type:"Array"}],class:"p5.PrintWriter",module:"IO"},print:{name:"print",params:[{name:"data",description:"<p>all data to be printed by the PrintWriter</p>\n",type:"Array"}],class:"p5.PrintWriter",module:"IO"},clear:{name:"clear",class:"p5.PrintWriter",module:"IO"},close:{name:"close",class:"p5.PrintWriter",module:"IO"}},"p5.Table":{columns:{name:"columns",class:"p5.Table",module:"IO"},rows:{name:"rows",class:"p5.Table",module:"IO"},addRow:{name:"addRow",params:[{name:"row",description:"<p>row to be added to the table</p>\n",type:"p5.TableRow",optional:!0}],class:"p5.Table",module:"IO"},removeRow:{name:"removeRow",params:[{name:"id",description:"<p>ID number of the row to remove</p>\n",type:"Integer"}],class:"p5.Table",module:"IO"},getRow:{name:"getRow",params:[{name:"rowID",description:"<p>ID number of the row to get</p>\n",type:"Integer"}],class:"p5.Table",module:"IO"},getRows:{name:"getRows",class:"p5.Table",module:"IO"},findRow:{name:"findRow",params:[{name:"value",description:"<p>The value to match</p>\n",type:"String"},{name:"column",description:"<p>ID number or title of the\n                               column to search</p>\n",type:"Integer|String"}],class:"p5.Table",module:"IO"},findRows:{name:"findRows",params:[{name:"value",description:"<p>The value to match</p>\n",type:"String"},{name:"column",description:"<p>ID number or title of the\n                               column to search</p>\n",type:"Integer|String"}],class:"p5.Table",module:"IO"},matchRow:{name:"matchRow",params:[{name:"regexp",description:"<p>The regular expression to match</p>\n",type:"String|RegExp"},{name:"column",description:"<p>The column ID (number) or\n                                 title (string)</p>\n",type:"String|Integer"}],class:"p5.Table",module:"IO"},matchRows:{name:"matchRows",params:[{name:"regexp",description:"<p>The regular expression to match</p>\n",type:"String"},{name:"column",description:"<p>The column ID (number) or\n                                 title (string)</p>\n",type:"String|Integer",optional:!0}],class:"p5.Table",module:"IO"},getColumn:{name:"getColumn",params:[{name:"column",description:"<p>String or Number of the column to return</p>\n",type:"String|Number"}],class:"p5.Table",module:"IO"},clearRows:{name:"clearRows",class:"p5.Table",module:"IO"},addColumn:{name:"addColumn",params:[{name:"title",description:"<p>title of the given column</p>\n",type:"String",optional:!0}],class:"p5.Table",module:"IO"},getColumnCount:{name:"getColumnCount",class:"p5.Table",module:"IO"},getRowCount:{name:"getRowCount",class:"p5.Table",module:"IO"},removeTokens:{name:"removeTokens",params:[{name:"chars",description:"<p>String listing characters to be removed</p>\n",type:"String"},{name:"column",description:"<p>Column ID (number)\n                                 or name (string)</p>\n",type:"String|Integer",optional:!0}],class:"p5.Table",module:"IO"},trim:{name:"trim",params:[{name:"column",description:"<p>Column ID (number)\n                                 or name (string)</p>\n",type:"String|Integer",optional:!0}],class:"p5.Table",module:"IO"},removeColumn:{name:"removeColumn",params:[{name:"column",description:"<p>columnName (string) or ID (number)</p>\n",type:"String|Integer"}],class:"p5.Table",module:"IO"},set:{name:"set",params:[{name:"row",description:"<p>row ID</p>\n",type:"Integer"},{name:"column",description:"<p>column ID (Number)\n                              or title (String)</p>\n",type:"String|Integer"},{name:"value",description:"<p>value to assign</p>\n",type:"String|Number"}],class:"p5.Table",module:"IO"},setNum:{name:"setNum",params:[{name:"row",description:"<p>row ID</p>\n",type:"Integer"},{name:"column",description:"<p>column ID (Number)\n                              or title (String)</p>\n",type:"String|Integer"},{name:"value",description:"<p>value to assign</p>\n",type:"Number"}],class:"p5.Table",module:"IO"},setString:{name:"setString",params:[{name:"row",description:"<p>row ID</p>\n",type:"Integer"},{name:"column",description:"<p>column ID (Number)\n                              or title (String)</p>\n",type:"String|Integer"},{name:"value",description:"<p>value to assign</p>\n",type:"String"}],class:"p5.Table",module:"IO"},get:{name:"get",params:[{name:"row",description:"<p>row ID</p>\n",type:"Integer"},{name:"column",description:"<p>columnName (string) or\n                                  ID (number)</p>\n",type:"String|Integer"}],class:"p5.Table",module:"IO"},getNum:{name:"getNum",params:[{name:"row",description:"<p>row ID</p>\n",type:"Integer"},{name:"column",description:"<p>columnName (string) or\n                                  ID (number)</p>\n",type:"String|Integer"}],class:"p5.Table",module:"IO"},getString:{name:"getString",params:[{name:"row",description:"<p>row ID</p>\n",type:"Integer"},{name:"column",description:"<p>columnName (string) or\n                                  ID (number)</p>\n",type:"String|Integer"}],class:"p5.Table",module:"IO"},getObject:{name:"getObject",params:[{name:"headerColumn",description:"<p>Name of the column which should be used to\n                             title each row object (optional)</p>\n",type:"String",optional:!0}],class:"p5.Table",module:"IO"},getArray:{name:"getArray",class:"p5.Table",module:"IO"}},"p5.TableRow":{set:{name:"set",params:[{name:"column",description:"<p>Column ID (Number)\n                              or Title (String)</p>\n",type:"String|Integer"},{name:"value",description:"<p>The value to be stored</p>\n",type:"String|Number"}],class:"p5.TableRow",module:"IO"},setNum:{name:"setNum",params:[{name:"column",description:"<p>Column ID (Number)\n                              or Title (String)</p>\n",type:"String|Integer"},{name:"value",description:"<p>The value to be stored\n                              as a Float</p>\n",type:"Number|String"}],class:"p5.TableRow",module:"IO"},setString:{name:"setString",params:[{name:"column",description:"<p>Column ID (Number)\n                              or Title (String)</p>\n",type:"String|Integer"},{name:"value",description:"<p>The value to be stored\n                              as a String</p>\n",type:"String|Number|Boolean|Object"}],class:"p5.TableRow",module:"IO"},get:{name:"get",params:[{name:"column",description:"<p>columnName (string) or\n                                 ID (number)</p>\n",type:"String|Integer"}],class:"p5.TableRow",module:"IO"},getNum:{name:"getNum",params:[{name:"column",description:"<p>columnName (string) or\n                                 ID (number)</p>\n",type:"String|Integer"}],class:"p5.TableRow",module:"IO"},getString:{name:"getString",params:[{name:"column",description:"<p>columnName (string) or\n                                 ID (number)</p>\n",type:"String|Integer"}],class:"p5.TableRow",module:"IO"}},"p5.XML":{getParent:{name:"getParent",class:"p5.XML",module:"IO"},getName:{name:"getName",class:"p5.XML",module:"IO"},setName:{name:"setName",params:[{name:"the",description:"<p>new name of the node</p>\n",type:"String"}],class:"p5.XML",module:"IO"},hasChildren:{name:"hasChildren",class:"p5.XML",module:"IO"},listChildren:{name:"listChildren",class:"p5.XML",module:"IO"},getChildren:{name:"getChildren",params:[{name:"name",description:"<p>element name</p>\n",type:"String",optional:!0}],class:"p5.XML",module:"IO"},getChild:{name:"getChild",params:[{name:"name",description:"<p>element name or index</p>\n",type:"String|Integer"}],class:"p5.XML",module:"IO"},addChild:{name:"addChild",params:[{name:"node",description:'<p>a <a href="#/p5.XML">p5.XML</a> Object which will be the child to be added</p>\n',type:"p5.XML"}],class:"p5.XML",module:"IO"},removeChild:{name:"removeChild",params:[{name:"name",description:"<p>element name or index</p>\n",type:"String|Integer"}],class:"p5.XML",module:"IO"},getAttributeCount:{name:"getAttributeCount",class:"p5.XML",module:"IO"},listAttributes:{name:"listAttributes",class:"p5.XML",module:"IO"},hasAttribute:{name:"hasAttribute",params:[{name:"the",description:"<p>attribute to be checked</p>\n",type:"String"}],class:"p5.XML",module:"IO"},getNum:{name:"getNum",params:[{name:"name",description:"<p>the non-null full name of the attribute</p>\n",type:"String"},{name:"defaultValue",description:"<p>the default value of the attribute</p>\n",type:"Number",optional:!0}],class:"p5.XML",module:"IO"},getString:{name:"getString",params:[{name:"name",description:"<p>the non-null full name of the attribute</p>\n",type:"String"},{name:"defaultValue",description:"<p>the default value of the attribute</p>\n",type:"Number",optional:!0}],class:"p5.XML",module:"IO"},setAttribute:{name:"setAttribute",params:[{name:"name",description:"<p>the full name of the attribute</p>\n",type:"String"},{name:"value",description:"<p>the value of the attribute</p>\n",type:"Number|String|Boolean"}],class:"p5.XML",module:"IO"},getContent:{name:"getContent",params:[{name:"defaultValue",description:"<p>value returned if no content is found</p>\n",type:"String",optional:!0}],class:"p5.XML",module:"IO"},setContent:{name:"setContent",params:[{name:"text",description:"<p>the new content</p>\n",type:"String"}],class:"p5.XML",module:"IO"},serialize:{name:"serialize",class:"p5.XML",module:"IO"}},"p5.Vector":{x:{name:"x",class:"p5.Vector",module:"Math"},y:{name:"y",class:"p5.Vector",module:"Math"},z:{name:"z",class:"p5.Vector",module:"Math"},toString:{name:"toString",class:"p5.Vector",module:"Math"},set:{name:"set",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>the x component of the vector</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>the y component of the vector</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>the z component of the vector</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"value",description:"<p>the vector to set</p>\n",type:"p5.Vector|Number[]"}],chainable:1}]},copy:{name:"copy",class:"p5.Vector",module:"Math"},add:{name:"add",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>the x component of the vector to be added</p>\n",type:"Number"},{name:"y",description:"<p>the y component of the vector to be added</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>the z component of the vector to be added</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"value",description:"<p>the vector to add</p>\n",type:"p5.Vector|Number[]"}],chainable:1},{params:[{name:"v1",description:'<p>a <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',type:"p5.Vector"},{name:"v2",description:'<p>a <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',type:"p5.Vector"},{name:"target",description:"<p>the vector to receive the result (Optional)</p>\n",type:"p5.Vector",optional:!0}],static:1}]},rem:{name:"rem",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>the x component of divisor vector</p>\n",type:"Number"},{name:"y",description:"<p>the y component of divisor vector</p>\n",type:"Number"},{name:"z",description:"<p>the z component of divisor vector</p>\n",type:"Number"}],chainable:1},{params:[{name:"value",description:"<p>divisor vector</p>\n",type:"p5.Vector | Number[]"}],chainable:1},{params:[{name:"v1",description:'<p>dividend <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"},{name:"v2",description:'<p>divisor <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}],static:1},{params:[{name:"v1",description:"",type:"p5.Vector"},{name:"v2",description:"",type:"p5.Vector"}],static:1}]},sub:{name:"sub",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>the x component of the vector to subtract</p>\n",type:"Number"},{name:"y",description:"<p>the y component of the vector to subtract</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>the z component of the vector to subtract</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"value",description:"<p>the vector to subtract</p>\n",type:"p5.Vector|Number[]"}],chainable:1},{params:[{name:"v1",description:'<p>a <a href="#/p5.Vector">p5.Vector</a> to subtract from</p>\n',type:"p5.Vector"},{name:"v2",description:'<p>a <a href="#/p5.Vector">p5.Vector</a> to subtract</p>\n',type:"p5.Vector"},{name:"target",description:"<p>the vector to receive the result (Optional)</p>\n",type:"p5.Vector",optional:!0}],static:1}]},mult:{name:"mult",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"n",description:"<p>The number to multiply with the vector</p>\n",type:"Number"}],chainable:1},{params:[{name:"x",description:"<p>The number to multiply with the x component of the vector</p>\n",type:"Number"},{name:"y",description:"<p>The number to multiply with the y component of the vector</p>\n",type:"Number"},{name:"z",description:"<p>The number to multiply with the z component of the vector</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"arr",description:"<p>The array to multiply with the components of the vector</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"v",description:"<p>The vector to multiply with the components of the original vector</p>\n",type:"p5.Vector"}],chainable:1},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number",optional:!0}],static:1},{params:[{name:"v",description:"",type:"p5.Vector"},{name:"n",description:"",type:"Number"},{name:"target",description:"<p>the vector to receive the result (Optional)</p>\n",type:"p5.Vector",optional:!0}],static:1},{params:[{name:"v0",description:"",type:"p5.Vector"},{name:"v1",description:"",type:"p5.Vector"},{name:"target",description:"",type:"p5.Vector",optional:!0}],static:1},{params:[{name:"v0",description:"",type:"p5.Vector"},{name:"arr",description:"",type:"Number[]"},{name:"target",description:"",type:"p5.Vector",optional:!0}],static:1}]},div:{name:"div",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"n",description:"<p>The number to divide the vector by</p>\n",type:"Number"}],chainable:1},{params:[{name:"x",description:"<p>The number to divide with the x component of the vector</p>\n",type:"Number"},{name:"y",description:"<p>The number to divide with the y component of the vector</p>\n",type:"Number"},{name:"z",description:"<p>The number to divide with the z component of the vector</p>\n",type:"Number",optional:!0}],chainable:1},{params:[{name:"arr",description:"<p>The array to divide the components of the vector by</p>\n",type:"Number[]"}],chainable:1},{params:[{name:"v",description:"<p>The vector to divide the components of the original vector by</p>\n",type:"p5.Vector"}],chainable:1},{params:[{name:"x",description:"",type:"Number"},{name:"y",description:"",type:"Number"},{name:"z",description:"",type:"Number",optional:!0}],static:1},{params:[{name:"v",description:"",type:"p5.Vector"},{name:"n",description:"",type:"Number"},{name:"target",description:"<p>the vector to receive the result (Optional)</p>\n",type:"p5.Vector",optional:!0}],static:1},{params:[{name:"v0",description:"",type:"p5.Vector"},{name:"v1",description:"",type:"p5.Vector"},{name:"target",description:"",type:"p5.Vector",optional:!0}],static:1},{params:[{name:"v0",description:"",type:"p5.Vector"},{name:"arr",description:"",type:"Number[]"},{name:"target",description:"",type:"p5.Vector",optional:!0}],static:1}]},mag:{name:"mag",class:"p5.Vector",module:"Math",overloads:[{params:[]},{params:[{name:"vecT",description:"<p>the vector to return the magnitude of</p>\n",type:"p5.Vector"}],static:1}]},magSq:{name:"magSq",class:"p5.Vector",module:"Math"},dot:{name:"dot",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>x component of the vector</p>\n",type:"Number"},{name:"y",description:"<p>y component of the vector</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>z component of the vector</p>\n",type:"Number",optional:!0}]},{params:[{name:"value",description:'<p>value component of the vector or a <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}]},{params:[{name:"v1",description:'<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"},{name:"v2",description:'<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}],static:1}]},cross:{name:"cross",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"v",description:'<p><a href="#/p5.Vector">p5.Vector</a> to be crossed</p>\n',type:"p5.Vector"}]},{params:[{name:"v1",description:'<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"},{name:"v2",description:'<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}],static:1}]},dist:{name:"dist",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"v",description:'<p>the x, y, and z coordinates of a <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}]},{params:[{name:"v1",description:'<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"},{name:"v2",description:'<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}],static:1}]},normalize:{name:"normalize",class:"p5.Vector",module:"Math"},limit:{name:"limit",params:[{name:"max",description:"<p>the maximum magnitude for the vector</p>\n",type:"Number"}],class:"p5.Vector",module:"Math"},setMag:{name:"setMag",params:[{name:"len",description:"<p>the new length for this vector</p>\n",type:"Number"}],class:"p5.Vector",module:"Math"},heading:{name:"heading",class:"p5.Vector",module:"Math"},rotate:{name:"rotate",params:[{name:"angle",description:"<p>the angle of rotation</p>\n",type:"Number"}],class:"p5.Vector",module:"Math"},angleBetween:{name:"angleBetween",params:[{name:"value",description:'<p>the x, y, and z components of a <a href="#/p5.Vector">p5.Vector</a></p>\n',type:"p5.Vector"}],class:"p5.Vector",module:"Math"},lerp:{name:"lerp",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>the x component</p>\n",type:"Number"},{name:"y",description:"<p>the y component</p>\n",type:"Number"},{name:"z",description:"<p>the z component</p>\n",type:"Number"},{name:"amt",description:"<p>the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.9 is very near\n                        the new vector. 0.5 is halfway in between.</p>\n",type:"Number"}],chainable:1},{params:[{name:"v",description:'<p>the <a href="#/p5.Vector">p5.Vector</a> to lerp to</p>\n',type:"p5.Vector"},{name:"amt",description:"",type:"Number"}],chainable:1},{params:[{name:"v1",description:"",type:"p5.Vector"},{name:"v2",description:"",type:"p5.Vector"},{name:"amt",description:"",type:"Number"},{name:"target",description:"<p>the vector to receive the result (Optional)</p>\n",type:"p5.Vector",optional:!0}],static:1}]},reflect:{name:"reflect",params:[{name:"surfaceNormal",description:'<p>the <a href="#/p5.Vector">p5.Vector</a> to reflect about, will be normalized by this method</p>\n',type:"p5.Vector"}],class:"p5.Vector",module:"Math"},array:{name:"array",class:"p5.Vector",module:"Math"},equals:{name:"equals",class:"p5.Vector",module:"Math",overloads:[{params:[{name:"x",description:"<p>the x component of the vector</p>\n",type:"Number",optional:!0},{name:"y",description:"<p>the y component of the vector</p>\n",type:"Number",optional:!0},{name:"z",description:"<p>the z component of the vector</p>\n",type:"Number",optional:!0}]},{params:[{name:"value",description:"<p>the vector to compare</p>\n",type:"p5.Vector|Array"}]}]},fromAngle:{name:"fromAngle",params:[{name:"angle",description:'<p>the desired angle, in radians (unaffected by <a href="#/p5/angleMode">angleMode</a>)</p>\n',type:"Number"},{name:"length",description:"<p>the length of the new vector (defaults to 1)</p>\n",type:"Number",optional:!0}],class:"p5.Vector",module:"Math"},fromAngles:{name:"fromAngles",params:[{name:"theta",description:"<p>the polar angle, in radians (zero is up)</p>\n",type:"Number"},{name:"phi",description:"<p>the azimuthal angle, in radians\n                              (zero is out of the screen)</p>\n",type:"Number"},{name:"length",description:"<p>the length of the new vector (defaults to 1)</p>\n",type:"Number",optional:!0}],class:"p5.Vector",module:"Math"},random2D:{name:"random2D",class:"p5.Vector",module:"Math"},random3D:{name:"random3D",class:"p5.Vector",module:"Math"}},"p5.Font":{font:{name:"font",class:"p5.Font",module:"Typography"},textBounds:{name:"textBounds",params:[{name:"line",description:"<p>a line of text</p>\n",type:"String"},{name:"x",description:"<p>x-position</p>\n",type:"Number"},{name:"y",description:"<p>y-position</p>\n",type:"Number"},{name:"fontSize",description:"<p>font size to use (optional) Default is 12.</p>\n",type:"Number",optional:!0},{name:"options",description:"<p>opentype options (optional)\n                           opentype fonts contains alignment and baseline options.\n                           Default is 'LEFT' and 'alphabetic'</p>\n",type:"Object",optional:!0}],class:"p5.Font",module:"Typography"},textToPoints:{name:"textToPoints",params:[{name:"txt",description:"<p>a line of text</p>\n",type:"String"},{name:"x",description:"<p>x-position</p>\n",type:"Number"},{name:"y",description:"<p>y-position</p>\n",type:"Number"},{name:"fontSize",description:"<p>font size to use (optional)</p>\n",type:"Number"},{name:"options",description:"<p>an (optional) object that can contain:</p>\n<p><br>sampleFactor - the ratio of path-length to number of samples\n(default=.1); higher values yield more points and are therefore\nmore precise</p>\n<p><br>simplifyThreshold - if set to a non-zero value, collinear points will be\nbe removed from the polygon; the value represents the threshold angle to use\nwhen determining whether two edges are collinear</p>\n",type:"Object",optional:!0}],class:"p5.Font",module:"Typography"}},"p5.Camera":{perspective:{name:"perspective",class:"p5.Camera",module:"Lights, Camera"},ortho:{name:"ortho",class:"p5.Camera",module:"Lights, Camera"},frustum:{name:"frustum",class:"p5.Camera",module:"Lights, Camera"},pan:{name:"pan",params:[{name:"angle",description:'<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',type:"Number"}],class:"p5.Camera",module:"Lights, Camera"},tilt:{name:"tilt",params:[{name:"angle",description:'<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',type:"Number"}],class:"p5.Camera",module:"Lights, Camera"},lookAt:{name:"lookAt",params:[{name:"x",description:"<p>x position of a point in world space</p>\n",type:"Number"},{name:"y",description:"<p>y position of a point in world space</p>\n",type:"Number"},{name:"z",description:"<p>z position of a point in world space</p>\n",type:"Number"}],class:"p5.Camera",module:"Lights, Camera"},camera:{name:"camera",class:"p5.Camera",module:"Lights, Camera"},move:{name:"move",params:[{name:"x",description:"<p>amount to move along camera's left-right axis</p>\n",type:"Number"},{name:"y",description:"<p>amount to move along camera's up-down axis</p>\n",type:"Number"},{name:"z",description:"<p>amount to move along camera's forward-backward axis</p>\n",type:"Number"}],class:"p5.Camera",module:"Lights, Camera"},setPosition:{name:"setPosition",params:[{name:"x",description:"<p>x position of a point in world space</p>\n",type:"Number"},{name:"y",description:"<p>y position of a point in world space</p>\n",type:"Number"},{name:"z",description:"<p>z position of a point in world space</p>\n",type:"Number"}],class:"p5.Camera",module:"Lights, Camera"}},"p5.Geometry":{computeFaces:{name:"computeFaces",class:"p5.Geometry",module:"Lights, Camera"},computeNormals:{name:"computeNormals",class:"p5.Geometry",module:"Lights, Camera"},averageNormals:{name:"averageNormals",class:"p5.Geometry",module:"Lights, Camera"},averagePoleNormals:{name:"averagePoleNormals",class:"p5.Geometry",module:"Lights, Camera"},normalize:{name:"normalize",class:"p5.Geometry",module:"Lights, Camera"}},"p5.Shader":{setUniform:{name:"setUniform",params:[{name:"uniformName",description:"<p>the name of the uniform in the\nshader program</p>\n",type:"String"},{name:"data",description:"<p>the data to be associated\nwith that uniform; type varies (could be a single numerical value, array,\nmatrix, or texture / sampler reference)</p>\n",type:"Object|Number|Boolean|Number[]"}],class:"p5.Shader",module:"Lights, Camera"}},"p5.sound":{getMasterVolume:{name:"getMasterVolume",class:"p5.sound",module:"p5.sound"},masterVolume:{name:"masterVolume",params:[{name:"volume",description:"<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n",type:"Number|Object"},{name:"rampTime",description:"<p>Fade for t seconds</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>Schedule this event to happen at\n                               t seconds in the future</p>\n",type:"Number",optional:!0}],class:"p5.sound",module:"p5.sound"},soundOut:{name:"soundOut",class:"p5.sound",module:"p5.sound"}},"p5.Effect":{amp:{name:"amp",params:[{name:"vol",description:"<p>amplitude between 0 and 1.0</p>\n",type:"Number",optional:!0},{name:"rampTime",description:"<p>create a fade that lasts until rampTime</p>\n",type:"Number",optional:!0},{name:"tFromNow",description:"<p>schedule this event to happen in tFromNow seconds</p>\n",type:"Number",optional:!0}],class:"p5.Effect",module:"p5.sound"},chain:{name:"chain",params:[{name:"arguments",description:"<p>Chain together multiple sound objects</p>\n",type:"Object",optional:!0}],class:"p5.Effect",module:"p5.sound"},drywet:{name:"drywet",params:[{name:"fade",description:"<p>The desired drywet value (0 - 1.0)</p>\n",type:"Number",optional:!0}],class:"p5.Effect",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"",type:"Object"}],class:"p5.Effect",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.Effect",module:"p5.sound"}},"p5.Filter":{biquadFilter:{name:"biquadFilter",class:"p5.Filter",module:"p5.sound"},process:{name:"process",params:[{name:"Signal",description:"<p>An object that outputs audio</p>\n",type:"Object"},{name:"freq",description:"<p>Frequency in Hz, from 10 to 22050</p>\n",type:"Number",optional:!0},{name:"res",description:"<p>Resonance/Width of the filter frequency\n                      from 0.001 to 1000</p>\n",type:"Number",optional:!0}],class:"p5.Filter",module:"p5.sound"},set:{name:"set",params:[{name:"freq",description:"<p>Frequency in Hz, from 10 to 22050</p>\n",type:"Number",optional:!0},{name:"res",description:"<p>Resonance (Q) from 0.001 to 1000</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Filter",module:"p5.sound"},freq:{name:"freq",params:[{name:"freq",description:"<p>Filter Frequency</p>\n",type:"Number"},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Filter",module:"p5.sound"},res:{name:"res",params:[{name:"res",description:"<p>Resonance/Width of filter freq\n                     from 0.001 to 1000</p>\n",type:"Number"},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Filter",module:"p5.sound"},gain:{name:"gain",params:[{name:"gain",description:"",type:"Number"}],class:"p5.Filter",module:"p5.sound"},toggle:{name:"toggle",class:"p5.Filter",module:"p5.sound"},setType:{name:"setType",params:[{name:"t",description:"",type:"String"}],class:"p5.Filter",module:"p5.sound"}},"p5.Oscillator":{start:{name:"start",params:[{name:"time",description:"<p>startTime in seconds from now.</p>\n",type:"Number",optional:!0},{name:"frequency",description:"<p>frequency in Hz.</p>\n",type:"Number",optional:!0}],class:"p5.Oscillator",module:"p5.sound"},stop:{name:"stop",params:[{name:"secondsFromNow",description:"<p>Time, in seconds from now.</p>\n",type:"Number"}],class:"p5.Oscillator",module:"p5.sound"},amp:{name:"amp",params:[{name:"vol",description:"<p>between 0 and 1.0\n                            or a modulating signal/oscillator</p>\n",type:"Number|Object"},{name:"rampTime",description:"<p>create a fade that lasts rampTime</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Oscillator",module:"p5.sound"},freq:{name:"freq",params:[{name:"Frequency",description:"<p>Frequency in Hz\n                                      or modulating signal/oscillator</p>\n",type:"Number|Object"},{name:"rampTime",description:"<p>Ramp time (in seconds)</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>Schedule this event to happen\n                                 at x seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Oscillator",module:"p5.sound"},setType:{name:"setType",params:[{name:"type",description:"<p>'sine', 'triangle', 'sawtooth' or 'square'.</p>\n",type:"String"}],class:"p5.Oscillator",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"<p>A p5.sound or Web Audio object</p>\n",type:"Object"}],class:"p5.Oscillator",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.Oscillator",module:"p5.sound"},pan:{name:"pan",params:[{name:"panning",description:"<p>Number between -1 and 1</p>\n",type:"Number"},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number"}],class:"p5.Oscillator",module:"p5.sound"},phase:{name:"phase",params:[{name:"phase",description:"<p>float between 0.0 and 1.0</p>\n",type:"Number"}],class:"p5.Oscillator",module:"p5.sound"},add:{name:"add",params:[{name:"number",description:"<p>Constant number to add</p>\n",type:"Number"}],class:"p5.Oscillator",module:"p5.sound"},mult:{name:"mult",params:[{name:"number",description:"<p>Constant number to multiply</p>\n",type:"Number"}],class:"p5.Oscillator",module:"p5.sound"},scale:{name:"scale",params:[{name:"inMin",description:"<p>input range minumum</p>\n",type:"Number"},{name:"inMax",description:"<p>input range maximum</p>\n",type:"Number"},{name:"outMin",description:"<p>input range minumum</p>\n",type:"Number"},{name:"outMax",description:"<p>input range maximum</p>\n",type:"Number"}],class:"p5.Oscillator",module:"p5.sound"}},"p5.MonoSynth":{play:{name:"play",params:[{name:"note",description:'<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz.</p>\n',type:"String | Number"},{name:"velocity",description:"<p>velocity of the note to play (ranging from 0 to 1)</p>\n",type:"Number",optional:!0},{name:"secondsFromNow",description:"<p>time from now (in seconds) at which to play</p>\n",type:"Number",optional:!0},{name:"sustainTime",description:"<p>time to sustain before releasing the envelope. Defaults to 0.15 seconds.</p>\n",type:"Number",optional:!0}],class:"p5.MonoSynth",module:"p5.sound"},triggerAttack:{params:[{name:"note",description:'<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz</p>\n',type:"String | Number"},{name:"velocity",description:"<p>velocity of the note to play (ranging from 0 to 1)</p>\n",type:"Number",optional:!0},{name:"secondsFromNow",description:"<p>time from now (in seconds) at which to play</p>\n",type:"Number",optional:!0}],name:"triggerAttack",class:"p5.MonoSynth",module:"p5.sound"},triggerRelease:{params:[{name:"secondsFromNow",description:"<p>time to trigger the release</p>\n",type:"Number"}],name:"triggerRelease",class:"p5.MonoSynth",module:"p5.sound"},setADSR:{name:"setADSR",params:[{name:"attackTime",description:"<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",type:"Number"},{name:"decayTime",description:"<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",type:"Number",optional:!0},{name:"susRatio",description:"<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",type:"Number",optional:!0},{name:"releaseTime",description:"<p>Time in seconds from now (defaults to 0)</p>\n",type:"Number",optional:!0}],class:"p5.MonoSynth",module:"p5.sound"},attack:{name:"attack",class:"p5.MonoSynth",module:"p5.sound"},decay:{name:"decay",class:"p5.MonoSynth",module:"p5.sound"},sustain:{name:"sustain",class:"p5.MonoSynth",module:"p5.sound"},release:{name:"release",class:"p5.MonoSynth",module:"p5.sound"},amp:{name:"amp",params:[{name:"vol",description:"<p>desired volume</p>\n",type:"Number"},{name:"rampTime",description:"<p>Time to reach new volume</p>\n",type:"Number",optional:!0}],class:"p5.MonoSynth",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"<p>A p5.sound or Web Audio object</p>\n",type:"Object"}],class:"p5.MonoSynth",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.MonoSynth",module:"p5.sound"},dispose:{name:"dispose",class:"p5.MonoSynth",module:"p5.sound"}},"p5.AudioVoice":{connect:{name:"connect",params:[{name:"unit",description:"",type:"Object"}],class:"p5.AudioVoice",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.AudioVoice",module:"p5.sound"}},"p5.PolySynth":{notes:{name:"notes",class:"p5.PolySynth",module:"p5.sound"},polyvalue:{name:"polyvalue",class:"p5.PolySynth",module:"p5.sound"},AudioVoice:{name:"AudioVoice",class:"p5.PolySynth",module:"p5.sound"},play:{name:"play",params:[{name:"note",description:"<p>midi note to play (ranging from 0 to 127 - 60 being a middle C)</p>\n",type:"Number",optional:!0},{name:"velocity",description:"<p>velocity of the note to play (ranging from 0 to 1)</p>\n",type:"Number",optional:!0},{name:"secondsFromNow",description:"<p>time from now (in seconds) at which to play</p>\n",type:"Number",optional:!0},{name:"sustainTime",description:"<p>time to sustain before releasing the envelope</p>\n",type:"Number",optional:!0}],class:"p5.PolySynth",module:"p5.sound"},noteADSR:{name:"noteADSR",params:[{name:"note",description:"<p>Midi note on which ADSR should be set.</p>\n",type:"Number",optional:!0},{name:"attackTime",description:"<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",type:"Number",optional:!0},{name:"decayTime",description:"<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",type:"Number",optional:!0},{name:"susRatio",description:"<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",type:"Number",optional:!0},{name:"releaseTime",description:"<p>Time in seconds from now (defaults to 0)</p>\n",type:"Number",optional:!0}],class:"p5.PolySynth",module:"p5.sound"},setADSR:{name:"setADSR",params:[{name:"attackTime",description:"<p>Time (in seconds before envelope\n                               reaches Attack Level</p>\n",type:"Number",optional:!0},{name:"decayTime",description:"<p>Time (in seconds) before envelope\n                               reaches Decay/Sustain Level</p>\n",type:"Number",optional:!0},{name:"susRatio",description:"<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                               where 1.0 = attackLevel, 0.0 = releaseLevel.\n                               The susRatio determines the decayLevel and the level at which the\n                               sustain portion of the envelope will sustain.\n                               For example, if attackLevel is 0.4, releaseLevel is 0,\n                               and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                               increased to 1.0 (using <code>setRange</code>),\n                               then decayLevel would increase proportionally, to become 0.5.</p>\n",type:"Number",optional:!0},{name:"releaseTime",description:"<p>Time in seconds from now (defaults to 0)</p>\n",type:"Number",optional:!0}],class:"p5.PolySynth",module:"p5.sound"},noteAttack:{name:"noteAttack",params:[{name:"note",description:"<p>midi note on which attack should be triggered.</p>\n",type:"Number",optional:!0},{name:"velocity",description:"<p>velocity of the note to play (ranging from 0 to 1)/</p>\n",type:"Number",optional:!0},{name:"secondsFromNow",description:"<p>time from now (in seconds)</p>\n",type:"Number",optional:!0}],class:"p5.PolySynth",module:"p5.sound"},noteRelease:{name:"noteRelease",params:[{name:"note",description:"<p>midi note on which attack should be triggered.\n                                  If no value is provided, all notes will be released.</p>\n",type:"Number",optional:!0},{name:"secondsFromNow",description:"<p>time to trigger the release</p>\n",type:"Number",optional:!0}],class:"p5.PolySynth",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"<p>A p5.sound or Web Audio object</p>\n",type:"Object"}],class:"p5.PolySynth",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.PolySynth",module:"p5.sound"},dispose:{name:"dispose",class:"p5.PolySynth",module:"p5.sound"}},"p5.SoundFile":{isLoaded:{name:"isLoaded",class:"p5.SoundFile",module:"p5.sound"},play:{name:"play",params:[{name:"startTime",description:"<p>(optional) schedule playback to start (in seconds from now).</p>\n",type:"Number",optional:!0},{name:"rate",description:"<p>(optional) playback rate</p>\n",type:"Number",optional:!0},{name:"amp",description:"<p>(optional) amplitude (volume)\n                                    of playback</p>\n",type:"Number",optional:!0},{name:"cueStart",description:"<p>(optional) cue start time in seconds</p>\n",type:"Number",optional:!0},{name:"duration",description:"<p>(optional) duration of playback in seconds</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},playMode:{name:"playMode",params:[{name:"str",description:"<p>'restart' or 'sustain' or 'untilDone'</p>\n",type:"String"}],class:"p5.SoundFile",module:"p5.sound"},pause:{name:"pause",params:[{name:"startTime",description:"<p>(optional) schedule event to occur\n                             seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},loop:{name:"loop",params:[{name:"startTime",description:"<p>(optional) schedule event to occur\n                            seconds from now</p>\n",type:"Number",optional:!0},{name:"rate",description:"<p>(optional) playback rate</p>\n",type:"Number",optional:!0},{name:"amp",description:"<p>(optional) playback volume</p>\n",type:"Number",optional:!0},{name:"cueLoopStart",description:"<p>(optional) startTime in seconds</p>\n",type:"Number",optional:!0},{name:"duration",description:"<p>(optional) loop duration in seconds</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},setLoop:{name:"setLoop",params:[{name:"Boolean",description:"<p>set looping to true or false</p>\n",type:"Boolean"}],class:"p5.SoundFile",module:"p5.sound"},isLooping:{name:"isLooping",class:"p5.SoundFile",module:"p5.sound"},isPlaying:{name:"isPlaying",class:"p5.SoundFile",module:"p5.sound"},isPaused:{name:"isPaused",class:"p5.SoundFile",module:"p5.sound"},stop:{name:"stop",params:[{name:"startTime",description:"<p>(optional) schedule event to occur\n                            in seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},setVolume:{name:"setVolume",params:[{name:"volume",description:"<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n",type:"Number|Object"},{name:"rampTime",description:"<p>Fade for t seconds</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>Schedule this event to happen at\n                               t seconds in the future</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},pan:{name:"pan",params:[{name:"panValue",description:"<p>Set the stereo panner</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>schedule this event to happen\n                                seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},getPan:{name:"getPan",class:"p5.SoundFile",module:"p5.sound"},rate:{name:"rate",params:[{name:"playbackRate",description:"<p>Set the playback rate. 1.0 is normal,\n                                   .5 is half-speed, 2.0 is twice as fast.\n                                   Values less than zero play backwards.</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},duration:{name:"duration",class:"p5.SoundFile",module:"p5.sound"},currentTime:{name:"currentTime",class:"p5.SoundFile",module:"p5.sound"},jump:{name:"jump",params:[{name:"cueTime",description:"<p>cueTime of the soundFile in seconds.</p>\n",type:"Number"},{name:"duration",description:"<p>duration in seconds.</p>\n",type:"Number"}],class:"p5.SoundFile",module:"p5.sound"},channels:{name:"channels",class:"p5.SoundFile",module:"p5.sound"},sampleRate:{name:"sampleRate",class:"p5.SoundFile",module:"p5.sound"},frames:{name:"frames",class:"p5.SoundFile",module:"p5.sound"},getPeaks:{name:"getPeaks",params:[{name:"length",description:"<p>length is the size of the returned array.\n                         Larger length results in more precision.\n                         Defaults to 5*width of the browser window.</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},reverseBuffer:{name:"reverseBuffer",class:"p5.SoundFile",module:"p5.sound"},onended:{name:"onended",params:[{name:"callback",description:"<p>function to call when the\n                            soundfile has ended.</p>\n",type:"Function"}],class:"p5.SoundFile",module:"p5.sound"},connect:{name:"connect",params:[{name:"object",description:"<p>Audio object that accepts an input</p>\n",type:"Object",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.SoundFile",module:"p5.sound"},setPath:{name:"setPath",params:[{name:"path",description:"<p>path to audio file</p>\n",type:"String"},{name:"callback",description:"<p>Callback</p>\n",type:"Function"}],class:"p5.SoundFile",module:"p5.sound"},setBuffer:{name:"setBuffer",params:[{name:"buf",description:"<p>Array of Float32 Array(s). 2 Float32 Arrays\n                   will create a stereo source. 1 will create\n                   a mono source.</p>\n",type:"Array"}],class:"p5.SoundFile",module:"p5.sound"},processPeaks:{name:"processPeaks",params:[{name:"callback",description:"<p>a function to call once this data is returned</p>\n",type:"Function"},{name:"initThreshold",description:"<p>initial threshold defaults to 0.9</p>\n",type:"Number",optional:!0},{name:"minThreshold",description:"<p>minimum threshold defaults to 0.22</p>\n",type:"Number",optional:!0},{name:"minPeaks",description:"<p>minimum number of peaks defaults to 200</p>\n",type:"Number",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},addCue:{name:"addCue",params:[{name:"time",description:"<p>Time in seconds, relative to this media\n                           element's playback. For example, to trigger\n                           an event every time playback reaches two\n                           seconds, pass in the number 2. This will be\n                           passed as the first parameter to\n                           the callback function.</p>\n",type:"Number"},{name:"callback",description:"<p>Name of a function that will be\n                           called at the given time. The callback will\n                           receive time and (optionally) param as its\n                           two parameters.</p>\n",type:"Function"},{name:"value",description:"<p>An object to be passed as the\n                           second parameter to the\n                           callback function.</p>\n",type:"Object",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},removeCue:{name:"removeCue",params:[{name:"id",description:"<p>ID of the cue, as returned by addCue</p>\n",type:"Number"}],class:"p5.SoundFile",module:"p5.sound"},clearCues:{name:"clearCues",class:"p5.SoundFile",module:"p5.sound"},save:{name:"save",params:[{name:"fileName",description:"<p>name of the resulting .wav file.</p>\n",type:"String",optional:!0}],class:"p5.SoundFile",module:"p5.sound"},getBlob:{name:"getBlob",class:"p5.SoundFile",module:"p5.sound"}},"p5.Amplitude":{setInput:{name:"setInput",params:[{name:"snd",description:"<p>set the sound source\n                                     (optional, defaults to\n                                     master output)</p>\n",type:"SoundObject|undefined",optional:!0},{name:"smoothing",description:"<p>a range between 0.0 and 1.0\n                                      to smooth amplitude readings</p>\n",type:"Number|undefined",optional:!0}],class:"p5.Amplitude",module:"p5.sound"},getLevel:{name:"getLevel",params:[{name:"channel",description:"<p>Optionally return only channel 0 (left) or 1 (right)</p>\n",type:"Number",optional:!0}],class:"p5.Amplitude",module:"p5.sound"},toggleNormalize:{name:"toggleNormalize",params:[{name:"boolean",description:"<p>set normalize to true (1) or false (0)</p>\n",type:"Boolean",optional:!0}],class:"p5.Amplitude",module:"p5.sound"},smooth:{name:"smooth",params:[{name:"set",description:"<p>smoothing from 0.0 <= 1</p>\n",type:"Number"}],class:"p5.Amplitude",module:"p5.sound"}},"p5.FFT":{setInput:{name:"setInput",params:[{name:"source",description:"<p>p5.sound object (or web audio API source node)</p>\n",type:"Object",optional:!0}],class:"p5.FFT",module:"p5.sound"},waveform:{name:"waveform",params:[{name:"bins",description:"<p>Must be a power of two between\n                          16 and 1024. Defaults to 1024.</p>\n",type:"Number",optional:!0},{name:"precision",description:"<p>If any value is provided, will return results\n                            in a Float32 Array which is more precise\n                            than a regular array.</p>\n",type:"String",optional:!0}],class:"p5.FFT",module:"p5.sound"},analyze:{name:"analyze",params:[{name:"bins",description:"<p>Must be a power of two between\n                           16 and 1024. Defaults to 1024.</p>\n",type:"Number",optional:!0},{name:"scale",description:'<p>If "dB," returns decibel\n                           float measurements between\n                           -140 and 0 (max).\n                           Otherwise returns integers from 0-255.</p>\n',type:"Number",optional:!0}],class:"p5.FFT",module:"p5.sound"},getEnergy:{name:"getEnergy",params:[{name:"frequency1",description:'<p>Will return a value representing\n                              energy at this frequency. Alternately,\n                              the strings "bass", "lowMid" "mid",\n                              "highMid", and "treble" will return\n                              predefined frequency ranges.</p>\n',type:"Number|String"},{name:"frequency2",description:"<p>If a second frequency is given,\n                              will return average amount of\n                              energy that exists between the\n                              two frequencies.</p>\n",type:"Number",optional:!0}],class:"p5.FFT",module:"p5.sound"},getCentroid:{name:"getCentroid",class:"p5.FFT",module:"p5.sound"},smooth:{name:"smooth",params:[{name:"smoothing",description:"<p>0.0 < smoothing < 1.0.\n                             Defaults to 0.8.</p>\n",type:"Number"}],class:"p5.FFT",module:"p5.sound"},linAverages:{name:"linAverages",params:[{name:"N",description:"<p>Number of returned frequency groups</p>\n",type:"Number"}],class:"p5.FFT",module:"p5.sound"},logAverages:{name:"logAverages",params:[{name:"octaveBands",description:"<p>Array of Octave Bands objects for grouping</p>\n",type:"Array"}],class:"p5.FFT",module:"p5.sound"},getOctaveBands:{name:"getOctaveBands",params:[{name:"N",description:"<p>Specifies the 1/N type of generated octave bands</p>\n",type:"Number"},{name:"fCtr0",description:"<p>Minimum central frequency for the lowest band</p>\n",type:"Number"}],class:"p5.FFT",module:"p5.sound"}},"p5.Signal":{fade:{name:"fade",params:[{name:"value",description:"<p>Value to set this signal</p>\n",type:"Number"},{name:"secondsFromNow",description:"<p>Length of fade, in seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Signal",module:"p5.sound"},setInput:{name:"setInput",params:[{name:"input",description:"",type:"Object"}],class:"p5.Signal",module:"p5.sound"},add:{name:"add",params:[{name:"number",description:"",type:"Number"}],class:"p5.Signal",module:"p5.sound"},mult:{name:"mult",params:[{name:"number",description:"<p>to multiply</p>\n",type:"Number"}],class:"p5.Signal",module:"p5.sound"},scale:{name:"scale",params:[{name:"number",description:"<p>to multiply</p>\n",type:"Number"},{name:"inMin",description:"<p>input range minumum</p>\n",type:"Number"},{name:"inMax",description:"<p>input range maximum</p>\n",type:"Number"},{name:"outMin",description:"<p>input range minumum</p>\n",type:"Number"},{name:"outMax",description:"<p>input range maximum</p>\n",type:"Number"}],class:"p5.Signal",module:"p5.sound"}},"p5.Envelope":{attackTime:{name:"attackTime",class:"p5.Envelope",module:"p5.sound"},attackLevel:{name:"attackLevel",class:"p5.Envelope",module:"p5.sound"},decayTime:{name:"decayTime",class:"p5.Envelope",module:"p5.sound"},decayLevel:{name:"decayLevel",class:"p5.Envelope",module:"p5.sound"},releaseTime:{name:"releaseTime",class:"p5.Envelope",module:"p5.sound"},releaseLevel:{name:"releaseLevel",class:"p5.Envelope",module:"p5.sound"},set:{name:"set",params:[{name:"attackTime",description:"<p>Time (in seconds) before level\n                               reaches attackLevel</p>\n",type:"Number"},{name:"attackLevel",description:"<p>Typically an amplitude between\n                               0.0 and 1.0</p>\n",type:"Number"},{name:"decayTime",description:"<p>Time</p>\n",type:"Number"},{name:"decayLevel",description:"<p>Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)</p>\n",type:"Number"},{name:"releaseTime",description:"<p>Release Time (in seconds)</p>\n",type:"Number"},{name:"releaseLevel",description:"<p>Amplitude</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"},setADSR:{name:"setADSR",params:[{name:"attackTime",description:"<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",type:"Number"},{name:"decayTime",description:"<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",type:"Number",optional:!0},{name:"susRatio",description:"<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",type:"Number",optional:!0},{name:"releaseTime",description:"<p>Time in seconds from now (defaults to 0)</p>\n",type:"Number",optional:!0}],class:"p5.Envelope",module:"p5.sound"},setRange:{name:"setRange",params:[{name:"aLevel",description:"<p>attack level (defaults to 1)</p>\n",type:"Number"},{name:"rLevel",description:"<p>release level (defaults to 0)</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"},setInput:{name:"setInput",params:[{name:"inputs",description:"<p>A p5.sound object or\n                              Web Audio Param.</p>\n",type:"Object",optional:!0,multiple:!0}],class:"p5.Envelope",module:"p5.sound"},setExp:{name:"setExp",params:[{name:"isExp",description:"<p>true is exponential, false is linear</p>\n",type:"Boolean"}],class:"p5.Envelope",module:"p5.sound"},play:{name:"play",params:[{name:"unit",description:"<p>A p5.sound object or\n                              Web Audio Param.</p>\n",type:"Object"},{name:"startTime",description:"<p>time from now (in seconds) at which to play</p>\n",type:"Number",optional:!0},{name:"sustainTime",description:"<p>time to sustain before releasing the envelope</p>\n",type:"Number",optional:!0}],class:"p5.Envelope",module:"p5.sound"},triggerAttack:{name:"triggerAttack",params:[{name:"unit",description:"<p>p5.sound Object or Web Audio Param</p>\n",type:"Object"},{name:"secondsFromNow",description:"<p>time from now (in seconds)</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"},triggerRelease:{name:"triggerRelease",params:[{name:"unit",description:"<p>p5.sound Object or Web Audio Param</p>\n",type:"Object"},{name:"secondsFromNow",description:"<p>time to trigger the release</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"},ramp:{name:"ramp",params:[{name:"unit",description:"<p>p5.sound Object or Web Audio Param</p>\n",type:"Object"},{name:"secondsFromNow",description:"<p>When to trigger the ramp</p>\n",type:"Number"},{name:"v",description:"<p>Target value</p>\n",type:"Number"},{name:"v2",description:"<p>Second target value (optional)</p>\n",type:"Number",optional:!0}],class:"p5.Envelope",module:"p5.sound"},add:{name:"add",params:[{name:"number",description:"<p>Constant number to add</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"},mult:{name:"mult",params:[{name:"number",description:"<p>Constant number to multiply</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"},scale:{name:"scale",params:[{name:"inMin",description:"<p>input range minumum</p>\n",type:"Number"},{name:"inMax",description:"<p>input range maximum</p>\n",type:"Number"},{name:"outMin",description:"<p>input range minumum</p>\n",type:"Number"},{name:"outMax",description:"<p>input range maximum</p>\n",type:"Number"}],class:"p5.Envelope",module:"p5.sound"}},"p5.Pulse":{width:{name:"width",params:[{name:"width",description:"<p>Width between the pulses (0 to 1.0,\n                       defaults to 0)</p>\n",type:"Number",optional:!0}],class:"p5.Pulse",module:"p5.sound"}},"p5.Noise":{setType:{name:"setType",params:[{name:"type",description:"<p>'white', 'pink' or 'brown'</p>\n",type:"String",optional:!0}],class:"p5.Noise",module:"p5.sound"}},"p5.AudioIn":{input:{name:"input",class:"p5.AudioIn",module:"p5.sound"},output:{name:"output",class:"p5.AudioIn",module:"p5.sound"},stream:{name:"stream",class:"p5.AudioIn",module:"p5.sound"},mediaStream:{name:"mediaStream",class:"p5.AudioIn",module:"p5.sound"},currentSource:{name:"currentSource",class:"p5.AudioIn",module:"p5.sound"},enabled:{name:"enabled",class:"p5.AudioIn",module:"p5.sound"},amplitude:{name:"amplitude",class:"p5.AudioIn",module:"p5.sound"},start:{name:"start",params:[{name:"successCallback",description:"<p>Name of a function to call on\n                                  success.</p>\n",type:"Function",optional:!0},{name:"errorCallback",description:"<p>Name of a function to call if\n                                  there was an error. For example,\n                                  some browsers do not support\n                                  getUserMedia.</p>\n",type:"Function",optional:!0}],class:"p5.AudioIn",module:"p5.sound"},stop:{name:"stop",class:"p5.AudioIn",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"<p>An object that accepts audio input,\n                        such as an FFT</p>\n",type:"Object",optional:!0}],class:"p5.AudioIn",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.AudioIn",module:"p5.sound"},getLevel:{name:"getLevel",params:[{name:"smoothing",description:"<p>Smoothing is 0.0 by default.\n                             Smooths values based on previous values.</p>\n",type:"Number",optional:!0}],class:"p5.AudioIn",module:"p5.sound"},amp:{name:"amp",params:[{name:"vol",description:"<p>between 0 and 1.0</p>\n",type:"Number"},{name:"time",description:"<p>ramp time (optional)</p>\n",type:"Number",optional:!0}],class:"p5.AudioIn",module:"p5.sound"},getSources:{name:"getSources",params:[{name:"successCallback",description:"<p>This callback function handles the sources when they\n                                     have been enumerated. The callback function\n                                     receives the deviceList array as its only argument</p>\n",type:"Function",optional:!0},{name:"errorCallback",description:"<p>This optional callback receives the error\n                                   message as its argument.</p>\n",type:"Function",optional:!0}],class:"p5.AudioIn",module:"p5.sound"},setSource:{name:"setSource",params:[{name:"num",description:"<p>position of input source in the array</p>\n",type:"Number"}],class:"p5.AudioIn",module:"p5.sound"}},"p5.EQ":{bands:{name:"bands",class:"p5.EQ",module:"p5.sound"},process:{name:"process",params:[{name:"src",description:"<p>Audio source</p>\n",type:"Object"}],class:"p5.EQ",module:"p5.sound"}},"p5.Panner3D":{panner:{name:"panner",class:"p5.Panner3D",module:"p5.sound"},process:{name:"process",params:[{name:"src",description:"<p>Input source</p>\n",type:"Object"}],class:"p5.Panner3D",module:"p5.sound"},set:{name:"set",params:[{name:"xVal",description:"",type:"Number"},{name:"yVal",description:"",type:"Number"},{name:"zVal",description:"",type:"Number"},{name:"time",description:"",type:"Number"}],class:"p5.Panner3D",module:"p5.sound"},positionX:{name:"positionX",class:"p5.Panner3D",module:"p5.sound"},positionY:{name:"positionY",class:"p5.Panner3D",module:"p5.sound"},positionZ:{name:"positionZ",class:"p5.Panner3D",module:"p5.sound"},orient:{name:"orient",params:[{name:"xVal",description:"",type:"Number"},{name:"yVal",description:"",type:"Number"},{name:"zVal",description:"",type:"Number"},{name:"time",description:"",type:"Number"}],class:"p5.Panner3D",module:"p5.sound"},orientX:{name:"orientX",class:"p5.Panner3D",module:"p5.sound"},orientY:{name:"orientY",class:"p5.Panner3D",module:"p5.sound"},orientZ:{name:"orientZ",class:"p5.Panner3D",module:"p5.sound"},setFalloff:{name:"setFalloff",params:[{name:"maxDistance",description:"",type:"Number",optional:!0},{name:"rolloffFactor",description:"",type:"Number",optional:!0}],class:"p5.Panner3D",module:"p5.sound"},maxDist:{name:"maxDist",params:[{name:"maxDistance",description:"",type:"Number"}],class:"p5.Panner3D",module:"p5.sound"},rollof:{name:"rollof",params:[{name:"rolloffFactor",description:"",type:"Number"}],class:"p5.Panner3D",module:"p5.sound"}},"p5.Delay":{leftDelay:{name:"leftDelay",class:"p5.Delay",module:"p5.sound"},rightDelay:{name:"rightDelay",class:"p5.Delay",module:"p5.sound"},process:{name:"process",params:[{name:"Signal",description:"<p>An object that outputs audio</p>\n",type:"Object"},{name:"delayTime",description:"<p>Time (in seconds) of the delay/echo.\n                             Some browsers limit delayTime to\n                             1 second.</p>\n",type:"Number",optional:!0},{name:"feedback",description:"<p>sends the delay back through itself\n                             in a loop that decreases in volume\n                             each time.</p>\n",type:"Number",optional:!0},{name:"lowPass",description:"<p>Cutoff frequency. Only frequencies\n                             below the lowPass will be part of the\n                             delay.</p>\n",type:"Number",optional:!0}],class:"p5.Delay",module:"p5.sound"},delayTime:{name:"delayTime",params:[{name:"delayTime",description:"<p>Time (in seconds) of the delay</p>\n",type:"Number"}],class:"p5.Delay",module:"p5.sound"},feedback:{name:"feedback",params:[{name:"feedback",description:"<p>0.0 to 1.0, or an object such as an\n                                Oscillator that can be used to\n                                modulate this param</p>\n",type:"Number|Object"}],class:"p5.Delay",module:"p5.sound"},filter:{name:"filter",params:[{name:"cutoffFreq",description:"<p>A lowpass filter will cut off any\n                            frequencies higher than the filter frequency.</p>\n",type:"Number|Object"},{name:"res",description:"<p>Resonance of the filter frequency\n                            cutoff, or an object (i.e. a p5.Oscillator)\n                            that can be used to modulate this parameter.\n                            High numbers (i.e. 15) will produce a resonance,\n                            low numbers (i.e. .2) will produce a slope.</p>\n",type:"Number|Object"}],class:"p5.Delay",module:"p5.sound"},setType:{name:"setType",params:[{name:"type",description:"<p>'pingPong' (1) or 'default' (0)</p>\n",type:"String|Number"}],class:"p5.Delay",module:"p5.sound"},amp:{name:"amp",params:[{name:"volume",description:"<p>amplitude between 0 and 1.0</p>\n",type:"Number"},{name:"rampTime",description:"<p>create a fade that lasts rampTime</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Delay",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"",type:"Object"}],class:"p5.Delay",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.Delay",module:"p5.sound"}},"p5.Reverb":{process:{name:"process",params:[{name:"src",description:"<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",type:"Object"},{name:"seconds",description:"<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n",type:"Number",optional:!0},{name:"decayRate",description:"<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n",type:"Number",optional:!0},{name:"reverse",description:"<p>Play the reverb backwards or forwards.</p>\n",type:"Boolean",optional:!0}],class:"p5.Reverb",module:"p5.sound"},set:{name:"set",params:[{name:"seconds",description:"<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n",type:"Number",optional:!0},{name:"decayRate",description:"<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n",type:"Number",optional:!0},{name:"reverse",description:"<p>Play the reverb backwards or forwards.</p>\n",type:"Boolean",optional:!0}],class:"p5.Reverb",module:"p5.sound"},amp:{name:"amp",params:[{name:"volume",description:"<p>amplitude between 0 and 1.0</p>\n",type:"Number"},{name:"rampTime",description:"<p>create a fade that lasts rampTime</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Reverb",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"",type:"Object"}],class:"p5.Reverb",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.Reverb",module:"p5.sound"}},"p5.Convolver":{convolverNode:{name:"convolverNode",class:"p5.Convolver",module:"p5.sound"},process:{name:"process",params:[{name:"src",description:"<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",type:"Object"}],class:"p5.Convolver",module:"p5.sound"},impulses:{name:"impulses",class:"p5.Convolver",module:"p5.sound"},addImpulse:{name:"addImpulse",params:[{name:"path",description:"<p>path to a sound file</p>\n",type:"String"},{name:"callback",description:"<p>function (optional)</p>\n",type:"Function"},{name:"errorCallback",description:"<p>function (optional)</p>\n",type:"Function"}],class:"p5.Convolver",module:"p5.sound"},resetImpulse:{name:"resetImpulse",params:[{name:"path",description:"<p>path to a sound file</p>\n",type:"String"},{name:"callback",description:"<p>function (optional)</p>\n",type:"Function"},{name:"errorCallback",description:"<p>function (optional)</p>\n",type:"Function"}],class:"p5.Convolver",module:"p5.sound"},toggleImpulse:{name:"toggleImpulse",params:[{name:"id",description:"<p>Identify the impulse by its original filename\n                          (String), or by its position in the\n                          <code>.impulses</code> Array (Number).</p>\n",type:"String|Number"}],class:"p5.Convolver",module:"p5.sound"}},"p5.Phrase":{sequence:{name:"sequence",class:"p5.Phrase",module:"p5.sound"}},"p5.Part":{setBPM:{name:"setBPM",params:[{name:"BPM",description:"<p>Beats Per Minute</p>\n",type:"Number"},{name:"rampTime",description:"<p>Seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Part",module:"p5.sound"},getBPM:{name:"getBPM",class:"p5.Part",module:"p5.sound"},start:{name:"start",params:[{name:"time",description:"<p>seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Part",module:"p5.sound"},loop:{name:"loop",params:[{name:"time",description:"<p>seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Part",module:"p5.sound"},noLoop:{name:"noLoop",class:"p5.Part",module:"p5.sound"},stop:{name:"stop",params:[{name:"time",description:"<p>seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Part",module:"p5.sound"},pause:{name:"pause",params:[{name:"time",description:"<p>seconds from now</p>\n",type:"Number"}],class:"p5.Part",module:"p5.sound"},addPhrase:{name:"addPhrase",params:[{name:"phrase",description:"<p>reference to a p5.Phrase</p>\n",type:"p5.Phrase"}],class:"p5.Part",module:"p5.sound"},removePhrase:{name:"removePhrase",params:[{name:"phraseName",description:"",type:"String"}],class:"p5.Part",module:"p5.sound"},getPhrase:{name:"getPhrase",params:[{name:"phraseName",description:"",type:"String"}],class:"p5.Part",module:"p5.sound"},replaceSequence:{name:"replaceSequence",params:[{name:"phraseName",description:"",type:"String"},{name:"sequence",description:"<p>Array of values to pass into the callback\n                          at each step of the phrase.</p>\n",type:"Array"}],class:"p5.Part",module:"p5.sound"},onStep:{name:"onStep",params:[{name:"callback",description:"<p>The name of the callback\n                            you want to fire\n                            on every beat/tatum.</p>\n",type:"Function"}],class:"p5.Part",module:"p5.sound"}},"p5.Score":{start:{name:"start",class:"p5.Score",module:"p5.sound"},stop:{name:"stop",class:"p5.Score",module:"p5.sound"},pause:{name:"pause",class:"p5.Score",module:"p5.sound"},loop:{name:"loop",class:"p5.Score",module:"p5.sound"},noLoop:{name:"noLoop",class:"p5.Score",module:"p5.sound"},setBPM:{name:"setBPM",params:[{name:"BPM",description:"<p>Beats Per Minute</p>\n",type:"Number"},{name:"rampTime",description:"<p>Seconds from now</p>\n",type:"Number"}],class:"p5.Score",module:"p5.sound"}},"p5.SoundLoop":{musicalTimeMode:{name:"musicalTimeMode",class:"p5.SoundLoop",module:"p5.sound"},maxIterations:{name:"maxIterations",class:"p5.SoundLoop",module:"p5.sound"},start:{name:"start",params:[{name:"timeFromNow",description:"<p>schedule a starting time</p>\n",type:"Number",optional:!0}],class:"p5.SoundLoop",module:"p5.sound"},stop:{name:"stop",params:[{name:"timeFromNow",description:"<p>schedule a stopping time</p>\n",type:"Number",optional:!0}],class:"p5.SoundLoop",module:"p5.sound"},pause:{name:"pause",params:[{name:"timeFromNow",description:"<p>schedule a pausing time</p>\n",type:"Number",optional:!0}],class:"p5.SoundLoop",module:"p5.sound"},syncedStart:{name:"syncedStart",params:[{name:"otherLoop",description:"<p>a p5.SoundLoop to sync with</p>\n",type:"Object"},{name:"timeFromNow",description:"<p>Start the loops in sync after timeFromNow seconds</p>\n",type:"Number",optional:!0}],class:"p5.SoundLoop",module:"p5.sound"},bpm:{name:"bpm",class:"p5.SoundLoop",module:"p5.sound"},timeSignature:{name:"timeSignature",class:"p5.SoundLoop",module:"p5.sound"},interval:{name:"interval",class:"p5.SoundLoop",module:"p5.sound"},iterations:{name:"iterations",class:"p5.SoundLoop",module:"p5.sound"}},"p5.Compressor":{compressor:{name:"compressor",class:"p5.Compressor",module:"p5.sound"},process:{name:"process",params:[{name:"src",description:"<p>Sound source to be connected</p>\n",type:"Object"},{name:"attack",description:"<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n",type:"Number",optional:!0},{name:"knee",description:'<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',type:"Number",optional:!0},{name:"ratio",description:"<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",type:"Number",optional:!0},{name:"threshold",description:"<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",type:"Number",optional:!0},{name:"release",description:"<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",type:"Number",optional:!0}],class:"p5.Compressor",module:"p5.sound"},set:{name:"set",params:[{name:"attack",description:"<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n",type:"Number"},{name:"knee",description:'<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',type:"Number"},{name:"ratio",description:"<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",type:"Number"},{name:"threshold",description:"<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",type:"Number"},{name:"release",description:"<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",type:"Number"}],class:"p5.Compressor",module:"p5.sound"},attack:{name:"attack",params:[{name:"attack",description:"<p>Attack is the amount of time (in seconds) to reduce the gain by 10dB,\n                         default = .003, range 0 - 1</p>\n",type:"Number",optional:!0},{name:"time",description:"<p>Assign time value to schedule the change in value</p>\n",type:"Number",optional:!0}],class:"p5.Compressor",module:"p5.sound"},knee:{name:"knee",params:[{name:"knee",description:'<p>A decibel value representing the range above the\n                       threshold where the curve smoothly transitions to the "ratio" portion.\n                       default = 30, range 0 - 40</p>\n',type:"Number",optional:!0},{name:"time",description:"<p>Assign time value to schedule the change in value</p>\n",type:"Number",optional:!0}],class:"p5.Compressor",module:"p5.sound"},ratio:{name:"ratio",params:[{name:"ratio",description:"<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",type:"Number",optional:!0},{name:"time",description:"<p>Assign time value to schedule the change in value</p>\n",type:"Number",optional:!0}],class:"p5.Compressor",module:"p5.sound"},threshold:{name:"threshold",params:[{name:"threshold",description:"<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",type:"Number"},{name:"time",description:"<p>Assign time value to schedule the change in value</p>\n",type:"Number",optional:!0}],class:"p5.Compressor",module:"p5.sound"},release:{name:"release",params:[{name:"release",description:"<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",type:"Number"},{name:"time",description:"<p>Assign time value to schedule the change in value</p>\n",type:"Number",optional:!0}],class:"p5.Compressor",module:"p5.sound"},reduction:{name:"reduction",class:"p5.Compressor",module:"p5.sound"}},"p5.SoundRecorder":{setInput:{name:"setInput",params:[{name:"unit",description:"<p>p5.sound object or a web audio unit\n                       that outputs sound</p>\n",type:"Object",optional:!0}],class:"p5.SoundRecorder",module:"p5.sound"},record:{name:"record",params:[{name:"soundFile",description:"<p>p5.SoundFile</p>\n",type:"p5.SoundFile"},{name:"duration",description:"<p>Time (in seconds)</p>\n",type:"Number",optional:!0},{name:"callback",description:"<p>The name of a function that will be\n                              called once the recording completes</p>\n",type:"Function",optional:!0}],class:"p5.SoundRecorder",module:"p5.sound"},stop:{name:"stop",class:"p5.SoundRecorder",module:"p5.sound"}},"p5.PeakDetect":{isDetected:{name:"isDetected",class:"p5.PeakDetect",module:"p5.sound"},update:{name:"update",params:[{name:"fftObject",description:"<p>A p5.FFT object</p>\n",type:"p5.FFT"}],class:"p5.PeakDetect",module:"p5.sound"},onPeak:{name:"onPeak",params:[{name:"callback",description:"<p>Name of a function that will\n                            be called when a peak is\n                            detected.</p>\n",type:"Function"},{name:"val",description:"<p>Optional value to pass\n                            into the function when\n                            a peak is detected.</p>\n",type:"Object",optional:!0}],class:"p5.PeakDetect",module:"p5.sound"}},"p5.Gain":{setInput:{name:"setInput",params:[{name:"src",description:"<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",type:"Object"}],class:"p5.Gain",module:"p5.sound"},connect:{name:"connect",params:[{name:"unit",description:"",type:"Object"}],class:"p5.Gain",module:"p5.sound"},disconnect:{name:"disconnect",class:"p5.Gain",module:"p5.sound"},amp:{name:"amp",params:[{name:"volume",description:"<p>amplitude between 0 and 1.0</p>\n",type:"Number"},{name:"rampTime",description:"<p>create a fade that lasts rampTime</p>\n",type:"Number",optional:!0},{name:"timeFromNow",description:"<p>schedule this event to happen\n                              seconds from now</p>\n",type:"Number",optional:!0}],class:"p5.Gain",module:"p5.sound"}},"p5.Distortion":{WaveShaperNode:{name:"WaveShaperNode",class:"p5.Distortion",module:"p5.sound"},process:{name:"process",params:[{name:"amount",description:"<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n",type:"Number",optional:!0,optdefault:"0.25"},{name:"oversample",description:"<p>'none', '2x', or '4x'.</p>\n",type:"String",optional:!0,optdefault:"'none'"}],class:"p5.Distortion",module:"p5.sound"},set:{name:"set",params:[{name:"amount",description:"<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n",type:"Number",optional:!0,optdefault:"0.25"},{name:"oversample",description:"<p>'none', '2x', or '4x'.</p>\n",type:"String",optional:!0,optdefault:"'none'"}],class:"p5.Distortion",module:"p5.sound"},getAmount:{name:"getAmount",class:"p5.Distortion",module:"p5.sound"},getOversample:{name:"getOversample",class:"p5.Distortion",module:"p5.sound"}}};},{}],2:[function(e,t,r){r.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},r.toByteArray=function(e){var t,r,n=c(e),a=n[0],o=n[1],i=new u(function(e,t){return 3*(e+t)/4-t}(a,o)),s=0,l=0<o?a-4:a;for(r=0;r<l;r+=4)t=p[e.charCodeAt(r)]<<18|p[e.charCodeAt(r+1)]<<12|p[e.charCodeAt(r+2)]<<6|p[e.charCodeAt(r+3)],i[s++]=t>>16&255,i[s++]=t>>8&255,i[s++]=255&t;2===o&&(t=p[e.charCodeAt(r)]<<2|p[e.charCodeAt(r+1)]>>4,i[s++]=255&t);1===o&&(t=p[e.charCodeAt(r)]<<10|p[e.charCodeAt(r+1)]<<4|p[e.charCodeAt(r+2)]>>2,i[s++]=t>>8&255,i[s++]=255&t);return i},r.fromByteArray=function(e){for(var t,r=e.length,n=r%3,a=[],o=0,i=r-n;o<i;o+=16383)a.push(l(e,o,i<o+16383?i:o+16383));1==n?(t=e[r-1],a.push(s[t>>2]+s[t<<4&63]+"==")):2==n&&(t=(e[r-2]<<8)+e[r-1],a.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"="));return a.join("")};for(var s=[],p=[],u="undefined"!=typeof Uint8Array?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,o=n.length;a<o;++a)s[a]=n[a],p[n.charCodeAt(a)]=a;function c(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return -1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var n,a,o=[],i=t;i<r;i+=3)n=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),o.push(s[(a=n)>>18&63]+s[a>>12&63]+s[a>>6&63]+s[63&a]);return o.join("")}p["-".charCodeAt(0)]=62,p["_".charCodeAt(0)]=63;},{}],3:[function(e,t,r){},{}],4:[function(e,t,r){arguments[4][3][0].apply(r,arguments);},{dup:3}],5:[function(F,e,U){(function(c){var n=F("base64-js"),o=F("ieee754"),e="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;U.Buffer=c,U.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},U.INSPECT_MAX_BYTES=50;var r=2147483647;function i(e){if(r<e)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"!=typeof e)return a(e,t,r);if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return l(e)}function a(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|d(e,t),n=i(r),a=n.write(e,t);a!==r&&(n=n.slice(0,a));return n}(e,t);if(ArrayBuffer.isView(e))return p(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(D(e,ArrayBuffer)||e&&D(e.buffer,ArrayBuffer))return function(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r);return Object.setPrototypeOf(n,c.prototype),n}(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);var a=function(e){if(c.isBuffer(e)){var t=0|u(e.length),r=i(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return "number"!=typeof e.length||A(e.length)?i(0):p(e);if("Buffer"===e.type&&Array.isArray(e.data))return p(e.data)}(e);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function l(e){return s(e),i(e<0?0:0|u(e))}function p(e){for(var t=e.length<0?0:0|u(e.length),r=i(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function u(e){if(r<=e)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r.toString(16)+" bytes");return 0|e}function d(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||D(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var r=e.length,n=2<arguments.length&&!0===arguments[2];if(!n&&0===r)return 0;for(var a=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return I(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return P(e).length;default:if(a)return n?-1:I(e).length;t=(""+t).toLowerCase(),a=!0;}}function h(e,t,r){var n=e[t];e[t]=e[r],e[r]=n;}function m(e,t,r,n,a){if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):2147483647<r?r=2147483647:r<-2147483648&&(r=-2147483648),A(r=+r)&&(r=a?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(a)return -1;r=e.length-1;}else if(r<0){if(!a)return -1;r=0;}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:f(e,t,r,n,a);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):f(e,[t],r,n,a);throw new TypeError("val must be string, number or Buffer")}function f(e,t,r,n,a){var o,i=1,s=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s/=i=2,l/=2,r/=2;}function p(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(a){var u=-1;for(o=r;o<s;o++)if(p(e,o)===p(t,-1===u?0:o-u)){if(-1===u&&(u=o),o-u+1===l)return u*i}else -1!==u&&(o-=o-u),u=-1;}else for(s<r+l&&(r=s-l),o=r;0<=o;o--){for(var c=!0,d=0;d<l;d++)if(p(e,o+d)!==p(t,d)){c=!1;break}if(c)return o}return -1}function y(e,t,r,n){r=Number(r)||0;var a=e.length-r;n?a<(n=Number(n))&&(n=a):n=a;var o=t.length;o/2<n&&(n=o/2);for(var i=0;i<n;++i){var s=parseInt(t.substr(2*i,2),16);if(A(s))return i;e[r+i]=s;}return i}function g(e,t,r,n){return R(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function v(e,t,r,n){return R(function(e,t){for(var r,n,a,o=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,a=r%256,o.push(a),o.push(n);return o}(t,e.length-r),e,r,n)}function b(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function _(e,t,r){r=Math.min(e.length,r);for(var n=[],a=t;a<r;){var o,i,s,l,p=e[a],u=null,c=239<p?4:223<p?3:191<p?2:1;if(a+c<=r)switch(c){case 1:p<128&&(u=p);break;case 2:128==(192&(o=e[a+1]))&&127<(l=(31&p)<<6|63&o)&&(u=l);break;case 3:o=e[a+1],i=e[a+2],128==(192&o)&&128==(192&i)&&2047<(l=(15&p)<<12|(63&o)<<6|63&i)&&(l<55296||57343<l)&&(u=l);break;case 4:o=e[a+1],i=e[a+2],s=e[a+3],128==(192&o)&&128==(192&i)&&128==(192&s)&&65535<(l=(15&p)<<18|(63&o)<<12|(63&i)<<6|63&s)&&l<1114112&&(u=l);}null===u?(u=65533,c=1):65535<u&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),a+=c;}return function(e){var t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=x));return r}(n)}U.kMaxLength=r,(c.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return !1}}())||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),c.poolSize=8192,c.from=function(e,t,r){return a(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return a=t,o=r,s(n=e),n<=0?i(n):void 0!==a?"string"==typeof o?i(n).fill(a,o):i(n).fill(a):i(n);var n,a,o;},c.allocUnsafe=function(e){return l(e)},c.allocUnsafeSlow=function(e){return l(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(D(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),D(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var r=e.length,n=t.length,a=0,o=Math.min(r,n);a<o;++a)if(e[a]!==t[a]){r=e[a],n=t[a];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var r;if(void 0===t)for(r=t=0;r<e.length;++r)t+=e[r].length;var n=c.allocUnsafe(t),a=0;for(r=0;r<e.length;++r){var o=e[r];if(D(o,Uint8Array)&&(o=c.from(o)),!c.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,a),a+=o.length;}return n},c.byteLength=d,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},c.prototype.toLocaleString=c.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?_(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(t>>>=0))return "";for(e=e||"utf8";;)switch(e){case"hex":return M(this,t,r);case"utf8":case"utf-8":return _(this,t,r);case"ascii":return S(this,t,r);case"latin1":case"binary":return w(this,t,r);case"base64":return b(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0;}}.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",t=U.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},e&&(c.prototype[e]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,a){if(D(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===a&&(a=this.length),t<0||r>e.length||n<0||a>this.length)throw new RangeError("out of range index");if(a<=n&&r<=t)return 0;if(a<=n)return -1;if(r<=t)return 1;if(this===e)return 0;for(var o=(a>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0),s=Math.min(o,i),l=this.slice(n,a),p=e.slice(t,r),u=0;u<s;++u)if(l[u]!==p[u]){o=l[u],i=p[u];break}return o<i?-1:i<o?1:0},c.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else {if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var a=this.length-t;if((void 0===r||a<r)&&(r=a),0<e.length&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n=n||"utf8";for(var o,i,s,l,p,u,c=!1;;)switch(n){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return p=t,u=r,R(I(e,(l=this).length-p),l,p,u);case"ascii":return g(this,e,t,r);case"latin1":case"binary":return g(this,e,t,r);case"base64":return o=this,i=t,s=r,R(P(e),o,i,s);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,e,t,r);default:if(c)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),c=!0;}},c.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function S(e,t,r){var n="";r=Math.min(e.length,r);for(var a=t;a<r;++a)n+=String.fromCharCode(127&e[a]);return n}function w(e,t,r){var n="";r=Math.min(e.length,r);for(var a=t;a<r;++a)n+=String.fromCharCode(e[a]);return n}function M(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||n<r)&&(r=n);for(var a="",o=t;o<r;++o)a+=k[e[o]];return a}function E(e,t,r){for(var n=e.slice(t,r),a="",o=0;o<n.length;o+=2)a+=String.fromCharCode(n[o]+256*n[o+1]);return a}function T(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(r<e+t)throw new RangeError("Trying to access beyond buffer length")}function C(e,t,r,n,a,o){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(a<t||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function O(e,t,r,n,a){return t=+t,r>>>=0,a||N(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,a){return t=+t,r>>>=0,a||N(e,0,r,8),o.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||T(e,t,this.length);for(var n=this[e],a=1,o=0;++o<t&&(a*=256);)n+=this[e+o]*a;return n},c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||T(e,t,this.length);for(var n=this[e+--t],a=1;0<t&&(a*=256);)n+=this[e+--t]*a;return n},c.prototype.readUInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||T(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||T(e,t,this.length);for(var n=this[e],a=1,o=0;++o<t&&(a*=256);)n+=this[e+o]*a;return (a*=128)<=n&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||T(e,t,this.length);for(var n=t,a=1,o=this[e+--n];0<n&&(a*=256);)o+=this[e+--n]*a;return (a*=128)<=o&&(o-=Math.pow(2,8*t)),o},c.prototype.readInt8=function(e,t){return e>>>=0,t||T(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||T(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||T(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||T(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return e>>>=0,t||T(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||T(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||T(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||T(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);var a=1,o=0;for(this[t]=255&e;++o<r&&(a*=256);)this[t+o]=e/a&255;return t+r},c.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);var a=r-1,o=1;for(this[t+a]=255&e;0<=--a&&(o*=256);)this[t+a]=e/o&255;return t+r},c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var a=Math.pow(2,8*r-1);C(this,e,t,r,a-1,-a);}var o=0,i=1,s=0;for(this[t]=255&e;++o<r&&(i*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var a=Math.pow(2,8*r-1);C(this,e,t,r,a-1,-a);}var o=r-1,i=1,s=0;for(this[t+o]=255&e;0<=--o&&(i*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeFloatLE=function(e,t,r){return O(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return O(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r=r||0,n||0===n||(n=this.length),t>=e.length&&(t=e.length),t=t||0,0<n&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var a=n-r;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,r,n);else if(this===e&&r<t&&t<n)for(var o=a-1;0<=o;--o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,n),t);return a},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var a=e.charCodeAt(0);("utf8"===n&&a<128||"latin1"===n)&&(e=a);}}else "number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,"number"==typeof(e=e||0))for(o=t;o<r;++o)this[o]=e;else {var i=c.isBuffer(e)?e:c.from(e,n),s=i.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=i[o%s];}return this};var t=/[^+/0-9A-Za-z-_]/g;function I(e,t){var r;t=t||1/0;for(var n=e.length,a=null,o=[],i=0;i<n;++i){if(55295<(r=e.charCodeAt(i))&&r<57344){if(!a){if(56319<r){-1<(t-=3)&&o.push(239,191,189);continue}if(i+1===n){-1<(t-=3)&&o.push(239,191,189);continue}a=r;continue}if(r<56320){-1<(t-=3)&&o.push(239,191,189),a=r;continue}r=65536+(a-55296<<10|r-56320);}else a&&-1<(t-=3)&&o.push(239,191,189);if(a=null,r<128){if(--t<0)break;o.push(r);}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128);}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return o}function P(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(t,"")).length<2)return "";for(;e.length%4!=0;)e+="=";return e}(e))}function R(e,t,r,n){for(var a=0;a<n&&!(a+r>=t.length||a>=e.length);++a)t[a+r]=e[a];return a}function D(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function A(e){return e!=e}var k=function(){for(var e="0123456789abcdef",t=new Array(256),r=0;r<16;++r)for(var n=16*r,a=0;a<16;++a)t[n+a]=e[r]+e[a];return t}();}).call(this,F("buffer").Buffer);},{"base64-js":2,buffer:5,ieee754:10}],6:[function(e,t,r){t.exports=e("./").polyfill();},{"./":7}],7:[function(z,r,n){(function(j,V){var e,t;e=this,t=function(){function l(e){return "function"==typeof e}var r=Array.isArray?Array.isArray:function(e){return "[object Array]"===Object.prototype.toString.call(e)},n=0,t=void 0,a=void 0,i=function(e,t){d[n]=e,d[n+1]=t,2===(n+=2)&&(a?a(h):v());};var e="undefined"!=typeof window?window:void 0,o=e||{},s=o.MutationObserver||o.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==j&&"[object process]"==={}.toString.call(j),u="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function c(){var e=setTimeout;return function(){return e(h,1)}}var d=new Array(1e3);function h(){for(var e=0;e<n;e+=2){(0, d[e])(d[e+1]),d[e]=void 0,d[e+1]=void 0;}n=0;}var m,f,y,g,v=void 0;function b(e,t){var r=this,n=new this.constructor(S);void 0===n[x]&&k(n);var a=r._state;if(a){var o=arguments[a-1];i(function(){return D(a,n,o,r._result)});}else P(r,n,e,t);return n}function _(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(S);return N(t,e),t}v=p?function(){return j.nextTick(h)}:s?(f=0,y=new s(h),g=document.createTextNode(""),y.observe(g,{characterData:!0}),function(){g.data=f=++f%2;}):u?((m=new MessageChannel).port1.onmessage=h,function(){return m.port2.postMessage(0)}):void 0===e&&"function"==typeof z?function(){try{var e=Function("return this")().require("vertx");return void 0!==(t=e.runOnLoop||e.runOnContext)?function(){t(h);}:c()}catch(e){return c()}}():c();var x=Math.random().toString(36).substring(2);function S(){}var w=void 0,M=1,E=2;function T(e,n,a){i(function(t){var r=!1,e=function(e,t,r,n){try{e.call(t,r,n);}catch(e){return e}}(a,n,function(e){r||(r=!0,n!==e?N(t,e):L(t,e));},function(e){r||(r=!0,I(t,e));},t._label);!r&&e&&(r=!0,I(t,e));},e);}function C(e,t,r){var n,a;t.constructor===e.constructor&&r===b&&t.constructor.resolve===_?(n=e,(a=t)._state===M?L(n,a._result):a._state===E?I(n,a._result):P(a,void 0,function(e){return N(n,e)},function(e){return I(n,e)})):void 0===r?L(e,t):l(r)?T(e,t,r):L(e,t);}function N(t,e){if(t===e)I(t,new TypeError("You cannot resolve a promise with itself"));else if(a=typeof(n=e),null===n||"object"!=a&&"function"!=a)L(t,e);else {var r=void 0;try{r=e.then;}catch(e){return void I(t,e)}C(t,e,r);}var n,a;}function O(e){e._onerror&&e._onerror(e._result),R(e);}function L(e,t){e._state===w&&(e._result=t,e._state=M,0!==e._subscribers.length&&i(R,e));}function I(e,t){e._state===w&&(e._state=E,e._result=t,i(O,e));}function P(e,t,r,n){var a=e._subscribers,o=a.length;e._onerror=null,a[o]=t,a[o+M]=r,a[o+E]=n,0===o&&e._state&&i(R,e);}function R(e){var t=e._subscribers,r=e._state;if(0!==t.length){for(var n=void 0,a=void 0,o=e._result,i=0;i<t.length;i+=3)n=t[i],a=t[i+r],n?D(r,n,a,o):a(o);e._subscribers.length=0;}}function D(e,t,r,n){var a=l(r),o=void 0,i=void 0,s=!0;if(a){try{o=r(n);}catch(e){s=!1,i=e;}if(t===o)return void I(t,new TypeError("A promises callback cannot return that same promise."))}else o=n;t._state!==w||(a&&s?N(t,o):!1===s?I(t,i):e===M?L(t,o):e===E&&I(t,o));}var A=0;function k(e){e[x]=A++,e._state=void 0,e._result=void 0,e._subscribers=[];}var F=(U.prototype._enumerate=function(e){for(var t=0;this._state===w&&t<e.length;t++)this._eachEntry(e[t],t);},U.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===_){var a=void 0,o=void 0,i=!1;try{a=t.then;}catch(e){i=!0,o=e;}if(a===b&&t._state!==w)this._settledAt(t._state,e,t._result);else if("function"!=typeof a)this._remaining--,this._result[e]=t;else if(r===B){var s=new r(S);i?I(s,o):C(s,t,a),this._willSettleAt(s,e);}else this._willSettleAt(new r(function(e){return e(t)}),e);}else this._willSettleAt(n(t),e);},U.prototype._settledAt=function(e,t,r){var n=this.promise;n._state===w&&(this._remaining--,e===E?I(n,r):this._result[t]=r),0===this._remaining&&L(n,this._result);},U.prototype._willSettleAt=function(e,t){var r=this;P(e,void 0,function(e){return r._settledAt(M,t,e)},function(e){return r._settledAt(E,t,e)});},U);function U(e,t){this._instanceConstructor=e,this.promise=new e(S),this.promise[x]||k(this.promise),r(t)?(this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?L(this.promise,this._result):(this.length=this.length||0,this._enumerate(t),0===this._remaining&&L(this.promise,this._result))):I(this.promise,new Error("Array Methods must be provided an Array"));}var B=(G.prototype.catch=function(e){return this.then(null,e)},G.prototype.finally=function(t){var r=this.constructor;return l(t)?this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})}):this.then(t,t)},G);function G(e){this[x]=A++,this._result=this._state=void 0,this._subscribers=[],S!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof G?function(t,e){try{e(function(e){N(t,e);},function(e){I(t,e);});}catch(e){I(t,e);}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}());}return B.prototype.then=b,B.all=function(e){return new F(this,e).promise},B.race=function(a){var o=this;return r(a)?new o(function(e,t){for(var r=a.length,n=0;n<r;n++)o.resolve(a[n]).then(e,t);}):new o(function(e,t){return t(new TypeError("You must pass an array to race."))})},B.resolve=_,B.reject=function(e){var t=new this(S);return I(t,e),t},B._setScheduler=function(e){a=e;},B._setAsap=function(e){i=e;},B._asap=i,B.polyfill=function(){var e=void 0;if(void 0!==V)e=V;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")();}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var r=null;try{r=Object.prototype.toString.call(t.resolve());}catch(e){}if("[object Promise]"===r&&!t.cast)return}e.Promise=B;},B.Promise=B},"object"==typeof n&&void 0!==r?r.exports=t():e.ES6Promise=t();}).call(this,z("_process"),"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{_process:15}],8:[function(e,n,a){!function(e,t){if(void 0!==a&&void 0!==n)t(a,n);else {var r={exports:{}};t(r.exports,r),e.fetchJsonp=r.exports;}}(this,function(e,t){var r=5e3,n="callback";function c(t){try{delete window[t];}catch(e){window[t]=void 0;}}function d(e){var t=document.getElementById(e);t&&document.getElementsByTagName("head")[0].removeChild(t);}t.exports=function(o){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=o,l=i.timeout||r,p=i.jsonpCallback||n,u=void 0;return new Promise(function(t,e){var r=i.jsonpCallbackFunction||"jsonp_"+Date.now()+"_"+Math.ceil(1e5*Math.random()),n=p+"_"+r;window[r]=function(e){t({ok:!0,json:function(){return Promise.resolve(e)}}),u&&clearTimeout(u),d(n),c(r);},s+=-1===s.indexOf("?")?"?":"&";var a=document.createElement("script");a.setAttribute("src",""+s+p+"="+r),i.charset&&a.setAttribute("charset",i.charset),a.id=n,document.getElementsByTagName("head")[0].appendChild(a),u=setTimeout(function(){e(new Error("JSONP request to "+o+" timed out")),c(r),d(n),window[r]=function(){c(r);};},l),a.onerror=function(){e(new Error("JSONP request to "+o+" failed")),c(r),d(n),u&&clearTimeout(u);};})};});},{}],9:[function(e,t,r){var n=n||function(s){if(!(void 0===s||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=s.document,l=function(){return s.URL||s.webkitURL||s},p=e.createElementNS("http://www.w3.org/1999/xhtml","a"),u="download"in p,c=/constructor/i.test(s.HTMLElement)||s.safari,d=/CriOS\/[\d]+/.test(navigator.userAgent),h=function(e){(s.setImmediate||s.setTimeout)(function(){throw e},0);},m=function(e){setTimeout(function(){"string"==typeof e?l().revokeObjectURL(e):e.remove();},4e4);},f=function(e){return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob([String.fromCharCode(65279),e],{type:e.type}):e},n=function(e,r,t){t||(e=f(e));function n(){!function(e,t,r){for(var n=(t=[].concat(t)).length;n--;){var a=e["on"+t[n]];if("function"==typeof a)try{a.call(e,r||e);}catch(e){h(e);}}}(o,"writestart progress write writeend".split(" "));}var a,o=this,i="application/octet-stream"===e.type;if(o.readyState=o.INIT,u)return a=l().createObjectURL(e),void setTimeout(function(){var e,t;p.href=a,p.download=r,e=p,t=new MouseEvent("click"),e.dispatchEvent(t),n(),m(a),o.readyState=o.DONE;});!function(){if((d||i&&c)&&s.FileReader){var t=new FileReader;return t.onloadend=function(){var e=d?t.result:t.result.replace(/^data:[^;]*;/,"data:attachment/file;");s.open(e,"_blank")||(s.location.href=e),e=void 0,o.readyState=o.DONE,n();},t.readAsDataURL(e),o.readyState=o.INIT}(a=a||l().createObjectURL(e),i)?s.location.href=a:s.open(a,"_blank")||(s.location.href=a);o.readyState=o.DONE,n(),m(a);}();},t=n.prototype;return "undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,r){return t=t||e.name||"download",r||(e=f(e)),navigator.msSaveOrOpenBlob(e,t)}:(t.abort=function(){},t.readyState=t.INIT=0,t.WRITING=1,t.DONE=2,t.error=t.onwritestart=t.onprogress=t.onwrite=t.onabort=t.onerror=t.onwriteend=null,function(e,t,r){return new n(e,t||e.name||"download",r)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);void 0!==t&&t.exports&&(t.exports.saveAs=n);},{}],10:[function(e,t,r){r.read=function(e,t,r,n,a){var o,i,s=8*a-n-1,l=(1<<s)-1,p=l>>1,u=-7,c=r?a-1:0,d=r?-1:1,h=e[t+c];for(c+=d,o=h&(1<<-u)-1,h>>=-u,u+=s;0<u;o=256*o+e[t+c],c+=d,u-=8);for(i=o&(1<<-u)-1,o>>=-u,u+=n;0<u;i=256*i+e[t+c],c+=d,u-=8);if(0===o)o=1-p;else {if(o===l)return i?NaN:1/0*(h?-1:1);i+=Math.pow(2,n),o-=p;}return (h?-1:1)*i*Math.pow(2,o-n)},r.write=function(e,t,r,n,a,o){var i,s,l,p=8*o-a-1,u=(1<<p)-1,c=u>>1,d=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:o-1,m=n?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,i=u):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),2<=(t+=1<=i+c?d/l:d*Math.pow(2,1-c))*l&&(i++,l/=2),u<=i+c?(s=0,i=u):1<=i+c?(s=(t*l-1)*Math.pow(2,a),i+=c):(s=t*Math.pow(2,c-1)*Math.pow(2,a),i=0));8<=a;e[r+h]=255&s,h+=m,s/=256,a-=8);for(i=i<<a|s,p+=a;0<p;e[r+h]=255&i,h+=m,i/=256,p-=8);e[r+h-m]|=128*f;};},{}],11:[function(e,t,r){var n;function y(e,t){return e.b===t.b&&e.a===t.a}function g(e,t){return e.b<t.b||e.b===t.b&&e.a<=t.a}function v(e,t,r){var n=t.b-e.b,a=r.b-t.b;return 0<n+a?n<a?t.a-e.a+n/(n+a)*(e.a-r.a):t.a-r.a+a/(n+a)*(r.a-e.a):0}function b(e,t,r){var n=t.b-e.b,a=r.b-t.b;return 0<n+a?(t.a-r.a)*n+(t.a-e.a)*a:0}function _(e,t){return e.a<t.a||e.a===t.a&&e.b<=t.b}function x(e,t,r){var n=t.a-e.a,a=r.a-t.a;return 0<n+a?n<a?t.b-e.b+n/(n+a)*(e.b-r.b):t.b-r.b+a/(n+a)*(r.b-e.b):0}function S(e,t,r){var n=t.a-e.a,a=r.a-t.a;return 0<n+a?(t.b-r.b)*n+(t.b-e.b)*a:0}function w(e,t,r,n){return (e=e<0?0:e)<=(r=r<0?0:r)?0===r?(t+n)/2:t+e/(e+r)*(n-t):n+r/(e+r)*(t-n)}function i(e){var t=o(e.b);return a(t,e.c),a(t.b,e.c),s(t,e.a),t}function M(e,t){var r=!1,n=!1;e!==t&&(t.a!==e.a&&(n=!0,f(t.a,e.a)),t.d!==e.d&&(r=!0,l(t.d,e.d)),h(t,e),n||(a(t,e.a),e.a.c=e),r||(s(t,e.d),e.d.a=e));}function c(e){var t=e.b,r=!1;e.d!==e.b.d&&(r=!0,l(e.d,e.b.d)),e.c===e?f(e.a,null):(e.b.d.a=J(e),e.a.c=e.c,h(e,J(e)),r||s(e,e.d)),t.c===t?(f(t.a,null),l(t.d,null)):(e.d.a=J(t),t.a.c=t.c,h(t,J(t))),m(e);}function E(e){var t=o(e),r=t.b;return h(t,e.e),t.a=e.b.a,a(r,t.a),t.d=r.d=e.d,t=t.b,h(e.b,J(e.b)),h(e.b,t),e.b.a=t.a,t.b.a.c=t.b,t.b.d=e.b.d,t.f=e.f,t.b.f=e.b.f,t}function d(e,t){var r=!1,n=o(e),a=n.b;return t.d!==e.d&&(r=!0,l(t.d,e.d)),h(n,e.e),h(a,t),n.a=e.b.a,a.a=t.a,n.d=a.d=e.d,e.d.a=a,r||s(n,e.d),n}function o(e){var t=new K,r=new K,n=e.b.h;return (((r.h=n).b.h=t).h=e).b.h=r,t.b=r,((t.c=t).e=r).b=t,(r.c=r).e=t}function h(e,t){var r=e.c,n=t.c;r.b.e=t,(n.b.e=e).c=n,t.c=r;}function a(e,t){var r=t.f,n=new ee(t,r);for(r.e=n,r=(t.f=n).c=e;r.a=n,(r=r.c)!==e;);}function s(e,t){var r=t.d,n=new Q(t,r);for(r.b=n,(t.d=n).a=e,n.c=t.c,r=e;r.d=n,(r=r.e)!==e;);}function m(e){var t=e.h;e=e.b.h,(t.b.h=e).b.h=t;}function f(e,t){for(var r=e.c,n=r;n.a=t,(n=n.c)!==r;);r=e.f,((n=e.e).f=r).e=n;}function l(e,t){for(var r=e.a,n=r;n.d=t,(n=n.e)!==r;);r=e.d,((n=e.b).d=r).b=n;}function T(e){var t=0;return Math.abs(e[1])>Math.abs(e[0])&&(t=1),Math.abs(e[2])>Math.abs(e[t])&&(t=2),t}var C=4e150;function N(e,t){e.f+=t.f,e.b.f+=t.b.f;}function p(e,t,r){return e=e.a,t=t.a,r=r.a,t.b.a===e?r.b.a===e?g(t.a,r.a)?b(r.b.a,t.a,r.a)<=0:0<=b(t.b.a,r.a,t.a):b(r.b.a,e,r.a)<=0:r.b.a===e?0<=b(t.b.a,e,t.a):(t=v(t.b.a,e,t.a),(e=v(r.b.a,e,r.a))<=t)}function O(e){e.a.i=null;var t=e.e;t.a.c=t.c,t.c.a=t.a,e.e=null;}function u(e,t){c(e.a),e.c=!1,(e.a=t).i=e;}function L(e){for(var t=e.a.a;(e=de(e)).a.a===t;);return e.c&&(u(e,t=d(ce(e).a.b,e.a.e)),e=de(e)),e}function I(e,t,r){var n=new ue;return n.a=r,n.e=W(e.f,t.e,n),r.i=n}function P(e,t){switch(e.s){case 100130:return 0!=(1&t);case 100131:return 0!==t;case 100132:return 0<t;case 100133:return t<0;case 100134:return 2<=t||t<=-2}return !1}function R(e){var t=e.a,r=t.d;r.c=e.d,r.a=t,O(e);}function D(e,t,r){for(t=(e=t).a;e!==r;){e.c=!1;var n=ce(e),a=n.a;if(a.a!==t.a){if(!n.c){R(e);break}u(n,a=d(t.c.b,a.b));}t.c!==a&&(M(J(a),a),M(t,a)),R(e),t=n.a,e=n;}return t}function A(e,t,r,n,a,o){for(var i=!0;I(e,t,r.b),(r=r.c)!==n;);for(null===a&&(a=ce(t).a.b.c);(r=(n=ce(t)).a.b).a===a.a;)r.c!==a&&(M(J(r),r),M(J(a),r)),n.f=t.f-r.f,n.d=P(e,n.f),t.b=!0,!i&&B(e,t)&&(N(r,a),O(t),c(a)),i=!1,t=n,a=r;t.b=!0,o&&j(e,t);}function k(e,t,r,n,a){var o=[t.g[0],t.g[1],t.g[2]];t.d=null,t.d=e.o&&e.o(o,r,n,e.c)||null,null===t.d&&(a?e.n||(Z(e,100156),e.n=!0):t.d=r[0]);}function F(e,t,r){var n=[null,null,null,null];n[0]=t.a.d,n[1]=r.a.d,k(e,t.a,n,[.5,.5,0,0],!1),M(t,r);}function U(e,t,r,n,a){var o=Math.abs(t.b-e.b)+Math.abs(t.a-e.a),i=Math.abs(r.b-e.b)+Math.abs(r.a-e.a),s=a+1;n[a]=.5*i/(o+i),n[s]=.5*o/(o+i),e.g[0]+=n[a]*t.g[0]+n[s]*r.g[0],e.g[1]+=n[a]*t.g[1]+n[s]*r.g[1],e.g[2]+=n[a]*t.g[2]+n[s]*r.g[2];}function B(e,t){var r=ce(t),n=t.a,a=r.a;if(g(n.a,a.a)){if(0<b(a.b.a,n.a,a.a))return !1;if(y(n.a,a.a)){if(n.a!==a.a){r=e.e;var o=n.a.h;if(0<=o){var i=(r=r.b).d,s=r.e,l=r.c,p=l[o];i[p]=i[r.a],(l[i[p]]=p)<=--r.a&&(p<=1?le(r,p):g(s[i[p>>1]],s[i[p]])?le(r,p):pe(r,p)),s[o]=null,l[o]=r.b,r.b=o;}else for(r.c[-(o+1)]=null;0<r.a&&null===r.c[r.d[r.a-1]];)--r.a;F(e,J(a),n);}}else E(a.b),M(n,J(a)),t.b=r.b=!0;}else {if(b(n.b.a,a.a,n.a)<0)return !1;de(t).b=t.b=!0,E(n.b),M(J(a),n);}return !0}function G(e,t){var r=ce(t),n=t.a,a=r.a,o=n.a,i=a.a,s=n.b.a,l=a.b.a,p=new ee;if(b(s,e.a,o),b(l,e.a,i),o===i||Math.min(o.a,s.a)>Math.max(i.a,l.a))return !1;if(g(o,i)){if(0<b(l,o,i))return !1}else if(b(s,i,o)<0)return !1;var u,c,d=s,h=o,m=l,f=i;if(g(d,h)||(u=d,d=h,h=u),g(m,f)||(u=m,m=f,f=u),g(d,m)||(u=d,d=m,m=u,u=h,h=f,f=u),g(m,h)?g(h,f)?((u=v(d,m,h))+(c=v(m,h,f))<0&&(u=-u,c=-c),p.b=w(u,m.b,c,h.b)):((u=b(d,m,h))+(c=-b(d,f,h))<0&&(u=-u,c=-c),p.b=w(u,m.b,c,f.b)):p.b=(m.b+h.b)/2,_(d,h)||(u=d,d=h,h=u),_(m,f)||(u=m,m=f,f=u),_(d,m)||(u=d,d=m,m=u,u=h,h=f,f=u),_(m,h)?_(h,f)?((u=x(d,m,h))+(c=x(m,h,f))<0&&(u=-u,c=-c),p.a=w(u,m.a,c,h.a)):((u=S(d,m,h))+(c=-S(d,f,h))<0&&(u=-u,c=-c),p.a=w(u,m.a,c,f.a)):p.a=(m.a+h.a)/2,g(p,e.a)&&(p.b=e.a.b,p.a=e.a.a),d=g(o,i)?o:i,g(d,p)&&(p.b=d.b,p.a=d.a),y(p,o)||y(p,i))return B(e,t),!1;if(!y(s,e.a)&&0<=b(s,e.a,p)||!y(l,e.a)&&b(l,e.a,p)<=0){if(l===e.a)return E(n.b),M(a.b,n),n=ce(t=L(t)).a,D(e,ce(t),r),A(e,t,J(n),n,n,!0),!0;if(s!==e.a)return 0<=b(s,e.a,p)&&(de(t).b=t.b=!0,E(n.b),n.a.b=e.a.b,n.a.a=e.a.a),b(l,e.a,p)<=0&&(t.b=r.b=!0,E(a.b),a.a.b=e.a.b,a.a.a=e.a.a),!1;for(E(a.b),M(n.e,J(a)),i=(o=r=t).a.b.a;(o=de(o)).a.b.a===i;);return o=ce(t=o).a.b.c,r.a=J(a),A(e,t,(a=D(e,r,null)).c,n.b.c,o,!0),!0}return E(n.b),E(a.b),M(J(a),n),n.a.b=p.b,n.a.a=p.a,n.a.h=re(e.e,n.a),n=n.a,a=[0,0,0,0],p=[o.d,s.d,i.d,l.d],n.g[0]=n.g[1]=n.g[2]=0,U(n,o,s,a,0),U(n,i,l,a,2),k(e,n,p,a,!0),de(t).b=t.b=r.b=!0,!1}function j(e,t){for(var r=ce(t);;){for(;r.b;)r=ce(t=r);if(!t.b&&(null===(t=de(r=t))||!t.b))break;t.b=!1;var n,a=t.a,o=r.a;if(n=a.b.a!==o.b.a)e:{var i=ce(n=t),s=n.a,l=i.a,p=void 0;if(g(s.b.a,l.b.a)){if(b(s.b.a,l.b.a,s.a)<0){n=!1;break e}de(n).b=n.b=!0,p=E(s),M(l.b,p),p.d.c=n.d;}else {if(0<b(l.b.a,s.b.a,l.a)){n=!1;break e}n.b=i.b=!0,p=E(l),M(s.e,l.b),p.b.d.c=n.d;}n=!0;}if(n&&(r.c?(O(r),c(o),o=(r=ce(t)).a):t.c&&(O(t),c(a),a=(t=de(r)).a)),a.a!==o.a)if(a.b.a===o.b.a||t.c||r.c||a.b.a!==e.a&&o.b.a!==e.a)B(e,t);else if(G(e,t))break;a.a===o.a&&a.b.a===o.b.a&&(N(o,a),O(t),c(a),t=de(r));}}function V(e,t){for(var r=(e.a=t).c;null===r.i;)if((r=r.c)===t.c){r=e;var n=t;(i=new ue).a=n.c.b;for(var a=(l=r.f).a;null!==(a=a.a).b&&!l.c(l.b,i,a.b););var o=ce(l=a.b),i=l.a;a=o.a;if(0===b(i.b.a,n,i.a))y((i=l.a).a,n)||y(i.b.a,n)||(E(i.b),l.c&&(c(i.c),l.c=!1),M(n.c,i),V(r,n));else {var s=g(a.b.a,i.b.a)?l:o;o=void 0;l.d||s.c?(o=s===l?d(n.c.b,i.e):d(a.b.c.b,n.c).b,s.c?u(s,o):((l=I(i=r,l,o)).f=de(l).f+l.a.f,l.d=P(i,l.f)),V(r,n)):A(r,l,n.c,n.c,null,!0);}return}if(l=(i=ce(r=L(r.i))).a,(i=D(e,i,null)).c===l){i=(l=i).c,a=ce(r),o=r.a,s=a.a;var l,p=!1;o.b.a!==s.b.a&&G(e,r),y(o.a,e.a)&&(M(J(i),o),i=ce(r=L(r)).a,D(e,ce(r),a),p=!0),y(s.a,e.a)&&(M(l,J(s)),l=D(e,a,null),p=!0),p?A(e,r,l.c,i,i,!0):(n=g(s.a,o.a)?J(s):o,A(e,r,n=d(l.c.b,n),n.c,n.c,!1),n.b.i.c=!0,j(e,r));}else A(e,r,i.c,l,l,!0);}function z(e,t){var r=new ue,n=i(e.b);n.a.b=C,n.a.a=t,n.b.a.b=-C,n.b.a.a=t,e.a=n.b.a,r.a=n,r.f=0,r.d=!1,r.c=!1,r.h=!0,r.b=!1,n=W(n=e.f,n.a,r),r.e=n;}function H(e){this.a=new X,this.b=e,this.c=p;}function W(e,t,r){for(;null!==(t=t.c).b&&!e.c(e.b,t.b,r););return e=new X(r,t.a,t),t.a.c=e,t.a=e}function X(e,t,r){this.b=e||null,this.a=t||this,this.c=r||this;}function q(){this.d=0,this.p=this.b=this.q=null,this.j=[0,0,0],this.s=100130,this.n=!1,this.o=this.a=this.e=this.f=null,this.m=!1,this.c=this.r=this.i=this.k=this.l=this.h=null;}function Y(e,t){if(e.d!==t)for(;e.d!==t;)if(e.d<t)switch(e.d){case 0:Z(e,100151),e.u(null);break;case 1:Z(e,100152),e.t();}else switch(e.d){case 2:Z(e,100154),e.v();break;case 1:Z(e,100153),e.w();}}function Z(e,t){e.p&&e.p(t,e.c);}function Q(e,t){this.b=e||this,this.d=t||this,this.a=null,this.c=!1;}function K(){(this.h=this).i=this.d=this.a=this.e=this.c=this.b=null,this.f=0;}function J(e){return e.b.e}function $(){this.c=new ee,this.a=new Q,this.b=new K,this.d=new K,this.b.b=this.d,this.d.b=this.b;}function ee(e,t){this.e=e||this,this.f=t||this,this.d=this.c=null,this.g=[0,0,0],this.h=this.a=this.b=0;}function te(){this.c=[],this.d=null,this.a=0,this.e=!1,this.b=new ae;}function re(e,t){if(e.e){var r,n=e.b,a=++n.a;return 2*a>n.f&&(n.f*=2,n.c=oe(n.c,n.f+1)),0===n.b?r=a:(r=n.b,n.b=n.c[n.b]),n.e[r]=t,n.c[r]=a,n.d[a]=r,n.h&&pe(n,a),r}return n=e.a++,e.c[n]=t,-(n+1)}function ne(e){if(0===e.a)return se(e.b);var t=e.c[e.d[e.a-1]];if(0!==e.b.a&&g(ie(e.b),t))return se(e.b);for(;--e.a,0<e.a&&null===e.c[e.d[e.a-1]];);return t}function ae(){this.d=oe([0],33),this.e=[null,null],this.c=[0,0],this.a=0,this.f=32,this.b=0,this.h=!1,this.d[1]=1;}function oe(e,t){for(var r=Array(t),n=0;n<e.length;n++)r[n]=e[n];for(;n<t;n++)r[n]=0;return r}function ie(e){return e.e[e.d[1]]}function se(e){var t=e.d,r=e.e,n=e.c,a=t[1],o=r[a];return 0<e.a&&(t[1]=t[e.a],n[t[1]]=1,r[a]=null,n[a]=e.b,e.b=a,0<--e.a&&le(e,1)),o}function le(e,t){for(var r=e.d,n=e.e,a=e.c,o=t,i=r[o];;){var s=o<<1;s<e.a&&g(n[r[s+1]],n[r[s]])&&(s+=1);var l=r[s];if(s>e.a||g(n[i],n[l])){a[r[o]=i]=o;break}a[r[o]=l]=o,o=s;}}function pe(e,t){for(var r=e.d,n=e.e,a=e.c,o=t,i=r[o];;){var s=o>>1,l=r[s];if(0==s||g(n[l],n[i])){a[r[o]=i]=o;break}a[r[o]=l]=o,o=s;}}function ue(){this.e=this.a=null,this.f=0,this.c=this.b=this.h=this.d=!1;}function ce(e){return e.e.c.b}function de(e){return e.e.a.b}(n=q.prototype).x=function(){Y(this,0);},n.B=function(e,t){switch(e){case 100142:return;case 100140:switch(t){case 100130:case 100131:case 100132:case 100133:case 100134:return void(this.s=t)}break;case 100141:return void(this.m=!!t);default:return void Z(this,100900)}Z(this,100901);},n.y=function(e){switch(e){case 100142:return 0;case 100140:return this.s;case 100141:return this.m;default:Z(this,100900);}return !1},n.A=function(e,t,r){this.j[0]=e,this.j[1]=t,this.j[2]=r;},n.z=function(e,t){var r=t||null;switch(e){case 100100:case 100106:this.h=r;break;case 100104:case 100110:this.l=r;break;case 100101:case 100107:this.k=r;break;case 100102:case 100108:this.i=r;break;case 100103:case 100109:this.p=r;break;case 100105:case 100111:this.o=r;break;case 100112:this.r=r;break;default:Z(this,100900);}},n.C=function(e,t){var r=!1,n=[0,0,0];Y(this,2);for(var a=0;a<3;++a){var o=e[a];o<-1e150&&(o=-1e150,r=!0),1e150<o&&(o=1e150,r=!0),n[a]=o;}r&&Z(this,100155),null===(r=this.q)?M(r=i(this.b),r.b):(E(r),r=r.e),r.a.d=t,r.a.g[0]=n[0],r.a.g[1]=n[1],r.a.g[2]=n[2],r.f=1,r.b.f=-1,this.q=r;},n.u=function(e){Y(this,0),this.d=1,this.b=new $,this.c=e;},n.t=function(){Y(this,1),this.d=2,this.q=null;},n.v=function(){Y(this,2),this.d=1;},n.w=function(){Y(this,1),this.d=0;var e,t,r=!1,n=[l=this.j[0],a=this.j[1],i=this.j[2]];if(0===l&&0===a&&0===i){for(var a=[-2e150,-2e150,-2e150],o=[2e150,2e150,2e150],i=[],s=[],l=(r=this.b.c).e;l!==r;l=l.e)for(var p=0;p<3;++p){var u=l.g[p];u<o[p]&&(o[p]=u,s[p]=l),u>a[p]&&(a[p]=u,i[p]=l);}if(l=0,a[1]-o[1]>a[0]-o[0]&&(l=1),a[2]-o[2]>a[l]-o[l]&&(l=2),o[l]>=a[l])n[0]=0,n[1]=0,n[2]=1;else {for(a=0,o=s[l],i=i[l],s=[0,0,0],o=[o.g[0]-i.g[0],o.g[1]-i.g[1],o.g[2]-i.g[2]],p=[0,0,0],l=r.e;l!==r;l=l.e)p[0]=l.g[0]-i.g[0],p[1]=l.g[1]-i.g[1],p[2]=l.g[2]-i.g[2],s[0]=o[1]*p[2]-o[2]*p[1],s[1]=o[2]*p[0]-o[0]*p[2],s[2]=o[0]*p[1]-o[1]*p[0],a<(u=s[0]*s[0]+s[1]*s[1]+s[2]*s[2])&&(a=u,n[0]=s[0],n[1]=s[1],n[2]=s[2]);a<=0&&(n[0]=n[1]=n[2]=0,n[T(o)]=1);}r=!0;}for(s=T(n),l=this.b.c,a=(s+1)%3,i=(s+2)%3,s=0<n[s]?1:-1,n=l.e;n!==l;n=n.e)n.b=n.g[a],n.a=s*n.g[i];if(r){for(n=0,l=(r=this.b.a).b;l!==r;l=l.b)if(!((a=l.a).f<=0))for(;n+=(a.a.b-a.b.a.b)*(a.a.a+a.b.a.a),(a=a.e)!==l.a;);if(n<0)for(r=(n=this.b.c).e;r!==n;r=r.e)r.a=-r.a;}for(this.n=!1,l=(n=this.b.b).h;l!==n;l=r)r=l.h,a=l.e,y(l.a,l.b.a)&&l.e.e!==l&&(F(this,a,l),c(l),a=(l=a).e),a.e===l&&(a!==l&&(a!==r&&a!==r.b||(r=r.h),c(a)),l!==r&&l!==r.b||(r=r.h),c(l));for(this.e=n=new te,l=(r=this.b.c).e;l!==r;l=l.e)l.h=re(n,l);for(!function(e){e.d=[];for(var t=0;t<e.a;t++)e.d[t]=t;e.d.sort(function(r){return function(e,t){return g(r[e],r[t])?1:-1}}(e.c)),e.e=!0,function(e){for(var t=e.a;1<=t;--t)le(e,t);e.h=!0;}(e.b);}(n),this.f=new H(this),z(this,-C),z(this,C);null!==(n=ne(this.e));){for(;;){e:if(l=this.e,0===l.a)r=ie(l.b);else if(r=l.c[l.d[l.a-1]],0!==l.b.a&&(l=ie(l.b),g(l,r))){r=l;break e}if(null===r||!y(r,n))break;r=ne(this.e),F(this,n.c,r.c);}V(this,n);}for(this.a=this.f.a.a.b.a.a,n=0;null!==(r=this.f.a.a.b);)r.h||++n,O(r);for(this.f=null,(n=this.e).b=null,n.d=null,this.e=n.c=null,l=(n=this.b).a.b;l!==n.a;l=r)r=l.b,(l=l.a).e.e===l&&(N(l.c,l),c(l));if(!this.n){if(n=this.b,this.m)for(l=n.b.h;l!==n.b;l=r)r=l.h,l.b.d.c!==l.d.c?l.f=l.d.c?1:-1:c(l);else for(l=n.a.b;l!==n.a;l=r)if(r=l.b,l.c){for(l=l.a;g(l.b.a,l.a);l=l.c.b);for(;g(l.a,l.b.a);l=l.e);for(a=l.c.b,i=void 0;l.e!==a;)if(g(l.b.a,a.a)){for(;a.e!==l&&(g((t=a.e).b.a,t.a)||b(a.a,a.b.a,a.e.b.a)<=0);)a=(i=d(a.e,a)).b;a=a.c.b;}else {for(;a.e!==l&&(g((e=l.c.b).a,e.b.a)||0<=b(l.b.a,l.a,l.c.b.a));)l=(i=d(l,l.c.b)).b;l=l.e;}for(;a.e.e!==l;)a=(i=d(a.e,a)).b;}if(this.h||this.i||this.k||this.l)if(this.m){for(r=(n=this.b).a.b;r!==n.a;r=r.b)if(r.c){for(this.h&&this.h(2,this.c),l=r.a;this.k&&this.k(l.a.d,this.c),(l=l.e)!==r.a;);this.i&&this.i(this.c);}}else {for(n=this.b,r=!!this.l,l=!1,a=-1,i=n.a.d;i!==n.a;i=i.d)if(i.c)for(l||(this.h&&this.h(4,this.c),l=!0),s=i.a;r&&(a!==(o=s.b.d.c?0:1)&&(a=o,this.l&&this.l(!!a,this.c))),this.k&&this.k(s.a.d,this.c),(s=s.e)!==i.a;);l&&this.i&&this.i(this.c);}if(this.r){for(l=(n=this.b).a.b;l!==n.a;l=r)if(r=l.b,!l.c){for(i=(a=l.a).e,s=void 0;i=(s=i).e,(s.d=null)===s.b.d&&(s.c===s?f(s.a,null):(s.a.c=s.c,h(s,J(s))),(o=s.b).c===o?f(o.a,null):(o.a.c=o.c,h(o,J(o))),m(s)),s!==a;);a=l.d,((l=l.b).d=a).b=l;}return this.r(this.b),void(this.c=this.b=null)}}this.b=this.c=null;},this.libtess={GluTesselator:q,windingRule:{GLU_TESS_WINDING_ODD:100130,GLU_TESS_WINDING_NONZERO:100131,GLU_TESS_WINDING_POSITIVE:100132,GLU_TESS_WINDING_NEGATIVE:100133,GLU_TESS_WINDING_ABS_GEQ_TWO:100134},primitiveType:{GL_LINE_LOOP:2,GL_TRIANGLES:4,GL_TRIANGLE_STRIP:5,GL_TRIANGLE_FAN:6},errorType:{GLU_TESS_MISSING_BEGIN_POLYGON:100151,GLU_TESS_MISSING_END_POLYGON:100153,GLU_TESS_MISSING_BEGIN_CONTOUR:100152,GLU_TESS_MISSING_END_CONTOUR:100154,GLU_TESS_COORD_TOO_LARGE:100155,GLU_TESS_NEED_COMBINE_CALLBACK:100156},gluEnum:{GLU_TESS_MESH:100112,GLU_TESS_TOLERANCE:100142,GLU_TESS_WINDING_RULE:100140,GLU_TESS_BOUNDARY_ONLY:100141,GLU_INVALID_ENUM:100900,GLU_INVALID_VALUE:100901,GLU_TESS_BEGIN:100100,GLU_TESS_VERTEX:100101,GLU_TESS_END:100102,GLU_TESS_ERROR:100103,GLU_TESS_EDGE_FLAG:100104,GLU_TESS_COMBINE:100105,GLU_TESS_BEGIN_DATA:100106,GLU_TESS_VERTEX_DATA:100107,GLU_TESS_END_DATA:100108,GLU_TESS_ERROR_DATA:100109,GLU_TESS_EDGE_FLAG_DATA:100110,GLU_TESS_COMBINE_DATA:100111}},q.prototype.gluDeleteTess=q.prototype.x,q.prototype.gluTessProperty=q.prototype.B,q.prototype.gluGetTessProperty=q.prototype.y,q.prototype.gluTessNormal=q.prototype.A,q.prototype.gluTessCallback=q.prototype.z,q.prototype.gluTessVertex=q.prototype.C,q.prototype.gluTessBeginPolygon=q.prototype.u,q.prototype.gluTessBeginContour=q.prototype.t,q.prototype.gluTessEndContour=q.prototype.v,q.prototype.gluTessEndPolygon=q.prototype.w,void 0!==t&&(t.exports=this.libtess);},{}],12:[function(e,t,r){function N(e,t,r,n){for(var a=e[t++],o=1<<a,i=1+o,s=1+i,l=a+1,p=(1<<l)-1,u=0,c=0,d=0,h=e[t++],m=new Int32Array(4096),f=null;;){for(;u<16&&0!==h;)c|=e[t++]<<u,u+=8,1===h?h=e[t++]:--h;if(u<l)break;var y=c&p;if(c>>=l,u-=l,y!=o){if(y==i)break;for(var g=y<s?y:f,v=0,b=g;o<b;)b=m[b]>>8,++v;var _=b;if(n<d+v+(g!==y?1:0))return void console.log("Warning, gif stream longer than expected.");r[d++]=_;var x=d+=v;for(g!==y&&(r[d++]=_),b=g;v--;)b=m[b],r[--x]=255&b,b>>=8;null!==f&&s<4096&&(m[s++]=f<<8|_,p+1<=s&&l<12&&(++l,p=p<<1|1)),f=y;}else s=1+i,p=(1<<(l=a+1))-1,f=null;}return d!==n&&console.log("Warning, gif stream shorter than expected."),r}try{r.GifWriter=function(g,e,t,r){var v=0,n=void 0===(r=void 0===r?{}:r).loop?null:r.loop,b=void 0===r.palette?null:r.palette;if(e<=0||t<=0||65535<e||65535<t)throw new Error("Width/Height invalid.");function _(e){var t=e.length;if(t<2||256<t||t&t-1)throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");return t}g[v++]=71,g[v++]=73,g[v++]=70,g[v++]=56,g[v++]=57,g[v++]=97;var a=0,o=0;if(null!==b){for(var i=_(b);i>>=1;)++a;if(i=1<<a,--a,void 0!==r.background){if(i<=(o=r.background))throw new Error("Background index out of range.");if(0===o)throw new Error("Background index explicitly passed as 0.")}}if(g[v++]=255&e,g[v++]=e>>8&255,g[v++]=255&t,g[v++]=t>>8&255,g[v++]=(null!==b?128:0)|a,g[v++]=o,g[v++]=0,null!==b)for(var s=0,l=b.length;s<l;++s){var p=b[s];g[v++]=p>>16&255,g[v++]=p>>8&255,g[v++]=255&p;}if(null!==n){if(n<0||65535<n)throw new Error("Loop count invalid.");g[v++]=33,g[v++]=255,g[v++]=11,g[v++]=78,g[v++]=69,g[v++]=84,g[v++]=83,g[v++]=67,g[v++]=65,g[v++]=80,g[v++]=69,g[v++]=50,g[v++]=46,g[v++]=48,g[v++]=3,g[v++]=1,g[v++]=255&n,g[v++]=n>>8&255,g[v++]=0;}var x=!1;this.addFrame=function(e,t,r,n,a,o){if(!0===x&&(--v,x=!1),o=void 0===o?{}:o,e<0||t<0||65535<e||65535<t)throw new Error("x/y invalid.");if(r<=0||n<=0||65535<r||65535<n)throw new Error("Width/Height invalid.");if(a.length<r*n)throw new Error("Not enough pixels for the frame size.");var i=!0,s=o.palette;if(null==s&&(i=!1,s=b),null==s)throw new Error("Must supply either a local or global palette.");for(var l=_(s),p=0;l>>=1;)++p;l=1<<p;var u=void 0===o.delay?0:o.delay,c=void 0===o.disposal?0:o.disposal;if(c<0||3<c)throw new Error("Disposal out of range.");var d=!1,h=0;if(void 0!==o.transparent&&null!==o.transparent&&(d=!0,(h=o.transparent)<0||l<=h))throw new Error("Transparent color index.");if(0===c&&!d&&0===u||(g[v++]=33,g[v++]=249,g[v++]=4,g[v++]=c<<2|(!0===d?1:0),g[v++]=255&u,g[v++]=u>>8&255,g[v++]=h,g[v++]=0),g[v++]=44,g[v++]=255&e,g[v++]=e>>8&255,g[v++]=255&t,g[v++]=t>>8&255,g[v++]=255&r,g[v++]=r>>8&255,g[v++]=255&n,g[v++]=n>>8&255,g[v++]=!0===i?128|p-1:0,!0===i)for(var m=0,f=s.length;m<f;++m){var y=s[m];g[v++]=y>>16&255,g[v++]=y>>8&255,g[v++]=255&y;}return v=function(t,r,e,n){t[r++]=e;var a=r++,o=1<<e,i=o-1,s=1+o,l=1+s,p=e+1,u=0,c=0;function d(e){for(;e<=u;)t[r++]=255&c,c>>=8,u-=8,r===a+256&&(t[a]=255,a=r++);}function h(e){c|=e<<u,u+=p,d(8);}var m=n[0]&i,f={};h(o);for(var y=1,g=n.length;y<g;++y){var v=n[y]&i,b=m<<8|v,_=f[b];if(void 0===_){for(c|=m<<u,u+=p;8<=u;)t[r++]=255&c,c>>=8,u-=8,r===a+256&&(t[a]=255,a=r++);4096===l?(h(o),l=1+s,p=e+1,f={}):(1<<p<=l&&++p,f[b]=l++),m=v;}else m=_;}h(m),h(s),d(1),a+1===r?t[a]=0:(t[a]=r-a-1,t[r++]=0);return r}(g,v,p<2?2:p,a)},this.end=function(){return !1===x&&(g[v++]=59,x=!0),v},this.getOutputBuffer=function(){return g},this.setOutputBuffer=function(e){g=e;},this.getOutputBufferPosition=function(){return v},this.setOutputBufferPosition=function(e){v=e;};},r.GifReader=function(x){var e=0;if(71!==x[e++]||73!==x[e++]||70!==x[e++]||56!==x[e++]||56!=(x[e++]+1&253)||97!==x[e++])throw new Error("Invalid GIF 87a/89a header.");var S=x[e++]|x[e++]<<8,t=x[e++]|x[e++]<<8,r=x[e++],n=r>>7,a=1<<1+(7&r);x[e++],x[e++];var o=null,i=null;n&&(o=e,e+=3*(i=a));var s=!0,l=[],p=0,u=null,c=0,d=null;for(this.width=S,this.height=t;s&&e<x.length;)switch(x[e++]){case 33:switch(x[e++]){case 255:if(11!==x[e]||78==x[e+1]&&69==x[e+2]&&84==x[e+3]&&83==x[e+4]&&67==x[e+5]&&65==x[e+6]&&80==x[e+7]&&69==x[e+8]&&50==x[e+9]&&46==x[e+10]&&48==x[e+11]&&3==x[e+12]&&1==x[e+13]&&0==x[e+16])e+=14,d=x[e++]|x[e++]<<8,e++;else for(e+=12;;){if(!(0<=(C=x[e++])))throw Error("Invalid block size");if(0===C)break;e+=C;}break;case 249:if(4!==x[e++]||0!==x[e+4])throw new Error("Invalid graphics extension block.");var h=x[e++];p=x[e++]|x[e++]<<8,u=x[e++],0==(1&h)&&(u=null),c=h>>2&7,e++;break;case 254:for(;;){if(!(0<=(C=x[e++])))throw Error("Invalid block size");if(0===C)break;e+=C;}break;default:throw new Error("Unknown graphic control label: 0x"+x[e-1].toString(16))}break;case 44:var m=x[e++]|x[e++]<<8,f=x[e++]|x[e++]<<8,y=x[e++]|x[e++]<<8,g=x[e++]|x[e++]<<8,v=x[e++],b=v>>6&1,_=1<<1+(7&v),w=o,M=i,E=!1;if(v>>7){E=!0;w=e,e+=3*(M=_);}var T=e;for(e++;;){var C;if(!(0<=(C=x[e++])))throw Error("Invalid block size");if(0===C)break;e+=C;}l.push({x:m,y:f,width:y,height:g,has_local_palette:E,palette_offset:w,palette_size:M,data_offset:T,data_length:e-T,transparent_index:u,interlaced:!!b,delay:p,disposal:c});break;case 59:s=!1;break;default:throw new Error("Unknown gif block: 0x"+x[e-1].toString(16))}this.numFrames=function(){return l.length},this.loopCount=function(){return d},this.frameInfo=function(e){if(e<0||e>=l.length)throw new Error("Frame index out of range.");return l[e]},this.decodeAndBlitFrameBGRA=function(e,t){var r=this.frameInfo(e),n=r.width*r.height,a=new Uint8Array(n);N(x,r.data_offset,a,n);var o=r.palette_offset,i=r.transparent_index;null===i&&(i=256);var s=r.width,l=S-s,p=s,u=4*(r.y*S+r.x),c=4*((r.y+r.height)*S+r.x),d=u,h=4*l;!0===r.interlaced&&(h+=4*S*7);for(var m=8,f=0,y=a.length;f<y;++f){var g=a[f];if(0===p&&(p=s,c<=(d+=h)&&(h=4*l+4*S*(m-1),d=u+(s+l)*(m<<1),m>>=1)),g===i)d+=4;else {var v=x[o+3*g],b=x[o+3*g+1],_=x[o+3*g+2];t[d++]=_,t[d++]=b,t[d++]=v,t[d++]=255;}--p;}},this.decodeAndBlitFrameRGBA=function(e,t){var r=this.frameInfo(e),n=r.width*r.height,a=new Uint8Array(n);N(x,r.data_offset,a,n);var o=r.palette_offset,i=r.transparent_index;null===i&&(i=256);var s=r.width,l=S-s,p=s,u=4*(r.y*S+r.x),c=4*((r.y+r.height)*S+r.x),d=u,h=4*l;!0===r.interlaced&&(h+=4*S*7);for(var m=8,f=0,y=a.length;f<y;++f){var g=a[f];if(0===p&&(p=s,c<=(d+=h)&&(h=4*l+4*S*(m-1),d=u+(s+l)*(m<<1),m>>=1)),g===i)d+=4;else {var v=x[o+3*g],b=x[o+3*g+1],_=x[o+3*g+2];t[d++]=v,t[d++]=b,t[d++]=_,t[d++]=255;}--p;}};};}catch(e){}},{}],13:[function(jr,t,r){(function(Gr){var e;e=this,function(E){function e(e){if(null==this)throw TypeError();var t=String(this),r=t.length,n=e?Number(e):0;if(n!=n&&(n=0),!(n<0||r<=n)){var a,o=t.charCodeAt(n);return 55296<=o&&o<=56319&&n+1<r&&56320<=(a=t.charCodeAt(n+1))&&a<=57343?1024*(o-55296)+a-56320+65536:o}}var t;String.prototype.codePointAt||((t=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t;}catch(e){}return r}())?t(String.prototype,"codePointAt",{value:e,configurable:!0,writable:!0}):String.prototype.codePointAt=e);var l=0,o=-3;function r(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288);}function i(e,t){this.source=e,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=t,this.destLen=0,this.ltree=new r,this.dtree=new r;}var s=new r,p=new r,u=new Uint8Array(30),c=new Uint16Array(30),d=new Uint8Array(30),h=new Uint16Array(30),m=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),f=new r,y=new Uint8Array(320);function n(e,t,r,n){var a,o;for(a=0;a<r;++a)e[a]=0;for(a=0;a<30-r;++a)e[a+r]=a/r|0;for(o=n,a=0;a<30;++a)t[a]=o,o+=1<<e[a];}var g=new Uint16Array(16);function v(e,t,r,n){var a,o;for(a=0;a<16;++a)e.table[a]=0;for(a=0;a<n;++a)e.table[t[r+a]]++;for(a=o=e.table[0]=0;a<16;++a)g[a]=o,o+=e.table[a];for(a=0;a<n;++a)t[r+a]&&(e.trans[g[t[r+a]]++]=a);}function b(e){e.bitcount--||(e.tag=e.source[e.sourceIndex++],e.bitcount=7);var t=1&e.tag;return e.tag>>>=1,t}function _(e,t,r){if(!t)return r;for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var n=e.tag&65535>>>16-t;return e.tag>>>=t,e.bitcount-=t,n+r}function x(e,t){for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;for(var r=0,n=0,a=0,o=e.tag;n=2*n+(1&o),o>>>=1,++a,r+=t.table[a],0<=(n-=t.table[a]););return e.tag=o,e.bitcount-=a,t.trans[r+n]}function S(e,t,r){var n,a,o,i,s,l;for(n=_(e,5,257),a=_(e,5,1),o=_(e,4,4),i=0;i<19;++i)y[i]=0;for(i=0;i<o;++i){var p=_(e,3,0);y[m[i]]=p;}for(v(f,y,0,19),s=0;s<n+a;){var u=x(e,f);switch(u){case 16:var c=y[s-1];for(l=_(e,2,3);l;--l)y[s++]=c;break;case 17:for(l=_(e,3,3);l;--l)y[s++]=0;break;case 18:for(l=_(e,7,11);l;--l)y[s++]=0;break;default:y[s++]=u;}}v(t,y,0,n),v(r,y,n,a);}function w(e,t,r){for(;;){var n,a,o,i,s=x(e,t);if(256===s)return l;if(s<256)e.dest[e.destLen++]=s;else for(n=_(e,u[s-=257],c[s]),a=x(e,r),i=o=e.destLen-_(e,d[a],h[a]);i<o+n;++i)e.dest[e.destLen++]=e.dest[i];}}function M(e){for(var t,r;8<e.bitcount;)e.sourceIndex--,e.bitcount-=8;if((t=256*(t=e.source[e.sourceIndex+1])+e.source[e.sourceIndex])!==(65535&~(256*e.source[e.sourceIndex+3]+e.source[e.sourceIndex+2])))return o;for(e.sourceIndex+=4,r=t;r;--r)e.dest[e.destLen++]=e.source[e.sourceIndex++];return e.bitcount=0,l}!function(e,t){var r;for(r=0;r<7;++r)e.table[r]=0;for(e.table[7]=24,e.table[8]=152,e.table[9]=112,r=0;r<24;++r)e.trans[r]=256+r;for(r=0;r<144;++r)e.trans[24+r]=r;for(r=0;r<8;++r)e.trans[168+r]=280+r;for(r=0;r<112;++r)e.trans[176+r]=144+r;for(r=0;r<5;++r)t.table[r]=0;for(t.table[5]=32,r=0;r<32;++r)t.trans[r]=r;}(s,p),n(u,c,4,3),n(d,h,2,1),u[28]=0,c[28]=258;var a=function(e,t){var r,n,a=new i(e,t);do{switch(r=b(a),_(a,2,0)){case 0:n=M(a);break;case 1:n=w(a,s,p);break;case 2:S(a,a.ltree,a.dtree),n=w(a,a.ltree,a.dtree);break;default:n=o;}if(n!==l)throw new Error("Data error")}while(!r);return a.destLen<a.dest.length?"function"==typeof a.dest.slice?a.dest.slice(0,a.destLen):a.dest.subarray(0,a.destLen):a.dest};function T(e,t,r,n,a){return Math.pow(1-a,3)*e+3*Math.pow(1-a,2)*a*t+3*(1-a)*Math.pow(a,2)*r+Math.pow(a,3)*n}function C(){this.x1=Number.NaN,this.y1=Number.NaN,this.x2=Number.NaN,this.y2=Number.NaN;}function A(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1;}function N(e){throw new Error(e)}function O(e,t){e||N(t);}C.prototype.isEmpty=function(){return isNaN(this.x1)||isNaN(this.y1)||isNaN(this.x2)||isNaN(this.y2)},C.prototype.addPoint=function(e,t){"number"==typeof e&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=e,this.x2=e),e<this.x1&&(this.x1=e),e>this.x2&&(this.x2=e)),"number"==typeof t&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=t,this.y2=t),t<this.y1&&(this.y1=t),t>this.y2&&(this.y2=t));},C.prototype.addX=function(e){this.addPoint(e,null);},C.prototype.addY=function(e){this.addPoint(null,e);},C.prototype.addBezier=function(e,t,r,n,a,o,i,s){var l=this,p=[e,t],u=[r,n],c=[a,o],d=[i,s];this.addPoint(e,t),this.addPoint(i,s);for(var h=0;h<=1;h++){var m=6*p[h]-12*u[h]+6*c[h],f=-3*p[h]+9*u[h]-9*c[h]+3*d[h],y=3*u[h]-3*p[h];if(0!=f){var g=Math.pow(m,2)-4*y*f;if(!(g<0)){var v=(-m+Math.sqrt(g))/(2*f);0<v&&v<1&&(0===h&&l.addX(T(p[h],u[h],c[h],d[h],v)),1===h&&l.addY(T(p[h],u[h],c[h],d[h],v)));var b=(-m-Math.sqrt(g))/(2*f);0<b&&b<1&&(0===h&&l.addX(T(p[h],u[h],c[h],d[h],b)),1===h&&l.addY(T(p[h],u[h],c[h],d[h],b)));}}else {if(0==m)continue;var _=-y/m;0<_&&_<1&&(0===h&&l.addX(T(p[h],u[h],c[h],d[h],_)),1===h&&l.addY(T(p[h],u[h],c[h],d[h],_)));}}},C.prototype.addQuad=function(e,t,r,n,a,o){var i=e+2/3*(r-e),s=t+2/3*(n-t),l=i+1/3*(a-e),p=s+1/3*(o-t);this.addBezier(e,t,i,s,l,p,a,o);},A.prototype.moveTo=function(e,t){this.commands.push({type:"M",x:e,y:t});},A.prototype.lineTo=function(e,t){this.commands.push({type:"L",x:e,y:t});},A.prototype.curveTo=A.prototype.bezierCurveTo=function(e,t,r,n,a,o){this.commands.push({type:"C",x1:e,y1:t,x2:r,y2:n,x:a,y:o});},A.prototype.quadTo=A.prototype.quadraticCurveTo=function(e,t,r,n){this.commands.push({type:"Q",x1:e,y1:t,x:r,y:n});},A.prototype.close=A.prototype.closePath=function(){this.commands.push({type:"Z"});},A.prototype.extend=function(e){if(e.commands)e=e.commands;else if(e instanceof C){var t=e;return this.moveTo(t.x1,t.y1),this.lineTo(t.x2,t.y1),this.lineTo(t.x2,t.y2),this.lineTo(t.x1,t.y2),void this.close()}Array.prototype.push.apply(this.commands,e);},A.prototype.getBoundingBox=function(){for(var e=new C,t=0,r=0,n=0,a=0,o=0;o<this.commands.length;o++){var i=this.commands[o];switch(i.type){case"M":e.addPoint(i.x,i.y),t=n=i.x,r=a=i.y;break;case"L":e.addPoint(i.x,i.y),n=i.x,a=i.y;break;case"Q":e.addQuad(n,a,i.x1,i.y1,i.x,i.y),n=i.x,a=i.y;break;case"C":e.addBezier(n,a,i.x1,i.y1,i.x2,i.y2,i.x,i.y),n=i.x,a=i.y;break;case"Z":n=t,a=r;break;default:throw new Error("Unexpected path command "+i.type)}}return e.isEmpty()&&e.addPoint(0,0),e},A.prototype.draw=function(e){e.beginPath();for(var t=0;t<this.commands.length;t+=1){var r=this.commands[t];"M"===r.type?e.moveTo(r.x,r.y):"L"===r.type?e.lineTo(r.x,r.y):"C"===r.type?e.bezierCurveTo(r.x1,r.y1,r.x2,r.y2,r.x,r.y):"Q"===r.type?e.quadraticCurveTo(r.x1,r.y1,r.x,r.y):"Z"===r.type&&e.closePath();}this.fill&&(e.fillStyle=this.fill,e.fill()),this.stroke&&(e.strokeStyle=this.stroke,e.lineWidth=this.strokeWidth,e.stroke());},A.prototype.toPathData=function(o){function e(){for(var e,t=arguments,r="",n=0;n<arguments.length;n+=1){var a=t[n];0<=a&&0<n&&(r+=" "),r+=(e=a,Math.round(e)===e?""+Math.round(e):e.toFixed(o));}return r}o=void 0!==o?o:2;for(var t="",r=0;r<this.commands.length;r+=1){var n=this.commands[r];"M"===n.type?t+="M"+e(n.x,n.y):"L"===n.type?t+="L"+e(n.x,n.y):"C"===n.type?t+="C"+e(n.x1,n.y1,n.x2,n.y2,n.x,n.y):"Q"===n.type?t+="Q"+e(n.x1,n.y1,n.x,n.y):"Z"===n.type&&(t+="Z");}return t},A.prototype.toSVG=function(e){var t='<path d="';return t+=this.toPathData(e),t+='"',this.fill&&"black"!==this.fill&&(null===this.fill?t+=' fill="none"':t+=' fill="'+this.fill+'"'),this.stroke&&(t+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),t+="/>"},A.prototype.toDOMElement=function(e){var t=this.toPathData(e),r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",t),r};var L={fail:N,argument:O,assert:O},I=2147483648,P={},R={},D={};function k(e){return function(){return e}}R.BYTE=function(e){return L.argument(0<=e&&e<=255,"Byte value should be between 0 and 255."),[e]},D.BYTE=k(1),R.CHAR=function(e){return [e.charCodeAt(0)]},D.CHAR=k(1),R.CHARARRAY=function(e){for(var t=[],r=0;r<e.length;r+=1)t[r]=e.charCodeAt(r);return t},D.CHARARRAY=function(e){return e.length},R.USHORT=function(e){return [e>>8&255,255&e]},D.USHORT=k(2),R.SHORT=function(e){return 32768<=e&&(e=-(65536-e)),[e>>8&255,255&e]},D.SHORT=k(2),R.UINT24=function(e){return [e>>16&255,e>>8&255,255&e]},D.UINT24=k(3),R.ULONG=function(e){return [e>>24&255,e>>16&255,e>>8&255,255&e]},D.ULONG=k(4),R.LONG=function(e){return I<=e&&(e=-(2*I-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},D.LONG=k(4),R.FIXED=R.ULONG,D.FIXED=D.ULONG,R.FWORD=R.SHORT,D.FWORD=D.SHORT,R.UFWORD=R.USHORT,D.UFWORD=D.USHORT,R.LONGDATETIME=function(e){return [0,0,0,0,e>>24&255,e>>16&255,e>>8&255,255&e]},D.LONGDATETIME=k(8),R.TAG=function(e){return L.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},D.TAG=k(4),R.Card8=R.BYTE,D.Card8=D.BYTE,R.Card16=R.USHORT,D.Card16=D.USHORT,R.OffSize=R.BYTE,D.OffSize=D.BYTE,R.SID=R.USHORT,D.SID=D.USHORT,R.NUMBER=function(e){return -107<=e&&e<=107?[e+139]:108<=e&&e<=1131?[247+((e-=108)>>8),255&e]:-1131<=e&&e<=-108?[251+((e=-e-108)>>8),255&e]:-32768<=e&&e<=32767?R.NUMBER16(e):R.NUMBER32(e)},D.NUMBER=function(e){return R.NUMBER(e).length},R.NUMBER16=function(e){return [28,e>>8&255,255&e]},D.NUMBER16=k(3),R.NUMBER32=function(e){return [29,e>>24&255,e>>16&255,e>>8&255,255&e]},D.NUMBER32=k(5),R.REAL=function(e){var t=e.toString(),r=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);if(r){var n=parseFloat("1e"+((r[2]?+r[2]:0)+r[1].length));t=(Math.round(e*n)/n).toString();}for(var a="",o=0,i=t.length;o<i;o+=1){var s=t[o];a+="e"===s?"-"===t[++o]?"c":"b":"."===s?"a":"-"===s?"e":s;}for(var l=[30],p=0,u=(a+=1&a.length?"f":"ff").length;p<u;p+=2)l.push(parseInt(a.substr(p,2),16));return l},D.REAL=function(e){return R.REAL(e).length},R.NAME=R.CHARARRAY,D.NAME=D.CHARARRAY,R.STRING=R.CHARARRAY,D.STRING=D.CHARARRAY,P.UTF8=function(e,t,r){for(var n=[],a=r,o=0;o<a;o++,t+=1)n[o]=e.getUint8(t);return String.fromCharCode.apply(null,n)},P.UTF16=function(e,t,r){for(var n=[],a=r/2,o=0;o<a;o++,t+=2)n[o]=e.getUint16(t);return String.fromCharCode.apply(null,n)},R.UTF16=function(e){for(var t=[],r=0;r<e.length;r+=1){var n=e.charCodeAt(r);t[t.length]=n>>8&255,t[t.length]=255&n;}return t},D.UTF16=function(e){return 2*e.length};var F={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};P.MACSTRING=function(e,t,r,n){var a=F[n];if(void 0!==a){for(var o="",i=0;i<r;i++){var s=e.getUint8(t+i);o+=s<=127?String.fromCharCode(s):a[127&s];}return o}};var U,B="function"==typeof WeakMap&&new WeakMap;function G(e){return -128<=e&&e<=127}function j(e,t,r){for(var n=0,a=e.length;t<a&&n<64&&0===e[t];)++t,++n;return r.push(128|n-1),t}function V(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var i=e[o];if(!G(i))break;if(0===i&&o+1<a&&0===e[o+1])break;++o,++n;}r.push(n-1);for(var s=t;s<o;++s)r.push(e[s]+256&255);return o}function z(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var i=e[o];if(0===i)break;if(G(i)&&o+1<a&&G(e[o+1]))break;++o,++n;}r.push(64|n-1);for(var s=t;s<o;++s){var l=e[s];r.push(l+65536>>8&255,l+256&255);}return o}R.MACSTRING=function(e,t){var r=function(e){if(!U)for(var t in U={},F)U[t]=new String(t);var r=U[e];if(void 0!==r){if(B){var n=B.get(r);if(void 0!==n)return n}var a=F[e];if(void 0!==a){for(var o={},i=0;i<a.length;i++)o[a.charCodeAt(i)]=i+128;return B&&B.set(r,o),o}}}(t);if(void 0!==r){for(var n=[],a=0;a<e.length;a++){var o=e.charCodeAt(a);if(128<=o&&void 0===(o=r[o]))return;n[a]=o;}return n}},D.MACSTRING=function(e,t){var r=R.MACSTRING(e,t);return void 0!==r?r.length:0},R.VARDELTAS=function(e){for(var t=0,r=[];t<e.length;){var n=e[t];t=0===n?j(e,t,r):-128<=n&&n<=127?V(e,t,r):z(e,t,r);}return r},R.INDEX=function(e){for(var t=1,r=[t],n=[],a=0;a<e.length;a+=1){var o=R.OBJECT(e[a]);Array.prototype.push.apply(n,o),t+=o.length,r.push(t);}if(0===n.length)return [0,0];for(var i=[],s=1+Math.floor(Math.log(t)/Math.log(2))/8|0,l=[void 0,R.BYTE,R.USHORT,R.UINT24,R.ULONG][s],p=0;p<r.length;p+=1){var u=l(r[p]);Array.prototype.push.apply(i,u);}return Array.prototype.concat(R.Card16(e.length),R.OffSize(s),i,n)},D.INDEX=function(e){return R.INDEX(e).length},R.DICT=function(e){for(var t=[],r=Object.keys(e),n=r.length,a=0;a<n;a+=1){var o=parseInt(r[a],0),i=e[o];t=(t=t.concat(R.OPERAND(i.value,i.type))).concat(R.OPERATOR(o));}return t},D.DICT=function(e){return R.DICT(e).length},R.OPERATOR=function(e){return e<1200?[e]:[12,e-1200]},R.OPERAND=function(e,t){var r=[];if(Array.isArray(t))for(var n=0;n<t.length;n+=1)L.argument(e.length===t.length,"Not enough arguments given for type"+t),r=r.concat(R.OPERAND(e[n],t[n]));else if("SID"===t)r=r.concat(R.NUMBER(e));else if("offset"===t)r=r.concat(R.NUMBER32(e));else if("number"===t)r=r.concat(R.NUMBER(e));else {if("real"!==t)throw new Error("Unknown operand type "+t);r=r.concat(R.REAL(e));}return r},R.OP=R.BYTE,D.OP=D.BYTE;var H="function"==typeof WeakMap&&new WeakMap;function W(e,t,r){for(var n=0;n<t.length;n+=1){var a=t[n];this[a.name]=a.value;}if(this.tableName=e,this.fields=t,r)for(var o=Object.keys(r),i=0;i<o.length;i+=1){var s=o[i],l=r[s];void 0!==this[s]&&(this[s]=l);}}function X(e,t,r){void 0===r&&(r=t.length);var n=new Array(t.length+1);n[0]={name:e+"Count",type:"USHORT",value:r};for(var a=0;a<t.length;a++)n[a+1]={name:e+a,type:"USHORT",value:t[a]};return n}function q(e,t,r){var n=t.length,a=new Array(n+1);a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a[o+1]={name:e+o,type:"TABLE",value:r(t[o],o)};return a}function Y(e,t,r){var n=t.length,a=[];a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a=a.concat(r(t[o],o));return a}function Z(e){1===e.format?W.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:1}].concat(X("glyph",e.glyphs))):L.assert(!1,"Can't create coverage table format 2 yet.");}function Q(e){W.call(this,"scriptListTable",Y("scriptRecord",e,function(e,t){var r=e.script,n=r.defaultLangSys;return L.assert(!!n,"Unable to write GSUB: script "+e.tag+" has no default language system."),[{name:"scriptTag"+t,type:"TAG",value:e.tag},{name:"script"+t,type:"TABLE",value:new W("scriptTable",[{name:"defaultLangSys",type:"TABLE",value:new W("defaultLangSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:n.reqFeatureIndex}].concat(X("featureIndex",n.featureIndexes)))}].concat(Y("langSys",r.langSysRecords,function(e,t){var r=e.langSys;return [{name:"langSysTag"+t,type:"TAG",value:e.tag},{name:"langSys"+t,type:"TABLE",value:new W("langSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:r.reqFeatureIndex}].concat(X("featureIndex",r.featureIndexes)))}]})))}]}));}function K(e){W.call(this,"featureListTable",Y("featureRecord",e,function(e,t){var r=e.feature;return [{name:"featureTag"+t,type:"TAG",value:e.tag},{name:"feature"+t,type:"TABLE",value:new W("featureTable",[{name:"featureParams",type:"USHORT",value:r.featureParams}].concat(X("lookupListIndex",r.lookupListIndexes)))}]}));}function J(e,r){W.call(this,"lookupListTable",q("lookup",e,function(e){var t=r[e.lookupType];return L.assert(!!t,"Unable to write GSUB lookup type "+e.lookupType+" tables."),new W("lookupTable",[{name:"lookupType",type:"USHORT",value:e.lookupType},{name:"lookupFlag",type:"USHORT",value:e.lookupFlag}].concat(q("subtable",e.subtables,t)))}));}R.CHARSTRING=function(e){if(H){var t=H.get(e);if(void 0!==t)return t}for(var r=[],n=e.length,a=0;a<n;a+=1){var o=e[a];r=r.concat(R[o.type](o.value));}return H&&H.set(e,r),r},D.CHARSTRING=function(e){return R.CHARSTRING(e).length},R.OBJECT=function(e){var t=R[e.type];return L.argument(void 0!==t,"No encoding function for type "+e.type),t(e.value)},D.OBJECT=function(e){var t=D[e.type];return L.argument(void 0!==t,"No sizeOf function for type "+e.type),t(e.value)},R.TABLE=function(e){for(var t=[],r=e.fields.length,n=[],a=[],o=0;o<r;o+=1){var i=e.fields[o],s=R[i.type];L.argument(void 0!==s,"No encoding function for field type "+i.type+" ("+i.name+")");var l=e[i.name];void 0===l&&(l=i.value);var p=s(l);"TABLE"===i.type?(a.push(t.length),t=t.concat([0,0]),n.push(p)):t=t.concat(p);}for(var u=0;u<n.length;u+=1){var c=a[u],d=t.length;L.argument(d<65536,"Table "+e.tableName+" too big."),t[c]=d>>8,t[c+1]=255&d,t=t.concat(n[u]);}return t},D.TABLE=function(e){for(var t=0,r=e.fields.length,n=0;n<r;n+=1){var a=e.fields[n],o=D[a.type];L.argument(void 0!==o,"No sizeOf function for field type "+a.type+" ("+a.name+")");var i=e[a.name];void 0===i&&(i=a.value),t+=o(i),"TABLE"===a.type&&(t+=2);}return t},R.RECORD=R.TABLE,D.RECORD=D.TABLE,R.LITERAL=function(e){return e},D.LITERAL=function(e){return e.length},W.prototype.encode=function(){return R.TABLE(this)},W.prototype.sizeOf=function(){return D.TABLE(this)};var $={Table:W,Record:W,Coverage:(Z.prototype=Object.create(W.prototype)).constructor=Z,ScriptList:(Q.prototype=Object.create(W.prototype)).constructor=Q,FeatureList:(K.prototype=Object.create(W.prototype)).constructor=K,LookupList:(J.prototype=Object.create(W.prototype)).constructor=J,ushortList:X,tableList:q,recordList:Y};function ee(e,t){return e.getUint8(t)}function te(e,t){return e.getUint16(t,!1)}function re(e,t){return e.getUint32(t,!1)}function ne(e,t){return e.getInt16(t,!1)+e.getUint16(t+2,!1)/65535}var ae={byte:1,uShort:2,short:2,uLong:4,fixed:4,longDateTime:8,tag:4};function oe(e,t){this.data=e,this.offset=t,this.relativeOffset=0;}oe.prototype.parseByte=function(){var e=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},oe.prototype.parseChar=function(){var e=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},oe.prototype.parseCard8=oe.prototype.parseByte,oe.prototype.parseCard16=oe.prototype.parseUShort=function(){var e=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},oe.prototype.parseSID=oe.prototype.parseUShort,oe.prototype.parseOffset16=oe.prototype.parseUShort,oe.prototype.parseShort=function(){var e=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},oe.prototype.parseF2Dot14=function(){var e=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,e},oe.prototype.parseOffset32=oe.prototype.parseULong=function(){var e=re(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},oe.prototype.parseFixed=function(){var e=ne(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},oe.prototype.parseString=function(e){var t=this.data,r=this.offset+this.relativeOffset,n="";this.relativeOffset+=e;for(var a=0;a<e;a++)n+=String.fromCharCode(t.getUint8(r+a));return n},oe.prototype.parseTag=function(){return this.parseString(4)},oe.prototype.parseLongDateTime=function(){var e=re(this.data,this.offset+this.relativeOffset+4);return e-=2082844800,this.relativeOffset+=8,e},oe.prototype.parseVersion=function(e){var t=te(this.data,this.offset+this.relativeOffset),r=te(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,void 0===e&&(e=4096),t+r/e/10},oe.prototype.skip=function(e,t){void 0===t&&(t=1),this.relativeOffset+=ae[e]*t;},oe.prototype.parseULongList=function(e){void 0===e&&(e=this.parseULong());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint32(n),n+=4;return this.relativeOffset+=4*e,t},oe.prototype.parseOffset16List=oe.prototype.parseUShortList=function(e){void 0===e&&(e=this.parseUShort());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint16(n),n+=2;return this.relativeOffset+=2*e,t},oe.prototype.parseShortList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getInt16(n),n+=2;return this.relativeOffset+=2*e,t},oe.prototype.parseByteList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint8(n++);return this.relativeOffset+=e,t},oe.prototype.parseList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},oe.prototype.parseList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},oe.prototype.parseRecordList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},i=0;i<n.length;i++){var s=n[i],l=t[s];o[s]=l.call(this);}r[a]=o;}return r},oe.prototype.parseRecordList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},i=0;i<n.length;i++){var s=n[i],l=t[s];o[s]=l.call(this);}r[a]=o;}return r},oe.prototype.parseStruct=function(e){if("function"==typeof e)return e.call(this);for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var a=t[n],o=e[a];r[a]=o.call(this);}return r},oe.prototype.parseValueRecord=function(e){if(void 0===e&&(e=this.parseUShort()),0!==e){var t={};return 1&e&&(t.xPlacement=this.parseShort()),2&e&&(t.yPlacement=this.parseShort()),4&e&&(t.xAdvance=this.parseShort()),8&e&&(t.yAdvance=this.parseShort()),16&e&&(t.xPlaDevice=void 0,this.parseShort()),32&e&&(t.yPlaDevice=void 0,this.parseShort()),64&e&&(t.xAdvDevice=void 0,this.parseShort()),128&e&&(t.yAdvDevice=void 0,this.parseShort()),t}},oe.prototype.parseValueRecordList=function(){for(var e=this.parseUShort(),t=this.parseUShort(),r=new Array(t),n=0;n<t;n++)r[n]=this.parseValueRecord(e);return r},oe.prototype.parsePointer=function(e){var t=this.parseOffset16();if(0<t)return new oe(this.data,this.offset+t).parseStruct(e)},oe.prototype.parsePointer32=function(e){var t=this.parseOffset32();if(0<t)return new oe(this.data,this.offset+t).parseStruct(e)},oe.prototype.parseListOfLists=function(e){for(var t=this,r=this.parseOffset16List(),n=r.length,a=this.relativeOffset,o=new Array(n),i=0;i<n;i++){var s=r[i];if(0!==s)if(t.relativeOffset=s,e){for(var l=t.parseOffset16List(),p=new Array(l.length),u=0;u<l.length;u++)t.relativeOffset=s+l[u],p[u]=e.call(t);o[i]=p;}else o[i]=t.parseUShortList();else o[i]=void 0;}return this.relativeOffset=a,o},oe.prototype.parseCoverage=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort(),r=this.parseUShort();if(1===t)return {format:1,glyphs:this.parseUShortList(r)};if(2!==t)throw new Error("0x"+e.toString(16)+": Coverage format must be 1 or 2.");for(var n=new Array(r),a=0;a<r;a++)n[a]={start:this.parseUShort(),end:this.parseUShort(),index:this.parseUShort()};return {format:2,ranges:n}},oe.prototype.parseClassDef=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return {format:1,startGlyph:this.parseUShort(),classes:this.parseUShortList()};if(2===t)return {format:2,ranges:this.parseRecordList({start:oe.uShort,end:oe.uShort,classId:oe.uShort})};throw new Error("0x"+e.toString(16)+": ClassDef format must be 1 or 2.")},oe.list=function(e,t){return function(){return this.parseList(e,t)}},oe.list32=function(e,t){return function(){return this.parseList32(e,t)}},oe.recordList=function(e,t){return function(){return this.parseRecordList(e,t)}},oe.recordList32=function(e,t){return function(){return this.parseRecordList32(e,t)}},oe.pointer=function(e){return function(){return this.parsePointer(e)}},oe.pointer32=function(e){return function(){return this.parsePointer32(e)}},oe.tag=oe.prototype.parseTag,oe.byte=oe.prototype.parseByte,oe.uShort=oe.offset16=oe.prototype.parseUShort,oe.uShortList=oe.prototype.parseUShortList,oe.uLong=oe.offset32=oe.prototype.parseULong,oe.uLongList=oe.prototype.parseULongList,oe.struct=oe.prototype.parseStruct,oe.coverage=oe.prototype.parseCoverage,oe.classDef=oe.prototype.parseClassDef;var ie={reserved:oe.uShort,reqFeatureIndex:oe.uShort,featureIndexes:oe.uShortList};oe.prototype.parseScriptList=function(){return this.parsePointer(oe.recordList({tag:oe.tag,script:oe.pointer({defaultLangSys:oe.pointer(ie),langSysRecords:oe.recordList({tag:oe.tag,langSys:oe.pointer(ie)})})}))||[]},oe.prototype.parseFeatureList=function(){return this.parsePointer(oe.recordList({tag:oe.tag,feature:oe.pointer({featureParams:oe.offset16,lookupListIndexes:oe.uShortList})}))||[]},oe.prototype.parseLookupList=function(n){return this.parsePointer(oe.list(oe.pointer(function(){var e=this.parseUShort();L.argument(1<=e&&e<=9,"GPOS/GSUB lookup type "+e+" unknown.");var t=this.parseUShort(),r=16&t;return {lookupType:e,lookupFlag:t,subtables:this.parseList(oe.pointer(n[e])),markFilteringSet:r?this.parseUShort():void 0}})))||[]},oe.prototype.parseFeatureVariationsList=function(){return this.parsePointer32(function(){var e=this.parseUShort(),t=this.parseUShort();return L.argument(1===e&&t<1,"GPOS/GSUB feature variations table unknown."),this.parseRecordList32({conditionSetOffset:oe.offset32,featureTableSubstitutionOffset:oe.offset32})})||[]};var se={getByte:ee,getCard8:ee,getUShort:te,getCard16:te,getShort:function(e,t){return e.getInt16(t,!1)},getULong:re,getFixed:ne,getTag:function(e,t){for(var r="",n=t;n<t+4;n+=1)r+=String.fromCharCode(e.getInt8(n));return r},getOffset:function(e,t,r){for(var n=0,a=0;a<r;a+=1)n<<=8,n+=e.getUint8(t+a);return n},getBytes:function(e,t,r){for(var n=[],a=t;a<r;a+=1)n.push(e.getUint8(a));return n},bytesToString:function(e){for(var t="",r=0;r<e.length;r+=1)t+=String.fromCharCode(e[r]);return t},Parser:oe};var le={parse:function(e,t){var r={};r.version=se.getUShort(e,t),L.argument(0===r.version,"cmap table version should be 0."),r.numTables=se.getUShort(e,t+2);for(var n=-1,a=r.numTables-1;0<=a;--a){var o=se.getUShort(e,t+4+8*a),i=se.getUShort(e,t+4+8*a+2);if(3===o&&(0===i||1===i||10===i)||0===o&&(0===i||1===i||2===i||3===i||4===i)){n=se.getULong(e,t+4+8*a+4);break}}if(-1===n)throw new Error("No valid cmap sub-tables found.");var s=new se.Parser(e,t+n);if(r.format=s.parseUShort(),12===r.format)!function(e,t){var r;t.parseUShort(),e.length=t.parseULong(),e.language=t.parseULong(),e.groupCount=r=t.parseULong(),e.glyphIndexMap={};for(var n=0;n<r;n+=1)for(var a=t.parseULong(),o=t.parseULong(),i=t.parseULong(),s=a;s<=o;s+=1)e.glyphIndexMap[s]=i,i++;}(r,s);else {if(4!==r.format)throw new Error("Only format 4 and 12 cmap tables are supported (found format "+r.format+").");!function(e,t,r,n,a){var o;e.length=t.parseUShort(),e.language=t.parseUShort(),e.segCount=o=t.parseUShort()>>1,t.skip("uShort",3),e.glyphIndexMap={};for(var i=new se.Parser(r,n+a+14),s=new se.Parser(r,n+a+16+2*o),l=new se.Parser(r,n+a+16+4*o),p=new se.Parser(r,n+a+16+6*o),u=n+a+16+8*o,c=0;c<o-1;c+=1)for(var d=void 0,h=i.parseUShort(),m=s.parseUShort(),f=l.parseShort(),y=p.parseUShort(),g=m;g<=h;g+=1)0!==y?(u=p.offset+p.relativeOffset-2,u+=y,u+=2*(g-m),0!==(d=se.getUShort(r,u))&&(d=d+f&65535)):d=g+f&65535,e.glyphIndexMap[g]=d;}(r,s,e,t,n);}return r},make:function(e){var t,r=!0;for(t=e.length-1;0<t;--t){if(65535<e.get(t).unicode){console.log("Adding CMAP format 12 (needed!)"),r=!1;break}}var n=[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:r?1:2},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:r?12:20}];r||(n=n.concat([{name:"cmap12PlatformID",type:"USHORT",value:3},{name:"cmap12EncodingID",type:"USHORT",value:10},{name:"cmap12Offset",type:"ULONG",value:0}])),n=n.concat([{name:"format",type:"USHORT",value:4},{name:"cmap4Length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);var a,o,i,s=new $.Table("cmap",n);for(s.segments=[],t=0;t<e.length;t+=1){for(var l=e.get(t),p=0;p<l.unicodes.length;p+=1)a=s,o=l.unicodes[p],i=t,a.segments.push({end:o,start:o,delta:-(o-i),offset:0,glyphIndex:i});s.segments=s.segments.sort(function(e,t){return e.start-t.start});}s.segments.push({end:65535,start:65535,delta:1,offset:0});var u=s.segments.length,c=0,d=[],h=[],m=[],f=[],y=[],g=[];for(t=0;t<u;t+=1){var v=s.segments[t];v.end<=65535&&v.start<=65535?(d=d.concat({name:"end_"+t,type:"USHORT",value:v.end}),h=h.concat({name:"start_"+t,type:"USHORT",value:v.start}),m=m.concat({name:"idDelta_"+t,type:"SHORT",value:v.delta}),f=f.concat({name:"idRangeOffset_"+t,type:"USHORT",value:v.offset}),void 0!==v.glyphId&&(y=y.concat({name:"glyph_"+t,type:"USHORT",value:v.glyphId}))):c+=1,r||void 0===v.glyphIndex||(g=(g=(g=g.concat({name:"cmap12Start_"+t,type:"ULONG",value:v.start})).concat({name:"cmap12End_"+t,type:"ULONG",value:v.end})).concat({name:"cmap12Glyph_"+t,type:"ULONG",value:v.glyphIndex}));}if(s.segCountX2=2*(u-c),s.searchRange=2*Math.pow(2,Math.floor(Math.log(u-c)/Math.log(2))),s.entrySelector=Math.log(s.searchRange/2)/Math.log(2),s.rangeShift=s.segCountX2-s.searchRange,s.fields=s.fields.concat(d),s.fields.push({name:"reservedPad",type:"USHORT",value:0}),s.fields=s.fields.concat(h),s.fields=s.fields.concat(m),s.fields=s.fields.concat(f),s.fields=s.fields.concat(y),s.cmap4Length=14+2*d.length+2+2*h.length+2*m.length+2*f.length+2*y.length,!r){var b=16+4*g.length;s.cmap12Offset=20+s.cmap4Length,s.fields=s.fields.concat([{name:"cmap12Format",type:"USHORT",value:12},{name:"cmap12Reserved",type:"USHORT",value:0},{name:"cmap12Length",type:"ULONG",value:b},{name:"cmap12Language",type:"ULONG",value:0},{name:"cmap12nGroups",type:"ULONG",value:g.length/3}]),s.fields=s.fields.concat(g);}return s}},pe=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],ue=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],ce=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],de=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];function he(e){this.font=e;}function me(e){this.cmap=e;}function fe(e,t){this.encoding=e,this.charset=t;}function ye(e){switch(e.version){case 1:this.names=de.slice();break;case 2:this.names=new Array(e.numberOfGlyphs);for(var t=0;t<e.numberOfGlyphs;t++)e.glyphNameIndex[t]<de.length?this.names[t]=de[e.glyphNameIndex[t]]:this.names[t]=e.names[e.glyphNameIndex[t]-de.length];break;case 2.5:this.names=new Array(e.numberOfGlyphs);for(var r=0;r<e.numberOfGlyphs;r++)this.names[r]=de[r+e.glyphNameIndex[r]];break;case 3:default:this.names=[];}}he.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.font.glyphs;if(r)for(var n=0;n<r.length;n+=1)for(var a=r.get(n),o=0;o<a.unicodes.length;o+=1)if(a.unicodes[o]===t)return n;return null},me.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.codePointAt(0)]||0},fe.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.encoding[t];return this.charset.indexOf(r)},ye.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},ye.prototype.glyphIndexToName=function(e){return this.names[e]};var ge={line:function(e,t,r,n,a){e.beginPath(),e.moveTo(t,r),e.lineTo(n,a),e.stroke();}};function ve(e){this.bindConstructorValues(e);}function be(t,e,r){Object.defineProperty(t,e,{get:function(){return t.path,t[r]},set:function(e){t[r]=e;},enumerable:!0,configurable:!0});}function _e(e,t){if(this.font=e,this.glyphs={},Array.isArray(t))for(var r=0;r<t.length;r++)this.glyphs[r]=t[r];this.length=t&&t.length||0;}ve.prototype.bindConstructorValues=function(e){var t,r;this.index=e.index||0,this.name=e.name||null,this.unicode=e.unicode||void 0,this.unicodes=e.unicodes||void 0!==e.unicode?[e.unicode]:[],e.xMin&&(this.xMin=e.xMin),e.yMin&&(this.yMin=e.yMin),e.xMax&&(this.xMax=e.xMax),e.yMax&&(this.yMax=e.yMax),e.advanceWidth&&(this.advanceWidth=e.advanceWidth),Object.defineProperty(this,"path",(t=e.path,r=t||new A,{configurable:!0,get:function(){return "function"==typeof r&&(r=r()),r},set:function(e){r=e;}}));},ve.prototype.addUnicode=function(e){0===this.unicodes.length&&(this.unicode=e),this.unicodes.push(e);},ve.prototype.getBoundingBox=function(){return this.path.getBoundingBox()},ve.prototype.getPath=function(e,t,r,n,a){var o,i;e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:72;var s=(n=n||{}).xScale,l=n.yScale;if(n.hinting&&a&&a.hinting&&(i=this.path&&a.hinting.exec(this,r)),i)o=a.hinting.getCommands(i),e=Math.round(e),t=Math.round(t),s=l=1;else {o=this.path.commands;var p=1/this.path.unitsPerEm*r;void 0===s&&(s=p),void 0===l&&(l=p);}for(var u=new A,c=0;c<o.length;c+=1){var d=o[c];"M"===d.type?u.moveTo(e+d.x*s,t+-d.y*l):"L"===d.type?u.lineTo(e+d.x*s,t+-d.y*l):"Q"===d.type?u.quadraticCurveTo(e+d.x1*s,t+-d.y1*l,e+d.x*s,t+-d.y*l):"C"===d.type?u.curveTo(e+d.x1*s,t+-d.y1*l,e+d.x2*s,t+-d.y2*l,e+d.x*s,t+-d.y*l):"Z"===d.type&&u.closePath();}return u},ve.prototype.getContours=function(){if(void 0===this.points)return [];for(var e=[],t=[],r=0;r<this.points.length;r+=1){var n=this.points[r];t.push(n),n.lastPointOfContour&&(e.push(t),t=[]);}return L.argument(0===t.length,"There are still points left in the current contour."),e},ve.prototype.getMetrics=function(){for(var e=this.path.commands,t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];"Z"!==a.type&&(t.push(a.x),r.push(a.y)),"Q"!==a.type&&"C"!==a.type||(t.push(a.x1),r.push(a.y1)),"C"===a.type&&(t.push(a.x2),r.push(a.y2));}var o={xMin:Math.min.apply(null,t),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,t),yMax:Math.max.apply(null,r),leftSideBearing:this.leftSideBearing};return isFinite(o.xMin)||(o.xMin=0),isFinite(o.xMax)||(o.xMax=this.advanceWidth),isFinite(o.yMin)||(o.yMin=0),isFinite(o.yMax)||(o.yMax=0),o.rightSideBearing=this.advanceWidth-o.leftSideBearing-(o.xMax-o.xMin),o},ve.prototype.draw=function(e,t,r,n,a){this.getPath(t,r,n,a).draw(e);},ve.prototype.drawPoints=function(i,e,t,r){function n(e,t,r,n){var a=2*Math.PI;i.beginPath();for(var o=0;o<e.length;o+=1)i.moveTo(t+e[o].x*n,r+e[o].y*n),i.arc(t+e[o].x*n,r+e[o].y*n,2,0,a,!1);i.closePath(),i.fill();}e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:24;for(var a=1/this.path.unitsPerEm*r,o=[],s=[],l=this.path,p=0;p<l.commands.length;p+=1){var u=l.commands[p];void 0!==u.x&&o.push({x:u.x,y:-u.y}),void 0!==u.x1&&s.push({x:u.x1,y:-u.y1}),void 0!==u.x2&&s.push({x:u.x2,y:-u.y2});}i.fillStyle="blue",n(o,e,t,a),i.fillStyle="red",n(s,e,t,a);},ve.prototype.drawMetrics=function(e,t,r,n){var a;t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24,a=1/this.path.unitsPerEm*n,e.lineWidth=1,e.strokeStyle="black",ge.line(e,t,-1e4,t,1e4),ge.line(e,-1e4,r,1e4,r);var o=this.xMin||0,i=this.yMin||0,s=this.xMax||0,l=this.yMax||0,p=this.advanceWidth||0;e.strokeStyle="blue",ge.line(e,t+o*a,-1e4,t+o*a,1e4),ge.line(e,t+s*a,-1e4,t+s*a,1e4),ge.line(e,-1e4,r+-i*a,1e4,r+-i*a),ge.line(e,-1e4,r+-l*a,1e4,r+-l*a),e.strokeStyle="green",ge.line(e,t+p*a,-1e4,t+p*a,1e4);},_e.prototype.get=function(e){return "function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]()),this.glyphs[e]},_e.prototype.push=function(e,t){this.glyphs[e]=t,this.length++;};var xe={GlyphSet:_e,glyphLoader:function(e,t){return new ve({index:t,font:e})},ttfGlyphLoader:function(r,e,n,a,o,i){return function(){var t=new ve({index:e,font:r});return t.path=function(){n(t,a,o);var e=i(r.glyphs,t);return e.unitsPerEm=r.unitsPerEm,e},be(t,"xMin","_xMin"),be(t,"xMax","_xMax"),be(t,"yMin","_yMin"),be(t,"yMax","_yMax"),t}},cffGlyphLoader:function(r,e,n,a){return function(){var t=new ve({index:e,font:r});return t.path=function(){var e=n(r,t,a);return e.unitsPerEm=r.unitsPerEm,e},t}}};function Se(e,t){if(e===t)return !0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return !1;for(var r=0;r<e.length;r+=1)if(!Se(e[r],t[r]))return !1;return !0}return !1}function we(e){return e.length<1240?107:e.length<33900?1131:32768}function Me(e,t,r){var n,a,o=[],i=[],s=se.getCard16(e,t);if(0!==s){var l=se.getByte(e,t+2);n=t+(s+1)*l+2;for(var p=t+3,u=0;u<s+1;u+=1)o.push(se.getOffset(e,p,l)),p+=l;a=n+o[s];}else a=t+2;for(var c=0;c<o.length-1;c+=1){var d=se.getBytes(e,n+o[c],n+o[c+1]);r&&(d=r(d)),i.push(d);}return {objects:i,startOffset:t,endOffset:a}}function Ee(e,t){if(28===t)return e.parseByte()<<8|e.parseByte();if(29===t)return e.parseByte()<<24|e.parseByte()<<16|e.parseByte()<<8|e.parseByte();if(30===t)return function(e){for(var t="",r=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var n=e.parseByte(),a=n>>4,o=15&n;if(15==a)break;if(t+=r[a],15==o)break;t+=r[o];}return parseFloat(t)}(e);if(32<=t&&t<=246)return t-139;if(247<=t&&t<=250)return 256*(t-247)+e.parseByte()+108;if(251<=t&&t<=254)return 256*-(t-251)-e.parseByte()-108;throw new Error("Invalid b0 "+t)}function Te(e,t,r){t=void 0!==t?t:0;var n=new se.Parser(e,t),a=[],o=[];for(r=void 0!==r?r:e.length;n.relativeOffset<r;){var i=n.parseByte();i<=21?(12===i&&(i=1200+n.parseByte()),a.push([i,o]),o=[]):o.push(Ee(n,i));}return function(e){for(var t={},r=0;r<e.length;r+=1){var n=e[r][0],a=e[r][1],o=void 0;if(o=1===a.length?a[0]:a,t.hasOwnProperty(n)&&!isNaN(t[n]))throw new Error("Object "+t+" already has key "+n);t[n]=o;}return t}(a)}function Ce(e,t){return t=t<=390?pe[t]:e[t-391]}function Ne(e,t,r){for(var n,a={},o=0;o<t.length;o+=1){var i=t[o];if(Array.isArray(i.type)){var s=[];s.length=i.type.length;for(var l=0;l<i.type.length;l++)void 0===(n=void 0!==e[i.op]?e[i.op][l]:void 0)&&(n=void 0!==i.value&&void 0!==i.value[l]?i.value[l]:null),"SID"===i.type[l]&&(n=Ce(r,n)),s[l]=n;a[i.name]=s;}else void 0===(n=e[i.op])&&(n=void 0!==i.value?i.value:null),"SID"===i.type&&(n=Ce(r,n)),a[i.name]=n;}return a}var Oe=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]},{name:"ros",op:1230,type:["SID","SID","number"]},{name:"cidFontVersion",op:1231,type:"number",value:0},{name:"cidFontRevision",op:1232,type:"number",value:0},{name:"cidFontType",op:1233,type:"number",value:0},{name:"cidCount",op:1234,type:"number",value:8720},{name:"uidBase",op:1235,type:"number"},{name:"fdArray",op:1236,type:"offset"},{name:"fdSelect",op:1237,type:"offset"},{name:"fontName",op:1238,type:"SID"}],Le=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];function Ie(e,t,r,n){return Ne(Te(e,t,r),Le,n)}function Pe(e,t,r,n){for(var a,o,i=[],s=0;s<r.length;s+=1){var l=new DataView(new Uint8Array(r[s]).buffer),p=(o=n,Ne(Te(a=l,0,a.byteLength),Oe,o));p._subrs=[],p._subrsBias=0;var u=p.private[0],c=p.private[1];if(0!==u&&0!==c){var d=Ie(e,c+t,u,n);if(p._defaultWidthX=d.defaultWidthX,p._nominalWidthX=d.nominalWidthX,0!==d.subrs){var h=Me(e,c+d.subrs+t);p._subrs=h.objects,p._subrsBias=we(p._subrs);}p._privateDict=d;}i.push(p);}return i}function Re(y,g,e){var v,b,_,x,S,w,t,M,E=new A,T=[],C=0,N=!1,O=!1,L=0,I=0;if(y.isCIDFont){var r=y.tables.cff.topDict._fdSelect[g.index],n=y.tables.cff.topDict._fdArray[r];S=n._subrs,w=n._subrsBias,t=n._defaultWidthX,M=n._nominalWidthX;}else S=y.tables.cff.topDict._subrs,w=y.tables.cff.topDict._subrsBias,t=y.tables.cff.topDict._defaultWidthX,M=y.tables.cff.topDict._nominalWidthX;var P=t;function R(e,t){O&&E.closePath(),E.moveTo(e,t),O=!0;}function D(){T.length%2==0||N||(P=T.shift()+M),C+=T.length>>1,T.length=0,N=!0;}return function e(t){for(var r,n,a,o,i,s,l,p,u,c,d,h,m=0;m<t.length;){var f=t[m];switch(m+=1,f){case 1:case 3:D();break;case 4:1<T.length&&!N&&(P=T.shift()+M,N=!0),I+=T.pop(),R(L,I);break;case 5:for(;0<T.length;)L+=T.shift(),I+=T.shift(),E.lineTo(L,I);break;case 6:for(;0<T.length&&(L+=T.shift(),E.lineTo(L,I),0!==T.length);)I+=T.shift(),E.lineTo(L,I);break;case 7:for(;0<T.length&&(I+=T.shift(),E.lineTo(L,I),0!==T.length);)L+=T.shift(),E.lineTo(L,I);break;case 8:for(;0<T.length;)v=L+T.shift(),b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),L=_+T.shift(),I=x+T.shift(),E.curveTo(v,b,_,x,L,I);break;case 10:i=T.pop()+w,(s=S[i])&&e(s);break;case 11:return;case 12:switch(f=t[m],m+=1,f){case 35:v=L+T.shift(),b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),l=_+T.shift(),p=x+T.shift(),u=l+T.shift(),c=p+T.shift(),d=u+T.shift(),h=c+T.shift(),L=d+T.shift(),I=h+T.shift(),T.shift(),E.curveTo(v,b,_,x,l,p),E.curveTo(u,c,d,h,L,I);break;case 34:v=L+T.shift(),b=I,_=v+T.shift(),x=b+T.shift(),l=_+T.shift(),p=x,u=l+T.shift(),c=x,d=u+T.shift(),h=I,L=d+T.shift(),E.curveTo(v,b,_,x,l,p),E.curveTo(u,c,d,h,L,I);break;case 36:v=L+T.shift(),b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),l=_+T.shift(),p=x,u=l+T.shift(),c=x,d=u+T.shift(),h=c+T.shift(),L=d+T.shift(),E.curveTo(v,b,_,x,l,p),E.curveTo(u,c,d,h,L,I);break;case 37:v=L+T.shift(),b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),l=_+T.shift(),p=x+T.shift(),u=l+T.shift(),c=p+T.shift(),d=u+T.shift(),h=c+T.shift(),Math.abs(d-L)>Math.abs(h-I)?L=d+T.shift():I=h+T.shift(),E.curveTo(v,b,_,x,l,p),E.curveTo(u,c,d,h,L,I);break;default:console.log("Glyph "+g.index+": unknown operator 1200"+f),T.length=0;}break;case 14:0<T.length&&!N&&(P=T.shift()+M,N=!0),O&&(E.closePath(),O=!1);break;case 18:D();break;case 19:case 20:D(),m+=C+7>>3;break;case 21:2<T.length&&!N&&(P=T.shift()+M,N=!0),I+=T.pop(),R(L+=T.pop(),I);break;case 22:1<T.length&&!N&&(P=T.shift()+M,N=!0),R(L+=T.pop(),I);break;case 23:D();break;case 24:for(;2<T.length;)v=L+T.shift(),b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),L=_+T.shift(),I=x+T.shift(),E.curveTo(v,b,_,x,L,I);L+=T.shift(),I+=T.shift(),E.lineTo(L,I);break;case 25:for(;6<T.length;)L+=T.shift(),I+=T.shift(),E.lineTo(L,I);v=L+T.shift(),b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),L=_+T.shift(),I=x+T.shift(),E.curveTo(v,b,_,x,L,I);break;case 26:for(T.length%2&&(L+=T.shift());0<T.length;)v=L,b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),L=_,I=x+T.shift(),E.curveTo(v,b,_,x,L,I);break;case 27:for(T.length%2&&(I+=T.shift());0<T.length;)v=L+T.shift(),b=I,_=v+T.shift(),x=b+T.shift(),L=_+T.shift(),I=x,E.curveTo(v,b,_,x,L,I);break;case 28:r=t[m],n=t[m+1],T.push((r<<24|n<<16)>>16),m+=2;break;case 29:i=T.pop()+y.gsubrsBias,(s=y.gsubrs[i])&&e(s);break;case 30:for(;0<T.length&&(v=L,b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),L=_+T.shift(),I=x+(1===T.length?T.shift():0),E.curveTo(v,b,_,x,L,I),0!==T.length);)v=L+T.shift(),b=I,_=v+T.shift(),x=b+T.shift(),I=x+T.shift(),L=_+(1===T.length?T.shift():0),E.curveTo(v,b,_,x,L,I);break;case 31:for(;0<T.length&&(v=L+T.shift(),b=I,_=v+T.shift(),x=b+T.shift(),I=x+T.shift(),L=_+(1===T.length?T.shift():0),E.curveTo(v,b,_,x,L,I),0!==T.length);)v=L,b=I+T.shift(),_=v+T.shift(),x=b+T.shift(),L=_+T.shift(),I=x+(1===T.length?T.shift():0),E.curveTo(v,b,_,x,L,I);break;default:f<32?console.log("Glyph "+g.index+": unknown operator "+f):f<247?T.push(f-139):f<251?(r=t[m],m+=1,T.push(256*(f-247)+r+108)):f<255?(r=t[m],m+=1,T.push(256*-(f-251)-r-108)):(r=t[m],n=t[m+1],a=t[m+2],o=t[m+3],m+=4,T.push((r<<24|n<<16|a<<8|o)/65536));}}}(e),g.advanceWidth=P,E}function De(e,t){var r,n=pe.indexOf(e);return 0<=n&&(r=n),0<=(n=t.indexOf(e))?r=n+pe.length:(r=pe.length+t.length,t.push(e)),r}function Ae(e,t,r){for(var n={},a=0;a<e.length;a+=1){var o=e[a],i=t[o.name];void 0===i||Se(i,o.value)||("SID"===o.type&&(i=De(i,r)),n[o.op]={name:o.name,type:o.type,value:i});}return n}function ke(e,t){var r=new $.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Ae(Oe,e,t),r}function Fe(e){var t=new $.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function Ue(e){var t=[],r=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var n=0,a=0,o=0;o<r.commands.length;o+=1){var i=void 0,s=void 0,l=r.commands[o];if("Q"===l.type){l={type:"C",x:l.x,y:l.y,x1:1/3*n+2/3*l.x1,y1:1/3*a+2/3*l.y1,x2:1/3*l.x+2/3*l.x1,y2:1/3*l.y+2/3*l.y1};}if("M"===l.type)i=Math.round(l.x-n),s=Math.round(l.y-a),t.push({name:"dx",type:"NUMBER",value:i}),t.push({name:"dy",type:"NUMBER",value:s}),t.push({name:"rmoveto",type:"OP",value:21}),n=Math.round(l.x),a=Math.round(l.y);else if("L"===l.type)i=Math.round(l.x-n),s=Math.round(l.y-a),t.push({name:"dx",type:"NUMBER",value:i}),t.push({name:"dy",type:"NUMBER",value:s}),t.push({name:"rlineto",type:"OP",value:5}),n=Math.round(l.x),a=Math.round(l.y);else if("C"===l.type){var p=Math.round(l.x1-n),u=Math.round(l.y1-a),c=Math.round(l.x2-l.x1),d=Math.round(l.y2-l.y1);i=Math.round(l.x-l.x2),s=Math.round(l.y-l.y2),t.push({name:"dx1",type:"NUMBER",value:p}),t.push({name:"dy1",type:"NUMBER",value:u}),t.push({name:"dx2",type:"NUMBER",value:c}),t.push({name:"dy2",type:"NUMBER",value:d}),t.push({name:"dx",type:"NUMBER",value:i}),t.push({name:"dy",type:"NUMBER",value:s}),t.push({name:"rrcurveto",type:"OP",value:8}),n=Math.round(l.x),a=Math.round(l.y);}}return t.push({name:"endchar",type:"OP",value:14}),t}var Be={parse:function(e,t,r){r.tables.cff={};var n,a,o,i=Me(e,(n=e,a=t,(o={}).formatMajor=se.getCard8(n,a),o.formatMinor=se.getCard8(n,a+1),o.size=se.getCard8(n,a+2),o.offsetSize=se.getCard8(n,a+3),o.startOffset=a,o.endOffset=a+4,o).endOffset,se.bytesToString),s=Me(e,i.endOffset),l=Me(e,s.endOffset,se.bytesToString),p=Me(e,l.endOffset);r.gsubrs=p.objects,r.gsubrsBias=we(r.gsubrs);var u=Pe(e,t,s.objects,l.objects);if(1!==u.length)throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = "+u.length);var c=u[0];if((r.tables.cff.topDict=c)._privateDict&&(r.defaultWidthX=c._privateDict.defaultWidthX,r.nominalWidthX=c._privateDict.nominalWidthX),void 0!==c.ros[0]&&void 0!==c.ros[1]&&(r.isCIDFont=!0),r.isCIDFont){var d=c.fdArray,h=c.fdSelect;if(0===d||0===h)throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");var m=Pe(e,t,Me(e,d+=t).objects,l.objects);c._fdArray=m,h+=t,c._fdSelect=function(e,t,r,n){var a,o=[],i=new se.Parser(e,t),s=i.parseCard8();if(0===s)for(var l=0;l<r;l++){if(n<=(a=i.parseCard8()))throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");o.push(a);}else {if(3!==s)throw new Error("CFF Table CID Font FDSelect table has unsupported format "+s);var p,u=i.parseCard16(),c=i.parseCard16();if(0!==c)throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID "+c);for(var d=0;d<u;d++){if(a=i.parseCard8(),p=i.parseCard16(),n<=a)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");if(r<p)throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID "+p);for(;c<p;c++)o.push(a);c=p;}if(p!==r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID "+p)}return o}(e,h,r.numGlyphs,m.length);}var f=t+c.private[1],y=Ie(e,f,c.private[0],l.objects);if(r.defaultWidthX=y.defaultWidthX,r.nominalWidthX=y.nominalWidthX,0!==y.subrs){var g=Me(e,f+y.subrs);r.subrs=g.objects,r.subrsBias=we(r.subrs);}else r.subrs=[],r.subrsBias=0;var v=Me(e,t+c.charStrings);r.nGlyphs=v.objects.length;var b=function(e,t,r,n){var a,o,i=new se.Parser(e,t);--r;var s=[".notdef"],l=i.parseCard8();if(0===l)for(var p=0;p<r;p+=1)a=i.parseSID(),s.push(Ce(n,a));else if(1===l)for(;s.length<=r;){a=i.parseSID(),o=i.parseCard8();for(var u=0;u<=o;u+=1)s.push(Ce(n,a)),a+=1;}else {if(2!==l)throw new Error("Unknown charset format "+l);for(;s.length<=r;){a=i.parseSID(),o=i.parseCard16();for(var c=0;c<=o;c+=1)s.push(Ce(n,a)),a+=1;}}return s}(e,t+c.charset,r.nGlyphs,l.objects);0===c.encoding?r.cffEncoding=new fe(ue,b):1===c.encoding?r.cffEncoding=new fe(ce,b):r.cffEncoding=function(e,t,r){var n,a={},o=new se.Parser(e,t),i=o.parseCard8();if(0===i)for(var s=o.parseCard8(),l=0;l<s;l+=1)a[n=o.parseCard8()]=l;else {if(1!==i)throw new Error("Unknown encoding format "+i);var p=o.parseCard8();n=1;for(var u=0;u<p;u+=1)for(var c=o.parseCard8(),d=o.parseCard8(),h=c;h<=c+d;h+=1)a[h]=n,n+=1;}return new fe(a,r)}(e,t+c.encoding,b),r.encoding=r.encoding||r.cffEncoding,r.glyphs=new xe.GlyphSet(r);for(var _=0;_<r.nGlyphs;_+=1){var x=v.objects[_];r.glyphs.push(_,xe.cffGlyphLoader(r,_,Re,x));}},make:function(e,t){for(var r,n=new $.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),a=1/t.unitsPerEm,o={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontBBox:t.fontBBox||[0,0,0,0],fontMatrix:[a,0,0,a,0,0],charset:999,encoding:0,charStrings:999,private:[0,999]},i=[],s=1;s<e.length;s+=1)r=e.get(s),i.push(r.name);var l=[];n.header=new $.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}]),n.nameIndex=function(e){var t=new $.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var r=0;r<e.length;r+=1)t.names.push({name:"name_"+r,type:"NAME",value:e[r]});return t}([t.postScriptName]);var p,u,c,d=ke(o,l);n.topDictIndex=Fe(d),n.globalSubrIndex=new $.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}]),n.charsets=function(e,t){for(var r=new $.Record("Charsets",[{name:"format",type:"Card8",value:0}]),n=0;n<e.length;n+=1){var a=De(e[n],t);r.fields.push({name:"glyph_"+n,type:"SID",value:a});}return r}(i,l),n.charStringsIndex=function(e){for(var t=new $.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),r=0;r<e.length;r+=1){var n=e.get(r),a=Ue(n);t.charStrings.push({name:n.name,type:"CHARSTRING",value:a});}return t}(e),n.privateDict=(p={},u=l,(c=new $.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}])).dict=Ae(Le,p,u),c),n.stringIndex=function(e){var t=new $.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var r=0;r<e.length;r+=1)t.strings.push({name:"string_"+r,type:"STRING",value:e[r]});return t}(l);var h=n.header.sizeOf()+n.nameIndex.sizeOf()+n.topDictIndex.sizeOf()+n.stringIndex.sizeOf()+n.globalSubrIndex.sizeOf();return o.charset=h,o.encoding=0,o.charStrings=o.charset+n.charsets.sizeOf(),o.private[1]=o.charStrings+n.charStringsIndex.sizeOf(),d=ke(o,l),n.topDictIndex=Fe(d),n}};var Ge={parse:function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.fontRevision=Math.round(1e3*n.parseFixed())/1e3,r.checkSumAdjustment=n.parseULong(),r.magicNumber=n.parseULong(),L.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=n.parseUShort(),r.unitsPerEm=n.parseUShort(),r.created=n.parseLongDateTime(),r.modified=n.parseLongDateTime(),r.xMin=n.parseShort(),r.yMin=n.parseShort(),r.xMax=n.parseShort(),r.yMax=n.parseShort(),r.macStyle=n.parseUShort(),r.lowestRecPPEM=n.parseUShort(),r.fontDirectionHint=n.parseShort(),r.indexToLocFormat=n.parseShort(),r.glyphDataFormat=n.parseShort(),r},make:function(e){var t=Math.round((new Date).getTime()/1e3)+2082844800,r=t;return e.createdTimestamp&&(r=e.createdTimestamp+2082844800),new $.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:r},{name:"modified",type:"LONGDATETIME",value:t},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)}};var je={parse:function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.ascender=n.parseShort(),r.descender=n.parseShort(),r.lineGap=n.parseShort(),r.advanceWidthMax=n.parseUShort(),r.minLeftSideBearing=n.parseShort(),r.minRightSideBearing=n.parseShort(),r.xMaxExtent=n.parseShort(),r.caretSlopeRise=n.parseShort(),r.caretSlopeRun=n.parseShort(),r.caretOffset=n.parseShort(),n.relativeOffset+=8,r.metricDataFormat=n.parseShort(),r.numberOfHMetrics=n.parseUShort(),r},make:function(e){return new $.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)}};var Ve={parse:function(e,t,r,n,a){for(var o,i,s=new se.Parser(e,t),l=0;l<n;l+=1){l<r&&(o=s.parseUShort(),i=s.parseShort());var p=a.get(l);p.advanceWidth=o,p.leftSideBearing=i;}},make:function(e){for(var t=new $.Table("hmtx",[]),r=0;r<e.length;r+=1){var n=e.get(r),a=n.advanceWidth||0,o=n.leftSideBearing||0;t.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:a}),t.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:o});}return t}};var ze={make:function(e){for(var t=new $.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:e.length}]),r="",n=12+4*e.length,a=0;a<e.length;++a){var o=r.indexOf(e[a]);o<0&&(o=r.length,r+=e[a]),t.fields.push({name:"offset "+a,type:"USHORT",value:n+o}),t.fields.push({name:"length "+a,type:"USHORT",value:e[a].length});}return t.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),t},parse:function(e,t){var r=new se.Parser(e,t),n=r.parseULong();L.argument(1===n,"Unsupported ltag table version."),r.skip("uLong",1);for(var a=r.parseULong(),o=[],i=0;i<a;i++){for(var s="",l=t+r.parseUShort(),p=r.parseUShort(),u=l;u<l+p;++u)s+=String.fromCharCode(e.getInt8(u));o.push(s);}return o}};var He={parse:function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.numGlyphs=n.parseUShort(),1===r.version&&(r.maxPoints=n.parseUShort(),r.maxContours=n.parseUShort(),r.maxCompositePoints=n.parseUShort(),r.maxCompositeContours=n.parseUShort(),r.maxZones=n.parseUShort(),r.maxTwilightPoints=n.parseUShort(),r.maxStorage=n.parseUShort(),r.maxFunctionDefs=n.parseUShort(),r.maxInstructionDefs=n.parseUShort(),r.maxStackElements=n.parseUShort(),r.maxSizeOfInstructions=n.parseUShort(),r.maxComponentElements=n.parseUShort(),r.maxComponentDepth=n.parseUShort()),r},make:function(e){return new $.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])}},We=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],Xe={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},qe={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},Ye={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"};function Ze(e,t,r){switch(e){case 0:if(65535===t)return "und";if(r)return r[t];break;case 1:return Xe[t];case 3:return Ye[t]}}var Qe="utf-16",Ke={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},Je={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"};function $e(e,t,r){switch(e){case 0:return Qe;case 1:return Je[r]||Ke[t];case 3:if(1===t||10===t)return Qe}}function et(e){var t={};for(var r in e)t[e[r]]=parseInt(r);return t}function tt(e,t,r,n,a,o){return new $.Record("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:t},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:n},{name:"length",type:"USHORT",value:a},{name:"offset",type:"USHORT",value:o}])}function rt(e,t){var r=function(e,t){var r=e.length,n=t.length-r+1;e:for(var a=0;a<n;a++)for(;a<n;a++){for(var o=0;o<r;o++)if(t[a+o]!==e[o])continue e;return a}return -1}(e,t);if(r<0){r=t.length;for(var n=0,a=e.length;n<a;++n)t.push(e[n]);}return r}var nt={parse:function(e,t,r){for(var n={},a=new se.Parser(e,t),o=a.parseUShort(),i=a.parseUShort(),s=a.offset+a.parseUShort(),l=0;l<i;l++){var p=a.parseUShort(),u=a.parseUShort(),c=a.parseUShort(),d=a.parseUShort(),h=We[d]||d,m=a.parseUShort(),f=a.parseUShort(),y=Ze(p,c,r),g=$e(p,u,c);if(void 0!==g&&void 0!==y){var v=void 0;if(v=g===Qe?P.UTF16(e,s+f,m):P.MACSTRING(e,s+f,m,g)){var b=n[h];void 0===b&&(b=n[h]={}),b[y]=v;}}}return 1===o&&a.parseUShort(),n},make:function(e,t){var r,n=[],a={},o=et(We);for(var i in e){var s=o[i];if(void 0===s&&(s=i),r=parseInt(s),isNaN(r))throw new Error('Name table entry "'+i+'" does not exist, see nameTableNames for complete list.');a[r]=e[i],n.push(r);}for(var l=et(Xe),p=et(Ye),u=[],c=[],d=0;d<n.length;d++){var h=a[r=n[d]];for(var m in h){var f=h[m],y=1,g=l[m],v=qe[g],b=$e(y,v,g),_=R.MACSTRING(f,b);void 0===_&&(y=0,(g=t.indexOf(m))<0&&(g=t.length,t.push(m)),v=4,_=R.UTF16(f));var x=rt(_,c);u.push(tt(y,v,g,r,_.length,x));var S=p[m];if(void 0!==S){var w=R.UTF16(f),M=rt(w,c);u.push(tt(3,1,S,r,w.length,M));}}}u.sort(function(e,t){return e.platformID-t.platformID||e.encodingID-t.encodingID||e.languageID-t.languageID||e.nameID-t.nameID});for(var E=new $.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:u.length},{name:"stringOffset",type:"USHORT",value:6+12*u.length}]),T=0;T<u.length;T++)E.fields.push({name:"record_"+T,type:"RECORD",value:u[T]});return E.fields.push({name:"strings",type:"LITERAL",value:c}),E}},at=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}];var ot={parse:function(e,t){var r={},n=new se.Parser(e,t);r.version=n.parseUShort(),r.xAvgCharWidth=n.parseShort(),r.usWeightClass=n.parseUShort(),r.usWidthClass=n.parseUShort(),r.fsType=n.parseUShort(),r.ySubscriptXSize=n.parseShort(),r.ySubscriptYSize=n.parseShort(),r.ySubscriptXOffset=n.parseShort(),r.ySubscriptYOffset=n.parseShort(),r.ySuperscriptXSize=n.parseShort(),r.ySuperscriptYSize=n.parseShort(),r.ySuperscriptXOffset=n.parseShort(),r.ySuperscriptYOffset=n.parseShort(),r.yStrikeoutSize=n.parseShort(),r.yStrikeoutPosition=n.parseShort(),r.sFamilyClass=n.parseShort(),r.panose=[];for(var a=0;a<10;a++)r.panose[a]=n.parseByte();return r.ulUnicodeRange1=n.parseULong(),r.ulUnicodeRange2=n.parseULong(),r.ulUnicodeRange3=n.parseULong(),r.ulUnicodeRange4=n.parseULong(),r.achVendID=String.fromCharCode(n.parseByte(),n.parseByte(),n.parseByte(),n.parseByte()),r.fsSelection=n.parseUShort(),r.usFirstCharIndex=n.parseUShort(),r.usLastCharIndex=n.parseUShort(),r.sTypoAscender=n.parseShort(),r.sTypoDescender=n.parseShort(),r.sTypoLineGap=n.parseShort(),r.usWinAscent=n.parseUShort(),r.usWinDescent=n.parseUShort(),1<=r.version&&(r.ulCodePageRange1=n.parseULong(),r.ulCodePageRange2=n.parseULong()),2<=r.version&&(r.sxHeight=n.parseShort(),r.sCapHeight=n.parseShort(),r.usDefaultChar=n.parseUShort(),r.usBreakChar=n.parseUShort(),r.usMaxContent=n.parseUShort()),r},make:function(e){return new $.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)},unicodeRanges:at,getUnicodeRange:function(e){for(var t=0;t<at.length;t+=1){var r=at[t];if(e>=r.begin&&e<r.end)return t}return -1}};var it={parse:function(e,t){var r={},n=new se.Parser(e,t);switch(r.version=n.parseVersion(),r.italicAngle=n.parseFixed(),r.underlinePosition=n.parseShort(),r.underlineThickness=n.parseShort(),r.isFixedPitch=n.parseULong(),r.minMemType42=n.parseULong(),r.maxMemType42=n.parseULong(),r.minMemType1=n.parseULong(),r.maxMemType1=n.parseULong(),r.version){case 1:r.names=de.slice();break;case 2:r.numberOfGlyphs=n.parseUShort(),r.glyphNameIndex=new Array(r.numberOfGlyphs);for(var a=0;a<r.numberOfGlyphs;a++)r.glyphNameIndex[a]=n.parseUShort();r.names=[];for(var o=0;o<r.numberOfGlyphs;o++)if(r.glyphNameIndex[o]>=de.length){var i=n.parseChar();r.names.push(n.parseString(i));}break;case 2.5:r.numberOfGlyphs=n.parseUShort(),r.offset=new Array(r.numberOfGlyphs);for(var s=0;s<r.numberOfGlyphs;s++)r.offset[s]=n.parseChar();}return r},make:function(){return new $.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])}},st=new Array(9);st[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(oe.coverage),deltaGlyphId:this.parseUShort()}:2===t?{substFormat:2,coverage:this.parsePointer(oe.coverage),substitute:this.parseOffset16List()}:void L.assert(!1,"0x"+e.toString(16)+": lookup type 1 format must be 1 or 2.")},st[2]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB Multiple Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),sequences:this.parseListOfLists()}},st[3]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB Alternate Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),alternateSets:this.parseListOfLists()}},st[4]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB ligature table identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),ligatureSets:this.parseListOfLists(function(){return {ligGlyph:this.parseUShort(),components:this.parseUShortList(this.parseUShort()-1)}})}};var lt={sequenceIndex:oe.uShort,lookupListIndex:oe.uShort};st[5]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return {substFormat:t,coverage:this.parsePointer(oe.coverage),ruleSets:this.parseListOfLists(function(){var e=this.parseUShort(),t=this.parseUShort();return {input:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,lt)}})};if(2===t)return {substFormat:t,coverage:this.parsePointer(oe.coverage),classDef:this.parsePointer(oe.classDef),classSets:this.parseListOfLists(function(){var e=this.parseUShort(),t=this.parseUShort();return {classes:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,lt)}})};if(3===t){var r=this.parseUShort(),n=this.parseUShort();return {substFormat:t,coverages:this.parseList(r,oe.pointer(oe.coverage)),lookupRecords:this.parseRecordList(n,lt)}}L.assert(!1,"0x"+e.toString(16)+": lookup type 5 format must be 1, 2 or 3.");},st[6]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(oe.coverage),chainRuleSets:this.parseListOfLists(function(){return {backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(lt)}})}:2===t?{substFormat:2,coverage:this.parsePointer(oe.coverage),backtrackClassDef:this.parsePointer(oe.classDef),inputClassDef:this.parsePointer(oe.classDef),lookaheadClassDef:this.parsePointer(oe.classDef),chainClassSet:this.parseListOfLists(function(){return {backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(lt)}})}:3===t?{substFormat:3,backtrackCoverage:this.parseList(oe.pointer(oe.coverage)),inputCoverage:this.parseList(oe.pointer(oe.coverage)),lookaheadCoverage:this.parseList(oe.pointer(oe.coverage)),lookupRecords:this.parseRecordList(lt)}:void L.assert(!1,"0x"+e.toString(16)+": lookup type 6 format must be 1, 2 or 3.")},st[7]=function(){var e=this.parseUShort();L.argument(1===e,"GSUB Extension Substitution subtable identifier-format must be 1");var t=this.parseUShort(),r=new oe(this.data,this.offset+this.parseULong());return {substFormat:1,lookupType:t,extension:st[t].call(r)}},st[8]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),backtrackCoverage:this.parseList(oe.pointer(oe.coverage)),lookaheadCoverage:this.parseList(oe.pointer(oe.coverage)),substitutes:this.parseUShortList()}};var pt=new Array(9);pt[1]=function(e){return 1===e.substFormat?new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)},{name:"deltaGlyphID",type:"USHORT",value:e.deltaGlyphId}]):new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:2},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.ushortList("substitute",e.substitute)))},pt[3]=function(e){return L.assert(1===e.substFormat,"Lookup type 3 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("altSet",e.alternateSets,function(e){return new $.Table("alternateSetTable",$.ushortList("alternate",e))})))},pt[4]=function(e){return L.assert(1===e.substFormat,"Lookup type 4 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("ligSet",e.ligatureSets,function(e){return new $.Table("ligatureSetTable",$.tableList("ligature",e,function(e){return new $.Table("ligatureTable",[{name:"ligGlyph",type:"USHORT",value:e.ligGlyph}].concat($.ushortList("component",e.components,e.components.length+1)))}))})))};var ut={parse:function(e,t){var r=new oe(e,t=t||0),n=r.parseVersion(1);return L.argument(1===n||1.1===n,"Unsupported GSUB table version."),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(st)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(st),variations:r.parseFeatureVariationsList()}},make:function(e){return new $.Table("GSUB",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new $.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new $.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new $.LookupList(e.lookups,pt)}])}};var ct={parse:function(e,t){var r=new se.Parser(e,t),n=r.parseULong();L.argument(1===n,"Unsupported META table version."),r.parseULong(),r.parseULong();for(var a=r.parseULong(),o={},i=0;i<a;i++){var s=r.parseTag(),l=r.parseULong(),p=r.parseULong(),u=P.UTF8(e,t+l,p);o[s]=u;}return o},make:function(e){var t=Object.keys(e).length,r="",n=16+12*t,a=new $.Table("meta",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"offset",type:"ULONG",value:n},{name:"numTags",type:"ULONG",value:t}]);for(var o in e){var i=r.length;r+=e[o],a.fields.push({name:"tag "+o,type:"TAG",value:o}),a.fields.push({name:"offset "+o,type:"ULONG",value:n+i}),a.fields.push({name:"length "+o,type:"ULONG",value:e[o].length});}return a.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),a}};function dt(e){return Math.log(e)/Math.log(2)|0}function ht(e){for(;e.length%4!=0;)e.push(0);for(var t=0,r=0;r<e.length;r+=4)t+=(e[r]<<24)+(e[r+1]<<16)+(e[r+2]<<8)+e[r+3];return t%=Math.pow(2,32)}function mt(e,t,r,n){return new $.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==t?t:0},{name:"offset",type:"ULONG",value:void 0!==r?r:0},{name:"length",type:"ULONG",value:void 0!==n?n:0}])}function ft(e){var t=new $.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);t.tables=e,t.numTables=e.length;var r=Math.pow(2,dt(t.numTables));t.searchRange=16*r,t.entrySelector=dt(r),t.rangeShift=16*t.numTables-t.searchRange;for(var n=[],a=[],o=t.sizeOf()+mt().sizeOf()*t.numTables;o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0});for(var i=0;i<e.length;i+=1){var s=e[i];L.argument(4===s.tableName.length,"Table name"+s.tableName+" is invalid.");var l=s.sizeOf(),p=mt(s.tableName,ht(s.encode()),o,l);for(n.push({name:p.tag+" Table Record",type:"RECORD",value:p}),a.push({name:s.tableName+" table",type:"RECORD",value:s}),o+=l,L.argument(!isNaN(o),"Something went wrong calculating the offset.");o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0});}return n.sort(function(e,t){return e.value.tag>t.value.tag?1:-1}),t.fields=t.fields.concat(n),t.fields=t.fields.concat(a),t}function yt(e,t,r){for(var n=0;n<t.length;n+=1){var a=e.charToGlyphIndex(t[n]);if(0<a)return e.glyphs.get(a).getMetrics()}return r}var gt={make:ft,fontToTable:function(e){for(var t,r=[],n=[],a=[],o=[],i=[],s=[],l=[],p=0,u=0,c=0,d=0,h=0,m=0;m<e.glyphs.length;m+=1){var f=e.glyphs.get(m),y=0|f.unicode;if(isNaN(f.advanceWidth))throw new Error("Glyph "+f.name+" ("+m+"): advanceWidth is not a number.");(y<t||void 0===t)&&0<y&&(t=y),p<y&&(p=y);var g=ot.getUnicodeRange(y);if(g<32)u|=1<<g;else if(g<64)c|=1<<g-32;else if(g<96)d|=1<<g-64;else {if(!(g<123))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");h|=1<<g-96;}if(".notdef"!==f.name){var v=f.getMetrics();r.push(v.xMin),n.push(v.yMin),a.push(v.xMax),o.push(v.yMax),s.push(v.leftSideBearing),l.push(v.rightSideBearing),i.push(f.advanceWidth);}}var b={xMin:Math.min.apply(null,r),yMin:Math.min.apply(null,n),xMax:Math.max.apply(null,a),yMax:Math.max.apply(null,o),advanceWidthMax:Math.max.apply(null,i),advanceWidthAvg:function(e){for(var t=0,r=0;r<e.length;r+=1)t+=e[r];return t/e.length}(i),minLeftSideBearing:Math.min.apply(null,s),maxLeftSideBearing:Math.max.apply(null,s),minRightSideBearing:Math.min.apply(null,l)};b.ascender=e.ascender,b.descender=e.descender;var _=Ge.make({flags:3,unitsPerEm:e.unitsPerEm,xMin:b.xMin,yMin:b.yMin,xMax:b.xMax,yMax:b.yMax,lowestRecPPEM:3,createdTimestamp:e.createdTimestamp}),x=je.make({ascender:b.ascender,descender:b.descender,advanceWidthMax:b.advanceWidthMax,minLeftSideBearing:b.minLeftSideBearing,minRightSideBearing:b.minRightSideBearing,xMaxExtent:b.maxLeftSideBearing+(b.xMax-b.xMin),numberOfHMetrics:e.glyphs.length}),S=He.make(e.glyphs.length),w=ot.make({xAvgCharWidth:Math.round(b.advanceWidthAvg),usWeightClass:e.tables.os2.usWeightClass,usWidthClass:e.tables.os2.usWidthClass,usFirstCharIndex:t,usLastCharIndex:p,ulUnicodeRange1:u,ulUnicodeRange2:c,ulUnicodeRange3:d,ulUnicodeRange4:h,fsSelection:e.tables.os2.fsSelection,sTypoAscender:b.ascender,sTypoDescender:b.descender,sTypoLineGap:0,usWinAscent:b.yMax,usWinDescent:Math.abs(b.yMin),ulCodePageRange1:1,sxHeight:yt(e,"xyvw",{yMax:Math.round(b.ascender/2)}).yMax,sCapHeight:yt(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",b).yMax,usDefaultChar:e.hasChar(" ")?32:0,usBreakChar:e.hasChar(" ")?32:0}),M=Ve.make(e.glyphs),E=le.make(e.glyphs),T=e.getEnglishName("fontFamily"),C=e.getEnglishName("fontSubfamily"),N=T+" "+C,O=e.getEnglishName("postScriptName");O=O||T.replace(/\s/g,"")+"-"+C;var L={};for(var I in e.names)L[I]=e.names[I];L.uniqueID||(L.uniqueID={en:e.getEnglishName("manufacturer")+":"+N}),L.postScriptName||(L.postScriptName={en:O}),L.preferredFamily||(L.preferredFamily=e.names.fontFamily),L.preferredSubfamily||(L.preferredSubfamily=e.names.fontSubfamily);var P=[],R=nt.make(L,P),D=0<P.length?ze.make(P):void 0,A=it.make(),k=Be.make(e.glyphs,{version:e.getEnglishName("version"),fullName:N,familyName:T,weightName:C,postScriptName:O,unitsPerEm:e.unitsPerEm,fontBBox:[0,b.yMin,b.ascender,b.advanceWidthMax]}),F=e.metas&&0<Object.keys(e.metas).length?ct.make(e.metas):void 0,U=[_,x,S,w,R,E,A,k,M];D&&U.push(D),e.tables.gsub&&U.push(ut.make(e.tables.gsub)),F&&U.push(F);for(var B=ft(U),G=ht(B.encode()),j=B.fields,V=!1,z=0;z<j.length;z+=1)if("head table"===j[z].name){j[z].value.checkSumAdjustment=2981146554-G,V=!0;break}if(!V)throw new Error("Could not find head table with checkSum to adjust.");return B},computeCheckSum:ht};function vt(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a].tag;if(o===t)return a;o<t?r=1+a:n=a-1;}return -r-1}function bt(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a];if(o===t)return a;o<t?r=1+a:n=a-1;}return -r-1}function _t(e,t){for(var r,n=0,a=e.length-1;n<=a;){var o=n+a>>>1,i=(r=e[o]).start;if(i===t)return r;i<t?n=1+o:a=o-1;}if(0<n)return t>(r=e[n-1]).end?0:r}function xt(e,t){this.font=e,this.tableName=t;}function St(e){xt.call(this,e,"gpos");}function wt(e){xt.call(this,e,"gsub");}function Mt(e,t){var r=e.length;if(r!==t.length)return !1;for(var n=0;n<r;n++)if(e[n]!==t[n])return !1;return !0}function Et(e,t,r){for(var n=e.subtables,a=0;a<n.length;a++){var o=n[a];if(o.substFormat===t)return o}if(r)return n.push(r),r}function Tt(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;++n)r[n]=e[n];return t}function Ct(e,t){if(!e)throw t}function Nt(e,t,r,n,a){var o;return o=0<(t&n)?(o=e.parseByte(),0==(t&a)&&(o=-o),r+o):0<(t&a)?r:r+e.parseShort()}function Ot(e,t,r){var n,a,o=new se.Parser(t,r);if(e.numberOfContours=o.parseShort(),e._xMin=o.parseShort(),e._yMin=o.parseShort(),e._xMax=o.parseShort(),e._yMax=o.parseShort(),0<e.numberOfContours){for(var i=e.endPointIndices=[],s=0;s<e.numberOfContours;s+=1)i.push(o.parseUShort());e.instructionLength=o.parseUShort(),e.instructions=[];for(var l=0;l<e.instructionLength;l+=1)e.instructions.push(o.parseByte());var p=i[i.length-1]+1;n=[];for(var u=0;u<p;u+=1)if(a=o.parseByte(),n.push(a),0<(8&a))for(var c=o.parseByte(),d=0;d<c;d+=1)n.push(a),u+=1;if(L.argument(n.length===p,"Bad flags."),0<i.length){var h,m=[];if(0<p){for(var f=0;f<p;f+=1)a=n[f],(h={}).onCurve=!!(1&a),h.lastPointOfContour=0<=i.indexOf(f),m.push(h);for(var y=0,g=0;g<p;g+=1)a=n[g],(h=m[g]).x=Nt(o,a,y,2,16),y=h.x;for(var v=0,b=0;b<p;b+=1)a=n[b],(h=m[b]).y=Nt(o,a,v,4,32),v=h.y;}e.points=m;}else e.points=[];}else if(0===e.numberOfContours)e.points=[];else {e.isComposite=!0,e.points=[],e.components=[];for(var _=!0;_;){n=o.parseUShort();var x={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};0<(1&n)?0<(2&n)?(x.dx=o.parseShort(),x.dy=o.parseShort()):x.matchedPoints=[o.parseUShort(),o.parseUShort()]:0<(2&n)?(x.dx=o.parseChar(),x.dy=o.parseChar()):x.matchedPoints=[o.parseByte(),o.parseByte()],0<(8&n)?x.xScale=x.yScale=o.parseF2Dot14():0<(64&n)?(x.xScale=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()):0<(128&n)&&(x.xScale=o.parseF2Dot14(),x.scale01=o.parseF2Dot14(),x.scale10=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()),e.components.push(x),_=!!(32&n);}if(256&n){e.instructionLength=o.parseUShort(),e.instructions=[];for(var S=0;S<e.instructionLength;S+=1)e.instructions.push(o.parseByte());}}}function Lt(e,t){for(var r=[],n=0;n<e.length;n+=1){var a=e[n],o={x:t.xScale*a.x+t.scale01*a.y+t.dx,y:t.scale10*a.x+t.yScale*a.y+t.dy,onCurve:a.onCurve,lastPointOfContour:a.lastPointOfContour};r.push(o);}return r}function It(e){var t=new A;if(!e)return t;for(var r=function(e){for(var t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];r.push(a),a.lastPointOfContour&&(t.push(r),r=[]);}return L.argument(0===r.length,"There are still points left in the current contour."),t}(e),n=0;n<r.length;++n){var a=r[n],o=null,i=a[a.length-1],s=a[0];if(i.onCurve)t.moveTo(i.x,i.y);else if(s.onCurve)t.moveTo(s.x,s.y);else {var l={x:.5*(i.x+s.x),y:.5*(i.y+s.y)};t.moveTo(l.x,l.y);}for(var p=0;p<a.length;++p)if(o=i,i=s,s=a[(p+1)%a.length],i.onCurve)t.lineTo(i.x,i.y);else {var u=s;o.onCurve||{x:.5*(i.x+o.x),y:.5*(i.y+o.y)},s.onCurve||(u={x:.5*(i.x+s.x),y:.5*(i.y+s.y)}),t.quadraticCurveTo(i.x,i.y,u.x,u.y);}t.closePath();}return t}function Pt(e,t){if(t.isComposite)for(var r=0;r<t.components.length;r+=1){var n=t.components[r],a=e.get(n.glyphIndex);if(a.getPath(),a.points){var o=void 0;if(void 0===n.matchedPoints)o=Lt(a.points,n);else {if(n.matchedPoints[0]>t.points.length-1||n.matchedPoints[1]>a.points.length-1)throw Error("Matched points out of range in "+t.name);var i=t.points[n.matchedPoints[0]],s=a.points[n.matchedPoints[1]],l={xScale:n.xScale,scale01:n.scale01,scale10:n.scale10,yScale:n.yScale,dx:0,dy:0};s=Lt([s],l)[0],l.dx=i.x-s.x,l.dy=i.y-s.y,o=Lt(a.points,l);}t.points=t.points.concat(o);}}return It(t.points)}(St.prototype=xt.prototype={searchTag:vt,binSearch:bt,getTable:function(e){var t=this.font.tables[this.tableName];return !t&&e&&(t=this.font.tables[this.tableName]=this.createDefaultTable()),t},getScriptNames:function(){var e=this.getTable();return e?e.scripts.map(function(e){return e.tag}):[]},getDefaultScriptName:function(){var e=this.getTable();if(e){for(var t=!1,r=0;r<e.scripts.length;r++){var n=e.scripts[r].tag;if("DFLT"===n)return n;"latn"===n&&(t=!0);}return t?"latn":void 0}},getScriptTable:function(e,t){var r=this.getTable(t);if(r){e=e||"DFLT";var n=r.scripts,a=vt(r.scripts,e);if(0<=a)return n[a].script;if(t){var o={tag:e,script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}};return n.splice(-1-a,0,o),o.script}}},getLangSysTable:function(e,t,r){var n=this.getScriptTable(e,r);if(n){if(!t||"dflt"===t||"DFLT"===t)return n.defaultLangSys;var a=vt(n.langSysRecords,t);if(0<=a)return n.langSysRecords[a].langSys;if(r){var o={tag:t,langSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]}};return n.langSysRecords.splice(-1-a,0,o),o.langSys}}},getFeatureTable:function(e,t,r,n){var a=this.getLangSysTable(e,t,n);if(a){for(var o,i=a.featureIndexes,s=this.font.tables[this.tableName].features,l=0;l<i.length;l++)if((o=s[i[l]]).tag===r)return o.feature;if(n){var p=s.length;return L.assert(0===p||r>=s[p-1].tag,"Features must be added in alphabetical order."),o={tag:r,feature:{params:0,lookupListIndexes:[]}},s.push(o),i.push(p),o.feature}}},getLookupTables:function(e,t,r,n,a){var o=this.getFeatureTable(e,t,r,a),i=[];if(o){for(var s,l=o.lookupListIndexes,p=this.font.tables[this.tableName].lookups,u=0;u<l.length;u++)(s=p[l[u]]).lookupType===n&&i.push(s);if(0===i.length&&a){s={lookupType:n,lookupFlag:0,subtables:[],markFilteringSet:void 0};var c=p.length;return p.push(s),l.push(c),[s]}}return i},getGlyphClass:function(e,t){switch(e.format){case 1:return e.startGlyph<=t&&t<e.startGlyph+e.classes.length?e.classes[t-e.startGlyph]:0;case 2:var r=_t(e.ranges,t);return r?r.classId:0}},getCoverageIndex:function(e,t){switch(e.format){case 1:var r=bt(e.glyphs,t);return 0<=r?r:-1;case 2:var n=_t(e.ranges,t);return n?n.index+t-n.start:-1}},expandCoverage:function(e){if(1===e.format)return e.glyphs;for(var t=[],r=e.ranges,n=0;n<r.length;n++)for(var a=r[n],o=a.start,i=a.end,s=o;s<=i;s++)t.push(s);return t}}).init=function(){var e=this.getDefaultScriptName();this.defaultKerningTables=this.getKerningTables(e);},St.prototype.getKerningValue=function(e,t,r){for(var n=0;n<e.length;n++)for(var a=e[n].subtables,o=0;o<a.length;o++){var i=a[o],s=this.getCoverageIndex(i.coverage,t);if(!(s<0))switch(i.posFormat){case 1:for(var l=i.pairSets[s],p=0;p<l.length;p++){var u=l[p];if(u.secondGlyph===r)return u.value1&&u.value1.xAdvance||0}break;case 2:var c=this.getGlyphClass(i.classDef1,t),d=this.getGlyphClass(i.classDef2,r),h=i.classRecords[c][d];return h.value1&&h.value1.xAdvance||0}}return 0},St.prototype.getKerningTables=function(e,t){if(this.font.tables.gpos)return this.getLookupTables(e,t,"kern",2)},(wt.prototype=xt.prototype).createDefaultTable=function(){return {version:1,scripts:[{tag:"DFLT",script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}}],features:[],lookups:[]}},wt.prototype.getSingle=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,1),o=0;o<a.length;o++)for(var i=a[o].subtables,s=0;s<i.length;s++){var l=i[s],p=this.expandCoverage(l.coverage),u=void 0;if(1===l.substFormat){var c=l.deltaGlyphId;for(u=0;u<p.length;u++){var d=p[u];n.push({sub:d,by:d+c});}}else {var h=l.substitute;for(u=0;u<p.length;u++)n.push({sub:p[u],by:h[u]});}}return n},wt.prototype.getAlternates=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,3),o=0;o<a.length;o++)for(var i=a[o].subtables,s=0;s<i.length;s++)for(var l=i[s],p=this.expandCoverage(l.coverage),u=l.alternateSets,c=0;c<p.length;c++)n.push({sub:p[c],by:u[c]});return n},wt.prototype.getLigatures=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,4),o=0;o<a.length;o++)for(var i=a[o].subtables,s=0;s<i.length;s++)for(var l=i[s],p=this.expandCoverage(l.coverage),u=l.ligatureSets,c=0;c<p.length;c++)for(var d=p[c],h=u[c],m=0;m<h.length;m++){var f=h[m];n.push({sub:[d].concat(f.components),by:f.ligGlyph});}return n},wt.prototype.addSingle=function(e,t,r,n){var a=Et(this.getLookupTables(r,n,e,1,!0)[0],2,{substFormat:2,coverage:{format:1,glyphs:[]},substitute:[]});L.assert(1===a.coverage.format,"Ligature: unable to modify coverage table format "+a.coverage.format);var o=t.sub,i=this.binSearch(a.coverage.glyphs,o);i<0&&(i=-1-i,a.coverage.glyphs.splice(i,0,o),a.substitute.splice(i,0,0)),a.substitute[i]=t.by;},wt.prototype.addAlternate=function(e,t,r,n){var a=Et(this.getLookupTables(r,n,e,3,!0)[0],1,{substFormat:1,coverage:{format:1,glyphs:[]},alternateSets:[]});L.assert(1===a.coverage.format,"Ligature: unable to modify coverage table format "+a.coverage.format);var o=t.sub,i=this.binSearch(a.coverage.glyphs,o);i<0&&(i=-1-i,a.coverage.glyphs.splice(i,0,o),a.alternateSets.splice(i,0,0)),a.alternateSets[i]=t.by;},wt.prototype.addLigature=function(e,t,r,n){var a=this.getLookupTables(r,n,e,4,!0)[0],o=a.subtables[0];o||(o={substFormat:1,coverage:{format:1,glyphs:[]},ligatureSets:[]},a.subtables[0]=o),L.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var i=t.sub[0],s=t.sub.slice(1),l={ligGlyph:t.by,components:s},p=this.binSearch(o.coverage.glyphs,i);if(0<=p){for(var u=o.ligatureSets[p],c=0;c<u.length;c++)if(Mt(u[c].components,s))return;u.push(l);}else p=-1-p,o.coverage.glyphs.splice(p,0,i),o.ligatureSets.splice(p,0,[l]);},wt.prototype.getFeature=function(e,t,r){if(/ss\d\d/.test(e))return this.getSingle(e,t,r);switch(e){case"aalt":case"salt":return this.getSingle(e,t,r).concat(this.getAlternates(e,t,r));case"dlig":case"liga":case"rlig":return this.getLigatures(e,t,r)}},wt.prototype.add=function(e,t,r,n){if(/ss\d\d/.test(e))return this.addSingle(e,t,r,n);switch(e){case"aalt":case"salt":return "number"==typeof t.by?this.addSingle(e,t,r,n):this.addAlternate(e,t,r,n);case"dlig":case"liga":case"rlig":return this.addLigature(e,t,r,n)}};var Rt,Dt,At,kt,Ft={getPath:It,parse:function(e,t,r,n){for(var a=new xe.GlyphSet(n),o=0;o<r.length-1;o+=1){var i=r[o];i!==r[o+1]?a.push(o,xe.ttfGlyphLoader(n,o,Ot,e,t+i,Pt)):a.push(o,xe.glyphLoader(n,o));}return a}};function Ut(e){this.font=e,this.getCommands=function(e){return Ft.getPath(e).commands},this._fpgmState=this._prepState=void 0,this._errorState=0;}function Bt(e){return e}function Gt(e){return Math.sign(e)*Math.round(Math.abs(e))}function jt(e){return Math.sign(e)*Math.round(Math.abs(2*e))/2}function Vt(e){return Math.sign(e)*(Math.round(Math.abs(e)+.5)-.5)}function zt(e){return Math.sign(e)*Math.ceil(Math.abs(e))}function Ht(e){return Math.sign(e)*Math.floor(Math.abs(e))}function Wt(e){var t=this.srPeriod,r=this.srPhase,n=1;return e<0&&(e=-e,n=-1),e+=this.srThreshold-r,e=Math.trunc(e/t)*t,(e+=r)<0?r*n:e*n}var Xt={x:1,y:0,axis:"x",distance:function(e,t,r,n){return (r?e.xo:e.x)-(n?t.xo:t.x)},interpolate:function(e,t,r,n){var a,o,i,s,l,p,u;if(!n||n===this)return a=e.xo-t.xo,o=e.xo-r.xo,l=t.x-t.xo,p=r.x-r.xo,0===(u=(i=Math.abs(a))+(s=Math.abs(o)))?void(e.x=e.xo+(l+p)/2):void(e.x=e.xo+(l*s+p*i)/u);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),l=n.distance(t,t,!1,!0),p=n.distance(r,r,!1,!0),0!==(u=(i=Math.abs(a))+(s=Math.abs(o)))?Xt.setRelative(e,e,(l*s+p*i)/u,n,!0):Xt.setRelative(e,e,(l+p)/2,n,!0);},normalSlope:Number.NEGATIVE_INFINITY,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,i=a?t.yo:t.y,s=o+r*n.x,l=i+r*n.y;e.x=s+(e.y-l)/n.normalSlope;}else e.x=(a?t.xo:t.x)+r;},slope:0,touch:function(e){e.xTouched=!0;},touched:function(e){return e.xTouched},untouch:function(e){e.xTouched=!1;}},qt={x:0,y:1,axis:"y",distance:function(e,t,r,n){return (r?e.yo:e.y)-(n?t.yo:t.y)},interpolate:function(e,t,r,n){var a,o,i,s,l,p,u;if(!n||n===this)return a=e.yo-t.yo,o=e.yo-r.yo,l=t.y-t.yo,p=r.y-r.yo,0===(u=(i=Math.abs(a))+(s=Math.abs(o)))?void(e.y=e.yo+(l+p)/2):void(e.y=e.yo+(l*s+p*i)/u);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),l=n.distance(t,t,!1,!0),p=n.distance(r,r,!1,!0),0!==(u=(i=Math.abs(a))+(s=Math.abs(o)))?qt.setRelative(e,e,(l*s+p*i)/u,n,!0):qt.setRelative(e,e,(l+p)/2,n,!0);},normalSlope:0,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,i=a?t.yo:t.y,s=o+r*n.x,l=i+r*n.y;e.y=l+n.normalSlope*(e.x-s);}else e.y=(a?t.yo:t.y)+r;},slope:Number.POSITIVE_INFINITY,touch:function(e){e.yTouched=!0;},touched:function(e){return e.yTouched},untouch:function(e){e.yTouched=!1;}};function Yt(e,t){this.x=e,this.y=t,this.axis=void 0,this.slope=t/e,this.normalSlope=-e/t,Object.freeze(this);}function Zt(e,t){var r=Math.sqrt(e*e+t*t);return t/=r,1===(e/=r)&&0===t?Xt:0===e&&1===t?qt:new Yt(e,t)}function Qt(e,t,r,n){this.x=this.xo=Math.round(64*e)/64,this.y=this.yo=Math.round(64*t)/64,this.lastPointOfContour=r,this.onCurve=n,this.prevPointOnContour=void 0,this.nextPointOnContour=void 0,this.xTouched=!1,this.yTouched=!1,Object.preventExtensions(this);}Object.freeze(Xt),Object.freeze(qt),Yt.prototype.distance=function(e,t,r,n){return this.x*Xt.distance(e,t,r,n)+this.y*qt.distance(e,t,r,n)},Yt.prototype.interpolate=function(e,t,r,n){var a,o,i,s,l,p,u;i=n.distance(e,t,!0,!0),s=n.distance(e,r,!0,!0),a=n.distance(t,t,!1,!0),o=n.distance(r,r,!1,!0),0!==(u=(l=Math.abs(i))+(p=Math.abs(s)))?this.setRelative(e,e,(a*p+o*l)/u,n,!0):this.setRelative(e,e,(a+o)/2,n,!0);},Yt.prototype.setRelative=function(e,t,r,n,a){n=n||this;var o=a?t.xo:t.x,i=a?t.yo:t.y,s=o+r*n.x,l=i+r*n.y,p=n.normalSlope,u=this.slope,c=e.x,d=e.y;e.x=(u*c-p*s+l-d)/(u-p),e.y=u*(e.x-c)+d;},Yt.prototype.touch=function(e){e.xTouched=!0,e.yTouched=!0;},Qt.prototype.nextTouched=function(e){for(var t=this.nextPointOnContour;!e.touched(t)&&t!==this;)t=t.nextPointOnContour;return t},Qt.prototype.prevTouched=function(e){for(var t=this.prevPointOnContour;!e.touched(t)&&t!==this;)t=t.prevPointOnContour;return t};var Kt=Object.freeze(new Qt(0,0)),Jt={cvCutIn:17/16,deltaBase:9,deltaShift:.125,loop:1,minDis:1,autoFlip:!0};function $t(e,t){switch(this.env=e,this.stack=[],this.prog=t,e){case"glyf":this.zp0=this.zp1=this.zp2=1,this.rp0=this.rp1=this.rp2=0;case"prep":this.fv=this.pv=this.dpv=Xt,this.round=Gt;}}function er(e){for(var t=e.tZone=new Array(e.gZone.length),r=0;r<t.length;r++)t[r]=new Qt(0,0);}function tr(e,t){var r,n=e.prog,a=e.ip,o=1;do{if(88===(r=n[++a]))o++;else if(89===r)o--;else if(64===r)a+=n[a+1]+1;else if(65===r)a+=2*n[a+1]+1;else if(176<=r&&r<=183)a+=r-176+1;else if(184<=r&&r<=191)a+=2*(r-184+1);else if(t&&1===o&&27===r)break}while(0<o);e.ip=a;}function rr(e,t){E.DEBUG&&console.log(t.step,"SVTCA["+e.axis+"]"),t.fv=t.pv=t.dpv=e;}function nr(e,t){E.DEBUG&&console.log(t.step,"SPVTCA["+e.axis+"]"),t.pv=t.dpv=e;}function ar(e,t){E.DEBUG&&console.log(t.step,"SFVTCA["+e.axis+"]"),t.fv=e;}function or(e,t){var r,n,a=t.stack,o=a.pop(),i=a.pop(),s=t.z2[o],l=t.z1[i];E.DEBUG&&console.log("SPVTL["+e+"]",o,i),n=e?(r=s.y-l.y,l.x-s.x):(r=l.x-s.x,l.y-s.y),t.pv=t.dpv=Zt(r,n);}function ir(e,t){var r,n,a=t.stack,o=a.pop(),i=a.pop(),s=t.z2[o],l=t.z1[i];E.DEBUG&&console.log("SFVTL["+e+"]",o,i),n=e?(r=s.y-l.y,l.x-s.x):(r=l.x-s.x,l.y-s.y),t.fv=Zt(r,n);}function sr(e){E.DEBUG&&console.log(e.step,"POP[]"),e.stack.pop();}function lr(e,t){var r=t.stack.pop(),n=t.z0[r],a=t.fv,o=t.pv;E.DEBUG&&console.log(t.step,"MDAP["+e+"]",r);var i=o.distance(n,Kt);e&&(i=t.round(i)),a.setRelative(n,Kt,i,o),a.touch(n),t.rp0=t.rp1=r;}function pr(e,t){var r,n,a,o=t.z2,i=o.length-2;E.DEBUG&&console.log(t.step,"IUP["+e.axis+"]");for(var s=0;s<i;s++)r=o[s],e.touched(r)||(n=r.prevTouched(e))!==r&&(n===(a=r.nextTouched(e))&&e.setRelative(r,r,e.distance(n,n,!1,!0),e,!0),e.interpolate(r,n,a,e));}function ur(e,t){for(var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,i=t.pv,s=t.loop,l=t.z2;s--;){var p=r.pop(),u=l[p],c=i.distance(a,a,!1,!0);o.setRelative(u,u,c,i),o.touch(u),E.DEBUG&&console.log(t.step,(1<t.loop?"loop "+(t.loop-s)+": ":"")+"SHP["+(e?"rp1":"rp2")+"]",p);}t.loop=1;}function cr(e,t){var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,i=t.pv,s=r.pop(),l=t.z2[t.contours[s]],p=l;E.DEBUG&&console.log(t.step,"SHC["+e+"]",s);for(var u=i.distance(a,a,!1,!0);p!==a&&o.setRelative(p,p,u,i),(p=p.nextPointOnContour)!==l;);}function dr(e,t){var r,n,a=t.stack,o=e?t.rp1:t.rp2,i=(e?t.z0:t.z1)[o],s=t.fv,l=t.pv,p=a.pop();switch(E.DEBUG&&console.log(t.step,"SHZ["+e+"]",p),p){case 0:r=t.tZone;break;case 1:r=t.gZone;break;default:throw new Error("Invalid zone")}for(var u=l.distance(i,i,!1,!0),c=r.length-2,d=0;d<c;d++)n=r[d],s.setRelative(n,n,u,l);}function hr(e,t){var r=t.stack,n=r.pop()/64,a=r.pop(),o=t.z1[a],i=t.z0[t.rp0],s=t.fv,l=t.pv;s.setRelative(o,i,n,l),s.touch(o),E.DEBUG&&console.log(t.step,"MSIRP["+e+"]",n,a),t.rp1=t.rp0,t.rp2=a,e&&(t.rp0=a);}function mr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z0[a],i=t.fv,s=t.pv,l=t.cvt[n];E.DEBUG&&console.log(t.step,"MIAP["+e+"]",n,"(",l,")",a);var p=s.distance(o,Kt);e&&(Math.abs(p-l)<t.cvCutIn&&(p=l),p=t.round(p)),i.setRelative(o,Kt,p,s),0===t.zp0&&(o.xo=o.x,o.yo=o.y),i.touch(o),t.rp0=t.rp1=a;}function fr(e,t){var r=t.stack,n=r.pop(),a=t.z2[n];E.DEBUG&&console.log(t.step,"GC["+e+"]",n),r.push(64*t.dpv.distance(a,Kt,e,!1));}function yr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z1[n],i=t.z0[a],s=t.dpv.distance(i,o,e,e);E.DEBUG&&console.log(t.step,"MD["+e+"]",n,a,"->",s),t.stack.push(Math.round(64*s));}function gr(e,t){var r=t.stack,n=r.pop(),a=t.fv,o=t.pv,i=t.ppem,s=t.deltaBase+16*(e-1),l=t.deltaShift,p=t.z0;E.DEBUG&&console.log(t.step,"DELTAP["+e+"]",n,r);for(var u=0;u<n;u++){var c=r.pop(),d=r.pop();if(s+((240&d)>>4)===i){var h=(15&d)-8;0<=h&&h++,E.DEBUG&&console.log(t.step,"DELTAPFIX",c,"by",h*l);var m=p[c];a.setRelative(m,m,h*l,o);}}}function vr(e,t){var r=t.stack,n=r.pop();E.DEBUG&&console.log(t.step,"ROUND[]"),r.push(64*t.round(n/64));}function br(e,t){var r=t.stack,n=r.pop(),a=t.ppem,o=t.deltaBase+16*(e-1),i=t.deltaShift;E.DEBUG&&console.log(t.step,"DELTAC["+e+"]",n,r);for(var s=0;s<n;s++){var l=r.pop(),p=r.pop();if(o+((240&p)>>4)===a){var u=(15&p)-8;0<=u&&u++;var c=u*i;E.DEBUG&&console.log(t.step,"DELTACFIX",l,"by",c),t.cvt[l]+=c;}}}function _r(e,t){var r,n,a=t.stack,o=a.pop(),i=a.pop(),s=t.z2[o],l=t.z1[i];E.DEBUG&&console.log(t.step,"SDPVTL["+e+"]",o,i),n=e?(r=s.y-l.y,l.x-s.x):(r=l.x-s.x,l.y-s.y),t.dpv=Zt(r,n);}function xr(e,t){var r=t.stack,n=t.prog,a=t.ip;E.DEBUG&&console.log(t.step,"PUSHB["+e+"]");for(var o=0;o<e;o++)r.push(n[++a]);t.ip=a;}function Sr(e,t){var r=t.ip,n=t.prog,a=t.stack;E.DEBUG&&console.log(t.ip,"PUSHW["+e+"]");for(var o=0;o<e;o++){var i=n[++r]<<8|n[++r];32768&i&&(i=-(1+(65535^i))),a.push(i);}t.ip=r;}function wr(e,t,r,n,a,o){var i,s,l,p,u=o.stack,c=e&&u.pop(),d=u.pop(),h=o.rp0,m=o.z0[h],f=o.z1[d],y=o.minDis,g=o.fv,v=o.dpv;l=0<=(s=i=v.distance(f,m,!0,!0))?1:-1,s=Math.abs(s),e&&(p=o.cvt[c],n&&Math.abs(s-p)<o.cvCutIn&&(s=p)),r&&s<y&&(s=y),n&&(s=o.round(s)),g.setRelative(f,m,l*s,v),g.touch(f),E.DEBUG&&console.log(o.step,(e?"MIRP[":"MDRP[")+(t?"M":"m")+(r?">":"_")+(n?"R":"_")+(0===a?"Gr":1===a?"Bl":2===a?"Wh":"")+"]",e?c+"("+o.cvt[c]+","+p+")":"",d,"(d =",i,"->",l*s,")"),o.rp1=o.rp0,o.rp2=d,t&&(o.rp0=d);}Ut.prototype.exec=function(e,t){if("number"!=typeof t)throw new Error("Point size is not a number!");if(!(2<this._errorState)){var r=this.font,n=this._prepState;if(!n||n.ppem!==t){var a=this._fpgmState;if(!a){$t.prototype=Jt,(a=this._fpgmState=new $t("fpgm",r.tables.fpgm)).funcs=[],a.font=r,E.DEBUG&&(console.log("---EXEC FPGM---"),a.step=-1);try{Dt(a);}catch(e){return console.log("Hinting error in FPGM:"+e),void(this._errorState=3)}}$t.prototype=a,(n=this._prepState=new $t("prep",r.tables.prep)).ppem=t;var o=r.tables.cvt;if(o)for(var i=n.cvt=new Array(o.length),s=t/r.unitsPerEm,l=0;l<o.length;l++)i[l]=o[l]*s;else n.cvt=[];E.DEBUG&&(console.log("---EXEC PREP---"),n.step=-1);try{Dt(n);}catch(e){this._errorState<2&&console.log("Hinting error in PREP:"+e),this._errorState=2;}}if(!(1<this._errorState))try{return At(e,n)}catch(e){return this._errorState<1&&(console.log("Hinting error:"+e),console.log("Note: further hinting errors are silenced")),void(this._errorState=1)}}},At=function(e,t){var r,n,a,o=t.ppem/t.font.unitsPerEm,i=o,s=e.components;if($t.prototype=t,s){var l=t.font;n=[],r=[];for(var p=0;p<s.length;p++){var u=s[p],c=l.glyphs.get(u.glyphIndex);a=new $t("glyf",c.instructions),E.DEBUG&&(console.log("---EXEC COMP "+p+"---"),a.step=-1),kt(c,a,o,i);for(var d=Math.round(u.dx*o),h=Math.round(u.dy*i),m=a.gZone,f=a.contours,y=0;y<m.length;y++){var g=m[y];g.xTouched=g.yTouched=!1,g.xo=g.x=g.x+d,g.yo=g.y=g.y+h;}var v=n.length;n.push.apply(n,m);for(var b=0;b<f.length;b++)r.push(f[b]+v);}e.instructions&&!a.inhibitGridFit&&((a=new $t("glyf",e.instructions)).gZone=a.z0=a.z1=a.z2=n,a.contours=r,n.push(new Qt(0,0),new Qt(Math.round(e.advanceWidth*o),0)),E.DEBUG&&(console.log("---EXEC COMPOSITE---"),a.step=-1),Dt(a),n.length-=2);}else a=new $t("glyf",e.instructions),E.DEBUG&&(console.log("---EXEC GLYPH---"),a.step=-1),kt(e,a,o,i),n=a.gZone;return n},kt=function(e,t,r,n){for(var a,o,i,s=e.points||[],l=s.length,p=t.gZone=t.z0=t.z1=t.z2=[],u=t.contours=[],c=0;c<l;c++)a=s[c],p[c]=new Qt(a.x*r,a.y*n,a.lastPointOfContour,a.onCurve);for(var d=0;d<l;d++)a=p[d],o||(o=a,u.push(d)),a.lastPointOfContour?((a.nextPointOnContour=o).prevPointOnContour=a,o=void 0):(i=p[d+1],(a.nextPointOnContour=i).prevPointOnContour=a);if(!t.inhibitGridFit){if(E.DEBUG){console.log("PROCESSING GLYPH",t.stack);for(var h=0;h<l;h++)console.log(h,p[h].x,p[h].y);}if(p.push(new Qt(0,0),new Qt(Math.round(e.advanceWidth*r),0)),Dt(t),p.length-=2,E.DEBUG){console.log("FINISHED GLYPH",t.stack);for(var m=0;m<l;m++)console.log(m,p[m].x,p[m].y);}}},Dt=function(e){var t=e.prog;if(t){var r,n=t.length;for(e.ip=0;e.ip<n;e.ip++){if(E.DEBUG&&e.step++,!(r=Rt[t[e.ip]]))throw new Error("unknown instruction: 0x"+Number(t[e.ip]).toString(16));r(e);}}},Rt=[rr.bind(void 0,qt),rr.bind(void 0,Xt),nr.bind(void 0,qt),nr.bind(void 0,Xt),ar.bind(void 0,qt),ar.bind(void 0,Xt),or.bind(void 0,0),or.bind(void 0,1),ir.bind(void 0,0),ir.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.pv=e.dpv=Zt(n,r);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.fv=Zt(n,r);},function(e){var t=e.stack,r=e.pv;E.DEBUG&&console.log(e.step,"GPV[]"),t.push(16384*r.x),t.push(16384*r.y);},function(e){var t=e.stack,r=e.fv;E.DEBUG&&console.log(e.step,"GFV[]"),t.push(16384*r.x),t.push(16384*r.y);},function(e){e.fv=e.pv,E.DEBUG&&console.log(e.step,"SFVTPV[]");},function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop(),o=t.pop(),i=t.pop(),s=e.z0,l=e.z1,p=s[r],u=s[n],c=l[a],d=l[o],h=e.z2[i];E.DEBUG&&console.log("ISECT[], ",r,n,a,o,i);var m=p.x,f=p.y,y=u.x,g=u.y,v=c.x,b=c.y,_=d.x,x=d.y,S=(m-y)*(b-x)-(f-g)*(v-_),w=m*g-f*y,M=v*x-b*_;h.x=(w*(v-_)-M*(m-y))/S,h.y=(w*(b-x)-M*(f-g))/S;},function(e){e.rp0=e.stack.pop(),E.DEBUG&&console.log(e.step,"SRP0[]",e.rp0);},function(e){e.rp1=e.stack.pop(),E.DEBUG&&console.log(e.step,"SRP1[]",e.rp1);},function(e){e.rp2=e.stack.pop(),E.DEBUG&&console.log(e.step,"SRP2[]",e.rp2);},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZP0[]",t),e.zp0=t){case 0:e.tZone||er(e),e.z0=e.tZone;break;case 1:e.z0=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZP1[]",t),e.zp1=t){case 0:e.tZone||er(e),e.z1=e.tZone;break;case 1:e.z1=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZP2[]",t),e.zp2=t){case 0:e.tZone||er(e),e.z2=e.tZone;break;case 1:e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SZPS[]",t),e.zp0=e.zp1=e.zp2=t,t){case 0:e.tZone||er(e),e.z0=e.z1=e.z2=e.tZone;break;case 1:e.z0=e.z1=e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){e.loop=e.stack.pop(),E.DEBUG&&console.log(e.step,"SLOOP[]",e.loop);},function(e){E.DEBUG&&console.log(e.step,"RTG[]"),e.round=Gt;},function(e){E.DEBUG&&console.log(e.step,"RTHG[]"),e.round=Vt;},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SMD[]",t),e.minDis=t/64;},function(e){E.DEBUG&&console.log(e.step,"ELSE[]"),tr(e,!1);},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"JMPR[]",t),e.ip+=t-1;},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SCVTCI[]",t),e.cvCutIn=t/64;},void 0,void 0,function(e){var t=e.stack;E.DEBUG&&console.log(e.step,"DUP[]"),t.push(t[t.length-1]);},sr,function(e){E.DEBUG&&console.log(e.step,"CLEAR[]"),e.stack.length=0;},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"SWAP[]"),t.push(r),t.push(n);},function(e){var t=e.stack;E.DEBUG&&console.log(e.step,"DEPTH[]"),t.push(t.length);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"CINDEX[]",r),t.push(t[t.length-r]);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"MINDEX[]",r),t.push(t.splice(t.length-r,1)[0]);},void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"LOOPCALL[]",r,n);var a=e.ip,o=e.prog;e.prog=e.funcs[r];for(var i=0;i<n;i++)Dt(e),E.DEBUG&&console.log(++e.step,i+1<n?"next loopcall":"done loopcall",i);e.ip=a,e.prog=o;},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"CALL[]",t);var r=e.ip,n=e.prog;e.prog=e.funcs[t],Dt(e),e.ip=r,e.prog=n,E.DEBUG&&console.log(++e.step,"returning from",t);},function(e){if("fpgm"!==e.env)throw new Error("FDEF not allowed here");var t=e.stack,r=e.prog,n=e.ip,a=t.pop(),o=n;for(E.DEBUG&&console.log(e.step,"FDEF[]",a);45!==r[++n];);e.ip=n,e.funcs[a]=r.slice(o+1,n);},void 0,lr.bind(void 0,0),lr.bind(void 0,1),pr.bind(void 0,qt),pr.bind(void 0,Xt),ur.bind(void 0,0),ur.bind(void 0,1),cr.bind(void 0,0),cr.bind(void 0,1),dr.bind(void 0,0),dr.bind(void 0,1),function(e){for(var t=e.stack,r=e.loop,n=e.fv,a=t.pop()/64,o=e.z2;r--;){var i=t.pop(),s=o[i];E.DEBUG&&console.log(e.step,(1<e.loop?"loop "+(e.loop-r)+": ":"")+"SHPIX[]",i,a),n.setRelative(s,s,a),n.touch(s);}e.loop=1;},function(e){for(var t=e.stack,r=e.rp1,n=e.rp2,a=e.loop,o=e.z0[r],i=e.z1[n],s=e.fv,l=e.dpv,p=e.z2;a--;){var u=t.pop(),c=p[u];E.DEBUG&&console.log(e.step,(1<e.loop?"loop "+(e.loop-a)+": ":"")+"IP[]",u,r,"<->",n),s.interpolate(c,o,i,l),s.touch(c);}e.loop=1;},hr.bind(void 0,0),hr.bind(void 0,1),function(e){for(var t=e.stack,r=e.rp0,n=e.z0[r],a=e.loop,o=e.fv,i=e.pv,s=e.z1;a--;){var l=t.pop(),p=s[l];E.DEBUG&&console.log(e.step,(1<e.loop?"loop "+(e.loop-a)+": ":"")+"ALIGNRP[]",l),o.setRelative(p,n,0,i),o.touch(p);}e.loop=1;},function(e){E.DEBUG&&console.log(e.step,"RTDG[]"),e.round=jt;},mr.bind(void 0,0),mr.bind(void 0,1),function(e){var t=e.prog,r=e.ip,n=e.stack,a=t[++r];E.DEBUG&&console.log(e.step,"NPUSHB[]",a);for(var o=0;o<a;o++)n.push(t[++r]);e.ip=r;},function(e){var t=e.ip,r=e.prog,n=e.stack,a=r[++t];E.DEBUG&&console.log(e.step,"NPUSHW[]",a);for(var o=0;o<a;o++){var i=r[++t]<<8|r[++t];32768&i&&(i=-(1+(65535^i))),n.push(i);}e.ip=t;},function(e){var t=e.stack,r=e.store;r=r||(e.store=[]);var n=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"WS",n,a),r[a]=n;},function(e){var t=e.stack,r=e.store,n=t.pop();E.DEBUG&&console.log(e.step,"RS",n);var a=r&&r[n]||0;t.push(a);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"WCVTP",r,n),e.cvt[n]=r/64;},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"RCVT",r),t.push(64*e.cvt[r]);},fr.bind(void 0,0),fr.bind(void 0,1),void 0,yr.bind(void 0,0),yr.bind(void 0,1),function(e){E.DEBUG&&console.log(e.step,"MPPEM[]"),e.stack.push(e.ppem);},void 0,function(e){E.DEBUG&&console.log(e.step,"FLIPON[]"),e.autoFlip=!0;},void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"LT[]",r,n),t.push(n<r?1:0);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"LTEQ[]",r,n),t.push(n<=r?1:0);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"GT[]",r,n),t.push(r<n?1:0);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"GTEQ[]",r,n),t.push(r<=n?1:0);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"EQ[]",r,n),t.push(r===n?1:0);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"NEQ[]",r,n),t.push(r!==n?1:0);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"ODD[]",r),t.push(Math.trunc(r)%2?1:0);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"EVEN[]",r),t.push(Math.trunc(r)%2?0:1);},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"IF[]",t),t||(tr(e,!0),E.DEBUG&&console.log(e.step,"EIF[]"));},function(e){E.DEBUG&&console.log(e.step,"EIF[]");},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"AND[]",r,n),t.push(r&&n?1:0);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"OR[]",r,n),t.push(r||n?1:0);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"NOT[]",r),t.push(r?0:1);},gr.bind(void 0,1),function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SDB[]",t),e.deltaBase=t;},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SDS[]",t),e.deltaShift=Math.pow(.5,t);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"ADD[]",r,n),t.push(n+r);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"SUB[]",r,n),t.push(n-r);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"DIV[]",r,n),t.push(64*n/r);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"MUL[]",r,n),t.push(n*r/64);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"ABS[]",r),t.push(Math.abs(r));},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"NEG[]",r),t.push(-r);},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"FLOOR[]",r),t.push(64*Math.floor(r/64));},function(e){var t=e.stack,r=t.pop();E.DEBUG&&console.log(e.step,"CEILING[]",r),t.push(64*Math.ceil(r/64));},vr.bind(void 0,0),vr.bind(void 0,1),vr.bind(void 0,2),vr.bind(void 0,3),void 0,void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"WCVTF[]",r,n),e.cvt[n]=r*e.ppem/e.font.unitsPerEm;},gr.bind(void 0,2),gr.bind(void 0,3),br.bind(void 0,1),br.bind(void 0,2),br.bind(void 0,3),function(e){var t,r=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"SROUND[]",r),e.round=Wt,192&r){case 0:t=.5;break;case 64:t=1;break;case 128:t=2;break;default:throw new Error("invalid SROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid SROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t;},function(e){var t,r=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"S45ROUND[]",r),e.round=Wt,192&r){case 0:t=Math.sqrt(2)/2;break;case 64:t=Math.sqrt(2);break;case 128:t=2*Math.sqrt(2);break;default:throw new Error("invalid S45ROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid S45ROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t;},void 0,void 0,function(e){E.DEBUG&&console.log(e.step,"ROFF[]"),e.round=Bt;},void 0,function(e){E.DEBUG&&console.log(e.step,"RUTG[]"),e.round=zt;},function(e){E.DEBUG&&console.log(e.step,"RDTG[]"),e.round=Ht;},sr,sr,void 0,void 0,void 0,void 0,void 0,function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SCANCTRL[]",t);},_r.bind(void 0,0),_r.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=0;E.DEBUG&&console.log(e.step,"GETINFO[]",r),1&r&&(n=35),32&r&&(n|=4096),t.push(n);},void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop();E.DEBUG&&console.log(e.step,"ROLL[]"),t.push(n),t.push(r),t.push(a);},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"MAX[]",r,n),t.push(Math.max(n,r));},function(e){var t=e.stack,r=t.pop(),n=t.pop();E.DEBUG&&console.log(e.step,"MIN[]",r,n),t.push(Math.min(n,r));},function(e){var t=e.stack.pop();E.DEBUG&&console.log(e.step,"SCANTYPE[]",t);},function(e){var t=e.stack.pop(),r=e.stack.pop();switch(E.DEBUG&&console.log(e.step,"INSTCTRL[]",t,r),t){case 1:return void(e.inhibitGridFit=!!r);case 2:return void(e.ignoreCvt=!!r);default:throw new Error("invalid INSTCTRL[] selector")}},void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,xr.bind(void 0,1),xr.bind(void 0,2),xr.bind(void 0,3),xr.bind(void 0,4),xr.bind(void 0,5),xr.bind(void 0,6),xr.bind(void 0,7),xr.bind(void 0,8),Sr.bind(void 0,1),Sr.bind(void 0,2),Sr.bind(void 0,3),Sr.bind(void 0,4),Sr.bind(void 0,5),Sr.bind(void 0,6),Sr.bind(void 0,7),Sr.bind(void 0,8),wr.bind(void 0,0,0,0,0,0),wr.bind(void 0,0,0,0,0,1),wr.bind(void 0,0,0,0,0,2),wr.bind(void 0,0,0,0,0,3),wr.bind(void 0,0,0,0,1,0),wr.bind(void 0,0,0,0,1,1),wr.bind(void 0,0,0,0,1,2),wr.bind(void 0,0,0,0,1,3),wr.bind(void 0,0,0,1,0,0),wr.bind(void 0,0,0,1,0,1),wr.bind(void 0,0,0,1,0,2),wr.bind(void 0,0,0,1,0,3),wr.bind(void 0,0,0,1,1,0),wr.bind(void 0,0,0,1,1,1),wr.bind(void 0,0,0,1,1,2),wr.bind(void 0,0,0,1,1,3),wr.bind(void 0,0,1,0,0,0),wr.bind(void 0,0,1,0,0,1),wr.bind(void 0,0,1,0,0,2),wr.bind(void 0,0,1,0,0,3),wr.bind(void 0,0,1,0,1,0),wr.bind(void 0,0,1,0,1,1),wr.bind(void 0,0,1,0,1,2),wr.bind(void 0,0,1,0,1,3),wr.bind(void 0,0,1,1,0,0),wr.bind(void 0,0,1,1,0,1),wr.bind(void 0,0,1,1,0,2),wr.bind(void 0,0,1,1,0,3),wr.bind(void 0,0,1,1,1,0),wr.bind(void 0,0,1,1,1,1),wr.bind(void 0,0,1,1,1,2),wr.bind(void 0,0,1,1,1,3),wr.bind(void 0,1,0,0,0,0),wr.bind(void 0,1,0,0,0,1),wr.bind(void 0,1,0,0,0,2),wr.bind(void 0,1,0,0,0,3),wr.bind(void 0,1,0,0,1,0),wr.bind(void 0,1,0,0,1,1),wr.bind(void 0,1,0,0,1,2),wr.bind(void 0,1,0,0,1,3),wr.bind(void 0,1,0,1,0,0),wr.bind(void 0,1,0,1,0,1),wr.bind(void 0,1,0,1,0,2),wr.bind(void 0,1,0,1,0,3),wr.bind(void 0,1,0,1,1,0),wr.bind(void 0,1,0,1,1,1),wr.bind(void 0,1,0,1,1,2),wr.bind(void 0,1,0,1,1,3),wr.bind(void 0,1,1,0,0,0),wr.bind(void 0,1,1,0,0,1),wr.bind(void 0,1,1,0,0,2),wr.bind(void 0,1,1,0,0,3),wr.bind(void 0,1,1,0,1,0),wr.bind(void 0,1,1,0,1,1),wr.bind(void 0,1,1,0,1,2),wr.bind(void 0,1,1,0,1,3),wr.bind(void 0,1,1,1,0,0),wr.bind(void 0,1,1,1,0,1),wr.bind(void 0,1,1,1,0,2),wr.bind(void 0,1,1,1,0,3),wr.bind(void 0,1,1,1,1,0),wr.bind(void 0,1,1,1,1,1),wr.bind(void 0,1,1,1,1,2),wr.bind(void 0,1,1,1,1,3)];var Mr=Array.from||function(e){return e.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g)||[]};function Er(e){(e=e||{}).empty||(Ct(e.familyName,"When creating a new Font object, familyName is required."),Ct(e.styleName,"When creating a new Font object, styleName is required."),Ct(e.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),Ct(e.ascender,"When creating a new Font object, ascender is required."),Ct(e.descender,"When creating a new Font object, descender is required."),Ct(e.descender<0,"Descender should be negative (e.g. -512)."),this.names={fontFamily:{en:e.familyName||" "},fontSubfamily:{en:e.styleName||" "},fullName:{en:e.fullName||e.familyName+" "+e.styleName},postScriptName:{en:e.postScriptName||(e.familyName+e.styleName).replace(/\s/g,"")},designer:{en:e.designer||" "},designerURL:{en:e.designerURL||" "},manufacturer:{en:e.manufacturer||" "},manufacturerURL:{en:e.manufacturerURL||" "},license:{en:e.license||" "},licenseURL:{en:e.licenseURL||" "},version:{en:e.version||"Version 0.1"},description:{en:e.description||" "},copyright:{en:e.copyright||" "},trademark:{en:e.trademark||" "}},this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender,this.createdTimestamp=e.createdTimestamp,this.tables={os2:{usWeightClass:e.weightClass||this.usWeightClasses.MEDIUM,usWidthClass:e.widthClass||this.usWidthClasses.MEDIUM,fsSelection:e.fsSelection||this.fsSelectionValues.REGULAR}}),this.supported=!0,this.glyphs=new xe.GlyphSet(this,e.glyphs||[]),this.encoding=new he(this),this.position=new St(this),this.substitution=new wt(this),this.tables=this.tables||{},Object.defineProperty(this,"hinting",{get:function(){return this._hinting?this._hinting:"truetype"===this.outlinesFormat?this._hinting=new Ut(this):void 0}});}function Tr(e,t){var r=JSON.stringify(e),n=256;for(var a in t){var o=parseInt(a);if(o&&!(o<256)){if(JSON.stringify(t[a])===r)return o;n<=o&&(n=o+1);}}return t[n]=e,n}function Cr(e,t,r,n){for(var a=[{name:"nameID_"+e,type:"USHORT",value:Tr(t.name,n)},{name:"flags_"+e,type:"USHORT",value:0}],o=0;o<r.length;++o){var i=r[o].tag;a.push({name:"axis_"+e+" "+i,type:"FIXED",value:t.coordinates[i]<<16});}return a}function Nr(e,t,r,n){var a={},o=new se.Parser(e,t);a.name=n[o.parseUShort()]||{},o.skip("uShort",1),a.coordinates={};for(var i=0;i<r.length;++i)a.coordinates[r[i].tag]=o.parseFixed();return a}Er.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},Er.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},Er.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),r=this.glyphs.get(t);return r=r||this.glyphs.get(0)},Er.prototype.stringToGlyphs=function(e,t){t=t||this.defaultRenderOptions;for(var r=Mr(e),n=[],a=0;a<r.length;a+=1){var o=r[a];n.push(this.charToGlyphIndex(o));}var i=n.length;if(t.features){var s=t.script||this.substitution.getDefaultScriptName(),l=[];t.features.liga&&(l=l.concat(this.substitution.getFeature("liga",s,t.language))),t.features.rlig&&(l=l.concat(this.substitution.getFeature("rlig",s,t.language)));for(var p=0;p<i;p+=1)for(var u=0;u<l.length;u++){for(var c=l[u],d=c.sub,h=d.length,m=0;m<h&&d[m]===n[p+m];)m++;m===h&&(n.splice(p,h,c.by),i=i-h+1);}}for(var f=new Array(i),y=this.glyphs.get(0),g=0;g<i;g+=1)f[g]=this.glyphs.get(n[g])||y;return f},Er.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},Er.prototype.nameToGlyph=function(e){var t=this.nameToGlyphIndex(e),r=this.glyphs.get(t);return r=r||this.glyphs.get(0)},Er.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},Er.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var r=this.position.defaultKerningTables;return r?this.position.getKerningValue(r,e,t):this.kerningPairs[e+","+t]||0},Er.prototype.defaultRenderOptions={kerning:!0,features:{liga:!0,rlig:!0}},Er.prototype.forEachGlyph=function(e,t,r,n,a,o){t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:72,a=a||this.defaultRenderOptions;var i,s=1/this.unitsPerEm*n,l=this.stringToGlyphs(e,a);if(a.kerning){var p=a.script||this.position.getDefaultScriptName();i=this.position.getKerningTables(p,a.language);}for(var u=0;u<l.length;u+=1){var c=l[u];if(o.call(this,c,t,r,n,a),c.advanceWidth&&(t+=c.advanceWidth*s),a.kerning&&u<l.length-1)t+=(i?this.position.getKerningValue(i,c.index,l[u+1].index):this.getKerningValue(c,l[u+1]))*s;a.letterSpacing?t+=a.letterSpacing*n:a.tracking&&(t+=a.tracking/1e3*n);}return t},Er.prototype.getPath=function(e,t,r,n,o){var i=new A;return this.forEachGlyph(e,t,r,n,o,function(e,t,r,n){var a=e.getPath(t,r,n,o,this);i.extend(a);}),i},Er.prototype.getPaths=function(e,t,r,n,o){var i=[];return this.forEachGlyph(e,t,r,n,o,function(e,t,r,n){var a=e.getPath(t,r,n,o,this);i.push(a);}),i},Er.prototype.getAdvanceWidth=function(e,t,r){return this.forEachGlyph(e,0,0,t,r,function(){})},Er.prototype.draw=function(e,t,r,n,a,o){this.getPath(t,r,n,a,o).draw(e);},Er.prototype.drawPoints=function(a,e,t,r,n,o){this.forEachGlyph(e,t,r,n,o,function(e,t,r,n){e.drawPoints(a,t,r,n);});},Er.prototype.drawMetrics=function(a,e,t,r,n,o){this.forEachGlyph(e,t,r,n,o,function(e,t,r,n){e.drawMetrics(a,t,r,n);});},Er.prototype.getEnglishName=function(e){var t=this.names[e];if(t)return t.en},Er.prototype.validate=function(){var r=this;function e(e){var t=r.getEnglishName(e);t&&t.trim().length;}e("fontFamily"),e("weightName"),e("manufacturer"),e("copyright"),e("version"),this.unitsPerEm;},Er.prototype.toTables=function(){return gt.fontToTable(this)},Er.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},Er.prototype.toArrayBuffer=function(){for(var e=this.toTables().encode(),t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;n++)r[n]=e[n];return t},Er.prototype.download=function(t){var e=this.getEnglishName("fontFamily"),r=this.getEnglishName("fontSubfamily");t=t||e.replace(/\s/g,"")+"-"+r+".otf";var a=this.toArrayBuffer();if("undefined"!=typeof window)window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem,window.requestFileSystem(window.TEMPORARY,a.byteLength,function(e){e.root.getFile(t,{create:!0},function(n){n.createWriter(function(e){var t=new DataView(a),r=new Blob([t],{type:"font/opentype"});e.write(r),e.addEventListener("writeend",function(){location.href=n.toURL();},!1);});});},function(e){throw new Error(e.name+": "+e.message)});else {var n=jr("fs"),o=function(e){for(var t=new Gr(e.byteLength),r=new Uint8Array(e),n=0;n<t.length;++n)t[n]=r[n];return t}(a);n.writeFileSync(t,o);}},Er.prototype.fsSelectionValues={ITALIC:1,UNDERSCORE:2,NEGATIVE:4,OUTLINED:8,STRIKEOUT:16,BOLD:32,REGULAR:64,USER_TYPO_METRICS:128,WWS:256,OBLIQUE:512},Er.prototype.usWidthClasses={ULTRA_CONDENSED:1,EXTRA_CONDENSED:2,CONDENSED:3,SEMI_CONDENSED:4,MEDIUM:5,SEMI_EXPANDED:6,EXPANDED:7,EXTRA_EXPANDED:8,ULTRA_EXPANDED:9},Er.prototype.usWeightClasses={THIN:100,EXTRA_LIGHT:200,LIGHT:300,NORMAL:400,MEDIUM:500,SEMI_BOLD:600,BOLD:700,EXTRA_BOLD:800,BLACK:900};var Or={make:function(e,t){var r,n,a,o,i=new $.Table("fvar",[{name:"version",type:"ULONG",value:65536},{name:"offsetToData",type:"USHORT",value:0},{name:"countSizePairs",type:"USHORT",value:2},{name:"axisCount",type:"USHORT",value:e.axes.length},{name:"axisSize",type:"USHORT",value:20},{name:"instanceCount",type:"USHORT",value:e.instances.length},{name:"instanceSize",type:"USHORT",value:4+4*e.axes.length}]);i.offsetToData=i.sizeOf();for(var s=0;s<e.axes.length;s++)i.fields=i.fields.concat((r=s,n=e.axes[s],a=t,o=Tr(n.name,a),[{name:"tag_"+r,type:"TAG",value:n.tag},{name:"minValue_"+r,type:"FIXED",value:n.minValue<<16},{name:"defaultValue_"+r,type:"FIXED",value:n.defaultValue<<16},{name:"maxValue_"+r,type:"FIXED",value:n.maxValue<<16},{name:"flags_"+r,type:"USHORT",value:0},{name:"nameID_"+r,type:"USHORT",value:o}]));for(var l=0;l<e.instances.length;l++)i.fields=i.fields.concat(Cr(l,e.instances[l],e.axes,t));return i},parse:function(e,t,r){var n=new se.Parser(e,t),a=n.parseULong();L.argument(65536===a,"Unsupported fvar table version.");var o=n.parseOffset16();n.skip("uShort",1);for(var i,s,l,p,u,c=n.parseUShort(),d=n.parseUShort(),h=n.parseUShort(),m=n.parseUShort(),f=[],y=0;y<c;y++)f.push((i=e,s=t+o+y*d,l=r,u=p=void 0,p={},u=new se.Parser(i,s),p.tag=u.parseTag(),p.minValue=u.parseFixed(),p.defaultValue=u.parseFixed(),p.maxValue=u.parseFixed(),u.skip("uShort",1),p.name=l[u.parseUShort()]||{},p));for(var g=[],v=t+o+c*d,b=0;b<h;b++)g.push(Nr(e,v+b*m,f,r));return {axes:f,instances:g}}},Lr=new Array(10);Lr[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{posFormat:1,coverage:this.parsePointer(oe.coverage),value:this.parseValueRecord()}:2===t?{posFormat:2,coverage:this.parsePointer(oe.coverage),values:this.parseValueRecordList()}:void L.assert(!1,"0x"+e.toString(16)+": GPOS lookup type 1 format must be 1 or 2.")},Lr[2]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();L.assert(1===t||2===t,"0x"+e.toString(16)+": GPOS lookup type 2 format must be 1 or 2.");var r=this.parsePointer(oe.coverage),n=this.parseUShort(),a=this.parseUShort();if(1===t)return {posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,pairSets:this.parseList(oe.pointer(oe.list(function(){return {secondGlyph:this.parseUShort(),value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}})))};if(2===t){var o=this.parsePointer(oe.classDef),i=this.parsePointer(oe.classDef),s=this.parseUShort(),l=this.parseUShort();return {posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,classDef1:o,classDef2:i,class1Count:s,class2Count:l,classRecords:this.parseList(s,oe.list(l,function(){return {value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}}))}}},Lr[3]=function(){return {error:"GPOS Lookup 3 not supported"}},Lr[4]=function(){return {error:"GPOS Lookup 4 not supported"}},Lr[5]=function(){return {error:"GPOS Lookup 5 not supported"}},Lr[6]=function(){return {error:"GPOS Lookup 6 not supported"}},Lr[7]=function(){return {error:"GPOS Lookup 7 not supported"}},Lr[8]=function(){return {error:"GPOS Lookup 8 not supported"}},Lr[9]=function(){return {error:"GPOS Lookup 9 not supported"}};var Ir=new Array(10);var Pr={parse:function(e,t){var r=new oe(e,t=t||0),n=r.parseVersion(1);return L.argument(1===n||1.1===n,"Unsupported GPOS table version "+n),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(Lr)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(Lr),variations:r.parseFeatureVariationsList()}},make:function(e){return new $.Table("GPOS",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new $.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new $.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new $.LookupList(e.lookups,Ir)}])}};var Rr={parse:function(e,t){var r=new se.Parser(e,t),n=r.parseUShort();if(0===n)return function(e){var t={};e.skip("uShort");var r=e.parseUShort();L.argument(0===r,"Unsupported kern sub-table version."),e.skip("uShort",2);var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),i=e.parseUShort(),s=e.parseShort();t[o+","+i]=s;}return t}(r);if(1===n)return function(e){var t={};e.skip("uShort"),1<e.parseULong()&&console.warn("Only the first kern subtable is supported."),e.skip("uLong");var r=255&e.parseUShort();if(e.skip("uShort"),0==r){var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),i=e.parseUShort(),s=e.parseShort();t[o+","+i]=s;}}return t}(r);throw new Error("Unsupported kern table version ("+n+").")}};var Dr={parse:function(e,t,r,n){for(var a=new se.Parser(e,t),o=n?a.parseUShort:a.parseULong,i=[],s=0;s<r+1;s+=1){var l=o.call(a);n&&(l*=2),i.push(l);}return i}};function Ar(e,r){jr("fs").readFile(e,function(e,t){if(e)return r(e.message);r(null,Tt(t));});}function kr(e,t){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return r.response?t(null,r.response):t("Font could not be loaded: "+r.statusText)},r.onerror=function(){t("Font could not be loaded");},r.send();}function Fr(e,t){for(var r=[],n=12,a=0;a<t;a+=1){var o=se.getTag(e,n),i=se.getULong(e,n+4),s=se.getULong(e,n+8),l=se.getULong(e,n+12);r.push({tag:o,checksum:i,offset:s,length:l,compression:!1}),n+=16;}return r}function Ur(e,t){if("WOFF"!==t.compression)return {data:e,offset:t.offset};var r=new Uint8Array(e.buffer,t.offset+2,t.compressedLength-2),n=new Uint8Array(t.length);if(a(r,n),n.byteLength!==t.length)throw new Error("Decompression error: "+t.tag+" decompressed length doesn't match recorded length");return {data:new DataView(n.buffer,0),offset:0}}function Br(e){var t,r,n,a,o,i,s,l,p,u,c,d,h,m,f=new Er({empty:!0}),y=new DataView(e,0),g=[],v=se.getTag(y,0);if(v===String.fromCharCode(0,1,0,0)||"true"===v||"typ1"===v)f.outlinesFormat="truetype",g=Fr(y,n=se.getUShort(y,4));else if("OTTO"===v)f.outlinesFormat="cff",g=Fr(y,n=se.getUShort(y,4));else {if("wOFF"!==v)throw new Error("Unsupported OpenType signature "+v);var b=se.getTag(y,4);if(b===String.fromCharCode(0,1,0,0))f.outlinesFormat="truetype";else {if("OTTO"!==b)throw new Error("Unsupported OpenType flavor "+v);f.outlinesFormat="cff";}g=function(e,t){for(var r=[],n=44,a=0;a<t;a+=1){var o=se.getTag(e,n),i=se.getULong(e,n+4),s=se.getULong(e,n+8),l=se.getULong(e,n+12),p=void 0;p=s<l&&"WOFF",r.push({tag:o,offset:i,compression:p,compressedLength:s,length:l}),n+=20;}return r}(y,n=se.getUShort(y,12));}for(var _=0;_<n;_+=1){var x=g[_],S=void 0;switch(x.tag){case"cmap":S=Ur(y,x),f.tables.cmap=le.parse(S.data,S.offset),f.encoding=new me(f.tables.cmap);break;case"cvt ":S=Ur(y,x),m=new se.Parser(S.data,S.offset),f.tables.cvt=m.parseShortList(x.length/2);break;case"fvar":o=x;break;case"fpgm":S=Ur(y,x),m=new se.Parser(S.data,S.offset),f.tables.fpgm=m.parseByteList(x.length);break;case"head":S=Ur(y,x),f.tables.head=Ge.parse(S.data,S.offset),f.unitsPerEm=f.tables.head.unitsPerEm,t=f.tables.head.indexToLocFormat;break;case"hhea":S=Ur(y,x),f.tables.hhea=je.parse(S.data,S.offset),f.ascender=f.tables.hhea.ascender,f.descender=f.tables.hhea.descender,f.numberOfHMetrics=f.tables.hhea.numberOfHMetrics;break;case"hmtx":p=x;break;case"ltag":S=Ur(y,x),r=ze.parse(S.data,S.offset);break;case"maxp":S=Ur(y,x),f.tables.maxp=He.parse(S.data,S.offset),f.numGlyphs=f.tables.maxp.numGlyphs;break;case"name":d=x;break;case"OS/2":S=Ur(y,x),f.tables.os2=ot.parse(S.data,S.offset);break;case"post":S=Ur(y,x),f.tables.post=it.parse(S.data,S.offset),f.glyphNames=new ye(f.tables.post);break;case"prep":S=Ur(y,x),m=new se.Parser(S.data,S.offset),f.tables.prep=m.parseByteList(x.length);break;case"glyf":i=x;break;case"loca":c=x;break;case"CFF ":a=x;break;case"kern":u=x;break;case"GPOS":s=x;break;case"GSUB":l=x;break;case"meta":h=x;}}var w=Ur(y,d);if(f.tables.name=nt.parse(w.data,w.offset,r),f.names=f.tables.name,i&&c){var M=0===t,E=Ur(y,c),T=Dr.parse(E.data,E.offset,f.numGlyphs,M),C=Ur(y,i);f.glyphs=Ft.parse(C.data,C.offset,T,f);}else {if(!a)throw new Error("Font doesn't contain TrueType or CFF outlines.");var N=Ur(y,a);Be.parse(N.data,N.offset,f);}var O=Ur(y,p);if(Ve.parse(O.data,O.offset,f.numberOfHMetrics,f.numGlyphs,f.glyphs),function(e){for(var t,r=e.tables.cmap.glyphIndexMap,n=Object.keys(r),a=0;a<n.length;a+=1){var o=n[a],i=r[o];(t=e.glyphs.get(i)).addUnicode(parseInt(o));}for(var s=0;s<e.glyphs.length;s+=1)t=e.glyphs.get(s),e.cffEncoding?e.isCIDFont?t.name="gid"+s:t.name=e.cffEncoding.charset[s]:e.glyphNames.names&&(t.name=e.glyphNames.glyphIndexToName(s));}(f),u){var L=Ur(y,u);f.kerningPairs=Rr.parse(L.data,L.offset);}else f.kerningPairs={};if(s){var I=Ur(y,s);f.tables.gpos=Pr.parse(I.data,I.offset),f.position.init();}if(l){var P=Ur(y,l);f.tables.gsub=ut.parse(P.data,P.offset);}if(o){var R=Ur(y,o);f.tables.fvar=Or.parse(R.data,R.offset,f.names);}if(h){var D=Ur(y,h);f.tables.meta=ct.parse(D.data,D.offset),f.metas=f.tables.meta;}return f}E.Font=Er,E.Glyph=ve,E.Path=A,E.BoundingBox=C,E._parse=se,E.parse=Br,E.load=function(e,n){("undefined"==typeof window?Ar:kr)(e,function(e,t){if(e)return n(e);var r;try{r=Br(t);}catch(e){return n(e,null)}return n(null,r)});},E.loadSync=function(e){return Br(Tt(jr("fs").readFileSync(e)))},Object.defineProperty(E,"__esModule",{value:!0});}("object"==typeof r&&void 0!==t?r:e.opentype={});}).call(this,jr("buffer").Buffer);},{buffer:5,fs:3}],14:[function(e,t,p){(function(a){function o(e,t){for(var r=0,n=e.length-1;0<=n;n--){var a=e[n];"."===a?e.splice(n,1):".."===a?(e.splice(n,1),r++):r&&(e.splice(n,1),r--);}if(t)for(;r--;)e.unshift("..");return e}function i(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}p.resolve=function(){for(var e="",t=!1,r=arguments.length-1;-1<=r&&!t;r--){var n=0<=r?arguments[r]:a.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(e=n+"/"+e,t="/"===n.charAt(0));}return (t?"/":"")+(e=o(i(e.split("/"),function(e){return !!e}),!t).join("/"))||"."},p.normalize=function(e){var t=p.isAbsolute(e),r="/"===n(e,-1);return (e=o(i(e.split("/"),function(e){return !!e}),!t).join("/"))||t||(e="."),e&&r&&(e+="/"),(t?"/":"")+e},p.isAbsolute=function(e){return "/"===e.charAt(0)},p.join=function(){var e=Array.prototype.slice.call(arguments,0);return p.normalize(i(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},p.relative=function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;0<=r&&""===e[r];r--);return r<t?[]:e.slice(t,r-t+1)}e=p.resolve(e).substr(1),t=p.resolve(t).substr(1);for(var n=r(e.split("/")),a=r(t.split("/")),o=Math.min(n.length,a.length),i=o,s=0;s<o;s++)if(n[s]!==a[s]){i=s;break}var l=[];for(s=i;s<n.length;s++)l.push("..");return (l=l.concat(a.slice(i))).join("/")},p.sep="/",p.delimiter=":",p.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return ".";for(var t=e.charCodeAt(0),r=47===t,n=-1,a=!0,o=e.length-1;1<=o;--o)if(47===(t=e.charCodeAt(o))){if(!a){n=o;break}}else a=!1;return -1===n?r?"/":".":r&&1===n?"/":e.slice(0,n)},p.basename=function(e,t){var r=function(e){"string"!=typeof e&&(e+="");var t,r=0,n=-1,a=!0;for(t=e.length-1;0<=t;--t)if(47===e.charCodeAt(t)){if(!a){r=t+1;break}}else -1===n&&(a=!1,n=t+1);return -1===n?"":e.slice(r,n)}(e);return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r},p.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,r=0,n=-1,a=!0,o=0,i=e.length-1;0<=i;--i){var s=e.charCodeAt(i);if(47===s){if(a)continue;r=i+1;break}-1===n&&(a=!1,n=i+1),46===s?-1===t?t=i:1!==o&&(o=1):-1!==t&&(o=-1);}return -1===t||-1===n||0===o||1===o&&t===n-1&&t===r+1?"":e.slice(t,n)};var n="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)};}).call(this,e("_process"));},{_process:15}],15:[function(e,t,r){var n,a,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function l(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i;}catch(e){n=i;}try{a="function"==typeof clearTimeout?clearTimeout:s;}catch(e){a=s;}}();var p,u=[],c=!1,d=-1;function h(){c&&p&&(c=!1,p.length?u=p.concat(u):d=-1,u.length&&m());}function m(){if(!c){var e=l(h);c=!0;for(var t=u.length;t;){for(p=u,u=[];++d<t;)p&&p[d].run();d=-1,t=u.length;}p=null,c=!1,function(t){if(a===clearTimeout)return clearTimeout(t);if((a===s||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(t);try{a(t);}catch(e){try{return a.call(null,t)}catch(e){return a.call(this,t)}}}(e);}}function f(e,t){this.fun=e,this.array=t;}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new f(e,t)),1!==u.length||c||l(m);},f.prototype.run=function(){this.fun.apply(null,this.array);},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return []},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return "/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0};},{}],16:[function(e,t,r){!function(e){if(!e.fetch){var t="URLSearchParams"in e,r="Symbol"in e&&"iterator"in Symbol,i="FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return !1}}(),n="FormData"in e,a="ArrayBuffer"in e;if(a)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=function(e){return e&&DataView.prototype.isPrototypeOf(e)},l=ArrayBuffer.isView||function(e){return e&&-1<o.indexOf(Object.prototype.toString.call(e))};m.prototype.append=function(e,t){e=c(e),t=d(t);var r=this.map[e];this.map[e]=r?r+","+t:t;},m.prototype.delete=function(e){delete this.map[c(e)];},m.prototype.get=function(e){return e=c(e),this.has(e)?this.map[e]:null},m.prototype.has=function(e){return this.map.hasOwnProperty(c(e))},m.prototype.set=function(e,t){this.map[c(e)]=d(t);},m.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this);},m.prototype.keys=function(){var r=[];return this.forEach(function(e,t){r.push(t);}),h(r)},m.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e);}),h(t)},m.prototype.entries=function(){var r=[];return this.forEach(function(e,t){r.push([t,e]);}),h(r)},r&&(m.prototype[Symbol.iterator]=m.prototype.entries);var p=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},b.call(_.prototype),b.call(S.prototype),S.prototype.clone=function(){return new S(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new m(this.headers),url:this.url})},S.error=function(){var e=new S(null,{status:0,statusText:""});return e.type="error",e};var u=[301,302,303,307,308];S.redirect=function(e,t){if(-1===u.indexOf(t))throw new RangeError("Invalid status code");return new S(null,{status:t,headers:{location:e}})},e.Headers=m,e.Request=_,e.Response=S,e.fetch=function(r,a){return new Promise(function(n,e){var t=new _(r,a),o=new XMLHttpRequest;o.onload=function(){var e,a,t={status:o.status,statusText:o.statusText,headers:(e=o.getAllResponseHeaders()||"",a=new m,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(e){var t=e.split(":"),r=t.shift().trim();if(r){var n=t.join(":").trim();a.append(r,n);}}),a)};t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL");var r="response"in o?o.response:o.responseText;n(new S(r,t));},o.onerror=function(){e(new TypeError("Network request failed"));},o.ontimeout=function(){e(new TypeError("Network request failed"));},o.open(t.method,t.url,!0),"include"===t.credentials?o.withCredentials=!0:"omit"===t.credentials&&(o.withCredentials=!1),"responseType"in o&&i&&(o.responseType="blob"),t.headers.forEach(function(e,t){o.setRequestHeader(t,e);}),o.send(void 0===t._bodyInit?null:t._bodyInit);})},e.fetch.polyfill=!0;}function c(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return "string"!=typeof e&&(e=String(e)),e}function h(t){var e={next:function(){var e=t.shift();return {done:void 0===e,value:e}}};return r&&(e[Symbol.iterator]=function(){return e}),e}function m(t){this.map={},t instanceof m?t.forEach(function(e,t){this.append(t,e);},this):Array.isArray(t)?t.forEach(function(e){this.append(e[0],e[1]);},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e]);},this);}function f(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0;}function y(r){return new Promise(function(e,t){r.onload=function(){e(r.result);},r.onerror=function(){t(r.error);};})}function g(e){var t=new FileReader,r=y(t);return t.readAsArrayBuffer(e),r}function v(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e)if("string"==typeof e)this._bodyText=e;else if(i&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(n&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(t&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(a&&i&&s(e))this._bodyArrayBuffer=v(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else {if(!a||!ArrayBuffer.prototype.isPrototypeOf(e)&&!l(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=v(e);}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"));},i&&(this.blob=function(){var e=f(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(g)}),this.text=function(){var e,t,r,n=f(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=y(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n&&(this.formData=function(){return this.text().then(x)}),this.json=function(){return this.text().then(JSON.parse)},this}function _(e,t){var r,n,a=(t=t||{}).body;if(e instanceof _){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new m(e.headers)),this.method=e.method,this.mode=e.mode,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0);}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new m(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),-1<p.indexOf(n)?n:r),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(a);}function x(e){var a=new FormData;return e.trim().split("&").forEach(function(e){if(e){var t=e.split("="),r=t.shift().replace(/\+/g," "),n=t.join("=").replace(/\+/g," ");a.append(decodeURIComponent(r),decodeURIComponent(n));}}),a}function S(e,t){t=t||{},this.type="default",this.status=void 0===t.status?200:t.status,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new m(t.headers),this.url=t.url||"",this._initBody(e);}}("undefined"!=typeof self?self:this);},{}],17:[function(e,t,r){var n,a=(n=e("./core/main"))&&n.__esModule?n:{default:n};e("./core/constants"),e("./core/environment"),e("./core/friendly_errors/stacktrace"),e("./core/friendly_errors/validate_params"),e("./core/friendly_errors/file_errors"),e("./core/friendly_errors/fes_core"),e("./core/helpers"),e("./core/legacy"),e("./core/preload"),e("./core/p5.Element"),e("./core/p5.Graphics"),e("./core/p5.Renderer"),e("./core/p5.Renderer2D"),e("./core/rendering"),e("./core/shim"),e("./core/structure"),e("./core/transform"),e("./core/shape/2d_primitives"),e("./core/shape/attributes"),e("./core/shape/curves"),e("./core/shape/vertex"),e("./color/color_conversion"),e("./color/creating_reading"),e("./color/p5.Color"),e("./color/setting"),e("./data/p5.TypedDict"),e("./data/local_storage.js"),e("./dom/dom"),e("./events/acceleration"),e("./events/keyboard"),e("./events/mouse"),e("./events/touch"),e("./image/filters"),e("./image/image"),e("./image/loading_displaying"),e("./image/p5.Image"),e("./image/pixels"),e("./io/files"),e("./io/p5.Table"),e("./io/p5.TableRow"),e("./io/p5.XML"),e("./math/calculation"),e("./math/math"),e("./math/noise"),e("./math/p5.Vector"),e("./math/random"),e("./math/trigonometry"),e("./typography/attributes"),e("./typography/loading_displaying"),e("./typography/p5.Font"),e("./utilities/array_functions"),e("./utilities/conversion"),e("./utilities/string_functions"),e("./utilities/time_date"),e("./webgl/3d_primitives"),e("./webgl/interaction"),e("./webgl/light"),e("./webgl/loading"),e("./webgl/material"),e("./webgl/p5.Camera"),e("./webgl/p5.Geometry"),e("./webgl/p5.Matrix"),e("./webgl/p5.RendererGL.Immediate"),e("./webgl/p5.RendererGL"),e("./webgl/p5.RendererGL.Retained"),e("./webgl/p5.Shader"),e("./webgl/p5.RenderBuffer"),e("./webgl/p5.Texture"),e("./webgl/text"),e("./core/init"),t.exports=a.default;},{"./color/color_conversion":18,"./color/creating_reading":19,"./color/p5.Color":20,"./color/setting":21,"./core/constants":22,"./core/environment":23,"./core/friendly_errors/fes_core":24,"./core/friendly_errors/file_errors":25,"./core/friendly_errors/stacktrace":26,"./core/friendly_errors/validate_params":27,"./core/helpers":28,"./core/init":29,"./core/legacy":31,"./core/main":32,"./core/p5.Element":33,"./core/p5.Graphics":34,"./core/p5.Renderer":35,"./core/p5.Renderer2D":36,"./core/preload":37,"./core/rendering":38,"./core/shape/2d_primitives":39,"./core/shape/attributes":40,"./core/shape/curves":41,"./core/shape/vertex":42,"./core/shim":43,"./core/structure":44,"./core/transform":45,"./data/local_storage.js":46,"./data/p5.TypedDict":47,"./dom/dom":48,"./events/acceleration":49,"./events/keyboard":50,"./events/mouse":51,"./events/touch":52,"./image/filters":53,"./image/image":54,"./image/loading_displaying":55,"./image/p5.Image":56,"./image/pixels":57,"./io/files":58,"./io/p5.Table":59,"./io/p5.TableRow":60,"./io/p5.XML":61,"./math/calculation":62,"./math/math":63,"./math/noise":64,"./math/p5.Vector":65,"./math/random":66,"./math/trigonometry":67,"./typography/attributes":68,"./typography/loading_displaying":69,"./typography/p5.Font":70,"./utilities/array_functions":71,"./utilities/conversion":72,"./utilities/string_functions":73,"./utilities/time_date":74,"./webgl/3d_primitives":75,"./webgl/interaction":76,"./webgl/light":77,"./webgl/loading":78,"./webgl/material":79,"./webgl/p5.Camera":80,"./webgl/p5.Geometry":81,"./webgl/p5.Matrix":82,"./webgl/p5.RenderBuffer":83,"./webgl/p5.RendererGL":86,"./webgl/p5.RendererGL.Immediate":84,"./webgl/p5.RendererGL.Retained":85,"./webgl/p5.Shader":87,"./webgl/p5.Texture":88,"./webgl/text":89}],18:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.ColorConversion={},a.default.ColorConversion._hsbaToHSLA=function(e){var t=e[0],r=e[1],n=e[2],a=(2-r)*n/2;return 0!=a&&(1==a?r=0:a<.5?r/=2-r:r=r*n/(2-2*a)),[t,r,a,e[3]]},a.default.ColorConversion._hsbaToRGBA=function(e){var t=6*e[0],r=e[1],n=e[2],a=[];if(0===r)a=[n,n,n,e[3]];else {var o,i,s,l=Math.floor(t),p=n*(1-r),u=n*(1-r*(t-l)),c=n*(1-r*(1+l-t));s=1===l?(o=u,i=n,p):2===l?(o=p,i=n,c):3===l?(o=p,i=u,n):4===l?(o=c,i=p,n):5===l?(o=n,i=p,u):(o=n,i=c,p),a=[o,i,s,e[3]];}return a},a.default.ColorConversion._hslaToHSBA=function(e){var t,r=e[0],n=e[1],a=e[2];return [r,n=2*((t=a<.5?(1+n)*a:a+n-a*n)-a)/t,t,e[3]]},a.default.ColorConversion._hslaToRGBA=function(e){var t=6*e[0],r=e[1],n=e[2],a=[];if(0===r)a=[n,n,n,e[3]];else {var o,i=2*n-(o=n<.5?(1+r)*n:n+r-n*r),s=function(e,t,r){return e<0?e+=6:6<=e&&(e-=6),e<1?t+(r-t)*e:e<3?r:e<4?t+(r-t)*(4-e):t};a=[s(2+t,i,o),s(t,i,o),s(t-2,i,o),e[3]];}return a},a.default.ColorConversion._rgbaToHSBA=function(e){var t,r,n=e[0],a=e[1],o=e[2],i=Math.max(n,a,o),s=i-Math.min(n,a,o);return 0==s?r=t=0:(r=s/i,n===i?t=(a-o)/s:a===i?t=2+(o-n)/s:o===i&&(t=4+(n-a)/s),t<0?t+=6:6<=t&&(t-=6)),[t/6,r,i,e[3]]},a.default.ColorConversion._rgbaToHSLA=function(e){var t,r,n=e[0],a=e[1],o=e[2],i=Math.max(n,a,o),s=Math.min(n,a,o),l=i+s,p=i-s;return 0==p?r=t=0:(r=l<1?p/l:p/(2-l),n===i?t=(a-o)/p:a===i?t=2+(o-n)/p:o===i&&(t=4+(n-a)/p),t<0?t+=6:6<=t&&(t-=6)),[t/6,r,l/2,e[3]]};var o=a.default.ColorConversion;r.default=o;},{"../core/main":32}],19:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,c=(n=e("../core/main"))&&n.__esModule?n:{default:n},d=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}e("./p5.Color"),e("../core/friendly_errors/validate_params"),e("../core/friendly_errors/file_errors"),e("../core/friendly_errors/fes_core"),c.default.prototype.alpha=function(e){return c.default._validateParameters("alpha",arguments),this.color(e)._getAlpha()},c.default.prototype.blue=function(e){return c.default._validateParameters("blue",arguments),this.color(e)._getBlue()},c.default.prototype.brightness=function(e){return c.default._validateParameters("brightness",arguments),this.color(e)._getBrightness()},c.default.prototype.color=function(){if(c.default._validateParameters("color",arguments),arguments[0]instanceof c.default.Color)return arguments[0];var e=arguments[0]instanceof Array?arguments[0]:arguments;return new c.default.Color(this,e)},c.default.prototype.green=function(e){return c.default._validateParameters("green",arguments),this.color(e)._getGreen()},c.default.prototype.hue=function(e){return c.default._validateParameters("hue",arguments),this.color(e)._getHue()},c.default.prototype.lerpColor=function(e,t,r){c.default._validateParameters("lerpColor",arguments);var n,a,o,i,s,l,p=this._colorMode,u=this._colorMaxes;if(p===d.RGB)s=e.levels.map(function(e){return e/255}),l=t.levels.map(function(e){return e/255});else if(p===d.HSB)e._getBrightness(),t._getBrightness(),s=e.hsba,l=t.hsba;else {if(p!==d.HSL)throw new Error("".concat(p,"cannot be used for interpolation."));e._getLightness(),t._getLightness(),s=e.hsla,l=t.hsla;}return r=Math.max(Math.min(r,1),0),void 0===this.lerp&&(this.lerp=function(e,t,r){return r*(t-e)+e}),n=this.lerp(s[0],l[0],r),a=this.lerp(s[1],l[1],r),o=this.lerp(s[2],l[2],r),i=this.lerp(s[3],l[3],r),n*=u[p][0],a*=u[p][1],o*=u[p][2],i*=u[p][3],this.color(n,a,o,i)},c.default.prototype.lightness=function(e){return c.default._validateParameters("lightness",arguments),this.color(e)._getLightness()},c.default.prototype.red=function(e){return c.default._validateParameters("red",arguments),this.color(e)._getRed()},c.default.prototype.saturation=function(e){return c.default._validateParameters("saturation",arguments),this.color(e)._getSaturation()};var a=c.default;r.default=a;},{"../core/constants":22,"../core/friendly_errors/fes_core":24,"../core/friendly_errors/file_errors":25,"../core/friendly_errors/validate_params":27,"../core/main":32,"./p5.Color":20}],20:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var c=n(e("../core/main")),d=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants")),h=n(e("./color_conversion"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function n(e){return e&&e.__esModule?e:{default:e}}c.default.Color=function(e,t){if(this._storeModeAndMaxes(e._colorMode,e._colorMaxes),this.mode!==d.RGB&&this.mode!==d.HSL&&this.mode!==d.HSB)throw new Error("".concat(this.mode," is an invalid colorMode."));return this._array=c.default.Color._parseInputs.apply(this,t),this._calculateLevels(),this},c.default.Color.prototype.toString=function(e){var t=this.levels,r=this._array,n=r[3];switch(e){case"#rrggbb":return "#".concat(t[0]<16?"0".concat(t[0].toString(16)):t[0].toString(16),t[1]<16?"0".concat(t[1].toString(16)):t[1].toString(16),t[2]<16?"0".concat(t[2].toString(16)):t[2].toString(16));case"#rrggbbaa":return "#".concat(t[0]<16?"0".concat(t[0].toString(16)):t[0].toString(16),t[1]<16?"0".concat(t[1].toString(16)):t[1].toString(16),t[2]<16?"0".concat(t[2].toString(16)):t[2].toString(16),t[3]<16?"0".concat(t[2].toString(16)):t[3].toString(16));case"#rgb":return "#".concat(Math.round(15*r[0]).toString(16),Math.round(15*r[1]).toString(16),Math.round(15*r[2]).toString(16));case"#rgba":return "#".concat(Math.round(15*r[0]).toString(16),Math.round(15*r[1]).toString(16),Math.round(15*r[2]).toString(16),Math.round(15*r[3]).toString(16));case"rgb":return "rgb(".concat(t[0],", ",t[1],", ",t[2],")");case"rgb%":return "rgb(".concat((100*r[0]).toPrecision(3),"%, ",(100*r[1]).toPrecision(3),"%, ",(100*r[2]).toPrecision(3),"%)");case"rgba%":return "rgba(".concat((100*r[0]).toPrecision(3),"%, ",(100*r[1]).toPrecision(3),"%, ",(100*r[2]).toPrecision(3),"%, ",(100*r[3]).toPrecision(3),"%)");case"hsb":case"hsv":return this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),"hsb(".concat(this.hsba[0]*this.maxes[d.HSB][0],", ",this.hsba[1]*this.maxes[d.HSB][1],", ",this.hsba[2]*this.maxes[d.HSB][2],")");case"hsb%":case"hsv%":return this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),"hsb(".concat((100*this.hsba[0]).toPrecision(3),"%, ",(100*this.hsba[1]).toPrecision(3),"%, ",(100*this.hsba[2]).toPrecision(3),"%)");case"hsba":case"hsva":return this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),"hsba(".concat(this.hsba[0]*this.maxes[d.HSB][0],", ",this.hsba[1]*this.maxes[d.HSB][1],", ",this.hsba[2]*this.maxes[d.HSB][2],", ",n,")");case"hsba%":case"hsva%":return this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),"hsba(".concat((100*this.hsba[0]).toPrecision(3),"%, ",(100*this.hsba[1]).toPrecision(3),"%, ",(100*this.hsba[2]).toPrecision(3),"%, ",(100*n).toPrecision(3),"%)");case"hsl":return this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),"hsl(".concat(this.hsla[0]*this.maxes[d.HSL][0],", ",this.hsla[1]*this.maxes[d.HSL][1],", ",this.hsla[2]*this.maxes[d.HSL][2],")");case"hsl%":return this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),"hsl(".concat((100*this.hsla[0]).toPrecision(3),"%, ",(100*this.hsla[1]).toPrecision(3),"%, ",(100*this.hsla[2]).toPrecision(3),"%)");case"hsla":return this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),"hsla(".concat(this.hsla[0]*this.maxes[d.HSL][0],", ",this.hsla[1]*this.maxes[d.HSL][1],", ",this.hsla[2]*this.maxes[d.HSL][2],", ",n,")");case"hsla%":return this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),"hsl(".concat((100*this.hsla[0]).toPrecision(3),"%, ",(100*this.hsla[1]).toPrecision(3),"%, ",(100*this.hsla[2]).toPrecision(3),"%, ",(100*n).toPrecision(3),"%)");case"rgba":default:return "rgba(".concat(t[0],",",t[1],",",t[2],",",n,")")}},c.default.Color.prototype.setRed=function(e){this._array[0]=e/this.maxes[d.RGB][0],this._calculateLevels();},c.default.Color.prototype.setGreen=function(e){this._array[1]=e/this.maxes[d.RGB][1],this._calculateLevels();},c.default.Color.prototype.setBlue=function(e){this._array[2]=e/this.maxes[d.RGB][2],this._calculateLevels();},c.default.Color.prototype.setAlpha=function(e){this._array[3]=e/this.maxes[this.mode][3],this._calculateLevels();},c.default.Color.prototype._calculateLevels=function(){for(var e=this._array,t=this.levels=new Array(e.length),r=e.length-1;0<=r;--r)t[r]=Math.round(255*e[r]);},c.default.Color.prototype._getAlpha=function(){return this._array[3]*this.maxes[this.mode][3]},c.default.Color.prototype._storeModeAndMaxes=function(e,t){this.mode=e,this.maxes=t;},c.default.Color.prototype._getMode=function(){return this.mode},c.default.Color.prototype._getMaxes=function(){return this.maxes},c.default.Color.prototype._getBlue=function(){return this._array[2]*this.maxes[d.RGB][2]},c.default.Color.prototype._getBrightness=function(){return this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),this.hsba[2]*this.maxes[d.HSB][2]},c.default.Color.prototype._getGreen=function(){return this._array[1]*this.maxes[d.RGB][1]},c.default.Color.prototype._getHue=function(){return this.mode===d.HSB?(this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),this.hsba[0]*this.maxes[d.HSB][0]):(this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),this.hsla[0]*this.maxes[d.HSL][0])},c.default.Color.prototype._getLightness=function(){return this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),this.hsla[2]*this.maxes[d.HSL][2]},c.default.Color.prototype._getRed=function(){return this._array[0]*this.maxes[d.RGB][0]},c.default.Color.prototype._getSaturation=function(){return this.mode===d.HSB?(this.hsba||(this.hsba=h.default._rgbaToHSBA(this._array)),this.hsba[1]*this.maxes[d.HSB][1]):(this.hsla||(this.hsla=h.default._rgbaToHSLA(this._array)),this.hsla[1]*this.maxes[d.HSL][1])};var m={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},a=/\s*/,o=/(\d{1,3})/,l=/((?:\d+(?:\.\d+)?)|(?:\.\d+))/,p=new RegExp("".concat(l.source,"%")),f={HEX3:/^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,HEX4:/^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,HEX6:/^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,HEX8:/^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,RGB:new RegExp(["^rgb\\(",o.source,",",o.source,",",o.source,"\\)$"].join(a.source),"i"),RGB_PERCENT:new RegExp(["^rgb\\(",p.source,",",p.source,",",p.source,"\\)$"].join(a.source),"i"),RGBA:new RegExp(["^rgba\\(",o.source,",",o.source,",",o.source,",",l.source,"\\)$"].join(a.source),"i"),RGBA_PERCENT:new RegExp(["^rgba\\(",p.source,",",p.source,",",p.source,",",l.source,"\\)$"].join(a.source),"i"),HSL:new RegExp(["^hsl\\(",o.source,",",p.source,",",p.source,"\\)$"].join(a.source),"i"),HSLA:new RegExp(["^hsla\\(",o.source,",",p.source,",",p.source,",",l.source,"\\)$"].join(a.source),"i"),HSB:new RegExp(["^hsb\\(",o.source,",",p.source,",",p.source,"\\)$"].join(a.source),"i"),HSBA:new RegExp(["^hsba\\(",o.source,",",p.source,",",p.source,",",l.source,"\\)$"].join(a.source),"i")};c.default.Color._parseInputs=function(e,t,r,n){var a,o=arguments.length,i=this.mode,s=this.maxes[i],l=[];if(3<=o){for(l[0]=e/s[0],l[1]=t/s[1],l[2]=r/s[2],l[3]="number"==typeof n?n/s[3]:1,a=l.length-1;0<=a;--a){var p=l[a];p<0?l[a]=0:1<p&&(l[a]=1);}return i===d.HSL?h.default._hslaToRGBA(l):i===d.HSB?h.default._hsbaToRGBA(l):l}if(1===o&&"string"==typeof e){var u=e.trim().toLowerCase();if(m[u])return c.default.Color._parseInputs.call(this,m[u]);if(f.HEX3.test(u))return (l=f.HEX3.exec(u).slice(1).map(function(e){return parseInt(e+e,16)/255}))[3]=1,l;if(f.HEX6.test(u))return (l=f.HEX6.exec(u).slice(1).map(function(e){return parseInt(e,16)/255}))[3]=1,l;if(f.HEX4.test(u))return l=f.HEX4.exec(u).slice(1).map(function(e){return parseInt(e+e,16)/255});if(f.HEX8.test(u))return l=f.HEX8.exec(u).slice(1).map(function(e){return parseInt(e,16)/255});if(f.RGB.test(u))return (l=f.RGB.exec(u).slice(1).map(function(e){return e/255}))[3]=1,l;if(f.RGB_PERCENT.test(u))return (l=f.RGB_PERCENT.exec(u).slice(1).map(function(e){return parseFloat(e)/100}))[3]=1,l;if(f.RGBA.test(u))return l=f.RGBA.exec(u).slice(1).map(function(e,t){return 3===t?parseFloat(e):e/255});if(f.RGBA_PERCENT.test(u))return l=f.RGBA_PERCENT.exec(u).slice(1).map(function(e,t){return 3===t?parseFloat(e):parseFloat(e)/100});if(f.HSL.test(u)?(l=f.HSL.exec(u).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:parseInt(e,10)/100}))[3]=1:f.HSLA.test(u)&&(l=f.HSLA.exec(u).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:3===t?parseFloat(e):parseInt(e,10)/100})),(l=l.map(function(e){return Math.max(Math.min(e,1),0)})).length)return h.default._hslaToRGBA(l);if(f.HSB.test(u)?(l=f.HSB.exec(u).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:parseInt(e,10)/100}))[3]=1:f.HSBA.test(u)&&(l=f.HSBA.exec(u).slice(1).map(function(e,t){return 0===t?parseInt(e,10)/360:3===t?parseFloat(e):parseInt(e,10)/100})),l.length){for(a=l.length-1;0<=a;--a)l[a]=Math.max(Math.min(l[a],1),0);return h.default._hsbaToRGBA(l)}l=[1,1,1,1];}else {if(1!==o&&2!==o||"number"!=typeof e)throw new Error("".concat(arguments,"is not a valid color representation."));l[0]=e/s[2],l[1]=e/s[2],l[2]=e/s[2],l[3]="number"==typeof t?t/s[3]:1,l=l.map(function(e){return Math.max(Math.min(e,1),0)});}return l};var u=c.default.Color;r.default=u;},{"../core/constants":22,"../core/main":32,"./color_conversion":18}],21:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("../core/main"))&&n.__esModule?n:{default:n},l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=p();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}e("./p5.Color"),s.default.prototype.background=function(){var e;return (e=this._renderer).background.apply(e,arguments),this},s.default.prototype.clear=function(){return this._renderer.clear(),this},s.default.prototype.colorMode=function(e,t,r,n,a){if(s.default._validateParameters("colorMode",arguments),e===l.RGB||e===l.HSB||e===l.HSL){this._colorMode=e;var o=this._colorMaxes[e];2===arguments.length?(o[0]=t,o[1]=t,o[2]=t,o[3]=t):4===arguments.length?(o[0]=t,o[1]=r,o[2]=n):5===arguments.length&&(o[0]=t,o[1]=r,o[2]=n,o[3]=a);}return this},s.default.prototype.fill=function(){var e;return this._renderer._setProperty("_fillSet",!0),this._renderer._setProperty("_doFill",!0),(e=this._renderer).fill.apply(e,arguments),this},s.default.prototype.noFill=function(){return this._renderer._setProperty("_doFill",!1),this},s.default.prototype.noStroke=function(){return this._renderer._setProperty("_doStroke",!1),this},s.default.prototype.stroke=function(){var e;return this._renderer._setProperty("_strokeSet",!0),this._renderer._setProperty("_doStroke",!0),(e=this._renderer).stroke.apply(e,arguments),this},s.default.prototype.erase=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:255,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:255;return this._renderer.erase(e,t),this},s.default.prototype.noErase=function(){return this._renderer.noErase(),this};var a=s.default;r.default=a;},{"../core/constants":22,"../core/main":32,"./p5.Color":20}],22:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.FILL=r.STROKE=r.CURVE=r.BEZIER=r.QUADRATIC=r.LINEAR=r._CTX_MIDDLE=r._DEFAULT_LEADMULT=r._DEFAULT_TEXT_FILL=r.BOLDITALIC=r.BOLD=r.ITALIC=r.NORMAL=r.BLUR=r.ERODE=r.DILATE=r.POSTERIZE=r.INVERT=r.OPAQUE=r.GRAY=r.THRESHOLD=r.BURN=r.DODGE=r.SOFT_LIGHT=r.HARD_LIGHT=r.OVERLAY=r.REPLACE=r.SCREEN=r.MULTIPLY=r.EXCLUSION=r.SUBTRACT=r.DIFFERENCE=r.LIGHTEST=r.DARKEST=r.ADD=r.REMOVE=r.BLEND=r.UP_ARROW=r.TAB=r.SHIFT=r.RIGHT_ARROW=r.RETURN=r.OPTION=r.LEFT_ARROW=r.ESCAPE=r.ENTER=r.DOWN_ARROW=r.DELETE=r.CONTROL=r.BACKSPACE=r.ALT=r.AUTO=r.HSL=r.HSB=r.RGB=r.MITER=r.BEVEL=r.ROUND=r.SQUARE=r.PROJECT=r.PIE=r.CHORD=r.OPEN=r.CLOSE=r.TESS=r.QUAD_STRIP=r.QUADS=r.TRIANGLE_STRIP=r.TRIANGLE_FAN=r.TRIANGLES=r.LINE_LOOP=r.LINE_STRIP=r.LINES=r.POINTS=r.BASELINE=r.BOTTOM=r.TOP=r.CENTER=r.LEFT=r.RIGHT=r.RADIUS=r.CORNERS=r.CORNER=r.RAD_TO_DEG=r.DEG_TO_RAD=r.RADIANS=r.DEGREES=r.TWO_PI=r.TAU=r.QUARTER_PI=r.PI=r.HALF_PI=r.WAIT=r.TEXT=r.MOVE=r.HAND=r.CROSS=r.ARROW=r.WEBGL=r.P2D=void 0,r.AXES=r.GRID=r._DEFAULT_FILL=r._DEFAULT_STROKE=r.PORTRAIT=r.LANDSCAPE=r.MIRROR=r.CLAMP=r.REPEAT=r.NEAREST=r.IMAGE=r.IMMEDIATE=r.TEXTURE=void 0;var n=Math.PI;r.P2D="p2d";r.WEBGL="webgl";r.ARROW="default";r.CROSS="crosshair";r.HAND="pointer";r.MOVE="move";r.TEXT="text";r.WAIT="wait";var a=n/2;r.HALF_PI=a;var o=n;r.PI=o;var i=n/4;r.QUARTER_PI=i;var s=2*n;r.TAU=s;var l=2*n;r.TWO_PI=l;r.DEGREES="degrees";r.RADIANS="radians";var p=n/180;r.DEG_TO_RAD=p;var u=180/n;r.RAD_TO_DEG=u;r.CORNER="corner";r.CORNERS="corners";r.RADIUS="radius";r.RIGHT="right";r.LEFT="left";r.CENTER="center";r.TOP="top";r.BOTTOM="bottom";r.BASELINE="alphabetic";r.POINTS=0;r.LINES=1;r.LINE_STRIP=3;r.LINE_LOOP=2;r.TRIANGLES=4;r.TRIANGLE_FAN=6;r.TRIANGLE_STRIP=5;r.QUADS="quads";r.QUAD_STRIP="quad_strip";r.TESS="tess";r.CLOSE="close";r.OPEN="open";r.CHORD="chord";r.PIE="pie";r.PROJECT="square";r.SQUARE="butt";r.ROUND="round";r.BEVEL="bevel";r.MITER="miter";r.RGB="rgb";r.HSB="hsb";r.HSL="hsl";r.AUTO="auto";r.ALT=18;r.BACKSPACE=8;r.CONTROL=17;r.DELETE=46;r.DOWN_ARROW=40;r.ENTER=13;r.ESCAPE=27;r.LEFT_ARROW=37;r.OPTION=18;r.RETURN=13;r.RIGHT_ARROW=39;r.SHIFT=16;r.TAB=9;r.UP_ARROW=38;r.BLEND="source-over";r.REMOVE="destination-out";r.ADD="lighter";r.DARKEST="darken";r.LIGHTEST="lighten";r.DIFFERENCE="difference";r.SUBTRACT="subtract";r.EXCLUSION="exclusion";r.MULTIPLY="multiply";r.SCREEN="screen";r.REPLACE="copy";r.OVERLAY="overlay";r.HARD_LIGHT="hard-light";r.SOFT_LIGHT="soft-light";r.DODGE="color-dodge";r.BURN="color-burn";r.THRESHOLD="threshold";r.GRAY="gray";r.OPAQUE="opaque";r.INVERT="invert";r.POSTERIZE="posterize";r.DILATE="dilate";r.ERODE="erode";r.BLUR="blur";r.NORMAL="normal";r.ITALIC="italic";r.BOLD="bold";r.BOLDITALIC="bold italic";r._DEFAULT_TEXT_FILL="#000000";r._DEFAULT_LEADMULT=1.25;r._CTX_MIDDLE="middle";r.LINEAR="linear";r.QUADRATIC="quadratic";r.BEZIER="bezier";r.CURVE="curve";r.STROKE="stroke";r.FILL="fill";r.TEXTURE="texture";r.IMMEDIATE="immediate";r.IMAGE="image";r.NEAREST="nearest";r.REPEAT="repeat";r.CLAMP="clamp";r.MIRROR="mirror";r.LANDSCAPE="landscape";r.PORTRAIT="portrait";r._DEFAULT_STROKE="#000000";r._DEFAULT_FILL="#FFFFFF";r.GRID="grid";r.AXES="axes";},{}],23:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("./main"))&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("./constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}var l=[o.ARROW,o.CROSS,o.HAND,o.MOVE,o.TEXT,o.WAIT];a.default.prototype._frameRate=0,a.default.prototype._lastFrameTime=window.performance.now(),a.default.prototype._targetFrameRate=60;var p=window.print;function u(){return window.innerWidth||document.documentElement&&document.documentElement.clientWidth||document.body&&document.body.clientWidth||0}function c(){return window.innerHeight||document.documentElement&&document.documentElement.clientHeight||document.body&&document.body.clientHeight||0}a.default.prototype.print=function(){var e;arguments.length?(e=console).log.apply(e,arguments):p();},a.default.prototype.frameCount=0,a.default.prototype.deltaTime=0,a.default.prototype.focused=document.hasFocus(),a.default.prototype.cursor=function(e,t,r){var n="auto",a=this._curElement.elt;if(l.includes(e))n=e;else if("string"==typeof e){var o="";t&&r&&"number"==typeof t&&"number"==typeof r&&(o="".concat(t," ").concat(r)),n="http://"===e.substring(0,7)||"https://"===e.substring(0,8)?"url(".concat(e,") ").concat(o,", auto"):/\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(e)?"url(".concat(e,") ").concat(o,", auto"):e;}a.style.cursor=n;},a.default.prototype.frameRate=function(e){return a.default._validateParameters("frameRate",arguments),"number"!=typeof e||e<0?this._frameRate:(this._setProperty("_targetFrameRate",e),0===e&&this._setProperty("_frameRate",e),this)},a.default.prototype.getFrameRate=function(){return this.frameRate()},a.default.prototype.setFrameRate=function(e){return this.frameRate(e)},a.default.prototype.noCursor=function(){this._curElement.elt.style.cursor="none";},a.default.prototype.displayWidth=screen.width,a.default.prototype.displayHeight=screen.height,a.default.prototype.windowWidth=u(),a.default.prototype.windowHeight=c(),a.default.prototype._onresize=function(e){this._setProperty("windowWidth",u()),this._setProperty("windowHeight",c());var t,r=this._isGlobal?window:this;"function"==typeof r.windowResized&&(void 0===(t=r.windowResized(e))||t||e.preventDefault());},a.default.prototype.width=0,a.default.prototype.height=0,a.default.prototype.fullscreen=function(e){if(a.default._validateParameters("fullscreen",arguments),void 0===e)return document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement;e?function(e){if(!(document.fullscreenEnabled||document.webkitFullscreenEnabled||document.mozFullScreenEnabled||document.msFullscreenEnabled))throw new Error("Fullscreen not enabled in this browser.");e.requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen();}(document.documentElement):document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.msExitFullscreen&&document.msExitFullscreen();},a.default.prototype.pixelDensity=function(e){var t;return a.default._validateParameters("pixelDensity",arguments),"number"==typeof e?(e!==this._pixelDensity&&(this._pixelDensity=e),(t=this).resizeCanvas(this.width,this.height,!0)):t=this._pixelDensity,t},a.default.prototype.displayDensity=function(){return window.devicePixelRatio},a.default.prototype.getURL=function(){return location.href},a.default.prototype.getURLPath=function(){return location.pathname.split("/").filter(function(e){return ""!==e})},a.default.prototype.getURLParams=function(){for(var e,t=/[?&]([^&=]+)(?:[&=])([^&=]+)/gim,r={};null!=(e=t.exec(location.search));)e.index===t.lastIndex&&t.lastIndex++,r[e[1]]=e[2];return r};var d=a.default;r.default=d;},{"./constants":22,"./main":32}],24:[function(r,e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,a=(n=r("../main"))&&n.__esModule?n:{default:n};r("../internationalization");var o=null,i=null;a.default._friendlyError=a.default._checkForUserDefinedFunctions=a.default._fesErrorMonitor=function(){},o=null;var s="https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup";i=function(){function e(r){return Object.getOwnPropertyNames(r).filter(function(e){return "_"!==e[0]&&(!(e in t)&&(t[e]=!0))}).map(function(e){var t;return t="function"==typeof r[e]?"function":e===e.toUpperCase()?"constant":"variable",{name:e,type:t}})}var t={};(o=[].concat(e(a.default.prototype),e(r("../constants")))).sort(function(e,t){return t.name.length-e.name.length});};function l(r,n){n=n||console.log.bind(console),o||i(),o.some(function(e){if(r.message&&null!==r.message.match("\\W?".concat(e.name,"\\W"))){var t="function"===e.type?"".concat(e.name,"()"):e.name;return n("Did you just try to use p5.js's ".concat(t," ").concat(e.type,"? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ").concat(s)),!0}});}a.default.prototype._helpForMisusedAtTopLevelCode=l,"complete"!==document.readyState&&(window.addEventListener("error",l,!1),window.addEventListener("load",function(){window.removeEventListener("error",l,!1);}));var p=a.default;t.default=p;},{"../constants":22,"../internationalization":30,"../main":32,"./browser_errors":void 0}],25:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../main"))&&n.__esModule?n:{default:n};e("../internationalization");a.default._friendlyFileLoadError=function(){};var o=a.default;r.default=o;},{"../internationalization":30,"../main":32}],26:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../main"))&&n.__esModule?n:{default:n};function o(){var t=/(^|@)\S+:\d+/,r=/^\s*at .*(\S+:\d+|\(native\))/m,n=/^(eval@)?(\[native code])?$/;return {parse:function(e){return void 0!==e.stacktrace||void 0!==e["opera#sourceloc"]?this.parseOpera(e):e.stack&&e.stack.match(r)?this.parseV8OrIE(e):e.stack?this.parseFFOrSafari(e):void 0},extractLocation:function(e){if(-1===e.indexOf(":"))return [e];var t=/(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e.replace(/[()]/g,""));return [t[1],t[2]||void 0,t[3]||void 0]},parseV8OrIE:function(e){return e.stack.split("\n").filter(function(e){return !!e.match(r)},this).map(function(e){-1<e.indexOf("(eval ")&&(e=e.replace(/eval code/g,"eval").replace(/(\(eval at [^()]*)|(\),.*$)/g,""));var t=e.replace(/^\s+/,"").replace(/\(eval code/g,"("),r=t.match(/ (\((.+):(\d+):(\d+)\)$)/),n=(t=r?t.replace(r[0],""):t).split(/\s+/).slice(1),a=this.extractLocation(r?r[1]:n.pop());return {functionName:n.join(" ")||void 0,fileName:-1<["eval","<anonymous>"].indexOf(a[0])?void 0:a[0],lineNumber:a[1],columnNumber:a[2],source:e}},this)},parseFFOrSafari:function(e){return e.stack.split("\n").filter(function(e){return !e.match(n)},this).map(function(e){if(-1<e.indexOf(" > eval")&&(e=e.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g,":$1")),-1===e.indexOf("@")&&-1===e.indexOf(":"))return {functionName:e};var t=/((.*".+"[^@]*)?[^@]*)(?:@)/,r=e.match(t),n=r&&r[1]?r[1]:void 0,a=this.extractLocation(e.replace(t,""));return {functionName:n,fileName:a[0],lineNumber:a[1],columnNumber:a[2],source:e}},this)},parseOpera:function(e){return !e.stacktrace||-1<e.message.indexOf("\n")&&e.message.split("\n").length>e.stacktrace.split("\n").length?this.parseOpera9(e):e.stack?this.parseOpera11(e):this.parseOpera10(e)},parseOpera9:function(e){for(var t=/Line (\d+).*script (?:in )?(\S+)/i,r=e.message.split("\n"),n=[],a=2,o=r.length;a<o;a+=2){var i=t.exec(r[a]);i&&n.push({fileName:i[2],lineNumber:i[1],source:r[a]});}return n},parseOpera10:function(e){for(var t=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,r=e.stacktrace.split("\n"),n=[],a=0,o=r.length;a<o;a+=2){var i=t.exec(r[a]);i&&n.push({functionName:i[3]||void 0,fileName:i[2],lineNumber:i[1],source:r[a]});}return n},parseOpera11:function(e){return e.stack.split("\n").filter(function(e){return !!e.match(t)&&!e.match(/^Error created at/)},this).map(function(e){var t,r=e.split("@"),n=this.extractLocation(r.pop()),a=r.shift()||"",o=a.replace(/<anonymous function(: (\w+))?>/,"$2").replace(/\([^)]*\)/g,"")||void 0;return a.match(/\(([^)]*)\)/)&&(t=a.replace(/^[^(]+\(([^)]*)\)$/,"$1")),{functionName:o,args:void 0===t||"[arguments not available]"===t?void 0:t.split(","),fileName:n[0],lineNumber:n[1],columnNumber:n[2],source:e}},this)}}}a.default._getErrorStackParser=function(){return new o};var i=a.default;r.default=i;},{"../main":32}],27:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../main"))&&n.__esModule?n:{default:n};(function(e){if(e&&e.__esModule)return;if(null===e||"object"!==s(e)&&"function"!=typeof e)return;var t=i();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);})(e("../constants")),e("../internationalization");function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function s(e){return (s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}a.default._validateParameters=a.default._clearValidateParamsCache=function(){};var o=a.default;r.default=o;},{"../../../docs/parameterData.json":1,"../constants":22,"../internationalization":30,"../main":32}],28:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("./constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}var n={modeAdjust:function(e,t,r,n,a){return a===o.CORNER?{x:e,y:t,w:r,h:n}:a===o.CORNERS?{x:e,y:t,w:r-e,h:n-t}:a===o.RADIUS?{x:e-r,y:t-n,w:2*r,h:2*n}:a===o.CENTER?{x:e-.5*r,y:t-.5*n,w:r,h:n}:void 0}};r.default=n;},{"./constants":22}],29:[function(e,t,r){var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};e("./internationalization");var o=Promise.resolve();Promise.all([new Promise(function(e,t){"complete"===document.readyState?e():window.addEventListener("load",e,!1);}),o]).then(function(){void 0===window._setupDone?window.mocha||(window.setup&&"function"==typeof window.setup||window.draw&&"function"==typeof window.draw)&&!a.default.instance&&new a.default:console.warn("p5.js seems to have been imported multiple times. Please remove the duplicate import");});},{"../core/main":32,"./internationalization":30}],30:[function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.initialize=n.translator=void 0;var a,o=r(e("i18next")),i=r(e("i18next-browser-languagedetector"));function r(e){return e&&e.__esModule?e:{default:e}}var s=function(){return console.debug("p5.js translator called before translations were loaded"),""};n.translator=s;n.initialize=function(){return new Promise(function(t,r){o.default.use(i.default).init({fallbackLng:"en",nestingPrefix:"$tr(",nestingSuffix:")",defaultNS:"translation",returnEmptyString:!1,interpolation:{escapeValue:!1},detection:{checkWhitelist:!1},resources:a}).then(function(e){n.translator=s=e,t();},function(e){return r("Translations failed to load (".concat(e,")"))});})};},{"../../translations":void 0,i18next:4,"i18next-browser-languagedetector":4}],31:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("./main"))&&n.__esModule?n:{default:n};a.default.prototype.pushStyle=function(){throw new Error("pushStyle() not used, see push()")},a.default.prototype.popStyle=function(){throw new Error("popStyle() not used, see pop()")},a.default.prototype.popMatrix=function(){throw new Error("popMatrix() not used, see pop()")},a.default.prototype.pushMatrix=function(){throw new Error("pushMatrix() not used, see push()")};var o=a.default;r.default=o;},{"./main":32}],32:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0,e("./shim");var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("./constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function _(e,t,r){var d=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,_),this._setupDone=!1,this._pixelDensity=Math.ceil(window.devicePixelRatio)||1,this._userNode=t,this._curElement=null,this._elements=[],this._glAttributes=null,this._requestAnimId=0,this._preloadCount=0,this._isGlobal=!1,this._loop=!0,this._initializeInstanceVariables(),this._defaultCanvasSize={width:100,height:100},this._events={mousemove:null,mousedown:null,mouseup:null,dragend:null,dragover:null,click:null,dblclick:null,mouseover:null,mouseout:null,keydown:null,keyup:null,keypress:null,touchstart:null,touchmove:null,touchend:null,resize:null,blur:null},this._millisStart=-1,this._lcg_random_state=null,this._gaussian_previous=!1,this._events.wheel=null,this._loadingScreenId="p5_loading",this._registeredMethods={};var n=Object.getOwnPropertyNames(_.prototype._registeredMethods),a=!0,o=!1,i=void 0;try{for(var s,l=n[Symbol.iterator]();!(a=(s=l.next()).done);a=!0){var p=s.value;this._registeredMethods[p]=_.prototype._registeredMethods[p].slice();}}catch(e){o=!0,i=e;}finally{try{a||null==l.return||l.return();}finally{if(o)throw i}}window.DeviceOrientationEvent&&(this._events.deviceorientation=null),window.DeviceMotionEvent&&!window._isNodeWebkit&&(this._events.devicemotion=null),this._start=function(){d._userNode&&"string"==typeof d._userNode&&(d._userNode=document.getElementById(d._userNode));var e=(d._isGlobal?window:d).preload;if(e){var t=document.getElementById(d._loadingScreenId);if(!t)(t=document.createElement("div")).innerHTML="Loading...",t.style.position="absolute",t.id=d._loadingScreenId,(d._userNode||document.body).appendChild(t);var r=d._preloadMethods;for(var n in r){r[n]=r[n]||_;var a=r[n];a!==_.prototype&&a!==_||(d._isGlobal&&(window[n]=d._wrapPreload(d,n)),a=d),d._registeredPreloadMethods[n]=a[n],a[n]=d._wrapPreload(a,n);}e(),d._runIfPreloadsAreDone();}else d._setup(),d._draw();},this._runIfPreloadsAreDone=function(){var e=this._isGlobal?window:this;if(0===e._preloadCount){var t=document.getElementById(e._loadingScreenId);t&&t.parentNode.removeChild(t),this._lastFrameTime=window.performance.now(),e._setup(),e._draw();}},this._decrementPreload=function(){var e=this._isGlobal?window:this;"function"==typeof e.preload&&(e._setProperty("_preloadCount",e._preloadCount-1),e._runIfPreloadsAreDone());},this._wrapPreload=function(n,a){var o=this;return function(){o._incrementPreload();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return o._registeredPreloadMethods[a].apply(n,t)}},this._incrementPreload=function(){var e=this._isGlobal?window:this;e._setProperty("_preloadCount",e._preloadCount+1);},this._setup=function(){d.createCanvas(d._defaultCanvasSize.width,d._defaultCanvasSize.height,"p2d");var e=d._isGlobal?window:d;if("function"==typeof e.preload)for(var t in d._preloadMethods)e[t]=d._preloadMethods[t][t],e[t]&&d&&(e[t]=e[t].bind(d));d._millisStart=window.performance.now(),"function"==typeof e.setup&&e.setup();var r=document.getElementsByTagName("canvas"),n=!0,a=!1,o=void 0;try{for(var i,s=r[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var l=i.value;"true"===l.dataset.hidden&&(l.style.visibility="",delete l.dataset.hidden);}}catch(e){a=!0,o=e;}finally{try{n||null==s.return||s.return();}finally{if(a)throw o}}d._lastFrameTime=window.performance.now(),d._setupDone=!0;},this._draw=function(){var e=window.performance.now(),t=e-d._lastFrameTime,r=1e3/d._targetFrameRate;(!d._loop||r-5<=t)&&(d.redraw(),d._frameRate=1e3/(e-d._lastFrameTime),d.deltaTime=e-d._lastFrameTime,d._setProperty("deltaTime",d.deltaTime),d._lastFrameTime=e,void 0!==d._updateMouseCoords&&(d._updateMouseCoords(),d._setProperty("movedX",0),d._setProperty("movedY",0))),d._loop&&(d._requestAnimId=window.requestAnimationFrame(d._draw));},this._setProperty=function(e,t){d[e]=t,d._isGlobal&&(window[e]=t);},this.remove=function(){var e=document.getElementById(d._loadingScreenId);if(e&&(e.parentNode.removeChild(e),d._incrementPreload()),d._curElement){for(var t in d._loop=!1,d._requestAnimId&&window.cancelAnimationFrame(d._requestAnimId),d._events)window.removeEventListener(t,d._events[t]);var r=!0,n=!1,a=void 0;try{for(var o,i=d._elements[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){var s=o.value;for(var l in s.elt&&s.elt.parentNode&&s.elt.parentNode.removeChild(s.elt),s._events)s.elt.removeEventListener(l,s._events[l]);}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}var p=d;d._registeredMethods.remove.forEach(function(e){void 0!==e&&e.call(p);});}if(d._isGlobal){for(var u in _.prototype)try{delete window[u];}catch(e){window[u]=void 0;}for(var c in d)if(d.hasOwnProperty(c))try{delete window[c];}catch(e){window[c]=void 0;}_.instance=null;}},this._registeredMethods.init.forEach(function(e){void 0!==e&&e.call(this);},this),this._setupPromisePreloads();var u=this._createFriendlyGlobalFunctionBinder();if(e)e(this),_._checkForUserDefinedFunctions(this);else {for(var c in this._isGlobal=!0,_.instance=this,_.prototype)if("function"==typeof _.prototype[c]){var h=c.substring(2);this._events.hasOwnProperty(h)||(Math.hasOwnProperty(c)&&Math[c]===_.prototype[c]?u(c,_.prototype[c]):u(c,_.prototype[c].bind(this)));}else u(c,_.prototype[c]);for(var m in this)this.hasOwnProperty(m)&&u(m,this[m]);}for(var f in this._events){var y=this["_on".concat(f)];if(y){var g=y.bind(this);window.addEventListener(f,g,{passive:!1}),this._events[f]=g;}}function v(){d._setProperty("focused",!0);}function b(){d._setProperty("focused",!1);}window.addEventListener("focus",v),window.addEventListener("blur",b),this.registerMethod("remove",function(){window.removeEventListener("focus",v),window.removeEventListener("blur",b);}),"complete"===document.readyState?this._start():window.addEventListener("load",this._start.bind(this),!1);}var e,t;return e=_,(t=[{key:"_initializeInstanceVariables",value:function(){this._styles=[],this._bezierDetail=20,this._curveDetail=20,this._colorMode=n.RGB,this._colorMaxes={rgb:[255,255,255,255],hsb:[360,100,100,1],hsl:[360,100,100,1]},this._downKeys={};}},{key:"registerPreloadMethod",value:function(e,t){_.prototype._preloadMethods.hasOwnProperty(e)||(_.prototype._preloadMethods[e]=t);}},{key:"registerMethod",value:function(e,t){var r=this||_.prototype;r._registeredMethods.hasOwnProperty(e)||(r._registeredMethods[e]=[]),r._registeredMethods[e].push(t);}},{key:"_createFriendlyGlobalFunctionBinder",value:function(e){var t=0<arguments.length&&void 0!==e?e:{},r=t.globalObject||window;t.log||console.log.bind(console);return function(e,t){r[e]=t;}}}])&&a(e.prototype,t),_}();for(var l in o.instance=null,o.disableFriendlyErrors=!1,n)o.prototype[l]=n[l];o.prototype._preloadMethods={loadJSON:o.prototype,loadImage:o.prototype,loadStrings:o.prototype,loadXML:o.prototype,loadBytes:o.prototype,loadTable:o.prototype,loadFont:o.prototype,loadModel:o.prototype,loadShader:o.prototype},o.prototype._registeredMethods={init:[],pre:[],post:[],remove:[]},o.prototype._registeredPreloadMethods={};var p=o;r.default=p;},{"./constants":22,"./shim":43}],33:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("./main"))&&n.__esModule?n:{default:n};a.default.Element=function(e,t){this.elt=e,this._pInst=this._pixelsState=t,this._events={},this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight;},a.default.Element.prototype.parent=function(e){return void 0===e?this.elt.parentNode:("string"==typeof e?("#"===e[0]&&(e=e.substring(1)),e=document.getElementById(e)):e instanceof a.default.Element&&(e=e.elt),e.appendChild(this.elt),this)},a.default.Element.prototype.id=function(e){return void 0===e?this.elt.id:(this.elt.id=e,this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight,this)},a.default.Element.prototype.class=function(e){return void 0===e?this.elt.className:(this.elt.className=e,this)},a.default.Element.prototype.mousePressed=function(t){return a.default.Element._adjustListener("mousedown",function(e){return this._pInst._setProperty("mouseIsPressed",!0),this._pInst._setMouseButton(e),t.call(this)},this),this},a.default.Element.prototype.doubleClicked=function(e){return a.default.Element._adjustListener("dblclick",e,this),this},a.default.Element.prototype.mouseWheel=function(e){return a.default.Element._adjustListener("wheel",e,this),this},a.default.Element.prototype.mouseReleased=function(e){return a.default.Element._adjustListener("mouseup",e,this),this},a.default.Element.prototype.mouseClicked=function(e){return a.default.Element._adjustListener("click",e,this),this},a.default.Element.prototype.mouseMoved=function(e){return a.default.Element._adjustListener("mousemove",e,this),this},a.default.Element.prototype.mouseOver=function(e){return a.default.Element._adjustListener("mouseover",e,this),this},a.default.Element.prototype.mouseOut=function(e){return a.default.Element._adjustListener("mouseout",e,this),this},a.default.Element.prototype.touchStarted=function(e){return a.default.Element._adjustListener("touchstart",e,this),this},a.default.Element.prototype.touchMoved=function(e){return a.default.Element._adjustListener("touchmove",e,this),this},a.default.Element.prototype.touchEnded=function(e){return a.default.Element._adjustListener("touchend",e,this),this},a.default.Element.prototype.dragOver=function(e){return a.default.Element._adjustListener("dragover",e,this),this},a.default.Element.prototype.dragLeave=function(e){return a.default.Element._adjustListener("dragleave",e,this),this},a.default.Element._adjustListener=function(e,t,r){return !1===t?a.default.Element._detachListener(e,r):a.default.Element._attachListener(e,t,r),this},a.default.Element._attachListener=function(e,t,r){r._events[e]&&a.default.Element._detachListener(e,r);var n=t.bind(r);r.elt.addEventListener(e,n,!1),r._events[e]=n;},a.default.Element._detachListener=function(e,t){var r=t._events[e];t.elt.removeEventListener(e,r,!1),t._events[e]=null;},a.default.Element.prototype._setProperty=function(e,t){this[e]=t;};var o=a.default.Element;r.default=o;},{"./main":32}],34:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("./main"))&&n.__esModule?n:{default:n},l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=p();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("./constants"));function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}s.default.Graphics=function(e,t,r,n){var a=r||l.P2D;this.canvas=document.createElement("canvas");var o=n._userNode||document.body;for(var i in o.appendChild(this.canvas),s.default.Element.call(this,this.canvas,n),s.default.prototype)this[i]||("function"==typeof s.default.prototype[i]?this[i]=s.default.prototype[i].bind(this):this[i]=s.default.prototype[i]);return s.default.prototype._initializeInstanceVariables.apply(this),this.width=e,this.height=t,this._pixelDensity=n._pixelDensity,a===l.WEBGL?this._renderer=new s.default.RendererGL(this.canvas,this,!1):this._renderer=new s.default.Renderer2D(this.canvas,this,!1),n._elements.push(this),Object.defineProperty(this,"deltaTime",{get:function(){return this._pInst.deltaTime}}),this._renderer.resize(e,t),this._renderer._applyDefaults(),this},s.default.Graphics.prototype=Object.create(s.default.Element.prototype),s.default.Graphics.prototype.reset=function(){this._renderer.resetMatrix(),this._renderer.isP3D&&this._renderer._update();},s.default.Graphics.prototype.remove=function(){this.elt.parentNode&&this.elt.parentNode.removeChild(this.elt);var e=this._pInst._elements.indexOf(this);for(var t in -1!==e&&this._pInst._elements.splice(e,1),this._events)this.elt.removeEventListener(t,this._events[t]);};var a=s.default.Graphics;r.default=a;},{"./constants":22,"./main":32}],35:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,l=(n=e("./main"))&&n.__esModule?n:{default:n},b=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return {default:e};var t=i();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function s(e){return (s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e){var t=0,r=0;if(e.offsetParent)for(;t+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;);else t+=e.offsetLeft,r+=e.offsetTop;return [t,r]}l.default.Renderer=function(e,t,r){l.default.Element.call(this,e,t),this.canvas=e,this._pixelsState=t,r?(this._isMainCanvas=!0,this._pInst._setProperty("_curElement",this),this._pInst._setProperty("canvas",this.canvas),this._pInst._setProperty("width",this.width),this._pInst._setProperty("height",this.height)):(this.canvas.style.display="none",this._styles=[]),this._textSize=12,this._textLeading=15,this._textFont="sans-serif",this._textStyle=b.NORMAL,this._textAscent=null,this._textDescent=null,this._textAlign=b.LEFT,this._textBaseline=b.BASELINE,this._rectMode=b.CORNER,this._ellipseMode=b.CENTER,this._curveTightness=0,this._imageMode=b.CORNER,this._tint=null,this._doStroke=!0,this._doFill=!0,this._strokeSet=!1,this._fillSet=!1;},l.default.Renderer.prototype=Object.create(l.default.Element.prototype),l.default.Renderer.prototype.push=function(){return {properties:{_doStroke:this._doStroke,_strokeSet:this._strokeSet,_doFill:this._doFill,_fillSet:this._fillSet,_tint:this._tint,_imageMode:this._imageMode,_rectMode:this._rectMode,_ellipseMode:this._ellipseMode,_textFont:this._textFont,_textLeading:this._textLeading,_textSize:this._textSize,_textAlign:this._textAlign,_textBaseline:this._textBaseline,_textStyle:this._textStyle}}},l.default.Renderer.prototype.pop=function(e){e.properties&&Object.assign(this,e.properties);},l.default.Renderer.prototype.resize=function(e,t){this.width=e,this.height=t,this.elt.width=e*this._pInst._pixelDensity,this.elt.height=t*this._pInst._pixelDensity,this.elt.style.width="".concat(e,"px"),this.elt.style.height="".concat(t,"px"),this._isMainCanvas&&(this._pInst._setProperty("width",this.width),this._pInst._setProperty("height",this.height));},l.default.Renderer.prototype.get=function(e,t,r,n){var a=this._pixelsState,o=a._pixelDensity,i=this.canvas;if(void 0===e&&void 0===t)e=t=0,r=a.width,n=a.height;else if(e*=o,t*=o,void 0===r&&void 0===n)return e<0||t<0||e>=i.width||t>=i.height?[0,0,0,0]:this._getPixel(e,t);var s=new l.default.Image(r,n);return s.canvas.getContext("2d").drawImage(i,e,t,r*o,n*o,0,0,r,n),s},l.default.Renderer.prototype.textLeading=function(e){return "number"==typeof e?(this._setProperty("_textLeading",e),this._pInst):this._textLeading},l.default.Renderer.prototype.textSize=function(e){return "number"==typeof e?(this._setProperty("_textSize",e),this._setProperty("_textLeading",e*b._DEFAULT_LEADMULT),this._applyTextProperties()):this._textSize},l.default.Renderer.prototype.textStyle=function(e){return e?(e!==b.NORMAL&&e!==b.ITALIC&&e!==b.BOLD&&e!==b.BOLDITALIC||this._setProperty("_textStyle",e),this._applyTextProperties()):this._textStyle},l.default.Renderer.prototype.textAscent=function(){return null===this._textAscent&&this._updateTextMetrics(),this._textAscent},l.default.Renderer.prototype.textDescent=function(){return null===this._textDescent&&this._updateTextMetrics(),this._textDescent},l.default.Renderer.prototype.textAlign=function(e,t){return void 0!==e?(this._setProperty("_textAlign",e),void 0!==t&&this._setProperty("_textBaseline",t),this._applyTextProperties()):{horizontal:this._textAlign,vertical:this._textBaseline}},l.default.Renderer.prototype.text=function(e,t,r,n,a){var o,i,s,l,p,u,c,d,h,m=this._pInst,f=Number.MAX_VALUE;if((this._doFill||this._doStroke)&&void 0!==e){if("string"!=typeof e&&(e=e.toString()),o=(e=e.replace(/(\t)/g,"  ")).split("\n"),void 0!==n){for(c=1,s=h=0;s<o.length;s++){for(p="",d=o[s].split(" "),i=0;i<d.length;i++)u="".concat(p+d[i]," "),n<this.textWidth(u)&&1<c?(p="".concat(d[i]," "),h+=m.textLeading(),c=1):(p=u,c+=1);s<o.length-1&&(h+=m.textLeading());}switch(this._rectMode===b.CENTER&&(t-=n/2,r-=a/2),this._textAlign){case b.CENTER:t+=n/2;break;case b.RIGHT:t+=n;}var y=!1;if(void 0!==a){switch(this._textBaseline){case b.BOTTOM:r+=a-h;break;case b.CENTER:r+=(a-h)/2;break;case b.BASELINE:y=!0,this._textBaseline=b.TOP;}f=r+a-m.textAscent();}for(s=0;s<o.length;s++){for(p="",d=o[s].split(" "),i=0;i<d.length;i++)u="".concat(p+d[i]," "),n<this.textWidth(u)&&0<p.length?(this._renderText(m,p,t,r,f),p="".concat(d[i]," "),r+=m.textLeading()):p=u;this._renderText(m,p,t,r,f),r+=m.textLeading(),y&&(this._textBaseline=b.BASELINE);}}else {var g=0,v=m.textAlign().vertical;for(v===b.CENTER?g=(o.length-1)*m.textLeading()/2:v===b.BOTTOM&&(g=(o.length-1)*m.textLeading()),l=0;l<o.length;l++)this._renderText(m,o[l],t,r-g,f),r+=m.textLeading();}return m}},l.default.Renderer.prototype._applyDefaults=function(){return this},l.default.Renderer.prototype._isOpenType=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._textFont;return "object"===s(e)&&e.font&&e.font.supported},l.default.Renderer.prototype._updateTextMetrics=function(){if(this._isOpenType())return this._setProperty("_textAscent",this._textFont._textAscent()),this._setProperty("_textDescent",this._textFont._textDescent()),this;var e=document.createElement("span");e.style.fontFamily=this._textFont,e.style.fontSize="".concat(this._textSize,"px"),e.innerHTML="ABCjgq|";var t=document.createElement("div");t.style.display="inline-block",t.style.width="1px",t.style.height="0px";var r=document.createElement("div");r.appendChild(e),r.appendChild(t),r.style.height="0px",r.style.overflow="hidden",document.body.appendChild(r),t.style.verticalAlign="baseline";var n=p(t),a=p(e),o=n[1]-a[1];t.style.verticalAlign="bottom",n=p(t),a=p(e);var i=n[1]-a[1]-o;return document.body.removeChild(r),this._setProperty("_textAscent",o),this._setProperty("_textDescent",i),this};var a=l.default.Renderer;r.default=a;},{"../core/constants":22,"./main":32}],36:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var c=n(e("./main")),m=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("./constants")),d=n(e("../image/filters"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function n(e){return e&&e.__esModule?e:{default:e}}e("./p5.Renderer");var y="rgba(0,0,0,0)";c.default.Renderer2D=function(e,t,r){return c.default.Renderer.call(this,e,t,r),this.drawingContext=this.canvas.getContext("2d"),this._pInst._setProperty("drawingContext",this.drawingContext),this},c.default.Renderer2D.prototype=Object.create(c.default.Renderer.prototype),c.default.Renderer2D.prototype._applyDefaults=function(){this._cachedFillStyle=this._cachedStrokeStyle=void 0,this._cachedBlendMode=m.BLEND,this._setFill(m._DEFAULT_FILL),this._setStroke(m._DEFAULT_STROKE),this.drawingContext.lineCap=m.ROUND,this.drawingContext.font="normal 12px sans-serif";},c.default.Renderer2D.prototype.resize=function(e,t){c.default.Renderer.prototype.resize.call(this,e,t),this.drawingContext.scale(this._pInst._pixelDensity,this._pInst._pixelDensity);},c.default.Renderer2D.prototype.background=function(){if(this.drawingContext.save(),this.resetMatrix(),(arguments.length<=0?void 0:arguments[0])instanceof c.default.Image)this._pInst.image(arguments.length<=0?void 0:arguments[0],0,0,this.width,this.height);else {var e,t=this._getFill(),r=(e=this._pInst).color.apply(e,arguments).toString();this._setFill(r),this._isErasing&&this.blendMode(this._cachedBlendMode),this.drawingContext.fillRect(0,0,this.width,this.height),this._setFill(t),this._isErasing&&this._pInst.erase();}this.drawingContext.restore();},c.default.Renderer2D.prototype.clear=function(){this.drawingContext.save(),this.resetMatrix(),this.drawingContext.clearRect(0,0,this.width,this.height),this.drawingContext.restore();},c.default.Renderer2D.prototype.fill=function(){var e,t=(e=this._pInst).color.apply(e,arguments);this._setFill(t.toString());},c.default.Renderer2D.prototype.stroke=function(){var e,t=(e=this._pInst).color.apply(e,arguments);this._setStroke(t.toString());},c.default.Renderer2D.prototype.erase=function(e,t){if(!this._isErasing){this._cachedFillStyle=this.drawingContext.fillStyle;var r=this._pInst.color(255,e).toString();this.drawingContext.fillStyle=r,this._cachedStrokeStyle=this.drawingContext.strokeStyle;var n=this._pInst.color(255,t).toString();this.drawingContext.strokeStyle=n;var a=this._cachedBlendMode;this.blendMode(m.REMOVE),this._cachedBlendMode=a,this._isErasing=!0;}},c.default.Renderer2D.prototype.noErase=function(){this._isErasing&&(this.drawingContext.fillStyle=this._cachedFillStyle,this.drawingContext.strokeStyle=this._cachedStrokeStyle,this.blendMode(this._cachedBlendMode),this._isErasing=!1);},c.default.Renderer2D.prototype.image=function(e,t,r,n,a,o,i,s,l){var p;e.gifProperties&&e._animateGif(this._pInst);try{this._tint&&(c.default.MediaElement&&e instanceof c.default.MediaElement&&e.loadPixels(),e.canvas&&(p=this._getTintedImageCanvas(e))),p=p||(e.canvas||e.elt);var u=1;e.width&&0<e.width&&(u=p.width/e.width),this._isErasing&&this.blendMode(this._cachedBlendMode),this.drawingContext.drawImage(p,u*t,u*r,u*n,u*a,o,i,s,l),this._isErasing&&this._pInst.erase();}catch(e){if("NS_ERROR_NOT_AVAILABLE"!==e.name)throw e}},c.default.Renderer2D.prototype._getTintedImageCanvas=function(e){if(!e.canvas)return e;var t=d.default._toPixels(e.canvas),r=document.createElement("canvas");r.width=e.canvas.width,r.height=e.canvas.height;for(var n=r.getContext("2d"),a=n.createImageData(e.canvas.width,e.canvas.height),o=a.data,i=0;i<t.length;i+=4){var s=t[i],l=t[i+1],p=t[i+2],u=t[i+3];o[i]=s*this._tint[0]/255,o[i+1]=l*this._tint[1]/255,o[i+2]=p*this._tint[2]/255,o[i+3]=u*this._tint[3]/255;}return n.putImageData(a,0,0),r},c.default.Renderer2D.prototype.blendMode=function(e){if(e===m.SUBTRACT)console.warn("blendMode(SUBTRACT) only works in WEBGL mode.");else {if(e!==m.BLEND&&e!==m.REMOVE&&e!==m.DARKEST&&e!==m.LIGHTEST&&e!==m.DIFFERENCE&&e!==m.MULTIPLY&&e!==m.EXCLUSION&&e!==m.SCREEN&&e!==m.REPLACE&&e!==m.OVERLAY&&e!==m.HARD_LIGHT&&e!==m.SOFT_LIGHT&&e!==m.DODGE&&e!==m.BURN&&e!==m.ADD)throw new Error("Mode ".concat(e," not recognized."));this._cachedBlendMode=e,this.drawingContext.globalCompositeOperation=e;}},c.default.Renderer2D.prototype.blend=function(){for(var e=this.drawingContext.globalCompositeOperation,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var a=r[r.length-1],o=Array.prototype.slice.call(r,0,r.length-1);this.drawingContext.globalCompositeOperation=a,c.default.prototype.copy.apply(this,o),this.drawingContext.globalCompositeOperation=e;},c.default.Renderer2D.prototype._getPixel=function(e,t){var r;return [(r=this.drawingContext.getImageData(e,t,1,1).data)[0],r[1],r[2],r[3]]},c.default.Renderer2D.prototype.loadPixels=function(){var e=this._pixelsState,t=e._pixelDensity,r=this.width*t,n=this.height*t,a=this.drawingContext.getImageData(0,0,r,n);e._setProperty("imageData",a),e._setProperty("pixels",a.data);},c.default.Renderer2D.prototype.set=function(e,t,r){e=Math.floor(e),t=Math.floor(t);var n=this._pixelsState;if(r instanceof c.default.Image)this.drawingContext.save(),this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(n._pixelDensity,n._pixelDensity),this.drawingContext.clearRect(e,t,r.width,r.height),this.drawingContext.drawImage(r.canvas,e,t),this.drawingContext.restore();else {var a=0,o=0,i=0,s=0,l=4*(t*n._pixelDensity*(this.width*n._pixelDensity)+e*n._pixelDensity);if(n.imageData||n.loadPixels.call(n),"number"==typeof r)l<n.pixels.length&&(i=o=a=r,s=255);else if(r instanceof Array){if(r.length<4)throw new Error("pixel array must be of the form [R, G, B, A]");l<n.pixels.length&&(a=r[0],o=r[1],i=r[2],s=r[3]);}else r instanceof c.default.Color&&l<n.pixels.length&&(a=r.levels[0],o=r.levels[1],i=r.levels[2],s=r.levels[3]);for(var p=0;p<n._pixelDensity;p++)for(var u=0;u<n._pixelDensity;u++)l=4*((t*n._pixelDensity+u)*this.width*n._pixelDensity+(e*n._pixelDensity+p)),n.pixels[l]=a,n.pixels[l+1]=o,n.pixels[l+2]=i,n.pixels[l+3]=s;}},c.default.Renderer2D.prototype.updatePixels=function(e,t,r,n){var a=this._pixelsState,o=a._pixelDensity;void 0===e&&void 0===t&&void 0===r&&void 0===n&&(t=e=0,r=this.width,n=this.height),e*=o,t*=o,r*=o,n*=o,this.gifProperties&&(this.gifProperties.frames[this.gifProperties.displayIndex].image=a.imageData),this.drawingContext.putImageData(a.imageData,e,t,0,0,r,n);},c.default.Renderer2D.prototype._acuteArcToBezier=function(e,t){var r=t/2,n=Math.cos(r),a=Math.sin(r),o=1/Math.tan(r),i=e+r,s=Math.cos(i),l=Math.sin(i),p=(4-n)/3,u=a+(n-p)*o;return {ax:Math.cos(e).toFixed(7),ay:Math.sin(e).toFixed(7),bx:(p*s+u*l).toFixed(7),by:(p*l-u*s).toFixed(7),cx:(p*s-u*l).toFixed(7),cy:(p*l+u*s).toFixed(7),dx:Math.cos(e+t).toFixed(7),dy:Math.sin(e+t).toFixed(7)}},c.default.Renderer2D.prototype.arc=function(r,n,e,t,a,o,i){var s=this.drawingContext,l=e/2,p=t/2,u=0,c=[];for(r+=l,n+=p;1e-5<=o-a;)u=Math.min(o-a,m.HALF_PI),c.push(this._acuteArcToBezier(a,u)),a+=u;return this._doFill&&(s.beginPath(),c.forEach(function(e,t){0===t&&s.moveTo(r+e.ax*l,n+e.ay*p),s.bezierCurveTo(r+e.bx*l,n+e.by*p,r+e.cx*l,n+e.cy*p,r+e.dx*l,n+e.dy*p);}),i!==m.PIE&&null!=i||s.lineTo(r,n),s.closePath(),s.fill()),this._doStroke&&(s.beginPath(),c.forEach(function(e,t){0===t&&s.moveTo(r+e.ax*l,n+e.ay*p),s.bezierCurveTo(r+e.bx*l,n+e.by*p,r+e.cx*l,n+e.cy*p,r+e.dx*l,n+e.dy*p);}),i===m.PIE?(s.lineTo(r,n),s.closePath()):i===m.CHORD&&s.closePath(),s.stroke()),this},c.default.Renderer2D.prototype.ellipse=function(e){var t=this.drawingContext,r=this._doFill,n=this._doStroke,a=parseFloat(e[0]),o=parseFloat(e[1]),i=parseFloat(e[2]),s=parseFloat(e[3]);if(r&&!n){if(this._getFill()===y)return this}else if(!r&&n&&this._getStroke()===y)return this;var l=i/2*.5522847498,p=s/2*.5522847498,u=a+i,c=o+s,d=a+i/2,h=o+s/2;t.beginPath(),t.moveTo(a,h),t.bezierCurveTo(a,h-p,d-l,o,d,o),t.bezierCurveTo(d+l,o,u,h-p,u,h),t.bezierCurveTo(u,h+p,d+l,c,d,c),t.bezierCurveTo(d-l,c,a,h+p,a,h),r&&t.fill(),n&&t.stroke();},c.default.Renderer2D.prototype.line=function(e,t,r,n){var a=this.drawingContext;return this._doStroke&&(this._getStroke()===y||(a.beginPath(),a.moveTo(e,t),a.lineTo(r,n),a.stroke())),this},c.default.Renderer2D.prototype.point=function(e,t){var r=this.drawingContext;if(!this._doStroke)return this;if(this._getStroke()===y)return this;var n=this._getStroke(),a=this._getFill();e=Math.round(e),t=Math.round(t),this._setFill(n),1<r.lineWidth?(r.beginPath(),r.arc(e,t,r.lineWidth/2,0,m.TWO_PI,!1),r.fill()):r.fillRect(e,t,1,1),this._setFill(a);},c.default.Renderer2D.prototype.quad=function(e,t,r,n,a,o,i,s){var l=this.drawingContext,p=this._doFill,u=this._doStroke;if(p&&!u){if(this._getFill()===y)return this}else if(!p&&u&&this._getStroke()===y)return this;return l.beginPath(),l.moveTo(e,t),l.lineTo(r,n),l.lineTo(a,o),l.lineTo(i,s),l.closePath(),p&&l.fill(),u&&l.stroke(),this},c.default.Renderer2D.prototype.rect=function(e){var t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],i=e[5],s=e[6],l=e[7],p=this.drawingContext,u=this._doFill,c=this._doStroke;if(u&&!c){if(this._getFill()===y)return this}else if(!u&&c&&this._getStroke()===y)return this;if(p.beginPath(),void 0===o)p.rect(t,r,n,a);else {void 0===i&&(i=o),void 0===s&&(s=i),void 0===l&&(l=s);var d=Math.abs(n),h=Math.abs(a),m=d/2,f=h/2;d<2*o&&(o=m),h<2*o&&(o=f),d<2*i&&(i=m),h<2*i&&(i=f),d<2*s&&(s=m),h<2*s&&(s=f),d<2*l&&(l=m),h<2*l&&(l=f),p.beginPath(),p.moveTo(t+o,r),p.arcTo(t+n,r,t+n,r+a,i),p.arcTo(t+n,r+a,t,r+a,s),p.arcTo(t,r+a,t,r,l),p.arcTo(t,r,t+n,r,o),p.closePath();}return this._doFill&&p.fill(),this._doStroke&&p.stroke(),this},c.default.Renderer2D.prototype.triangle=function(e){var t=this.drawingContext,r=this._doFill,n=this._doStroke,a=e[0],o=e[1],i=e[2],s=e[3],l=e[4],p=e[5];if(r&&!n){if(this._getFill()===y)return this}else if(!r&&n&&this._getStroke()===y)return this;t.beginPath(),t.moveTo(a,o),t.lineTo(i,s),t.lineTo(l,p),t.closePath(),r&&t.fill(),n&&t.stroke();},c.default.Renderer2D.prototype.endShape=function(e,t,r,n,a,o,i){if(0===t.length)return this;if(!this._doStroke&&!this._doFill)return this;var s,l,p,u=e===m.CLOSE;u&&!o&&t.push(t[0]);var c=t.length;if(!r||i!==m.POLYGON&&null!==i)if(!n||i!==m.POLYGON&&null!==i)if(!a||i!==m.POLYGON&&null!==i)if(i===m.POINTS)for(l=0;l<c;l++)s=t[l],this._doStroke&&this._pInst.stroke(s[6]),this._pInst.point(s[0],s[1]);else if(i===m.LINES)for(l=0;l+1<c;l+=2)s=t[l],this._doStroke&&this._pInst.stroke(t[l+1][6]),this._pInst.line(s[0],s[1],t[l+1][0],t[l+1][1]);else if(i===m.TRIANGLES)for(l=0;l+2<c;l+=3)s=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(s[0],s[1]),this.drawingContext.lineTo(t[l+1][0],t[l+1][1]),this.drawingContext.lineTo(t[l+2][0],t[l+2][1]),this.drawingContext.closePath(),this._doFill&&(this._pInst.fill(t[l+2][5]),this.drawingContext.fill()),this._doStroke&&(this._pInst.stroke(t[l+2][6]),this.drawingContext.stroke());else if(i===m.TRIANGLE_STRIP)for(l=0;l+1<c;l++)s=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(t[l+1][0],t[l+1][1]),this.drawingContext.lineTo(s[0],s[1]),this._doStroke&&this._pInst.stroke(t[l+1][6]),this._doFill&&this._pInst.fill(t[l+1][5]),l+2<c&&(this.drawingContext.lineTo(t[l+2][0],t[l+2][1]),this._doStroke&&this._pInst.stroke(t[l+2][6]),this._doFill&&this._pInst.fill(t[l+2][5])),this._doFillStrokeClose(u);else if(i===m.TRIANGLE_FAN){if(2<c){for(this.drawingContext.beginPath(),l=2;l<c;l++)s=t[l],this.drawingContext.moveTo(t[0][0],t[0][1]),this.drawingContext.lineTo(t[l-1][0],t[l-1][1]),this.drawingContext.lineTo(s[0],s[1]),this.drawingContext.lineTo(t[0][0],t[0][1]),l<c-1&&(this._doFill&&s[5]!==t[l+1][5]||this._doStroke&&s[6]!==t[l+1][6])&&(this._doFill&&(this._pInst.fill(s[5]),this.drawingContext.fill(),this._pInst.fill(t[l+1][5])),this._doStroke&&(this._pInst.stroke(s[6]),this.drawingContext.stroke(),this._pInst.stroke(t[l+1][6])),this.drawingContext.closePath(),this.drawingContext.beginPath());this._doFillStrokeClose(u);}}else if(i===m.QUADS)for(l=0;l+3<c;l+=4){for(s=t[l],this.drawingContext.beginPath(),this.drawingContext.moveTo(s[0],s[1]),p=1;p<4;p++)this.drawingContext.lineTo(t[l+p][0],t[l+p][1]);this.drawingContext.lineTo(s[0],s[1]),this._doFill&&this._pInst.fill(t[l+3][5]),this._doStroke&&this._pInst.stroke(t[l+3][6]),this._doFillStrokeClose(u);}else if(i===m.QUAD_STRIP){if(3<c)for(l=0;l+1<c;l+=2)s=t[l],this.drawingContext.beginPath(),l+3<c?(this.drawingContext.moveTo(t[l+2][0],t[l+2][1]),this.drawingContext.lineTo(s[0],s[1]),this.drawingContext.lineTo(t[l+1][0],t[l+1][1]),this.drawingContext.lineTo(t[l+3][0],t[l+3][1]),this._doFill&&this._pInst.fill(t[l+3][5]),this._doStroke&&this._pInst.stroke(t[l+3][6])):(this.drawingContext.moveTo(s[0],s[1]),this.drawingContext.lineTo(t[l+1][0],t[l+1][1])),this._doFillStrokeClose(u);}else {for(this.drawingContext.beginPath(),this.drawingContext.moveTo(t[0][0],t[0][1]),l=1;l<c;l++)(s=t[l]).isVert&&(s.moveTo?this.drawingContext.moveTo(s[0],s[1]):this.drawingContext.lineTo(s[0],s[1]));this._doFillStrokeClose(u);}else {for(this.drawingContext.beginPath(),l=0;l<c;l++)t[l].isVert?t[l].moveTo?this.drawingContext.moveTo(t[l][0],t[l][1]):this.drawingContext.lineTo(t[l][0],t[l][1]):this.drawingContext.quadraticCurveTo(t[l][0],t[l][1],t[l][2],t[l][3]);this._doFillStrokeClose(u);}else {for(this.drawingContext.beginPath(),l=0;l<c;l++)t[l].isVert?t[l].moveTo?this.drawingContext.moveTo(t[l][0],t[l][1]):this.drawingContext.lineTo(t[l][0],t[l][1]):this.drawingContext.bezierCurveTo(t[l][0],t[l][1],t[l][2],t[l][3],t[l][4],t[l][5]);this._doFillStrokeClose(u);}else if(3<c){var d=[],h=1-this._curveTightness;for(this.drawingContext.beginPath(),this.drawingContext.moveTo(t[1][0],t[1][1]),l=1;l+2<c;l++)s=t[l],d[0]=[s[0],s[1]],d[1]=[s[0]+(h*t[l+1][0]-h*t[l-1][0])/6,s[1]+(h*t[l+1][1]-h*t[l-1][1])/6],d[2]=[t[l+1][0]+(h*t[l][0]-h*t[l+2][0])/6,t[l+1][1]+(h*t[l][1]-h*t[l+2][1])/6],d[3]=[t[l+1][0],t[l+1][1]],this.drawingContext.bezierCurveTo(d[1][0],d[1][1],d[2][0],d[2][1],d[3][0],d[3][1]);u&&this.drawingContext.lineTo(t[l+1][0],t[l+1][1]),this._doFillStrokeClose(u);}return o=a=n=r=!1,u&&t.pop(),this},c.default.Renderer2D.prototype.strokeCap=function(e){return e!==m.ROUND&&e!==m.SQUARE&&e!==m.PROJECT||(this.drawingContext.lineCap=e),this},c.default.Renderer2D.prototype.strokeJoin=function(e){return e!==m.ROUND&&e!==m.BEVEL&&e!==m.MITER||(this.drawingContext.lineJoin=e),this},c.default.Renderer2D.prototype.strokeWeight=function(e){return this.drawingContext.lineWidth=void 0===e||0===e?1e-4:e,this},c.default.Renderer2D.prototype._getFill=function(){return this._cachedFillStyle||(this._cachedFillStyle=this.drawingContext.fillStyle),this._cachedFillStyle},c.default.Renderer2D.prototype._setFill=function(e){e!==this._cachedFillStyle&&(this.drawingContext.fillStyle=e,this._cachedFillStyle=e);},c.default.Renderer2D.prototype._getStroke=function(){return this._cachedStrokeStyle||(this._cachedStrokeStyle=this.drawingContext.strokeStyle),this._cachedStrokeStyle},c.default.Renderer2D.prototype._setStroke=function(e){e!==this._cachedStrokeStyle&&(this.drawingContext.strokeStyle=e,this._cachedStrokeStyle=e);},c.default.Renderer2D.prototype.bezier=function(e,t,r,n,a,o,i,s){return this._pInst.beginShape(),this._pInst.vertex(e,t),this._pInst.bezierVertex(r,n,a,o,i,s),this._pInst.endShape(),this},c.default.Renderer2D.prototype.curve=function(e,t,r,n,a,o,i,s){return this._pInst.beginShape(),this._pInst.curveVertex(e,t),this._pInst.curveVertex(r,n),this._pInst.curveVertex(a,o),this._pInst.curveVertex(i,s),this._pInst.endShape(),this},c.default.Renderer2D.prototype._doFillStrokeClose=function(e){e&&this.drawingContext.closePath(),this._doFill&&this.drawingContext.fill(),this._doStroke&&this.drawingContext.stroke();},c.default.Renderer2D.prototype.applyMatrix=function(e,t,r,n,a,o){this.drawingContext.transform(e,t,r,n,a,o);},c.default.Renderer2D.prototype.resetMatrix=function(){return this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(this._pInst._pixelDensity,this._pInst._pixelDensity),this},c.default.Renderer2D.prototype.rotate=function(e){this.drawingContext.rotate(e);},c.default.Renderer2D.prototype.scale=function(e,t){return this.drawingContext.scale(e,t),this},c.default.Renderer2D.prototype.translate=function(e,t){return e instanceof c.default.Vector&&(t=e.y,e=e.x),this.drawingContext.translate(e,t),this},c.default.Renderer2D.prototype.text=function(e,t,r,n,a){var o;void 0!==n&&this.drawingContext.textBaseline===m.BASELINE&&(o=!0,this.drawingContext.textBaseline=m.TOP);var i=c.default.Renderer.prototype.text.apply(this,arguments);return o&&(this.drawingContext.textBaseline=m.BASELINE),i},c.default.Renderer2D.prototype._renderText=function(e,t,r,n,a){if(!(a<=n))return e.push(),this._isOpenType()?this._textFont._renderPath(t,r,n,{renderer:this}):(this._doStroke&&this._strokeSet&&this.drawingContext.strokeText(t,r,n),this._doFill&&(this._fillSet||this._setFill(m._DEFAULT_TEXT_FILL),this.drawingContext.fillText(t,r,n))),e.pop(),e},c.default.Renderer2D.prototype.textWidth=function(e){return this._isOpenType()?this._textFont._textWidth(e,this._textSize):this.drawingContext.measureText(e).width},c.default.Renderer2D.prototype._applyTextProperties=function(){var e,t=this._pInst;return this._setProperty("_textAscent",null),this._setProperty("_textDescent",null),e=this._textFont,this._isOpenType()&&(e=this._textFont.font.familyName,this._setProperty("_textStyle",this._textFont.font.styleName)),this.drawingContext.font="".concat(this._textStyle||"normal"," ").concat(this._textSize||12,"px ").concat(e||"sans-serif"),this.drawingContext.textAlign=this._textAlign,this._textBaseline===m.CENTER?this.drawingContext.textBaseline=m._CTX_MIDDLE:this.drawingContext.textBaseline=this._textBaseline,t},c.default.Renderer2D.prototype.push=function(){return this.drawingContext.save(),c.default.Renderer.prototype.push.apply(this)},c.default.Renderer2D.prototype.pop=function(e){this.drawingContext.restore(),this._cachedFillStyle=this.drawingContext.fillStyle,this._cachedStrokeStyle=this.drawingContext.strokeStyle,c.default.Renderer.prototype.pop.call(this,e);};var a=c.default.Renderer2D;r.default=a;},{"../image/filters":53,"./constants":22,"./main":32,"./p5.Renderer":35}],37:[function(e,t,r){var n,d=(n=e("./main"))&&n.__esModule?n:{default:n};d.default.prototype._promisePreloads=[];var h=!(d.default.prototype.registerPromisePreload=function(e){d.default.prototype._promisePreloads.push(e);});d.default.prototype._setupPromisePreloads=function(){var e=!0,t=!1,r=void 0;try{for(var n,a=this._promisePreloads[Symbol.iterator]();!(e=(n=a.next()).done);e=!0){var o=n.value,i=this,s=o.method,l=o.addCallbacks,p=o.legacyPreloadSetup,u=o.target||this,c=u[s].bind(u);if(u===d.default.prototype){if(h)continue;i=null,c=u[s];}if(u[s]=this._wrapPromisePreload(i,c,l),p)u[p.method]=this._legacyPreloadGenerator(i,p,u[s]);}}catch(e){t=!0,r=e;}finally{try{e||null==a.return||a.return();}finally{if(t)throw r}}h=!0;},d.default.prototype._wrapPromisePreload=function(e,l,p){var t=function(){var e=this;this._incrementPreload();for(var t=null,r=null,n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];if(p)for(var i=a.length-1;0<=i&&!r&&"function"==typeof a[i];i--)r=t,t=a.pop();var s=Promise.resolve(l.apply(this,a));return t&&s.then(t),r&&s.catch(r),s.then(function(){return e._decrementPreload()}),s};return e&&(t=t.bind(e)),t};function o(){return {}}d.default.prototype._legacyPreloadGenerator=function(e,t,n){var a=t.createBaseObject||o,r=function(){var t=this;this._incrementPreload();var r=a.apply(this,arguments);return n.apply(this,arguments).then(function(e){Object.assign(r,e),t._decrementPreload();}),r};return e&&(r=r.bind(e)),r};},{"./main":32}],38:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,l=(n=e("./main"))&&n.__esModule?n:{default:n},p=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==s(e)&&"function"!=typeof e)return {default:e};var t=i();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("./constants"));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function s(e){return (s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e("./p5.Graphics"),e("./p5.Renderer2D"),e("../webgl/p5.RendererGL");var u="defaultCanvas0";l.default.prototype.createCanvas=function(e,t,r){l.default._validateParameters("createCanvas",arguments);var n,a=r||p.P2D;if(a===p.WEBGL){if(n=document.getElementById(u)){n.parentNode.removeChild(n);var o=this._renderer;this._elements=this._elements.filter(function(e){return e!==o});}(n=document.createElement("canvas")).id=u,n.classList.add("p5Canvas");}else if(this._defaultGraphicsCreated)n=this.canvas;else {n=document.createElement("canvas");for(var i=0;document.getElementById("defaultCanvas".concat(i));)i++;u="defaultCanvas".concat(i),n.id=u,n.classList.add("p5Canvas");}if(this._setupDone||(n.dataset.hidden=!0,n.style.visibility="hidden"),this._userNode)this._userNode.appendChild(n);else {if(0===document.getElementsByTagName("main").length){var s=document.createElement("main");document.body.appendChild(s);}document.getElementsByTagName("main")[0].appendChild(n);}return a===p.WEBGL?(this._setProperty("_renderer",new l.default.RendererGL(n,this,!0)),this._elements.push(this._renderer)):this._defaultGraphicsCreated||(this._setProperty("_renderer",new l.default.Renderer2D(n,this,!0)),this._defaultGraphicsCreated=!0,this._elements.push(this._renderer)),this._renderer.resize(e,t),this._renderer._applyDefaults(),this._renderer},l.default.prototype.resizeCanvas=function(e,t,r){if(l.default._validateParameters("resizeCanvas",arguments),this._renderer){var n={};for(var a in this.drawingContext){var o=this.drawingContext[a];"object"!==s(o)&&"function"!=typeof o&&(n[a]=o);}for(var i in this._renderer.resize(e,t),this.width=e,this.height=t,n)try{this.drawingContext[i]=n[i];}catch(e){}r||this.redraw();}},l.default.prototype.noCanvas=function(){this.canvas&&this.canvas.parentNode.removeChild(this.canvas);},l.default.prototype.createGraphics=function(e,t,r){return l.default._validateParameters("createGraphics",arguments),new l.default.Graphics(e,t,r,this)},l.default.prototype.blendMode=function(e){l.default._validateParameters("blendMode",arguments),e===p.NORMAL&&(console.warn("NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead."),e=p.BLEND),this._renderer.blendMode(e);};var a=l.default;r.default=a;},{"../webgl/p5.RendererGL":86,"./constants":22,"./main":32,"./p5.Graphics":34,"./p5.Renderer2D":36}],39:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var u=n(e("../main")),s=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../constants")),c=n(e("../helpers"));function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function n(e){return e&&e.__esModule?e:{default:e}}e("../friendly_errors/fes_core"),e("../friendly_errors/file_errors"),e("../friendly_errors/validate_params"),u.default.prototype._normalizeArcAngles=function(e,t,r,n,a){var o;return e-=s.TWO_PI*Math.floor(e/s.TWO_PI),t-=s.TWO_PI*Math.floor(t/s.TWO_PI),o=Math.min(Math.abs(e-t),s.TWO_PI-Math.abs(e-t)),a&&(e=e<=s.HALF_PI?Math.atan(r/n*Math.tan(e)):e>s.HALF_PI&&e<=3*s.HALF_PI?Math.atan(r/n*Math.tan(e))+s.PI:Math.atan(r/n*Math.tan(e))+s.TWO_PI,t=t<=s.HALF_PI?Math.atan(r/n*Math.tan(t)):t>s.HALF_PI&&t<=3*s.HALF_PI?Math.atan(r/n*Math.tan(t))+s.PI:Math.atan(r/n*Math.tan(t))+s.TWO_PI),t<e&&(t+=s.TWO_PI),{start:e,stop:t,correspondToSamePoint:o<1e-5}},u.default.prototype.arc=function(e,t,r,n,a,o,i,s){if(u.default._validateParameters("arc",arguments),!this._renderer._doStroke&&!this._renderer._doFill)return this;if(a===o)return this;a=this._toRadians(a),o=this._toRadians(o),r=Math.abs(r),n=Math.abs(n);var l=c.default.modeAdjust(e,t,r,n,this._renderer._ellipseMode),p=this._normalizeArcAngles(a,o,l.w,l.h,!0);return p.correspondToSamePoint?this._renderer.ellipse([l.x,l.y,l.w,l.h,s]):this._renderer.arc(l.x,l.y,l.w,l.h,p.start,p.stop,i,s),this},u.default.prototype.ellipse=function(e,t,r,n,a){return u.default._validateParameters("ellipse",arguments),this._renderEllipse.apply(this,arguments)},u.default.prototype.circle=function(){u.default._validateParameters("circle",arguments);var e=Array.prototype.slice.call(arguments,0,2);return e.push(arguments[2]),e.push(arguments[2]),this._renderEllipse.apply(this,e)},u.default.prototype._renderEllipse=function(e,t,r,n,a){if(!this._renderer._doStroke&&!this._renderer._doFill)return this;r<0&&(r=Math.abs(r)),void 0===n?n=r:n<0&&(n=Math.abs(n));var o=c.default.modeAdjust(e,t,r,n,this._renderer._ellipseMode);return this._renderer.ellipse([o.x,o.y,o.w,o.h,a]),this},u.default.prototype.line=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;u.default._validateParameters("line",t),this._renderer._doStroke&&(n=this._renderer).line.apply(n,t);return this},u.default.prototype.point=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;u.default._validateParameters("point",t),this._renderer._doStroke&&(1===t.length&&t[0]instanceof u.default.Vector?this._renderer.point.call(this._renderer,t[0].x,t[0].y,t[0].z):(n=this._renderer).point.apply(n,t));return this},u.default.prototype.quad=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;u.default._validateParameters("quad",t),(this._renderer._doStroke||this._renderer._doFill)&&(this._renderer.isP3D&&12!==t.length?this._renderer.quad.call(this._renderer,t[0],t[1],0,t[2],t[3],0,t[4],t[5],0,t[6],t[7],0):(n=this._renderer).quad.apply(n,t));return this},u.default.prototype.rect=function(){return u.default._validateParameters("rect",arguments),this._renderRect.apply(this,arguments)},u.default.prototype.square=function(e,t,r,n,a,o,i){return u.default._validateParameters("square",arguments),this._renderRect.call(this,e,t,r,r,n,a,o,i)},u.default.prototype._renderRect=function(){if(this._renderer._doStroke||this._renderer._doFill){3===arguments.length&&(arguments[3]=arguments[2]);for(var e=c.default.modeAdjust(arguments[0],arguments[1],arguments[2],arguments[3],this._renderer._rectMode),t=[e.x,e.y,e.w,e.h],r=4;r<arguments.length;r++)t[r]=arguments[r];this._renderer.rect(t);}return this},u.default.prototype.triangle=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return u.default._validateParameters("triangle",t),(this._renderer._doStroke||this._renderer._doFill)&&this._renderer.triangle(t),this};var a=u.default;r.default=a;},{"../constants":22,"../friendly_errors/fes_core":24,"../friendly_errors/file_errors":25,"../friendly_errors/validate_params":27,"../helpers":28,"../main":32}],40:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../main"))&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}a.default.prototype.ellipseMode=function(e){return a.default._validateParameters("ellipseMode",arguments),e!==o.CORNER&&e!==o.CORNERS&&e!==o.RADIUS&&e!==o.CENTER||(this._renderer._ellipseMode=e),this},a.default.prototype.noSmooth=function(){return this.setAttributes("antialias",!1),this._renderer.isP3D||"imageSmoothingEnabled"in this.drawingContext&&(this.drawingContext.imageSmoothingEnabled=!1),this},a.default.prototype.rectMode=function(e){return a.default._validateParameters("rectMode",arguments),e!==o.CORNER&&e!==o.CORNERS&&e!==o.RADIUS&&e!==o.CENTER||(this._renderer._rectMode=e),this},a.default.prototype.smooth=function(){return this.setAttributes("antialias",!0),this._renderer.isP3D||"imageSmoothingEnabled"in this.drawingContext&&(this.drawingContext.imageSmoothingEnabled=!0),this},a.default.prototype.strokeCap=function(e){return a.default._validateParameters("strokeCap",arguments),e!==o.ROUND&&e!==o.SQUARE&&e!==o.PROJECT||this._renderer.strokeCap(e),this},a.default.prototype.strokeJoin=function(e){return a.default._validateParameters("strokeJoin",arguments),e!==o.ROUND&&e!==o.BEVEL&&e!==o.MITER||this._renderer.strokeJoin(e),this},a.default.prototype.strokeWeight=function(e){return a.default._validateParameters("strokeWeight",arguments),this._renderer.strokeWeight(e),this};var l=a.default;r.default=l;},{"../constants":22,"../main":32}],41:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("../main"))&&n.__esModule?n:{default:n};e("../friendly_errors/fes_core"),e("../friendly_errors/file_errors"),e("../friendly_errors/validate_params"),s.default.prototype.bezier=function(){for(var e,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return s.default._validateParameters("bezier",r),(this._renderer._doStroke||this._renderer._doFill)&&(e=this._renderer).bezier.apply(e,r),this},s.default.prototype.bezierDetail=function(e){return s.default._validateParameters("bezierDetail",arguments),this._bezierDetail=e,this},s.default.prototype.bezierPoint=function(e,t,r,n,a){s.default._validateParameters("bezierPoint",arguments);var o=1-a;return Math.pow(o,3)*e+3*Math.pow(o,2)*a*t+3*o*Math.pow(a,2)*r+Math.pow(a,3)*n},s.default.prototype.bezierTangent=function(e,t,r,n,a){s.default._validateParameters("bezierTangent",arguments);var o=1-a;return 3*n*Math.pow(a,2)-3*r*Math.pow(a,2)+6*r*o*a-6*t*o*a+3*t*Math.pow(o,2)-3*e*Math.pow(o,2)},s.default.prototype.curve=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;s.default._validateParameters("curve",t),this._renderer._doStroke&&(n=this._renderer).curve.apply(n,t);return this},s.default.prototype.curveDetail=function(e){return s.default._validateParameters("curveDetail",arguments),this._curveDetail=e<3?3:e,this},s.default.prototype.curveTightness=function(e){return s.default._validateParameters("curveTightness",arguments),this._renderer._curveTightness=e,this},s.default.prototype.curvePoint=function(e,t,r,n,a){s.default._validateParameters("curvePoint",arguments);var o=a*a*a,i=a*a;return e*(-.5*o+i-.5*a)+t*(1.5*o-2.5*i+1)+r*(-1.5*o+2*i+.5*a)+n*(.5*o-.5*i)},s.default.prototype.curveTangent=function(e,t,r,n,a){s.default._validateParameters("curveTangent",arguments);var o=a*a;return e*(-3*o/2+2*a-.5)+t*(9*o/2-5*a)+r*(-9*o/2+4*a+.5)+n*(3*o/2-a)};var a=s.default;r.default=a;},{"../friendly_errors/fes_core":24,"../friendly_errors/file_errors":25,"../friendly_errors/validate_params":27,"../main":32}],42:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("../main"))&&n.__esModule?n:{default:n},l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=p();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../constants"));function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}var a=null,u=[],c=[],d=!1,o=!1,h=!1,m=!1,f=!0;s.default.prototype.beginContour=function(){return c=[],m=!0,this},s.default.prototype.beginShape=function(e){var t;(s.default._validateParameters("beginShape",arguments),this._renderer.isP3D)?(t=this._renderer).beginShape.apply(t,arguments):(a=e===l.POINTS||e===l.LINES||e===l.TRIANGLES||e===l.TRIANGLE_FAN||e===l.TRIANGLE_STRIP||e===l.QUADS||e===l.QUAD_STRIP?e:null,u=[],c=[]);return this},s.default.prototype.bezierVertex=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;if(s.default._validateParameters("bezierVertex",t),this._renderer.isP3D)(n=this._renderer).bezierVertex.apply(n,t);else if(0===u.length)s.default._friendlyError("vertex() must be used once before calling bezierVertex()","bezierVertex");else {d=!0;for(var a=[],o=0;o<t.length;o++)a[o]=t[o];a.isVert=!1,m?c.push(a):u.push(a);}return this},s.default.prototype.curveVertex=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;(s.default._validateParameters("curveVertex",t),this._renderer.isP3D)?(n=this._renderer).curveVertex.apply(n,t):(o=!0,this.vertex(t[0],t[1]));return this},s.default.prototype.endContour=function(){var e=c[0].slice();e.isVert=c[0].isVert,e.moveTo=!1,c.push(e),f&&(u.push(u[0]),f=!1);for(var t=0;t<c.length;t++)u.push(c[t]);return this},s.default.prototype.endShape=function(e){if(s.default._validateParameters("endShape",arguments),this._renderer.isP3D)this._renderer.endShape(e,o,d,h,m,a);else {if(0===u.length)return this;if(!this._renderer._doStroke&&!this._renderer._doFill)return this;var t=e===l.CLOSE;t&&!m&&u.push(u[0]),this._renderer.endShape(e,u,o,d,h,m,a),f=!(m=h=d=o=!1),t&&u.pop();}return this},s.default.prototype.quadraticVertex=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];if(s.default._validateParameters("quadraticVertex",t),this._renderer.isP3D){var n;(n=this._renderer).quadraticVertex.apply(n,t);}else {if(this._contourInited){var a={};return a.x=t[0],a.y=t[1],a.x3=t[2],a.y3=t[3],a.type=l.QUADRATIC,this._contourVertices.push(a),this}if(0<u.length){h=!0;for(var o=[],i=0;i<t.length;i++)o[i]=t[i];o.isVert=!1,m?c.push(o):u.push(o);}else s.default._friendlyError("vertex() must be used once before calling quadraticVertex()","quadraticVertex");}return this},s.default.prototype.vertex=function(e,t,r,n,a){if(this._renderer.isP3D){var o;(o=this._renderer).vertex.apply(o,arguments);}else {var i=[];i.isVert=!0,i[0]=e,i[1]=t,i[2]=0,i[3]=0,i[4]=0,i[5]=this._renderer._getFill(),i[6]=this._renderer._getStroke(),r&&(i.moveTo=r),m?(0===c.length&&(i.moveTo=!0),c.push(i)):u.push(i);}return this};var y=s.default;r.default=y;},{"../constants":22,"../main":32}],43:[function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}window.requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){window.setTimeout(e,1e3/60);},"undefined"==typeof Uint8ClampedArray||Uint8ClampedArray.prototype.slice||Object.defineProperty(Uint8ClampedArray.prototype,"slice",{value:Array.prototype.slice,writable:!0,configurable:!0,enumerable:!1}),function(){if(!Object.assign){var s=Object.keys,e=Object.defineProperty,l="function"==typeof Symbol&&"symbol"===n(Symbol()),r=Object.prototype.propertyIsEnumerable,p=function(t){return function(e){return r.call(t,e)}};e(Object,"assign",{value:function(e,t){if(null==e)throw new TypeError("target must be an object");var r,n,a,o,i=Object(e);for(r=1;r<arguments.length;++r)for(n=Object(arguments[r]),o=s(n),l&&Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(n).filter(p(n))),a=0;a<o.length;++a)i[o[a]]=n[o[a]];return i},configurable:!0,enumerable:!1,writable:!0});}}();},{}],44:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("./main"))&&n.__esModule?n:{default:n};a.default.prototype.noLoop=function(){this._loop=!1;},a.default.prototype.loop=function(){this._loop||(this._loop=!0,this._setupDone&&this._draw());},a.default.prototype.isLooping=function(){return this._loop},a.default.prototype.push=function(){this._styles.push({props:{_colorMode:this._colorMode},renderer:this._renderer.push()});},a.default.prototype.pop=function(){var e=this._styles.pop();e?(this._renderer.pop(e.renderer),Object.assign(this,e.props)):console.warn("pop() was called without matching push()");},a.default.prototype.redraw=function(e){if(!this._inUserDraw&&this._setupDone){var t=parseInt(e);(isNaN(t)||t<1)&&(t=1);var r=this._isGlobal?window:this,n=r.setup,a=r.draw;if("function"==typeof a){void 0===n&&r.scale(r._pixelDensity,r._pixelDensity);for(var o=function(e){e.call(r);},i=0;i<t;i++){r.resetMatrix(),r._renderer.isP3D&&r._renderer._update(),r._setProperty("frameCount",r.frameCount+1),r._registeredMethods.pre.forEach(o),this._inUserDraw=!0;try{a();}finally{this._inUserDraw=!1;}r._registeredMethods.post.forEach(o);}}}};var o=a.default;r.default=o;},{"./main":32}],45:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,o=(n=e("./main"))&&n.__esModule?n:{default:n};o.default.prototype.applyMatrix=function(e,t,r,n,a,o){var i;return (i=this._renderer).applyMatrix.apply(i,arguments),this},o.default.prototype.resetMatrix=function(){return this._renderer.resetMatrix(),this},o.default.prototype.rotate=function(e,t){return o.default._validateParameters("rotate",arguments),this._renderer.rotate(this._toRadians(e),t),this},o.default.prototype.rotateX=function(e){return this._assert3d("rotateX"),o.default._validateParameters("rotateX",arguments),this._renderer.rotateX(this._toRadians(e)),this},o.default.prototype.rotateY=function(e){return this._assert3d("rotateY"),o.default._validateParameters("rotateY",arguments),this._renderer.rotateY(this._toRadians(e)),this},o.default.prototype.rotateZ=function(e){return this._assert3d("rotateZ"),o.default._validateParameters("rotateZ",arguments),this._renderer.rotateZ(this._toRadians(e)),this},o.default.prototype.scale=function(e,t,r){if(o.default._validateParameters("scale",arguments),e instanceof o.default.Vector){var n=e;e=n.x,t=n.y,r=n.z;}else if(e instanceof Array){var a=e;e=a[0],t=a[1],r=a[2]||1;}return isNaN(t)?t=r=e:isNaN(r)&&(r=1),this._renderer.scale.call(this._renderer,e,t,r),this},o.default.prototype.shearX=function(e){o.default._validateParameters("shearX",arguments);var t=this._toRadians(e);return this._renderer.applyMatrix(1,0,Math.tan(t),1,0,0),this},o.default.prototype.shearY=function(e){o.default._validateParameters("shearY",arguments);var t=this._toRadians(e);return this._renderer.applyMatrix(1,Math.tan(t),0,1,0,0),this},o.default.prototype.translate=function(e,t,r){return o.default._validateParameters("translate",arguments),this._renderer.isP3D?this._renderer.translate(e,t,r):this._renderer.translate(e,t),this};var a=o.default;r.default=a;},{"./main":32}],46:[function(e,t,r){var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};function o(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}a.default.prototype.storeItem=function(e,t){"string"!=typeof e&&console.log("The argument that you passed to storeItem() - ".concat(e," is not a string.")),e.endsWith("p5TypeID")&&console.log("The argument that you passed to storeItem() - ".concat(e," must not end with 'p5TypeID'.")),void 0===t&&console.log("You cannot store undefined variables using storeItem().");var r=i(t);switch(r){case"number":case"boolean":t=t.toString();break;case"object":if(t instanceof a.default.Color)r="p5.Color";else if(t instanceof a.default.Vector){r="p5.Vector",t=[t.x,t.y,t.z];}t=JSON.stringify(t);}localStorage.setItem(e,t);var n="".concat(e,"p5TypeID");localStorage.setItem(n,r);},a.default.prototype.getItem=function(e){var t=localStorage.getItem(e),r=localStorage.getItem("".concat(e,"p5TypeID"));if(void 0===r)console.log("Unable to determine type of item stored under ".concat(e,"in local storage. Did you save the item with something other than setItem()?"));else if(null!==t)switch(r){case"number":t=parseInt(t);break;case"boolean":t="true"===t;break;case"object":t=JSON.parse(t);break;case"p5.Color":t=JSON.parse(t),t=this.color.apply(this,o(t.levels));break;case"p5.Vector":t=JSON.parse(t),t=this.createVector.apply(this,o(t));}return t},a.default.prototype.clearStorage=function(){localStorage.clear();},a.default.prototype.removeItem=function(e){"string"!=typeof e&&console.log("The argument that you passed to removeItem() - ".concat(e," is not a string.")),localStorage.removeItem(e),localStorage.removeItem("".concat(e,"p5TypeID"));};},{"../core/main":32}],47:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.createStringDict=function(e,t){return a.default._validateParameters("createStringDict",arguments),new a.default.StringDict(e,t)},a.default.prototype.createNumberDict=function(e,t){return a.default._validateParameters("createNumberDict",arguments),new a.default.NumberDict(e,t)},a.default.TypedDict=function(e,t){return e instanceof Object?this.data=e:(this.data={},this.data[e]=t),this},a.default.TypedDict.prototype.size=function(){return Object.keys(this.data).length},a.default.TypedDict.prototype.hasKey=function(e){return this.data.hasOwnProperty(e)},a.default.TypedDict.prototype.get=function(e){if(this.data.hasOwnProperty(e))return this.data[e];console.log("".concat(e," does not exist in this Dictionary"));},a.default.TypedDict.prototype.set=function(e,t){this._validate(t)?this.data[e]=t:console.log("Those values dont work for this dictionary type.");},a.default.TypedDict.prototype._addObj=function(e){for(var t in e)this.set(t,e[t]);},a.default.TypedDict.prototype.create=function(e,t){e instanceof Object&&void 0===t?this._addObj(e):void 0!==e?this.set(e,t):console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair");},a.default.TypedDict.prototype.clear=function(){this.data={};},a.default.TypedDict.prototype.remove=function(e){if(!this.data.hasOwnProperty(e))throw new Error("".concat(e," does not exist in this Dictionary"));delete this.data[e];},a.default.TypedDict.prototype.print=function(){for(var e in this.data)console.log("key:".concat(e," value:").concat(this.data[e]));},a.default.TypedDict.prototype.saveTable=function(e){var t="";for(var r in this.data)t+="".concat(r,",").concat(this.data[r],"\n");var n=new Blob([t],{type:"text/csv"});a.default.prototype.downloadFile(n,e||"mycsv","csv");},a.default.TypedDict.prototype.saveJSON=function(e,t){a.default.prototype.saveJSON(this.data,e,t);},a.default.TypedDict.prototype._validate=function(e){return !0},a.default.StringDict=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];a.default.TypedDict.apply(this,t);},a.default.StringDict.prototype=Object.create(a.default.TypedDict.prototype),a.default.StringDict.prototype._validate=function(e){return "string"==typeof e},a.default.NumberDict=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];a.default.TypedDict.apply(this,t);},a.default.NumberDict.prototype=Object.create(a.default.TypedDict.prototype),a.default.NumberDict.prototype._validate=function(e){return "number"==typeof e},a.default.NumberDict.prototype.add=function(e,t){this.data.hasOwnProperty(e)?this.data[e]+=t:console.log("The key - ".concat(e," does not exist in this dictionary."));},a.default.NumberDict.prototype.sub=function(e,t){this.add(e,-t);},a.default.NumberDict.prototype.mult=function(e,t){this.data.hasOwnProperty(e)?this.data[e]*=t:console.log("The key - ".concat(e," does not exist in this dictionary."));},a.default.NumberDict.prototype.div=function(e,t){this.data.hasOwnProperty(e)?this.data[e]/=t:console.log("The key - ".concat(e," does not exist in this dictionary."));},a.default.NumberDict.prototype._valueTest=function(e){if(0===Object.keys(this.data).length)throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");if(1===Object.keys(this.data).length)return this.data[Object.keys(this.data)[0]];var t=this.data[Object.keys(this.data)[0]];for(var r in this.data)this.data[r]*e<t*e&&(t=this.data[r]);return t},a.default.NumberDict.prototype.minValue=function(){return this._valueTest(1)},a.default.NumberDict.prototype.maxValue=function(){return this._valueTest(-1)},a.default.NumberDict.prototype._keyTest=function(e){if(0===Object.keys(this.data).length)throw new Error("Unable to use minValue on an empty NumberDict");if(1===Object.keys(this.data).length)return Object.keys(this.data)[0];for(var t=Object.keys(this.data)[0],r=1;r<Object.keys(this.data).length;r++)Object.keys(this.data)[r]*e<t*e&&(t=Object.keys(this.data)[r]);return t},a.default.NumberDict.prototype.minKey=function(){return this._keyTest(1)},a.default.NumberDict.prototype.maxKey=function(){return this._keyTest(-1)};var o=a.default.TypedDict;r.default=o;},{"../core/main":32}],48:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,d=(n=e("../core/main"))&&n.__esModule?n:{default:n};function h(e){return (h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t,r){(t._userNode?t._userNode:document.body).appendChild(e);var n=r?new d.default.MediaElement(e,t):new d.default.Element(e,t);return t._elements.push(n),n}function a(e,t,r,n){var a=document.createElement(t);"string"==typeof(r=r||"")&&(r=[r]);var o=!0,i=!1,s=void 0;try{for(var l,p=r[Symbol.iterator]();!(o=(l=p.next()).done);o=!0){var u=l.value,c=document.createElement("source");c.setAttribute("src",u),a.appendChild(c);}}catch(e){i=!0,s=e;}finally{try{o||null==p.return||p.return();}finally{if(i)throw s}}if("function"==typeof n){a.addEventListener("canplaythrough",function e(){n(),a.removeEventListener("canplaythrough",e);});}var d=f(a,e,!0);return d.loadedmetadata=!1,a.addEventListener("loadedmetadata",function(){d.width=a.videoWidth,d.height=a.videoHeight,0===d.elt.width&&(d.elt.width=a.videoWidth),0===d.elt.height&&(d.elt.height=a.videoHeight),d.presetPlaybackRate&&(d.elt.playbackRate=d.presetPlaybackRate,delete d.presetPlaybackRate),d.loadedmetadata=!0;}),d}d.default.prototype.select=function(e,t){d.default._validateParameters("select",arguments);var r=this._getContainer(t).querySelector(e);return r?this._wrapElement(r):null},d.default.prototype.selectAll=function(e,t){d.default._validateParameters("selectAll",arguments);var r=[],n=this._getContainer(t).querySelectorAll(e);if(n)for(var a=0;a<n.length;a++){var o=this._wrapElement(n[a]);r.push(o);}return r},d.default.prototype._getContainer=function(e){var t=document;return "string"==typeof e?t=document.querySelector(e)||document:e instanceof d.default.Element?t=e.elt:e instanceof HTMLElement&&(t=e),t},d.default.prototype._wrapElement=function(e){var t=Array.prototype.slice.call(e.children);if("INPUT"!==e.tagName||"checkbox"!==e.type)return "VIDEO"===e.tagName||"AUDIO"===e.tagName?new d.default.MediaElement(e,this):"SELECT"===e.tagName?this.createSelect(new d.default.Element(e,this)):0<t.length&&t.every(function(e){return "INPUT"===e.tagName||"LABEL"===e.tagName})?this.createRadio(new d.default.Element(e,this)):new d.default.Element(e,this);var r=new d.default.Element(e,this);return r.checked=function(){return 0===arguments.length?this.elt.checked:(this.elt.checked=!!arguments[0],this)},r},d.default.prototype.removeElements=function(e){d.default._validateParameters("removeElements",arguments);this._elements.filter(function(e){return !(e.elt instanceof HTMLCanvasElement)}).map(function(e){return e.remove()});},d.default.Element.prototype.changed=function(e){return d.default.Element._adjustListener("change",e,this),this},d.default.Element.prototype.input=function(e){return d.default.Element._adjustListener("input",e,this),this},d.default.prototype.createDiv=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=document.createElement("div");return t.innerHTML=e,f(t,this)},d.default.prototype.createP=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=document.createElement("p");return t.innerHTML=e,f(t,this)},d.default.prototype.createSpan=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=document.createElement("span");return t.innerHTML=e,f(t,this)},d.default.prototype.createImg=function(){d.default._validateParameters("createImg",arguments);var t,r=document.createElement("img"),n=arguments;return 1<n.length&&"string"==typeof n[1]&&(r.alt=n[1]),2<n.length&&"string"==typeof n[2]&&(r.crossOrigin=n[2]),r.src=n[0],t=f(r,this),r.addEventListener("load",function(){t.width=r.offsetWidth||r.width,t.height=r.offsetHeight||r.height;var e=n[n.length-1];"function"==typeof e&&e(t);}),t},d.default.prototype.createA=function(e,t,r){d.default._validateParameters("createA",arguments);var n=document.createElement("a");return n.href=e,n.innerHTML=t,r&&(n.target=r),f(n,this)},d.default.prototype.createSlider=function(e,t,r,n){d.default._validateParameters("createSlider",arguments);var a=document.createElement("input");return a.type="range",a.min=e,a.max=t,0===n?a.step=1e-18:n&&(a.step=n),"number"==typeof r&&(a.value=r),f(a,this)},d.default.prototype.createButton=function(e,t){d.default._validateParameters("createButton",arguments);var r=document.createElement("button");return r.innerHTML=e,t&&(r.value=t),f(r,this)},d.default.prototype.createCheckbox=function(){d.default._validateParameters("createCheckbox",arguments);var e=document.createElement("div"),t=document.createElement("input");t.type="checkbox",e.appendChild(t);var r=f(e,this);if(r.checked=function(){var e=r.elt.getElementsByTagName("input")[0];if(e){if(0===arguments.length)return e.checked;e.checked=!!arguments[0];}return r},this.value=function(e){return r.value=e,this},arguments[0]){var n=Math.random().toString(36).slice(2),a=document.createElement("label");t.setAttribute("id",n),a.htmlFor=n,r.value(arguments[0]),a.appendChild(document.createTextNode(arguments[0])),e.appendChild(a);}return arguments[1]&&(t.checked=!0),r},d.default.prototype.createSelect=function(){var e;d.default._validateParameters("createSelect",arguments);var t=arguments[0];if(t instanceof d.default.Element&&t.elt instanceof HTMLSelectElement)e=t,this.elt=t.elt;else if(t instanceof HTMLSelectElement)e=f(t,this),this.elt=t;else {var r=document.createElement("select");t&&"boolean"==typeof t&&r.setAttribute("multiple","true"),e=f(r,this),this.elt=r;}return e.option=function(e,t){var r;if(void 0!==e){for(var n=0;n<this.elt.length;n+=1)if(this.elt[n].innerHTML===e){r=n;break}if(void 0!==r)!1===t?this.elt.remove(r):this.elt[r].value=t;else {var a=document.createElement("option");a.innerHTML=e,a.value=void 0===t?e:t,this.elt.appendChild(a),this._pInst._elements.push(a);}}},e.selected=function(e){if(void 0!==e){for(var t=0;t<this.elt.length;t+=1)this.elt[t].value.toString()===e.toString()&&(this.elt.selectedIndex=t);return this}if(this.elt.getAttribute("multiple")){var r=[],n=!0,a=!1,o=void 0;try{for(var i,s=this.elt.selectedOptions[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var l=i.value;r.push(l.value);}}catch(e){a=!0,o=e;}finally{try{n||null==s.return||s.return();}finally{if(a)throw o}}return r}return this.elt.value},e.disable=function(e){if("string"==typeof e)for(var t=0;t<this.elt.length;t++)this.elt[t].value.toString()===e&&(this.elt[t].disabled=!0,this.elt[t].selected=!1);else this.elt.disabled=!0;return this},e},d.default.prototype.createRadio=function(){var e,t,r=arguments[0];r instanceof HTMLDivElement||r instanceof HTMLSpanElement?(e=r,"string"==typeof arguments[1]&&(t=arguments[1])):("string"==typeof r&&(t=r),e=document.createElement("div"));var m=f(this.elt=e,this);m._name=t||"radioOption";function n(e){return e instanceof HTMLInputElement&&"radio"===e.type}function u(e){return e.nextElementSibling instanceof HTMLLabelElement}return m._getOptionsArray=function(){return Array.from(this.elt.children).filter(n)},m.option=function(e,t){var r,n,a=!0,o=!1,i=void 0;try{for(var s,l=m._getOptionsArray()[Symbol.iterator]();!(a=(s=l.next()).done);a=!0){var p=s.value;if(p.value===e){r=p;break}}}catch(e){o=!0,i=e;}finally{try{a||null==l.return||l.return();}finally{if(o)throw i}}return void 0===r&&((r=document.createElement("input")).setAttribute("type","radio"),r.setAttribute("value",e),this.elt.appendChild(r)),u(r)?n=r.nextElementSibling:(n=document.createElement("label"),r.insertAdjacentElement("afterend",n)),n.innerHTML=void 0===t?e:t,r.setAttribute("name",m._name),r},m.remove=function(e){var t=!0,r=!1,n=void 0;try{for(var a,o=m._getOptionsArray()[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value;if(i.value===e)return u(i)&&i.nextElementSibling.remove(),void i.remove()}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}},m.value=function(){var e="",t=!0,r=!1,n=void 0;try{for(var a,o=m._getOptionsArray()[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value;if(i.checked){e=i.value;break}}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}return e},m.selected=function(e){var t=null;if(void 0===e){var r=!0,n=!1,a=void 0;try{for(var o,i=m._getOptionsArray()[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){var s=o.value;if(s.checked){t=s;break}}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}}else {var l=!0,p=!1,u=void 0;try{for(var c,d=m._getOptionsArray()[Symbol.iterator]();!(l=(c=d.next()).done);l=!0){var h=c.value;h.value===e&&(h.setAttribute("checked",!0),t=h);}}catch(e){p=!0,u=e;}finally{try{l||null==d.return||d.return();}finally{if(p)throw u}}}return t},m.disable=function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=!0,r=!1,n=void 0;try{for(var a,o=m._getOptionsArray()[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){a.value.setAttribute("disabled",e);}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}},m},d.default.prototype.createColorPicker=function(e){d.default._validateParameters("createColorPicker",arguments);var t,r=document.createElement("input");return r.type="color",e?e instanceof d.default.Color?r.value=e.toString("#rrggbb"):(d.default.prototype._colorMode="rgb",d.default.prototype._colorMaxes={rgb:[255,255,255,255],hsb:[360,100,100,1],hsl:[360,100,100,1]},r.value=d.default.prototype.color(e).toString("#rrggbb")):r.value="#000000",(t=f(r,this)).color=function(){return e&&(e.mode&&(d.default.prototype._colorMode=e.mode),e.maxes&&(d.default.prototype._colorMaxes=e.maxes)),d.default.prototype.color(this.elt.value)},t},d.default.prototype.createInput=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"text";d.default._validateParameters("createInput",arguments);var r=document.createElement("input");return r.setAttribute("value",e),r.setAttribute("type",t),f(r,this)},d.default.prototype.createFileInput=function(s){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1];d.default._validateParameters("createFileInput",arguments);if(window.File&&window.FileReader&&window.FileList&&window.Blob){var t=document.createElement("input");return t.setAttribute("type","file"),e&&t.setAttribute("multiple",!0),t.addEventListener("change",function(e){var t=!0,r=!1,n=void 0;try{for(var a,o=e.target.files[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value;d.default.File._load(i,s);}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}},!1),f(t,this)}console.log("The File APIs are not fully supported in this browser. Cannot create element.");},d.default.prototype.createVideo=function(e,t){return d.default._validateParameters("createVideo",arguments),a(this,"video",e,t)},d.default.prototype.createAudio=function(e,t){return d.default._validateParameters("createAudio",arguments),a(this,"audio",e,t)},d.default.prototype.VIDEO="video",d.default.prototype.AUDIO="audio",void 0===navigator.mediaDevices&&(navigator.mediaDevices={}),void 0===navigator.mediaDevices.getUserMedia&&(navigator.mediaDevices.getUserMedia=function(r){var n=navigator.webkitGetUserMedia||navigator.mozGetUserMedia;return n?new Promise(function(e,t){n.call(navigator,r,e,t);}):Promise.reject(new Error("getUserMedia is not implemented in this browser"))}),d.default.prototype.createCapture=function(){if(d.default._validateParameters("createCapture",arguments),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new DOMException("getUserMedia not supported in this browser");var e,t,r=!0,n=!0,a=!0,o=!1,i=void 0;try{for(var s,l=arguments[Symbol.iterator]();!(a=(s=l.next()).done);a=!0){var p=s.value;p===d.default.prototype.VIDEO?n=!1:p===d.default.prototype.AUDIO?r=!1:"object"===h(p)?e=p:"function"==typeof p&&(t=p);}}catch(e){o=!0,i=e;}finally{try{a||null==l.return||l.return();}finally{if(o)throw i}}e=e||{video:r,audio:n};var u=document.createElement("video");u.setAttribute("playsinline",""),navigator.mediaDevices.getUserMedia(e).then(function(t){try{"srcObject"in u?u.srcObject=t:u.src=window.URL.createObjectURL(t);}catch(e){u.src=t;}},console.log);var c=f(u,this,!0);return c.loadedmetadata=!1,u.addEventListener("loadedmetadata",function(){u.play(),u.width?(c.width=u.width,c.height=u.height):(c.width=c.elt.width=u.videoWidth,c.height=c.elt.height=u.videoHeight),c.loadedmetadata=!0,t&&t(u.srcObject);}),c},d.default.prototype.createElement=function(e,t){d.default._validateParameters("createElement",arguments);var r=document.createElement(e);return void 0!==t&&(r.innerHTML=t),f(r,this)},d.default.Element.prototype.addClass=function(e){return this.elt.className?this.hasClass(e)||(this.elt.className=this.elt.className+" "+e):this.elt.className=e,this},d.default.Element.prototype.removeClass=function(e){return this.elt.classList.remove(e),this},d.default.Element.prototype.hasClass=function(e){return this.elt.classList.contains(e)},d.default.Element.prototype.toggleClass=function(e){return this.elt.classList.contains(e)?this.elt.classList.remove(e):this.elt.classList.add(e),this},d.default.Element.prototype.child=function(e){return void 0===e?this.elt.childNodes:("string"==typeof e?("#"===e[0]&&(e=e.substring(1)),e=document.getElementById(e)):e instanceof d.default.Element&&(e=e.elt),e instanceof HTMLElement&&this.elt.appendChild(e),this)},d.default.Element.prototype.center=function(e){var t=this.elt.style.display,r="none"===this.elt.style.display,n="none"===this.parent().style.display,a={x:this.elt.offsetLeft,y:this.elt.offsetTop};r&&this.show(),n&&this.parent().show(),this.elt.style.display="block",this.position(0,0);var o=Math.abs(this.parent().offsetWidth-this.elt.offsetWidth),i=Math.abs(this.parent().offsetHeight-this.elt.offsetHeight);return "both"===e||void 0===e?this.position(o/2+this.parent().offsetLeft,i/2+this.parent().offsetTop):"horizontal"===e?this.position(o/2+this.parent().offsetLeft,a.y):"vertical"===e&&this.position(a.x,i/2+this.parent().offsetTop),this.style("display",t),r&&this.hide(),n&&this.parent().hide(),this},d.default.Element.prototype.html=function(){return 0===arguments.length?this.elt.innerHTML:(arguments[1]?this.elt.insertAdjacentHTML("beforeend",arguments[0]):this.elt.innerHTML=arguments[0],this)},d.default.Element.prototype.position=function(){if(0===arguments.length)return {x:this.elt.offsetLeft,y:this.elt.offsetTop};var e="absolute";return "static"!==arguments[2]&&"fixed"!==arguments[2]&&"relative"!==arguments[2]&&"sticky"!==arguments[2]&&"initial"!==arguments[2]&&"inherit"!==arguments[2]||(e=arguments[2]),this.elt.style.position=e,this.elt.style.left=arguments[0]+"px",this.elt.style.top=arguments[1]+"px",this.x=arguments[0],this.y=arguments[1],this},d.default.Element.prototype._translate=function(){this.elt.style.position="absolute";var e="";return this.elt.style.transform&&(e=(e=this.elt.style.transform.replace(/translate3d\(.*\)/g,"")).replace(/translate[X-Z]?\(.*\)/g,"")),2===arguments.length?this.elt.style.transform="translate("+arguments[0]+"px, "+arguments[1]+"px)":2<arguments.length&&(this.elt.style.transform="translate3d("+arguments[0]+"px,"+arguments[1]+"px,"+arguments[2]+"px)",this.elt.parentElement.style.perspective=3===arguments.length?"1000px":arguments[3]+"px"),this.elt.style.transform+=e,this},d.default.Element.prototype._rotate=function(){var e="";return this.elt.style.transform&&(e=(e=this.elt.style.transform.replace(/rotate3d\(.*\)/g,"")).replace(/rotate[X-Z]?\(.*\)/g,"")),1===arguments.length?this.elt.style.transform="rotate("+arguments[0]+"deg)":2===arguments.length?this.elt.style.transform="rotate("+arguments[0]+"deg, "+arguments[1]+"deg)":3===arguments.length&&(this.elt.style.transform="rotateX("+arguments[0]+"deg)",this.elt.style.transform+="rotateY("+arguments[1]+"deg)",this.elt.style.transform+="rotateZ("+arguments[2]+"deg)"),this.elt.style.transform+=e,this},d.default.Element.prototype.style=function(e,t){if(t instanceof d.default.Color&&(t="rgba("+t.levels[0]+","+t.levels[1]+","+t.levels[2]+","+t.levels[3]/255+")"),void 0===t){if(-1===e.indexOf(":"))return window.getComputedStyle(this.elt).getPropertyValue(e);for(var r=e.split(";"),n=0;n<r.length;n++){var a=r[n].split(":");a[0]&&a[1]&&(this.elt.style[a[0].trim()]=a[1].trim());}}else if(this.elt.style[e]=t,"width"===e||"height"===e||"left"===e||"top"===e){var o=window.getComputedStyle(this.elt).getPropertyValue(e).replace(/\D+/g,"");this[e]=parseInt(o,10);}return this},d.default.Element.prototype.attribute=function(e,t){if(null==this.elt.firstChild||"checkbox"!==this.elt.firstChild.type&&"radio"!==this.elt.firstChild.type)return void 0===t?this.elt.getAttribute(e):(this.elt.setAttribute(e,t),this);if(void 0===t)return this.elt.firstChild.getAttribute(e);for(var r=0;r<this.elt.childNodes.length;r++)this.elt.childNodes[r].setAttribute(e,t);},d.default.Element.prototype.removeAttribute=function(e){if(null!=this.elt.firstChild&&("checkbox"===this.elt.firstChild.type||"radio"===this.elt.firstChild.type))for(var t=0;t<this.elt.childNodes.length;t++)this.elt.childNodes[t].removeAttribute(e);return this.elt.removeAttribute(e),this},d.default.Element.prototype.value=function(){return 0<arguments.length?(this.elt.value=arguments[0],this):"range"===this.elt.type?parseFloat(this.elt.value):this.elt.value},d.default.Element.prototype.show=function(){return this.elt.style.display="block",this},d.default.Element.prototype.hide=function(){return this.elt.style.display="none",this},d.default.Element.prototype.size=function(e,t){if(0===arguments.length)return {width:this.elt.offsetWidth,height:this.elt.offsetHeight};var r=e,n=t,a=d.default.prototype.AUTO;if(r!==a||n!==a){if(r===a?r=t*this.width/this.height:n===a&&(n=e*this.height/this.width),this.elt instanceof HTMLCanvasElement){var o,i={},s=this.elt.getContext("2d");for(o in s)i[o]=s[o];for(o in this.elt.setAttribute("width",r*this._pInst._pixelDensity),this.elt.setAttribute("height",n*this._pInst._pixelDensity),this.elt.style.width=r+"px",this.elt.style.height=n+"px",this._pInst.scale(this._pInst._pixelDensity,this._pInst._pixelDensity),i)this.elt.getContext("2d")[o]=i[o];}else this.elt.style.width=r+"px",this.elt.style.height=n+"px",this.elt.width=r,this.elt.height=n;this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight,this._pInst&&this._pInst._curElement&&this._pInst._curElement.elt===this.elt&&(this._pInst._setProperty("width",this.elt.offsetWidth),this._pInst._setProperty("height",this.elt.offsetHeight));}return this},d.default.Element.prototype.remove=function(){this instanceof d.default.MediaElement&&this.elt.srcObject.getTracks().forEach(function(e){e.stop();});var e=this._pInst._elements.indexOf(this);for(var t in -1!==e&&this._pInst._elements.splice(e,1),this._events)this.elt.removeEventListener(t,this._events[t]);this.elt&&this.elt.parentNode&&this.elt.parentNode.removeChild(this.elt);},d.default.Element.prototype.drop=function(a,o){if(window.File&&window.FileReader&&window.FileList&&window.Blob){if(!this._dragDisabled){this._dragDisabled=!0;var e=function(e){e.preventDefault();};this.elt.addEventListener("dragover",e),this.elt.addEventListener("dragleave",e);}d.default.Element._attachListener("drop",function(e){e.preventDefault(),"function"==typeof o&&o.call(this,e);for(var t=e.dataTransfer.files,r=0;r<t.length;r++){var n=t[r];d.default.File._load(n,a);}},this);}else console.log("The File APIs are not fully supported in this browser.");return this},d.default.MediaElement=function(n,e){d.default.Element.call(this,n,e);var a=this;this.elt.crossOrigin="anonymous",this._prevTime=0,this._cueIDCounter=0,this._cues=[],(this._pixelsState=this)._pixelDensity=1,this._modified=!1,Object.defineProperty(a,"src",{get:function(){var e=a.elt.children[0].src,t=a.elt.src===window.location.href?"":a.elt.src;return e===window.location.href?t:e},set:function(e){for(var t=0;t<a.elt.children.length;t++)a.elt.removeChild(a.elt.children[t]);var r=document.createElement("source");r.src=e,n.appendChild(r),a.elt.src=e,a.modified=!0;}}),a._onended=function(){},a.elt.onended=function(){a._onended(a);};},d.default.MediaElement.prototype=Object.create(d.default.Element.prototype),d.default.MediaElement.prototype.play=function(){var e;return this.elt.currentTime===this.elt.duration&&(this.elt.currentTime=0),(e=(1<this.elt.readyState||this.elt.load(),this.elt.play()))&&e.catch&&e.catch(function(e){"NotAllowedError"===e.name?d.default._friendlyAutoplayError(this.src):console.error("Media play method encountered an unexpected error",e);}),this},d.default.MediaElement.prototype.stop=function(){return this.elt.pause(),this.elt.currentTime=0,this},d.default.MediaElement.prototype.pause=function(){return this.elt.pause(),this},d.default.MediaElement.prototype.loop=function(){return this.elt.setAttribute("loop",!0),this.play(),this},d.default.MediaElement.prototype.noLoop=function(){return this.elt.removeAttribute("loop"),this},d.default.MediaElement.prototype._setupAutoplayFailDetection=function(){var e=this,t=setTimeout(function(){return d.default._friendlyAutoplayError(e.src)},500);this.elt.addEventListener("play",function(){return clearTimeout(t)},{passive:!0,once:!0});},d.default.MediaElement.prototype.autoplay=function(e){var t=this,r=this.elt.getAttribute("autoplay");if(this.elt.setAttribute("autoplay",e),e&&!r){var n=function(){return t._setupAutoplayFailDetection()};4===this.elt.readyState?n():this.elt.addEventListener("canplay",n,{passive:!0,once:!0});}return this},d.default.MediaElement.prototype.volume=function(e){if(void 0===e)return this.elt.volume;this.elt.volume=e;},d.default.MediaElement.prototype.speed=function(e){if(void 0===e)return this.presetPlaybackRate||this.elt.playbackRate;this.loadedmetadata?this.elt.playbackRate=e:this.presetPlaybackRate=e;},d.default.MediaElement.prototype.time=function(e){return void 0===e?this.elt.currentTime:(this.elt.currentTime=e,this)},d.default.MediaElement.prototype.duration=function(){return this.elt.duration},d.default.MediaElement.prototype.pixels=[],d.default.MediaElement.prototype._ensureCanvas=function(){this.canvas||(this.canvas=document.createElement("canvas"),this.drawingContext=this.canvas.getContext("2d"),this.setModified(!0)),this.loadedmetadata&&(this.canvas.width!==this.elt.width&&(this.canvas.width=this.elt.width,this.canvas.height=this.elt.height,this.width=this.canvas.width,this.height=this.canvas.height),this.drawingContext.drawImage(this.elt,0,0,this.canvas.width,this.canvas.height),this.setModified(!0));},d.default.MediaElement.prototype.loadPixels=function(){return this._ensureCanvas(),d.default.Renderer2D.prototype.loadPixels.apply(this,arguments)},d.default.MediaElement.prototype.updatePixels=function(e,t,r,n){return this.loadedmetadata&&(this._ensureCanvas(),d.default.Renderer2D.prototype.updatePixels.call(this,e,t,r,n)),this.setModified(!0),this},d.default.MediaElement.prototype.get=function(){return this._ensureCanvas(),d.default.Renderer2D.prototype.get.apply(this,arguments)},d.default.MediaElement.prototype._getPixel=function(){return this.loadPixels(),d.default.Renderer2D.prototype._getPixel.apply(this,arguments)},d.default.MediaElement.prototype.set=function(e,t,r){this.loadedmetadata&&(this._ensureCanvas(),d.default.Renderer2D.prototype.set.call(this,e,t,r),this.setModified(!0));},d.default.MediaElement.prototype.copy=function(){this._ensureCanvas(),d.default.prototype.copy.apply(this,arguments);},d.default.MediaElement.prototype.mask=function(){this.loadPixels(),this.setModified(!0),d.default.Image.prototype.mask.apply(this,arguments);},d.default.MediaElement.prototype.isModified=function(){return this._modified},d.default.MediaElement.prototype.setModified=function(e){this._modified=e;},d.default.MediaElement.prototype.onended=function(e){return this._onended=e,this},d.default.MediaElement.prototype.connect=function(e){var t,r;if("function"==typeof d.default.prototype.getAudioContext)t=d.default.prototype.getAudioContext(),r=d.default.soundOut.input;else try{r=(t=e.context).destination;}catch(e){throw "connect() is meant to be used with Web Audio API or p5.sound.js"}this.audioSourceNode||(this.audioSourceNode=t.createMediaElementSource(this.elt),this.audioSourceNode.connect(r)),e?e.input?this.audioSourceNode.connect(e.input):this.audioSourceNode.connect(e):this.audioSourceNode.connect(r);},d.default.MediaElement.prototype.disconnect=function(){if(!this.audioSourceNode)throw "nothing to disconnect";this.audioSourceNode.disconnect();},d.default.MediaElement.prototype.showControls=function(){this.elt.style["text-align"]="inherit",this.elt.controls=!0;},d.default.MediaElement.prototype.hideControls=function(){this.elt.controls=!1;};function o(e,t,r,n){this.callback=e,this.time=t,this.id=r,this.val=n;}d.default.MediaElement.prototype.addCue=function(e,t,r){var n=this._cueIDCounter++,a=new o(t,e,n,r);return this._cues.push(a),this.elt.ontimeupdate||(this.elt.ontimeupdate=this._onTimeUpdate.bind(this)),n},d.default.MediaElement.prototype.removeCue=function(e){for(var t=0;t<this._cues.length;t++)this._cues[t].id===e&&(console.log(e),this._cues.splice(t,1));0===this._cues.length&&(this.elt.ontimeupdate=null);},d.default.MediaElement.prototype.clearCues=function(){this._cues=[],this.elt.ontimeupdate=null;},d.default.MediaElement.prototype._onTimeUpdate=function(){for(var e=this.time(),t=0;t<this._cues.length;t++){var r=this._cues[t].time,n=this._cues[t].val;this._prevTime<r&&r<=e&&this._cues[t].callback(n);}this._prevTime=e;},d.default.File=function(e,t){this.file=e,this._pInst=t;var r=e.type.split("/");this.type=r[0],this.subtype=r[1],this.name=e.name,this.size=e.size,this.data=void 0;},d.default.File._createLoader=function(n,a){var e=new FileReader;return e.onload=function(e){var t=new d.default.File(n);if("application/json"===t.file.type)t.data=JSON.parse(e.target.result);else if("text/xml"===t.file.type){var r=(new DOMParser).parseFromString(e.target.result,"text/xml");t.data=new d.default.XML(r.documentElement);}else t.data=e.target.result;a(t);},e},d.default.File._load=function(e,t){if(/^text\//.test(e.type)||"application/json"===e.type)d.default.File._createLoader(e,t).readAsText(e);else if(/^(video|audio)\//.test(e.type)){var r=new d.default.File(e);r.data=URL.createObjectURL(e),t(r);}else d.default.File._createLoader(e,t).readAsDataURL(e);};var i=d.default;r.default=i;},{"../core/main":32}],49:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}a.default.prototype.deviceOrientation=1<window.innerWidth/window.innerHeight?"landscape":"portrait",a.default.prototype.accelerationX=0,a.default.prototype.accelerationY=0,a.default.prototype.accelerationZ=0,a.default.prototype.pAccelerationX=0,a.default.prototype.pAccelerationY=0,a.default.prototype.pAccelerationZ=0,a.default.prototype._updatePAccelerations=function(){this._setProperty("pAccelerationX",this.accelerationX),this._setProperty("pAccelerationY",this.accelerationY),this._setProperty("pAccelerationZ",this.accelerationZ);},a.default.prototype.rotationX=0,a.default.prototype.rotationY=0,a.default.prototype.rotationZ=0,a.default.prototype.pRotationX=0,a.default.prototype.pRotationY=0;var c=a.default.prototype.pRotationZ=0,d=0,h=0,m="clockwise",f="clockwise",y="clockwise";a.default.prototype.pRotateDirectionX=void 0,a.default.prototype.pRotateDirectionY=void 0,a.default.prototype.pRotateDirectionZ=void 0,a.default.prototype._updatePRotations=function(){this._setProperty("pRotationX",this.rotationX),this._setProperty("pRotationY",this.rotationY),this._setProperty("pRotationZ",this.rotationZ);},a.default.prototype.turnAxis=void 0;var g=.5,v=30;a.default.prototype.setMoveThreshold=function(e){a.default._validateParameters("setMoveThreshold",arguments),g=e;},a.default.prototype.setShakeThreshold=function(e){a.default._validateParameters("setShakeThreshold",arguments),v=e;},a.default.prototype._ondeviceorientation=function(e){this._updatePRotations(),this._angleMode===o.radians&&(e.beta=e.beta*(_PI/180),e.gamma=e.gamma*(_PI/180),e.alpha=e.alpha*(_PI/180)),this._setProperty("rotationX",e.beta),this._setProperty("rotationY",e.gamma),this._setProperty("rotationZ",e.alpha),this._handleMotion();},a.default.prototype._ondevicemotion=function(e){this._updatePAccelerations(),this._setProperty("accelerationX",2*e.acceleration.x),this._setProperty("accelerationY",2*e.acceleration.y),this._setProperty("accelerationZ",2*e.acceleration.z),this._handleMotion();},a.default.prototype._handleMotion=function(){90===window.orientation||-90===window.orientation?this._setProperty("deviceOrientation","landscape"):0===window.orientation?this._setProperty("deviceOrientation","portrait"):void 0===window.orientation&&this._setProperty("deviceOrientation","undefined");var e=this.deviceMoved||window.deviceMoved;"function"==typeof e&&(Math.abs(this.accelerationX-this.pAccelerationX)>g||Math.abs(this.accelerationY-this.pAccelerationY)>g||Math.abs(this.accelerationZ-this.pAccelerationZ)>g)&&e();var t=this.deviceTurned||window.deviceTurned;if("function"==typeof t){var r=this.rotationX+180,n=this.pRotationX+180,a=c+180;0<r-n&&r-n<270||r-n<-270?m="clockwise":(r-n<0||270<r-n)&&(m="counter-clockwise"),m!==this.pRotateDirectionX&&(a=r),90<Math.abs(r-a)&&Math.abs(r-a)<270&&(a=r,this._setProperty("turnAxis","X"),t()),this.pRotateDirectionX=m,c=a-180;var o=this.rotationY+180,i=this.pRotationY+180,s=d+180;0<o-i&&o-i<270||o-i<-270?f="clockwise":(o-i<0||270<o-this.pRotationY)&&(f="counter-clockwise"),f!==this.pRotateDirectionY&&(s=o),90<Math.abs(o-s)&&Math.abs(o-s)<270&&(s=o,this._setProperty("turnAxis","Y"),t()),this.pRotateDirectionY=f,d=s-180,0<this.rotationZ-this.pRotationZ&&this.rotationZ-this.pRotationZ<270||this.rotationZ-this.pRotationZ<-270?y="clockwise":(this.rotationZ-this.pRotationZ<0||270<this.rotationZ-this.pRotationZ)&&(y="counter-clockwise"),y!==this.pRotateDirectionZ&&(h=this.rotationZ),90<Math.abs(this.rotationZ-h)&&Math.abs(this.rotationZ-h)<270&&(h=this.rotationZ,this._setProperty("turnAxis","Z"),t()),this.pRotateDirectionZ=y,this._setProperty("turnAxis",void 0);}var l,p,u=this.deviceShaken||window.deviceShaken;"function"==typeof u&&(null!==this.pAccelerationX&&(l=Math.abs(this.accelerationX-this.pAccelerationX),p=Math.abs(this.accelerationY-this.pAccelerationY)),v<l+p&&u());};var l=a.default;r.default=l;},{"../core/constants":22,"../core/main":32}],50:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.isKeyPressed=!1,a.default.prototype.keyIsPressed=!1,a.default.prototype.key="",a.default.prototype.keyCode=0,a.default.prototype._onkeydown=function(e){if(!this._downKeys[e.which]){this._setProperty("isKeyPressed",!0),this._setProperty("keyIsPressed",!0),this._setProperty("keyCode",e.which),this._downKeys[e.which]=!0,this._setProperty("key",e.key||String.fromCharCode(e.which)||e.which);var t=this.keyPressed||window.keyPressed;if("function"==typeof t&&!e.charCode)!1===t(e)&&e.preventDefault();}},a.default.prototype._onkeyup=function(e){var t=this.keyReleased||window.keyReleased;this._downKeys[e.which]=!1,this._areDownKeys()||(this._setProperty("isKeyPressed",!1),this._setProperty("keyIsPressed",!1)),this._setProperty("_lastKeyCodeTyped",null),this._setProperty("key",e.key||String.fromCharCode(e.which)||e.which),this._setProperty("keyCode",e.which),"function"!=typeof t||!1===t(e)&&e.preventDefault();},a.default.prototype._onkeypress=function(e){if(e.which!==this._lastKeyCodeTyped){this._setProperty("_lastKeyCodeTyped",e.which),this._setProperty("key",String.fromCharCode(e.which));var t=this.keyTyped||window.keyTyped;if("function"==typeof t)!1===t(e)&&e.preventDefault();}},a.default.prototype._onblur=function(e){this._downKeys={};},a.default.prototype.keyIsDown=function(e){return a.default._validateParameters("keyIsDown",arguments),this._downKeys[e]||!1},a.default.prototype._areDownKeys=function(){for(var e in this._downKeys)if(this._downKeys.hasOwnProperty(e)&&!0===this._downKeys[e])return !0;return !1};var o=a.default;r.default=o;},{"../core/main":32}],51:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}a.default.prototype.movedX=0,a.default.prototype.movedY=0,a.default.prototype._hasMouseInteracted=!1,a.default.prototype.mouseX=0,a.default.prototype.mouseY=0,a.default.prototype.pmouseX=0,a.default.prototype.pmouseY=0,a.default.prototype.winMouseX=0,a.default.prototype.winMouseY=0,a.default.prototype.pwinMouseX=0,a.default.prototype.pwinMouseY=0,a.default.prototype.mouseButton=0,a.default.prototype.mouseIsPressed=!1,a.default.prototype._updateNextMouseCoords=function(e){if(null!==this._curElement&&(!e.touches||0<e.touches.length)){var t=function(e,t,r,n){n&&!n.clientX&&(n.touches?n=n.touches[0]:n.changedTouches&&(n=n.changedTouches[0]));var a=e.getBoundingClientRect(),o=e.scrollWidth/t||1,i=e.scrollHeight/r||1;return {x:(n.clientX-a.left)/o,y:(n.clientY-a.top)/i,winX:n.clientX,winY:n.clientY,id:n.identifier}}(this._curElement.elt,this.width,this.height,e);this._setProperty("movedX",e.movementX),this._setProperty("movedY",e.movementY),this._setProperty("mouseX",t.x),this._setProperty("mouseY",t.y),this._setProperty("winMouseX",t.winX),this._setProperty("winMouseY",t.winY);}this._hasMouseInteracted||(this._updateMouseCoords(),this._setProperty("_hasMouseInteracted",!0));},a.default.prototype._updateMouseCoords=function(){this._setProperty("pmouseX",this.mouseX),this._setProperty("pmouseY",this.mouseY),this._setProperty("pwinMouseX",this.winMouseX),this._setProperty("pwinMouseY",this.winMouseY),this._setProperty("_pmouseWheelDeltaY",this._mouseWheelDeltaY);},a.default.prototype._setMouseButton=function(e){1===e.button?this._setProperty("mouseButton",o.CENTER):2===e.button?this._setProperty("mouseButton",o.RIGHT):this._setProperty("mouseButton",o.LEFT);},a.default.prototype._onmousemove=function(e){var t=this._isGlobal?window:this;this._updateNextMouseCoords(e),this.mouseIsPressed?"function"==typeof t.mouseDragged?!1===t.mouseDragged(e)&&e.preventDefault():"function"==typeof t.touchMoved&&!1===t.touchMoved(e)&&e.preventDefault():"function"==typeof t.mouseMoved&&!1===t.mouseMoved(e)&&e.preventDefault();},a.default.prototype._onmousedown=function(e){var t=this._isGlobal?window:this;this._setProperty("mouseIsPressed",!0),this._setMouseButton(e),this._updateNextMouseCoords(e),"function"==typeof t.mousePressed?!1===t.mousePressed(e)&&e.preventDefault():navigator.userAgent.toLowerCase().includes("safari")&&"function"==typeof t.touchStarted&&!1===t.touchStarted(e)&&e.preventDefault();},a.default.prototype._onmouseup=function(e){var t=this._isGlobal?window:this;this._setProperty("mouseIsPressed",!1),"function"==typeof t.mouseReleased?!1===t.mouseReleased(e)&&e.preventDefault():"function"==typeof t.touchEnded&&!1===t.touchEnded(e)&&e.preventDefault();},a.default.prototype._ondragend=a.default.prototype._onmouseup,a.default.prototype._ondragover=a.default.prototype._onmousemove,a.default.prototype._onclick=function(e){var t=this._isGlobal?window:this;"function"==typeof t.mouseClicked&&!1===t.mouseClicked(e)&&e.preventDefault();},a.default.prototype._ondblclick=function(e){var t=this._isGlobal?window:this;"function"==typeof t.doubleClicked&&!1===t.doubleClicked(e)&&e.preventDefault();},a.default.prototype._mouseWheelDeltaY=0,a.default.prototype._pmouseWheelDeltaY=0,a.default.prototype._onwheel=function(e){var t=this._isGlobal?window:this;this._setProperty("_mouseWheelDeltaY",e.deltaY),"function"==typeof t.mouseWheel&&(e.delta=e.deltaY,!1===t.mouseWheel(e)&&e.preventDefault());},a.default.prototype.requestPointerLock=function(){var e=this._curElement.elt;return e.requestPointerLock=e.requestPointerLock||e.mozRequestPointerLock,e.requestPointerLock?(e.requestPointerLock(),!0):(console.log("requestPointerLock is not implemented in this browser"),!1)},a.default.prototype.exitPointerLock=function(){document.exitPointerLock();};var l=a.default;r.default=l;},{"../core/constants":22,"../core/main":32}],52:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};function o(e,t,r,n,a){var o=4<arguments.length&&void 0!==a?a:0,i=e.getBoundingClientRect(),s=e.scrollWidth/t||1,l=e.scrollHeight/r||1,p=n.touches[o]||n.changedTouches[o];return {x:(p.clientX-i.left)/s,y:(p.clientY-i.top)/l,winX:p.clientX,winY:p.clientY,id:p.identifier}}a.default.prototype.touches=[],a.default.prototype._updateTouchCoords=function(e){if(null!==this._curElement){for(var t=[],r=0;r<e.touches.length;r++)t[r]=o(this._curElement.elt,this.width,this.height,e,r);this._setProperty("touches",t);}},a.default.prototype._ontouchstart=function(e){var t=this._isGlobal?window:this;this._setProperty("mouseIsPressed",!0),this._updateTouchCoords(e),this._updateNextMouseCoords(e),this._updateMouseCoords(),"function"==typeof t.touchStarted?!1===t.touchStarted(e)&&e.preventDefault():navigator.userAgent.toLowerCase().includes("safari")&&"function"==typeof t.mousePressed&&!1===t.mousePressed(e)&&e.preventDefault();},a.default.prototype._ontouchmove=function(e){var t=this._isGlobal?window:this;this._updateTouchCoords(e),this._updateNextMouseCoords(e),"function"==typeof t.touchMoved?!1===t.touchMoved(e)&&e.preventDefault():"function"==typeof t.mouseDragged&&!1===t.mouseDragged(e)&&e.preventDefault();},a.default.prototype._ontouchend=function(e){this._setProperty("mouseIsPressed",!1),this._updateTouchCoords(e),this._updateNextMouseCoords(e);var t=this._isGlobal?window:this;"function"==typeof t.touchEnded?!1===t.touchEnded(e)&&e.preventDefault():"function"==typeof t.mouseReleased&&!1===t.mouseReleased(e)&&e.preventDefault();};var i=a.default;r.default=i;},{"../core/main":32}],53:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var N,O,L,I,P={};function n(e,t){for(var r,n,a,o,i,s,l,p,u,c,d=P._toPixels(e),h=e.width,m=e.height,f=h*m,y=new Int32Array(f),g=0;g<f;g++)y[g]=P._getARGB(d,g);var v,b,_,x,S=new Int32Array(f),w=new Int32Array(f),M=new Int32Array(f),E=new Int32Array(f),T=0;for(!function(e){var t=3.5*e|0;if(N!==(t=t<1?1:t<248?t:248)){O=1+(N=t)<<1,L=new Int32Array(O),I=new Array(O);for(var r=0;r<O;r++)I[r]=new Int32Array(256);for(var n,a,o,i,s=1,l=t-1;s<t;s++){L[t+s]=L[l]=a=l*l,o=I[t+s],i=I[l--];for(var p=0;p<256;p++)o[p]=i[p]=a*p;}n=L[t]=t*t,o=I[t];for(var u=0;u<256;u++)o[u]=n*u;}}(t),b=0;b<m;b++){for(v=0;v<h;v++){if(o=a=n=i=r=0,(s=v-N)<0)c=-s,s=0;else {if(h<=s)break;c=0;}for(_=c;_<O&&!(h<=s);_++){var C=y[s+T];i+=(x=I[_])[(-16777216&C)>>>24],n+=x[(16711680&C)>>16],a+=x[(65280&C)>>8],o+=x[255&C],r+=L[_],s++;}S[l=T+v]=i/r,w[l]=n/r,M[l]=a/r,E[l]=o/r;}T+=h;}for(u=(p=-N)*h,b=T=0;b<m;b++){for(v=0;v<h;v++){if(o=a=n=i=r=0,p<0)c=l=-p,s=v;else {if(m<=p)break;c=0,l=p,s=v+u;}for(_=c;_<O&&!(m<=l);_++)i+=(x=I[_])[S[s]],n+=x[w[s]],a+=x[M[s]],o+=x[E[s]],r+=L[_],l++,s+=h;y[v+T]=i/r<<24|n/r<<16|a/r<<8|o/r;}T+=h,u+=h,p++;}P._setPixels(d,y);}P._toPixels=function(e){return e instanceof ImageData?e.data:e.getContext("2d").getImageData(0,0,e.width,e.height).data},P._getARGB=function(e,t){var r=4*t;return e[3+r]<<24&4278190080|e[r]<<16&16711680|e[1+r]<<8&65280|255&e[2+r]},P._setPixels=function(e,t){for(var r=0,n=0,a=e.length;n<a;n++)e[(r=4*n)+0]=(16711680&t[n])>>>16,e[r+1]=(65280&t[n])>>>8,e[r+2]=255&t[n],e[r+3]=(4278190080&t[n])>>>24;},P._toImageData=function(e){return e instanceof ImageData?e:e.getContext("2d").getImageData(0,0,e.width,e.height)},P._createImageData=function(e,t){return P._tmpCanvas=document.createElement("canvas"),P._tmpCtx=P._tmpCanvas.getContext("2d"),this._tmpCtx.createImageData(e,t)},P.apply=function(e,t,r){var n=e.getContext("2d"),a=n.getImageData(0,0,e.width,e.height),o=t(a,r);o instanceof ImageData?n.putImageData(o,0,0,0,0,e.width,e.height):n.putImageData(a,0,0,0,0,e.width,e.height);},P.threshold=function(e,t){var r=P._toPixels(e);void 0===t&&(t=.5);for(var n=Math.floor(255*t),a=0;a<r.length;a+=4){var o=void 0;o=n<=.2126*r[a]+.7152*r[a+1]+.0722*r[a+2]?255:0,r[a]=r[a+1]=r[a+2]=o;}},P.gray=function(e){for(var t=P._toPixels(e),r=0;r<t.length;r+=4){var n=.2126*t[r]+.7152*t[r+1]+.0722*t[r+2];t[r]=t[r+1]=t[r+2]=n;}},P.opaque=function(e){for(var t=P._toPixels(e),r=0;r<t.length;r+=4)t[r+3]=255;return t},P.invert=function(e){for(var t=P._toPixels(e),r=0;r<t.length;r+=4)t[r]=255-t[r],t[r+1]=255-t[r+1],t[r+2]=255-t[r+2];},P.posterize=function(e,t){var r=P._toPixels(e);if(t<2||255<t)throw new Error("Level must be greater than 2 and less than 255 for posterize");for(var n=t-1,a=0;a<r.length;a+=4){var o=r[a],i=r[a+1],s=r[a+2];r[a]=255*(o*t>>8)/n,r[a+1]=255*(i*t>>8)/n,r[a+2]=255*(s*t>>8)/n;}},P.dilate=function(e){for(var t,r,n,a,o,i,s,l,p,u,c,d,h,m,f,y,g,v=P._toPixels(e),b=0,_=v.length?v.length/4:0,x=new Int32Array(_);b<_;)for(r=(t=b)+e.width;b<r;)n=a=P._getARGB(v,b),(s=b-1)<t&&(s=b),r<=(i=b+1)&&(i=b),(l=b-e.width)<0&&(l=0),_<=(p=b+e.width)&&(p=b),d=P._getARGB(v,l),c=P._getARGB(v,s),h=P._getARGB(v,p),(o=77*(n>>16&255)+151*(n>>8&255)+28*(255&n))<(f=77*(c>>16&255)+151*(c>>8&255)+28*(255&c))&&(a=c,o=f),o<(m=77*((u=P._getARGB(v,i))>>16&255)+151*(u>>8&255)+28*(255&u))&&(a=u,o=m),o<(y=77*(d>>16&255)+151*(d>>8&255)+28*(255&d))&&(a=d,o=y),o<(g=77*(h>>16&255)+151*(h>>8&255)+28*(255&h))&&(a=h,o=g),x[b++]=a;P._setPixels(v,x);},P.erode=function(e){for(var t,r,n,a,o,i,s,l,p,u,c,d,h,m,f,y,g,v=P._toPixels(e),b=0,_=v.length?v.length/4:0,x=new Int32Array(_);b<_;)for(r=(t=b)+e.width;b<r;)n=a=P._getARGB(v,b),(s=b-1)<t&&(s=b),r<=(i=b+1)&&(i=b),(l=b-e.width)<0&&(l=0),_<=(p=b+e.width)&&(p=b),d=P._getARGB(v,l),c=P._getARGB(v,s),h=P._getARGB(v,p),(f=77*(c>>16&255)+151*(c>>8&255)+28*(255&c))<(o=77*(n>>16&255)+151*(n>>8&255)+28*(255&n))&&(a=c,o=f),(m=77*((u=P._getARGB(v,i))>>16&255)+151*(u>>8&255)+28*(255&u))<o&&(a=u,o=m),(y=77*(d>>16&255)+151*(d>>8&255)+28*(255&d))<o&&(a=d,o=y),(g=77*(h>>16&255)+151*(h>>8&255)+28*(255&h))<o&&(a=h,o=g),x[b++]=a;P._setPixels(v,x);},P.blur=function(e,t){n(e,t);};var a=P;r.default=a;},{}],54:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var P=n(e("../core/main")),R=n(e("omggif"));function n(e){return e&&e.__esModule?e:{default:e}}function D(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}P.default.prototype.createImage=function(e,t){return P.default._validateParameters("createImage",arguments),new P.default.Image(e,t)},P.default.prototype.saveCanvas=function(){P.default._validateParameters("saveCanvas",arguments);var e,t,r,n,a=[].slice.call(arguments);switch(arguments[0]instanceof HTMLCanvasElement?(e=arguments[0],a.shift()):arguments[0]instanceof P.default.Element?(e=arguments[0].elt,a.shift()):e=this._curElement&&this._curElement.elt,1<=a.length&&(t=a[0]),2<=a.length&&(r=a[1]),r=r||P.default.prototype._checkFileExtension(t,r)[1]||"png"){default:n="image/png";break;case"jpeg":case"jpg":n="image/jpeg";}e.toBlob(function(e){P.default.prototype.downloadFile(e,t,r);},n);},P.default.prototype.saveGif=function(m,e){var f=m.gifProperties,t=f.loopLimit;1===t?t=null:null===t&&(t=0);for(var r=new Uint8Array(m.width*m.height*f.numFrames),y=[],n={},a=0;a<f.numFrames;a++){for(var o=new Set,i=f.frames[a].image.data,s=i.length,l=new Uint32Array(m.width*m.height),p=0,u=0;p<s;p+=4,u++){var c=i[p+0]<<16|i[p+1]<<8|i[p+2]<<0;o.add(c),l[u]=c;}var d=D(o).sort().toString();void 0===n[d]?n[d]={freq:1,frames:[a]}:(n[d].freq+=1,n[d].frames.push(a)),y.push(l);}var g=[],h=Object.keys(n).sort(function(e,t){return n[t].freq-n[e].freq}),v=h[0].split(",").map(function(e){return parseInt(e)});g=g.concat(n[v].frames);for(var b=new Set(v),_=1;_<h.length;_++){var x=h[_].split(",").map(function(e){return parseInt(e)}).filter(function(e){return !b.has(e)});if(v.length+x.length<=256){for(var S=0;S<x.length;S++)v.push(x[S]),b.add(x[S]);g=g.concat(n[h[_]].frames);}}g=new Set(g);for(var w={},M=0;M<v.length;M++)w[v[M]]||(w[v[M]]=M);for(var E=1;E<v.length;)E<<=1;v.length=E;for(var T={loop:t,palette:new Uint32Array(v)},C=new R.default.GifWriter(r,m.width,m.height,T),N={},O=function(e){for(var t=!g.has(e),r=t?[]:v,n=new Uint8Array(m.width*m.height),a={},o=new Set,i=0;i<y[e].length;i++){var s=y[e][i];t?(void 0===a[s]&&(a[s]=r.length,r.push(s)),n[i]=a[s]):n[i]=w[s],0<e&&y[e-1][i]!==s&&o.add(s);}var l={},p=r.filter(function(e){return !o.has(e)});if(0<p.length){var u=p[0],c=t?a[u]:w[u];if(0<e){for(var d=0;d<y[e].length;d++)y[e-1][d]===y[e][d]&&(n[d]=c);l.transparent=c,N.frameOpts.disposal=1;}}if(l.delay=f.frames[e].delay/10,t){for(var h=1;h<r.length;)h<<=1;r.length=h,l.palette=new Uint32Array(r);}0<e&&C.addFrame(0,0,m.width,m.height,N.pixelPaletteIndex,N.frameOpts),N={pixelPaletteIndex:n,frameOpts:l};},L=0;L<f.numFrames;L++)O(L);N.frameOpts.disposal=1,C.addFrame(0,0,m.width,m.height,N.pixelPaletteIndex,N.frameOpts);var I=new Blob([r.slice(0,C.end())],{type:"image/gif"});P.default.prototype.downloadFile(I,e,"gif");},P.default.prototype.saveFrames=function(e,t,r,n,i){P.default._validateParameters("saveFrames",arguments);var a=r||3;a=P.default.prototype.constrain(a,0,15),a*=1e3;var o=n||15;o=P.default.prototype.constrain(o,0,22);var s=0,l=P.default.prototype._makeFrame,p=this._curElement.elt,u=[],c=setInterval(function(){u.push(l(e+s,t,p)),s++;},1e3/o);setTimeout(function(){if(clearInterval(c),i)i(u);else {var e=!0,t=!1,r=void 0;try{for(var n,a=u[Symbol.iterator]();!(e=(n=a.next()).done);e=!0){var o=n.value;P.default.prototype.downloadFile(o.imageData,o.filename,o.ext);}}catch(e){t=!0,r=e;}finally{try{e||null==a.return||a.return();}finally{if(t)throw r}}}u=[];},a+.01);},P.default.prototype._makeFrame=function(e,t,r){var n,a;if(n=this?this._curElement.elt:r,t)switch(t.toLowerCase()){case"png":a="image/png";break;case"jpeg":case"jpg":a="image/jpeg";break;default:a="image/png";}else t="png",a="image/png";var o=n.toDataURL(a);o=o.replace(a,"image/octet-stream");var i={};return i.imageData=o,i.filename=e,i.ext=t,i};var a=P.default;r.default=a;},{"../core/main":32,omggif:12}],55:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var x=a(e("../core/main")),c=a(e("./filters")),S=a(e("../core/helpers")),n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants")),m=a(e("omggif"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function a(e){return e&&e.__esModule?e:{default:e}}function w(e,t){return 0<e&&e<t?e:t}e("../core/friendly_errors/validate_params"),e("../core/friendly_errors/file_errors"),e("../core/friendly_errors/fes_core"),x.default.prototype.loadImage=function(n,a,o){x.default._validateParameters("loadImage",arguments);var i=new x.default.Image(1,1,this),s=this,e=new Request(n,{method:"GET",mode:"cors"});return fetch(n,e).then(function(e){var t=e.headers.get("content-type");if(null===t&&console.warn("The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset."),t&&t.includes("image/gif"))e.arrayBuffer().then(function(e){e&&function(e,r,t,n,a){var o=new m.default.GifReader(e);r.width=r.canvas.width=o.width,r.height=r.canvas.height=o.height;var i=[],s=o.numFrames(),l=new Uint8ClampedArray(r.width*r.height*4);if(1<s){for(var p=function(e,t){try{t.decodeAndBlitFrameRGBA(e,l);}catch(e){x.default._friendlyFileLoadError(8,r.src),"function"==typeof n?n(e):console.error(e);}},u=0;u<s;u++){var c=o.frameInfo(u);1===o.frameInfo(u).disposal&&0<u?r.drawingContext.putImageData(i[u-1].image,0,0):(r.drawingContext.clearRect(0,0,r.width,r.height),l=new Uint8ClampedArray(r.width*r.height*4)),p(u,o);var d=new ImageData(l,r.width,r.height);r.drawingContext.putImageData(d,0,0),i.push({image:r.drawingContext.getImageData(0,0,r.width,r.height),delay:10*c.delay});}var h=o.loopCount();null===h?h=1:0===h&&(h=null),r.gifProperties={displayIndex:0,loopLimit:h,loopCount:0,frames:i,numFrames:s,playing:!0,timeDisplayed:0};}"function"==typeof t&&t(r);a();}(new Uint8Array(e),i,a,o,function(e){s._decrementPreload();}.bind(s));},function(e){"function"==typeof o?o(e):console.error(e);});else {var r=new Image;r.onload=function(){i.width=i.canvas.width=r.width,i.height=i.canvas.height=r.height,i.drawingContext.drawImage(r,0,0),i.modified=!0,"function"==typeof a&&a(i),s._decrementPreload();},r.onerror=function(e){x.default._friendlyFileLoadError(0,r.src),"function"==typeof o?o(e):console.error(e);},0!==n.indexOf("data:image/")&&(r.crossOrigin="Anonymous"),r.src=n;}i.modified=!0;}),i},x.default.prototype.image=function(e,t,r,n,a,o,i,s,l){x.default._validateParameters("image",arguments);var p=e.width,u=e.height;e.elt&&e.elt.videoWidth&&!e.canvas&&(p=e.elt.videoWidth,u=e.elt.videoHeight);var c=t,d=r,h=n||p,m=a||u,f=o||0,y=i||0,g=s||p,v=l||u;g=w(g,p),v=w(v,u);var b=1;e.elt&&!e.canvas&&e.elt.style.width&&(b=e.elt.videoWidth&&!n?e.elt.videoWidth:e.elt.width,b/=parseInt(e.elt.style.width,10)),f*=b,y*=b,v*=b,g*=b;var _=S.default.modeAdjust(c,d,h,m,this._renderer._imageMode);this._renderer.image(e,f,y,g,v,_.x,_.y,_.w,_.h);},x.default.prototype.tint=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];x.default._validateParameters("tint",t);var n=this.color.apply(this,t);this._renderer._tint=n.levels;},x.default.prototype.noTint=function(){this._renderer._tint=null;},x.default.prototype._getTintedImageCanvas=function(e){if(!e.canvas)return e;var t=c.default._toPixels(e.canvas),r=document.createElement("canvas");r.width=e.canvas.width,r.height=e.canvas.height;for(var n=r.getContext("2d"),a=n.createImageData(e.canvas.width,e.canvas.height),o=a.data,i=0;i<t.length;i+=4){var s=t[i],l=t[i+1],p=t[i+2],u=t[i+3];o[i]=s*this._renderer._tint[0]/255,o[i+1]=l*this._renderer._tint[1]/255,o[i+2]=p*this._renderer._tint[2]/255,o[i+3]=u*this._renderer._tint[3]/255;}return n.putImageData(a,0,0),r},x.default.prototype.imageMode=function(e){x.default._validateParameters("imageMode",arguments),e!==n.CORNER&&e!==n.CORNERS&&e!==n.CENTER||(this._renderer._imageMode=e);};var o=x.default;r.default=o;},{"../core/constants":22,"../core/friendly_errors/fes_core":24,"../core/friendly_errors/file_errors":25,"../core/friendly_errors/validate_params":27,"../core/helpers":28,"../core/main":32,"./filters":53,omggif:12}],56:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var a=o(e("../core/main")),n=o(e("./filters"));function o(e){return e&&e.__esModule?e:{default:e}}a.default.Image=function(e,t){this.width=e,this.height=t,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height,this.drawingContext=this.canvas.getContext("2d"),(this._pixelsState=this)._pixelDensity=1,this.gifProperties=null,this._modified=!1,this.pixels=[];},a.default.Image.prototype._animateGif=function(e){var t=this.gifProperties;if(t.playing){t.timeDisplayed+=e.deltaTime;var r=t.frames[t.displayIndex].delay;if(t.timeDisplayed>=r){var n=Math.floor(t.timeDisplayed/r);if(t.timeDisplayed=0,t.displayIndex+=n,t.loopCount=Math.floor(t.displayIndex/t.numFrames),null!==t.loopLimit&&t.loopCount>=t.loopLimit)t.playing=!1;else {var a=t.displayIndex%t.numFrames;this.drawingContext.putImageData(t.frames[a].image,0,0),t.displayIndex=a,this.setModified(!0);}}}},a.default.Image.prototype._setProperty=function(e,t){this[e]=t,this.setModified(!0);},a.default.Image.prototype.loadPixels=function(){a.default.Renderer2D.prototype.loadPixels.call(this),this.setModified(!0);},a.default.Image.prototype.updatePixels=function(e,t,r,n){a.default.Renderer2D.prototype.updatePixels.call(this,e,t,r,n),this.setModified(!0);},a.default.Image.prototype.get=function(e,t,r,n){return a.default._validateParameters("p5.Image.get",arguments),a.default.Renderer2D.prototype.get.apply(this,arguments)},a.default.Image.prototype._getPixel=a.default.Renderer2D.prototype._getPixel,a.default.Image.prototype.set=function(e,t,r){a.default.Renderer2D.prototype.set.call(this,e,t,r),this.setModified(!0);},a.default.Image.prototype.resize=function(e,t){0===e&&0===t?(e=this.canvas.width,t=this.canvas.height):0===e?e=this.canvas.width*t/this.canvas.height:0===t&&(t=this.canvas.height*e/this.canvas.width),e=Math.floor(e),t=Math.floor(t);var r=document.createElement("canvas");if(r.width=e,r.height=t,this.gifProperties)for(var n=this.gifProperties,a=function(e,t){for(var r=0,n=0;n<t.height;n++)for(var a=0;a<t.width;a++){var o=Math.floor(a*e.width/t.width),i=4*(Math.floor(n*e.height/t.height)*e.width+o);t.data[r++]=e.data[i++],t.data[r++]=e.data[i++],t.data[r++]=e.data[i++],t.data[r++]=e.data[i++];}},o=0;o<n.numFrames;o++){var i=this.drawingContext.createImageData(e,t);a(n.frames[o].image,i),n.frames[o].image=i;}r.getContext("2d").drawImage(this.canvas,0,0,this.canvas.width,this.canvas.height,0,0,r.width,r.height),this.canvas.width=this.width=e,this.canvas.height=this.height=t,this.drawingContext.drawImage(r,0,0,e,t,0,0,e,t),0<this.pixels.length&&this.loadPixels(),this.setModified(!0);},a.default.Image.prototype.copy=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];a.default.prototype.copy.apply(this,t);},a.default.Image.prototype.mask=function(e){void 0===e&&(e=this);var t=this.drawingContext.globalCompositeOperation,r=1;e instanceof a.default.Renderer&&(r=e._pInst._pixelDensity);var n=[e,0,0,r*e.width,r*e.height,0,0,this.width,this.height];this.drawingContext.globalCompositeOperation="destination-in",a.default.Image.prototype.copy.apply(this,n),this.drawingContext.globalCompositeOperation=t,this.setModified(!0);},a.default.Image.prototype.filter=function(e,t){n.default.apply(this.canvas,n.default[e],t),this.setModified(!0);},a.default.Image.prototype.blend=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];a.default._validateParameters("p5.Image.blend",arguments),a.default.prototype.blend.apply(this,t),this.setModified(!0);},a.default.Image.prototype.setModified=function(e){this._modified=e;},a.default.Image.prototype.isModified=function(){return this._modified},a.default.Image.prototype.save=function(e,t){this.gifProperties?a.default.prototype.saveGif(this,e):a.default.prototype.saveCanvas(this.canvas,e,t);},a.default.Image.prototype.reset=function(){if(this.gifProperties){var e=this.gifProperties;e.playing=!0,e.timeSinceStart=0,e.timeDisplayed=0,e.loopCount=0,e.displayIndex=0,this.drawingContext.putImageData(e.frames[0].image,0,0);}},a.default.Image.prototype.getCurrentFrame=function(){if(this.gifProperties){var e=this.gifProperties;return e.displayIndex%e.numFrames}},a.default.Image.prototype.setFrame=function(e){if(this.gifProperties){var t=this.gifProperties;e<t.numFrames&&0<=e?(t.timeDisplayed=0,t.displayIndex=e,this.drawingContext.putImageData(t.frames[e].image,0,0)):console.log("Cannot set GIF to a frame number that is higher than total number of frames or below zero.");}},a.default.Image.prototype.numFrames=function(){if(this.gifProperties)return this.gifProperties.numFrames},a.default.Image.prototype.play=function(){this.gifProperties&&(this.gifProperties.playing=!0);},a.default.Image.prototype.pause=function(){this.gifProperties&&(this.gifProperties.playing=!1);},a.default.Image.prototype.delay=function(e,t){if(this.gifProperties){var r=this.gifProperties;if(t<r.numFrames&&0<=t)r.frames[t].delay=e;else {var n=!0,a=!1,o=void 0;try{for(var i,s=r.frames[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){i.value.delay=e;}}catch(e){a=!0,o=e;}finally{try{n||null==s.return||s.return();}finally{if(a)throw o}}}}};var i=a.default.Image;r.default=i;},{"../core/main":32,"./filters":53}],57:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var h=a(e("../core/main")),n=a(e("./filters"));function a(e){return e&&e.__esModule?e:{default:e}}e("../color/p5.Color"),h.default.prototype.pixels=[],h.default.prototype.blend=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n;(h.default._validateParameters("blend",t),this._renderer)?(n=this._renderer).blend.apply(n,t):h.default.Renderer2D.prototype.blend.apply(this,t);},h.default.prototype.copy=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n,a,o,i,s,l,p,u,c;if(h.default._validateParameters("copy",t),9===t.length)n=t[0],a=t[1],o=t[2],i=t[3],s=t[4],l=t[5],p=t[6],u=t[7],c=t[8];else {if(8!==t.length)throw new Error("Signature not supported");n=this,a=t[0],o=t[1],i=t[2],s=t[3],l=t[4],p=t[5],u=t[6],c=t[7];}h.default.prototype._copyHelper(this,n,a,o,i,s,l,p,u,c);},h.default.prototype._copyHelper=function(e,t,r,n,a,o,i,s,l,p){t.loadPixels();var u=t.canvas.width/t.width,c=0,d=0;t._renderer&&t._renderer.isP3D&&(c=t.width/2,d=t.height/2),e._renderer&&e._renderer.isP3D?h.default.RendererGL.prototype.image.call(e._renderer,t,r+c,n+d,a,o,i,s,l,p):e.drawingContext.drawImage(t.canvas,u*(r+c),u*(n+d),u*a,u*o,i,s,l,p);},h.default.prototype.filter=function(e,t){h.default._validateParameters("filter",arguments),void 0!==this.canvas?n.default.apply(this.canvas,n.default[e],t):n.default.apply(this.elt,n.default[e],t);},h.default.prototype.get=function(e,t,r,n){var a;return h.default._validateParameters("get",arguments),(a=this._renderer).get.apply(a,arguments)},h.default.prototype.loadPixels=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];h.default._validateParameters("loadPixels",t),this._renderer.loadPixels();},h.default.prototype.set=function(e,t,r){this._renderer.set(e,t,r);},h.default.prototype.updatePixels=function(e,t,r,n){h.default._validateParameters("updatePixels",arguments),0!==this.pixels.length&&this._renderer.updatePixels(e,t,r,n);};var o=h.default;r.default=o;},{"../color/p5.Color":20,"../core/main":32,"./filters":53}],58:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var g=n(e("../core/main"));e("whatwg-fetch"),e("es6-promise/auto");var y=n(e("fetch-jsonp")),s=n(e("file-saver"));function n(e){return e&&e.__esModule?e:{default:e}}function v(e){return (v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var r={};if(void 0===(t=t||[]))for(var n=0;n<e.length;n++)t[n.toString()]=n;for(var a=0;a<t.length;a++){var o=t[a],i=e[a];r[o]=i;}return r}function f(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}function l(e,t){t&&!0!==t&&"true"!==t||(t="");var r="";return (e=e||"untitled")&&e.includes(".")&&(r=e.split(".").pop()),t&&r!==t&&(r=t,e="".concat(e,".").concat(r)),[e,r]}e("../core/friendly_errors/validate_params"),e("../core/friendly_errors/file_errors"),e("../core/friendly_errors/fes_core"),g.default.prototype.loadJSON=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];g.default._validateParameters("loadJSON",t);for(var n,a,o,i=t[0],s={},l="json",p=1;p<t.length;p++){var u=t[p];"string"==typeof u?"jsonp"!==u&&"json"!==u||(l=u):"function"==typeof u?n?a=u:n=u:"object"===v(u)&&(u.hasOwnProperty("jsonpCallback")||u.hasOwnProperty("jsonpCallbackFunction"))&&(l="jsonp",o=u);}var c=this;return this.httpDo(i,"GET",o,l,function(e){for(var t in e)s[t]=e[t];void 0!==n&&n(e),c._decrementPreload();},function(e){if(g.default._friendlyFileLoadError(5,i),!a)throw e;a(e);}),s},g.default.prototype.loadStrings=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];g.default._validateParameters("loadStrings",t);for(var n,a,o=[],i=1;i<t.length;i++){var s=t[i];"function"==typeof s&&(void 0===n?n=s:void 0===a&&(a=s));}var l=this;return g.default.prototype.httpDo.call(this,t[0],"GET","text",function(e){var t=e.replace(/\r\n/g,"\r").replace(/\n/g,"\r").split(/\r/);Array.prototype.push.apply(o,t),void 0!==n&&n(o),l._decrementPreload();},function(e){if(g.default._friendlyFileLoadError(3,e),!a)throw e;a(e);}),o},g.default.prototype.loadTable=function(t){var d,r,h,m=!1,n=t.substring(t.lastIndexOf(".")+1,t.length);"csv"===n?h=",":"ssv"===n?h=";":"tsv"===n&&(h="\t");for(var a=1;a<arguments.length;a++)"function"==typeof arguments[a]?void 0===d?d=arguments[a]:void 0===r&&(r=arguments[a]):"string"==typeof arguments[a]&&("header"===arguments[a]&&(m=!0),"csv"===arguments[a]?h=",":"ssv"===arguments[a]?h=";":"tsv"===arguments[a]&&(h="\t"));console.log("SEP IS "+h);var f=new g.default.Table,y=this;return this.httpDo(t,"GET","table",function(e){for(var t,r,n={},a=[],o=0,i=null,s=function(){n.currentState=0,n.token="";},l=function(){i.push(n.token),s();},p=function(){n.currentState=4,a.push(i),i=null;};;){if(null==(t=e[o++])){if(n.escaped)throw new Error("Unclosed quote in file.");if(i){l(),p();break}}if(null===i&&(n.escaped=!1,i=[],s()),0===n.currentState){if('"'===t){n.escaped=!0,n.currentState=1;continue}n.currentState=1;}if(1===n.currentState&&n.escaped)if('"'===t)'"'===e[o]?(n.token+='"',o++):(n.escaped=!1,n.currentState=2);else {if("\r"===t)continue;n.token+=t;}else "\r"===t?("\n"===e[o]&&o++,l(),p()):"\n"===t?(l(),p()):t===h?l():1===n.currentState&&(n.token+=t);}if(m)f.columns=a.shift();else for(var u=0;u<a[0].length;u++)f.columns[u]="null";for(var c=0;c<a.length;c++)(1!==a[c].length||"undefined"!==a[c][0]&&""!==a[c][0])&&((r=new g.default.TableRow).arr=a[c],r.obj=b(a[c],f.columns),f.addRow(r));"function"==typeof d&&d(f),y._decrementPreload();},function(e){g.default._friendlyFileLoadError(2,t),r?r(e):console.error(e);}),f},g.default.prototype.loadXML=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n,a,o=new g.default.XML,i=1;i<t.length;i++){var s=t[i];"function"==typeof s&&(void 0===n?n=s:void 0===a&&(a=s));}var l=this;return this.httpDo(t[0],"GET","xml",function(e){for(var t in e)o[t]=e[t];void 0!==n&&n(o),l._decrementPreload();},function(e){if(g.default._friendlyFileLoadError(1,e),!a)throw e;a(e);}),o},g.default.prototype.loadBytes=function(t,r,n){var a={},o=this;return this.httpDo(t,"GET","arrayBuffer",function(e){a.bytes=new Uint8Array(e),"function"==typeof r&&r(a),o._decrementPreload();},function(e){if(g.default._friendlyFileLoadError(6,t),!n)throw e;n(e);}),a},g.default.prototype.httpGet=function(){g.default._validateParameters("httpGet",arguments);var e=Array.prototype.slice.call(arguments);return e.splice(1,0,"GET"),g.default.prototype.httpDo.apply(this,e)},g.default.prototype.httpPost=function(){g.default._validateParameters("httpPost",arguments);var e=Array.prototype.slice.call(arguments);return e.splice(1,0,"POST"),g.default.prototype.httpDo.apply(this,e)},g.default.prototype.httpDo=function(){for(var n,e,t,r,a,o={},i=0,s="text/plain",l=arguments.length-1;0<l&&"function"==typeof(l<0||arguments.length<=l?void 0:arguments[l]);l--)i++;var p=arguments.length<=0?void 0:arguments[0];if(2==arguments.length-i&&"string"==typeof p&&"object"===v(arguments.length<=1?void 0:arguments[1]))r=new Request(p,arguments.length<=1?void 0:arguments[1]),e=arguments.length<=2?void 0:arguments[2],t=arguments.length<=3?void 0:arguments[3];else {for(var u,c="GET",d=1;d<arguments.length;d++){var h=d<0||arguments.length<=d?void 0:arguments[d];if("string"==typeof h)"GET"===h||"POST"===h||"PUT"===h||"DELETE"===h?c=h:"json"===h||"jsonp"===h||"binary"===h||"arrayBuffer"===h||"xml"===h||"text"===h||"table"===h?n=h:u=h;else if("number"==typeof h)u=h.toString();else if("object"===v(h))if(h.hasOwnProperty("jsonpCallback")||h.hasOwnProperty("jsonpCallbackFunction"))for(var m in h)o[m]=h[m];else s=h instanceof g.default.XML?(u=h.serialize(),"application/xml"):(u=JSON.stringify(h),"application/json");else "function"==typeof h&&(e?t=h:e=h);}var f="GET"===c?new Headers:new Headers({"Content-Type":s});r=new Request(p,{method:c,mode:"cors",body:u,headers:f});}return (a=(a="jsonp"===(n=n||(p.includes("json")?"json":p.includes("xml")?"xml":"text"))?(0, y.default)(p,o):fetch(r)).then(function(e){if(!e.ok){var t=new Error(e.body);throw t.status=e.status,t.ok=!1,t}var r=0;switch("jsonp"!==n&&(r=e.headers.get("content-length")),r&&64e6<r&&g.default._friendlyFileLoadError(7,p),n){case"json":case"jsonp":return e.json();case"binary":return e.blob();case"arrayBuffer":return e.arrayBuffer();case"xml":return e.text().then(function(e){var t=(new DOMParser).parseFromString(e,"text/xml");return new g.default.XML(t.documentElement)});default:return e.text()}})).then(e||function(){}),a.catch(t||console.error),a},window.URL=window.URL||window.webkitURL,g.default.prototype._pWriters=[],g.default.prototype.createWriter=function(e,t){var r;for(var n in g.default.prototype._pWriters)if(g.default.prototype._pWriters[n].name===e)return r=new g.default.PrintWriter(e+this.millis(),t),g.default.prototype._pWriters.push(r),r;return r=new g.default.PrintWriter(e,t),g.default.prototype._pWriters.push(r),r},g.default.PrintWriter=function(r,n){var a=this;this.name=r,this.content="",this.write=function(e){this.content+=e;},this.print=function(e){this.content+="".concat(e,"\n");},this.clear=function(){this.content="";},this.close=function(){var e=[];for(var t in e.push(this.content),g.default.prototype.writeFile(e,r,n),g.default.prototype._pWriters)g.default.prototype._pWriters[t].name===this.name&&g.default.prototype._pWriters.splice(t,1);a.clear(),a={};};},g.default.prototype.save=function(e,t,r){var n=arguments,a=this._curElement?this._curElement.elt:this.elt;if(0!==n.length)if(n[0]instanceof g.default.Renderer||n[0]instanceof g.default.Graphics)g.default.prototype.saveCanvas(n[0].elt,n[1],n[2]);else if(1===n.length&&"string"==typeof n[0])g.default.prototype.saveCanvas(a,n[0]);else switch(l(n[1],n[2])[1]){case"json":return void g.default.prototype.saveJSON(n[0],n[1],n[2]);case"txt":return void g.default.prototype.saveStrings(n[0],n[1],n[2]);default:n[0]instanceof Array?g.default.prototype.saveStrings(n[0],n[1],n[2]):n[0]instanceof g.default.Table?g.default.prototype.saveTable(n[0],n[1],n[2]):n[0]instanceof g.default.Image?g.default.prototype.saveCanvas(n[0].canvas,n[1]):n[0]instanceof g.default.SoundFile&&g.default.prototype.saveSound(n[0],n[1],n[2],n[3]);}else g.default.prototype.saveCanvas(a);},g.default.prototype.saveJSON=function(e,t,r){var n;g.default._validateParameters("saveJSON",arguments),n=r?JSON.stringify(e):JSON.stringify(e,void 0,2),this.saveStrings(n.split("\n"),t,"json");},g.default.prototype.saveJSONObject=g.default.prototype.saveJSON,g.default.prototype.saveJSONArray=g.default.prototype.saveJSON,g.default.prototype.saveStrings=function(e,t,r,n){g.default._validateParameters("saveStrings",arguments);for(var a=r||"txt",o=this.createWriter(t,a),i=0;i<e.length;i++)n?o.write(e[i]+"\r\n"):o.write(e[i]+"\n");o.close(),o.clear();},g.default.prototype.saveTable=function(e,t,r){var n;g.default._validateParameters("saveTable",arguments),n=void 0===r?t.substring(t.lastIndexOf(".")+1,t.length):r;var a=this.createWriter(t,n),o=e.columns,i=",";if("tsv"===n&&(i="\t"),"html"!==n){if("0"!==o[0]){for(var s=0;s<o.length;s++)s<o.length-1?a.write(o[s]+i):a.write(o[s]);a.write("\n");}for(var l=0;l<e.rows.length;l++){var p=void 0;for(p=0;p<e.rows[l].arr.length;p++)p<e.rows[l].arr.length-1?a.write(e.rows[l].arr[p]+i):(e.rows.length,a.write(e.rows[l].arr[p]));a.write("\n");}}else {a.print("<html>"),a.print("<head>");if(a.print('  <meta http-equiv="content-type" content="text/html;charset=utf-8" />'),a.print("</head>"),a.print("<body>"),a.print("  <table>"),"0"!==o[0]){a.print("    <tr>");for(var u=0;u<o.length;u++){var c=f(o[u]);a.print("      <td>".concat(c)),a.print("      </td>");}a.print("    </tr>");}for(var d=0;d<e.rows.length;d++){a.print("    <tr>");for(var h=0;h<e.columns.length;h++){var m=f(e.rows[d].getString(h));a.print("      <td>".concat(m)),a.print("      </td>");}a.print("    </tr>");}a.print("  </table>"),a.print("</body>"),a.print("</html>");}a.close(),a.clear();},g.default.prototype.writeFile=function(e,t,r){var n="application/octet-stream";g.default.prototype._isSafari()&&(n="text/plain");var a=new Blob(e,{type:n});g.default.prototype.downloadFile(a,t,r);},g.default.prototype.downloadFile=function(e,t,r){var n=l(t,r),a=n[0];if(e instanceof Blob)s.default.saveAs(e,a);else {var o=document.createElement("a");if(o.href=e,o.download=a,o.onclick=function(e){var t;t=e,document.body.removeChild(t.target),e.stopPropagation();},o.style.display="none",document.body.appendChild(o),g.default.prototype._isSafari()){var i="Hello, Safari user! To download this file...\n";i+="1. Go to File --\x3e Save As.\n",i+='2. Choose "Page Source" as the Format.\n',i+='3. Name it with this extension: ."'.concat(n[1],'"'),alert(i);}o.click();}},g.default.prototype._checkFileExtension=l,g.default.prototype._isSafari=function(){return 0<Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")};var a=g.default;r.default=a;},{"../core/friendly_errors/fes_core":24,"../core/friendly_errors/file_errors":25,"../core/friendly_errors/validate_params":27,"../core/main":32,"es6-promise/auto":6,"fetch-jsonp":8,"file-saver":9,"whatwg-fetch":16}],59:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.Table=function(e){this.columns=[],this.rows=[];},a.default.Table.prototype.addRow=function(e){var t=e||new a.default.TableRow;if(void 0===t.arr||void 0===t.obj)throw new Error("invalid TableRow: ".concat(t));return (t.table=this).rows.push(t),t},a.default.Table.prototype.removeRow=function(e){this.rows[e].table=null;var t=this.rows.splice(e+1,this.rows.length);this.rows.pop(),this.rows=this.rows.concat(t);},a.default.Table.prototype.getRow=function(e){return this.rows[e]},a.default.Table.prototype.getRows=function(){return this.rows},a.default.Table.prototype.findRow=function(e,t){if("string"==typeof t){for(var r=0;r<this.rows.length;r++)if(this.rows[r].obj[t]===e)return this.rows[r]}else for(var n=0;n<this.rows.length;n++)if(this.rows[n].arr[t]===e)return this.rows[n];return null},a.default.Table.prototype.findRows=function(e,t){var r=[];if("string"==typeof t)for(var n=0;n<this.rows.length;n++)this.rows[n].obj[t]===e&&r.push(this.rows[n]);else for(var a=0;a<this.rows.length;a++)this.rows[a].arr[t]===e&&r.push(this.rows[a]);return r},a.default.Table.prototype.matchRow=function(e,t){if("number"==typeof t){for(var r=0;r<this.rows.length;r++)if(this.rows[r].arr[t].match(e))return this.rows[r]}else for(var n=0;n<this.rows.length;n++)if(this.rows[n].obj[t].match(e))return this.rows[n];return null},a.default.Table.prototype.matchRows=function(e,t){var r=[];if("number"==typeof t)for(var n=0;n<this.rows.length;n++)this.rows[n].arr[t].match(e)&&r.push(this.rows[n]);else for(var a=0;a<this.rows.length;a++)this.rows[a].obj[t].match(e)&&r.push(this.rows[a]);return r},a.default.Table.prototype.getColumn=function(e){var t=[];if("string"==typeof e)for(var r=0;r<this.rows.length;r++)t.push(this.rows[r].obj[e]);else for(var n=0;n<this.rows.length;n++)t.push(this.rows[n].arr[e]);return t},a.default.Table.prototype.clearRows=function(){delete this.rows,this.rows=[];},a.default.Table.prototype.addColumn=function(e){var t=e||null;this.columns.push(t);},a.default.Table.prototype.getColumnCount=function(){return this.columns.length},a.default.Table.prototype.getRowCount=function(){return this.rows.length},a.default.Table.prototype.removeTokens=function(e,t){for(var r=[],n=0;n<e.length;n++)r.push(e.charAt(n).replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"));var a=new RegExp(r.join("|"),"g");if(void 0===t)for(var o=0;o<this.columns.length;o++)for(var i=0;i<this.rows.length;i++){var s=this.rows[i].arr[o];s=s.replace(a,""),this.rows[i].arr[o]=s,this.rows[i].obj[this.columns[o]]=s;}else if("string"==typeof t)for(var l=0;l<this.rows.length;l++){var p=this.rows[l].obj[t];p=p.replace(a,""),this.rows[l].obj[t]=p;var u=this.columns.indexOf(t);this.rows[l].arr[u]=p;}else for(var c=0;c<this.rows.length;c++){var d=this.rows[c].arr[t];d=d.replace(a,""),this.rows[c].arr[t]=d,this.rows[c].obj[this.columns[t]]=d;}},a.default.Table.prototype.trim=function(e){var t=new RegExp(" ","g");if(void 0===e)for(var r=0;r<this.columns.length;r++)for(var n=0;n<this.rows.length;n++){var a=this.rows[n].arr[r];a=a.replace(t,""),this.rows[n].arr[r]=a,this.rows[n].obj[this.columns[r]]=a;}else if("string"==typeof e)for(var o=0;o<this.rows.length;o++){var i=this.rows[o].obj[e];i=i.replace(t,""),this.rows[o].obj[e]=i;var s=this.columns.indexOf(e);this.rows[o].arr[s]=i;}else for(var l=0;l<this.rows.length;l++){var p=this.rows[l].arr[e];p=p.replace(t,""),this.rows[l].arr[e]=p,this.rows[l].obj[this.columns[e]]=p;}},a.default.Table.prototype.removeColumn=function(e){var t,r;"string"==typeof e?(t=e,r=this.columns.indexOf(e)):(r=e,t=this.columns[e]);var n=this.columns.splice(r+1,this.columns.length);this.columns.pop(),this.columns=this.columns.concat(n);for(var a=0;a<this.rows.length;a++){var o=this.rows[a].arr,i=o.splice(r+1,o.length);o.pop(),this.rows[a].arr=o.concat(i),delete this.rows[a].obj[t];}},a.default.Table.prototype.set=function(e,t,r){this.rows[e].set(t,r);},a.default.Table.prototype.setNum=function(e,t,r){this.rows[e].setNum(t,r);},a.default.Table.prototype.setString=function(e,t,r){this.rows[e].setString(t,r);},a.default.Table.prototype.get=function(e,t){return this.rows[e].get(t)},a.default.Table.prototype.getNum=function(e,t){return this.rows[e].getNum(t)},a.default.Table.prototype.getString=function(e,t){return this.rows[e].getString(t)},a.default.Table.prototype.getObject=function(e){for(var t,r={},n=0;n<this.rows.length;n++)if(t=this.rows[n].obj,"string"==typeof e){if(!(0<=this.columns.indexOf(e)))throw new Error('This table has no column named "'.concat(e,'"'));r[t[e]]=t;}else r[n]=this.rows[n].obj;return r},a.default.Table.prototype.getArray=function(){for(var e=[],t=0;t<this.rows.length;t++)e.push(this.rows[t].arr);return e};var o=a.default;r.default=o;},{"../core/main":32}],60:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.TableRow=function(e,t){var r=[],n={};e&&(t=t||",",r=e.split(t));for(var a=0;a<r.length;a++){var o=a,i=r[a];n[o]=i;}this.arr=r,this.obj=n,this.table=null;},a.default.TableRow.prototype.set=function(e,t){if("string"==typeof e){var r=this.table.columns.indexOf(e);if(!(0<=r))throw new Error('This table has no column named "'.concat(e,'"'));this.obj[e]=t,this.arr[r]=t;}else {if(!(e<this.table.columns.length))throw new Error("Column #".concat(e," is out of the range of this table"));this.arr[e]=t;var n=this.table.columns[e];this.obj[n]=t;}},a.default.TableRow.prototype.setNum=function(e,t){var r=parseFloat(t);this.set(e,r);},a.default.TableRow.prototype.setString=function(e,t){var r=t.toString();this.set(e,r);},a.default.TableRow.prototype.get=function(e){return "string"==typeof e?this.obj[e]:this.arr[e]},a.default.TableRow.prototype.getNum=function(e){var t;if("NaN"===(t="string"==typeof e?parseFloat(this.obj[e]):parseFloat(this.arr[e])).toString())throw "Error: ".concat(this.obj[e]," is NaN (Not a Number)");return t},a.default.TableRow.prototype.getString=function(e){return "string"==typeof e?this.obj[e].toString():this.arr[e].toString()};var o=a.default;r.default=o;},{"../core/main":32}],61:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("../core/main"))&&n.__esModule?n:{default:n};function a(e){for(var t=[],r=0;r<e.length;r++)t.push(new s.default.XML(e[r]));return t}s.default.XML=function(e){if(e)this.DOM=e;else {var t=document.implementation.createDocument(null,"doc");this.DOM=t.createElement("root");}},s.default.XML.prototype.getParent=function(){return new s.default.XML(this.DOM.parentElement)},s.default.XML.prototype.getName=function(){return this.DOM.tagName},s.default.XML.prototype.setName=function(e){var t=this.DOM.innerHTML,r=this.DOM.attributes,n=document.implementation.createDocument(null,"default").createElement(e);n.innerHTML=t;for(var a=0;a<r.length;a++)n.setAttribute(r[a].nodeName,r.nodeValue);this.DOM=n;},s.default.XML.prototype.hasChildren=function(){return 0<this.DOM.children.length},s.default.XML.prototype.listChildren=function(){for(var e=[],t=0;t<this.DOM.childNodes.length;t++)e.push(this.DOM.childNodes[t].nodeName);return e},s.default.XML.prototype.getChildren=function(e){return a(e?this.DOM.getElementsByTagName(e):this.DOM.children)},s.default.XML.prototype.getChild=function(e){if("string"!=typeof e)return new s.default.XML(this.DOM.children[e]);var t=!0,r=!1,n=void 0;try{for(var a,o=this.DOM.children[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value;if(i.tagName===e)return new s.default.XML(i)}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}},s.default.XML.prototype.addChild=function(e){e instanceof s.default.XML&&this.DOM.appendChild(e.DOM);},s.default.XML.prototype.removeChild=function(e){var t=-1;if("string"==typeof e){for(var r=0;r<this.DOM.children.length;r++)if(this.DOM.children[r].tagName===e){t=r;break}}else t=e;-1!==t&&this.DOM.removeChild(this.DOM.children[t]);},s.default.XML.prototype.getAttributeCount=function(){return this.DOM.attributes.length},s.default.XML.prototype.listAttributes=function(){var e=[],t=!0,r=!1,n=void 0;try{for(var a,o=this.DOM.attributes[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value;e.push(i.nodeName);}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}return e},s.default.XML.prototype.hasAttribute=function(e){var t={},r=!0,n=!1,a=void 0;try{for(var o,i=this.DOM.attributes[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){var s=o.value;t[s.nodeName]=s.nodeValue;}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}return !!t[e]},s.default.XML.prototype.getNum=function(e,t){var r={},n=!0,a=!1,o=void 0;try{for(var i,s=this.DOM.attributes[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var l=i.value;r[l.nodeName]=l.nodeValue;}}catch(e){a=!0,o=e;}finally{try{n||null==s.return||s.return();}finally{if(a)throw o}}return Number(r[e])||t||0},s.default.XML.prototype.getString=function(e,t){var r={},n=!0,a=!1,o=void 0;try{for(var i,s=this.DOM.attributes[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var l=i.value;r[l.nodeName]=l.nodeValue;}}catch(e){a=!0,o=e;}finally{try{n||null==s.return||s.return();}finally{if(a)throw o}}return r[e]?String(r[e]):t||null},s.default.XML.prototype.setAttribute=function(e,t){this.DOM.setAttribute(e,t);},s.default.XML.prototype.getContent=function(e){return this.DOM.textContent.replace(/\s\s+/g,",")||e||null},s.default.XML.prototype.setContent=function(e){this.DOM.children.length||(this.DOM.textContent=e);},s.default.XML.prototype.serialize=function(){return (new XMLSerializer).serializeToString(this.DOM)};var o=s.default;r.default=o;},{"../core/main":32}],62:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("../core/main"))&&n.__esModule?n:{default:n};function a(){if("function"==typeof Math.hypot)return Math.hypot.apply(null,arguments);for(var e=arguments.length,t=[],r=0,n=0;n<e;n++){var a=arguments[n];if((a=+a)===1/0||a===-1/0)return 1/0;r<(a=Math.abs(a))&&(r=a),t[n]=a;}0===r&&(r=1);for(var o=0,i=0,s=0;s<e;s++){var l=t[s]/r,p=l*l-i,u=o+p;i=u-o-p,o=u;}return Math.sqrt(o)*r}s.default.prototype.abs=Math.abs,s.default.prototype.ceil=Math.ceil,s.default.prototype.constrain=function(e,t,r){return s.default._validateParameters("constrain",arguments),Math.max(Math.min(e,r),t)},s.default.prototype.dist=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return s.default._validateParameters("dist",t),4===t.length?a(t[2]-t[0],t[3]-t[1]):6===t.length?a(t[3]-t[0],t[4]-t[1],t[5]-t[2]):void 0},s.default.prototype.exp=Math.exp,s.default.prototype.floor=Math.floor,s.default.prototype.lerp=function(e,t,r){return s.default._validateParameters("lerp",arguments),r*(t-e)+e},s.default.prototype.log=Math.log,s.default.prototype.mag=function(e,t){return s.default._validateParameters("mag",arguments),a(e,t)},s.default.prototype.map=function(e,t,r,n,a,o){s.default._validateParameters("map",arguments);var i=(e-t)/(r-t)*(a-n)+n;return o?n<a?this.constrain(i,n,a):this.constrain(i,a,n):i},s.default.prototype.max=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return s.default._validateParameters("max",t),t[0]instanceof Array?Math.max.apply(null,t[0]):Math.max.apply(null,t)},s.default.prototype.min=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return s.default._validateParameters("min",t),t[0]instanceof Array?Math.min.apply(null,t[0]):Math.min.apply(null,t)},s.default.prototype.norm=function(e,t,r){return s.default._validateParameters("norm",arguments),this.map(e,t,r,0,1)},s.default.prototype.pow=Math.pow,s.default.prototype.round=function(e,t){return t?Number(Math.round(e+"e"+t)+"e-"+t):Math.round(e)},s.default.prototype.sq=function(e){return e*e},s.default.prototype.sqrt=Math.sqrt,s.default.prototype.fract=function(e){s.default._validateParameters("fract",arguments);var t=0,r=Number(e);if(isNaN(r)||Math.abs(r)===1/0)return r;if(r<0&&(r=-r,t=1),!String(r).includes(".")||String(r).includes("e"))return r<1?Math.abs(t-r):0;var n=String(r);return n=Number("0"+n.slice(n.indexOf("."))),Math.abs(t-n)};var o=s.default;r.default=o;},{"../core/main":32}],63:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.createVector=function(e,t,r){return this instanceof a.default?new a.default.Vector(this,arguments):new a.default.Vector(e,t,r)};var o=a.default;r.default=o;},{"../core/main":32}],64:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};function b(e){return .5*(1-Math.cos(e*Math.PI))}var _,x=4095,S=4,w=.5;a.default.prototype.noise=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;if(null==_){_=new Array(4096);for(var n=0;n<4096;n++)_[n]=Math.random();}e<0&&(e=-e),t<0&&(t=-t),r<0&&(r=-r);for(var a,o,i,s,l,p=Math.floor(e),u=Math.floor(t),c=Math.floor(r),d=e-p,h=t-u,m=r-c,f=0,y=.5,g=0;g<S;g++){var v=p+(u<<4)+(c<<8);a=b(d),o=b(h),i=_[v&x],i+=a*(_[v+1&x]-i),s=_[v+16&x],i+=o*((s+=a*(_[v+16+1&x]-s))-i),s=_[(v+=256)&x],s+=a*(_[v+1&x]-s),l=_[v+16&x],s+=o*((l+=a*(_[v+16+1&x]-l))-s),f+=(i+=b(m)*(s-i))*y,y*=w,p<<=1,u<<=1,c<<=1,1<=(d*=2)&&(p++,d--),1<=(h*=2)&&(u++,h--),1<=(m*=2)&&(c++,m--);}return f},a.default.prototype.noiseDetail=function(e,t){0<e&&(S=e),0<t&&(w=t);},a.default.prototype.noiseSeed=function(e){var t,r,n,a=(n=4294967296,{setSeed:function(e){r=t=(null==e?Math.random()*n:e)>>>0;},getSeed:function(){return t},rand:function(){return (r=(1664525*r+1013904223)%n)/n}});a.setSeed(e),_=new Array(4096);for(var o=0;o<4096;o++)_[o]=a.rand();};var o=a.default;r.default=o;},{"../core/main":32}],65:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,l=(n=e("../core/main"))&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}l.default.Vector=function(e,t,r){var n,a,o;o=e instanceof l.default?(this.p5=e,n=t[0]||0,a=t[1]||0,t[2]||0):(n=e||0,a=t||0,r||0),this.x=n,this.y=a,this.z=o;},l.default.Vector.prototype.toString=function(){return "p5.Vector Object : [".concat(this.x,", ").concat(this.y,", ").concat(this.z,"]")},l.default.Vector.prototype.set=function(e,t,r){return e instanceof l.default.Vector?(this.x=e.x||0,this.y=e.y||0,this.z=e.z||0):e instanceof Array?(this.x=e[0]||0,this.y=e[1]||0,this.z=e[2]||0):(this.x=e||0,this.y=t||0,this.z=r||0),this},l.default.Vector.prototype.copy=function(){return this.p5?new l.default.Vector(this.p5,[this.x,this.y,this.z]):new l.default.Vector(this.x,this.y,this.z)},l.default.Vector.prototype.add=function(e,t,r){return e instanceof l.default.Vector?(this.x+=e.x||0,this.y+=e.y||0,this.z+=e.z||0):e instanceof Array?(this.x+=e[0]||0,this.y+=e[1]||0,this.z+=e[2]||0):(this.x+=e||0,this.y+=t||0,this.z+=r||0),this};function p(e,t){return 0!==e&&(this.x=this.x%e),0!==t&&(this.y=this.y%t),this}function u(e,t,r){return 0!==e&&(this.x=this.x%e),0!==t&&(this.y=this.y%t),0!==r&&(this.z=this.z%r),this}l.default.Vector.prototype.rem=function(e,t,r){if(e instanceof l.default.Vector){if(Number.isFinite(e.x)&&Number.isFinite(e.y)&&Number.isFinite(e.z)){var n=parseFloat(e.x),a=parseFloat(e.y),o=parseFloat(e.z);u.call(this,n,a,o);}}else if(e instanceof Array)e.every(function(e){return Number.isFinite(e)})&&(2===e.length&&p.call(this,e[0],e[1]),3===e.length&&u.call(this,e[0],e[1],e[2]));else if(1===arguments.length){if(Number.isFinite(e)&&0!==e)return this.x=this.x%e,this.y=this.y%e,this.z=this.z%e,this}else if(2===arguments.length){var i=Array.prototype.slice.call(arguments);i.every(function(e){return Number.isFinite(e)})&&2===i.length&&p.call(this,i[0],i[1]);}else if(3===arguments.length){var s=Array.prototype.slice.call(arguments);s.every(function(e){return Number.isFinite(e)})&&3===s.length&&u.call(this,s[0],s[1],s[2]);}},l.default.Vector.prototype.sub=function(e,t,r){return e instanceof l.default.Vector?(this.x-=e.x||0,this.y-=e.y||0,this.z-=e.z||0):e instanceof Array?(this.x-=e[0]||0,this.y-=e[1]||0,this.z-=e[2]||0):(this.x-=e||0,this.y-=t||0,this.z-=r||0),this},l.default.Vector.prototype.mult=function(e,t,r){if(e instanceof l.default.Vector)return Number.isFinite(e.x)&&Number.isFinite(e.y)&&Number.isFinite(e.z)&&"number"==typeof e.x&&"number"==typeof e.y&&"number"==typeof e.z?(this.x*=e.x,this.y*=e.y,this.z*=e.z):console.warn("p5.Vector.prototype.mult:","x contains components that are either undefined or not finite numbers"),this;if(e instanceof Array)return e.every(function(e){return Number.isFinite(e)})&&e.every(function(e){return "number"==typeof e})?1===e.length?(this.x*=e[0],this.y*=e[0],this.z*=e[0]):2===e.length?(this.x*=e[0],this.y*=e[1]):3===e.length&&(this.x*=e[0],this.y*=e[1],this.z*=e[2]):console.warn("p5.Vector.prototype.mult:","x contains elements that are either undefined or not finite numbers"),this;var n=Array.prototype.slice.call(arguments);return n.every(function(e){return Number.isFinite(e)})&&n.every(function(e){return "number"==typeof e})?(1===arguments.length&&(this.x*=e,this.y*=e,this.z*=e),2===arguments.length&&(this.x*=e,this.y*=t),3===arguments.length&&(this.x*=e,this.y*=t,this.z*=r)):console.warn("p5.Vector.prototype.mult:","x, y, or z arguments are either undefined or not a finite number"),this},l.default.Vector.prototype.div=function(e,t,r){if(e instanceof l.default.Vector){if(Number.isFinite(e.x)&&Number.isFinite(e.y)&&Number.isFinite(e.z)&&"number"==typeof e.x&&"number"==typeof e.y&&"number"==typeof e.z){if(0===e.x||0===e.y||0===e.z)return console.warn("p5.Vector.prototype.div:","divide by 0"),this;this.x/=e.x,this.y/=e.y,this.z/=e.z;}else console.warn("p5.Vector.prototype.div:","x contains components that are either undefined or not finite numbers");return this}if(e instanceof Array){if(e.every(function(e){return Number.isFinite(e)})&&e.every(function(e){return "number"==typeof e})){if(e.some(function(e){return 0===e}))return console.warn("p5.Vector.prototype.div:","divide by 0"),this;1===e.length?(this.x/=e[0],this.y/=e[0],this.z/=e[0]):2===e.length?(this.x/=e[0],this.y/=e[1]):3===e.length&&(this.x/=e[0],this.y/=e[1],this.z/=e[2]);}else console.warn("p5.Vector.prototype.div:","x contains components that are either undefined or not finite numbers");return this}var n=Array.prototype.slice.call(arguments);if(n.every(function(e){return Number.isFinite(e)})&&n.every(function(e){return "number"==typeof e})){if(n.some(function(e){return 0===e}))return console.warn("p5.Vector.prototype.div:","divide by 0"),this;1===arguments.length&&(this.x/=e,this.y/=e,this.z/=e),2===arguments.length&&(this.x/=e,this.y/=t),3===arguments.length&&(this.x/=e,this.y/=t,this.z/=r);}else console.warn("p5.Vector.prototype.div:","x, y, or z arguments are either undefined or not a finite number");return this},l.default.Vector.prototype.mag=function(){return Math.sqrt(this.magSq())},l.default.Vector.prototype.magSq=function(){var e=this.x,t=this.y,r=this.z;return e*e+t*t+r*r},l.default.Vector.prototype.dot=function(e,t,r){return e instanceof l.default.Vector?this.dot(e.x,e.y,e.z):this.x*(e||0)+this.y*(t||0)+this.z*(r||0)},l.default.Vector.prototype.cross=function(e){var t=this.y*e.z-this.z*e.y,r=this.z*e.x-this.x*e.z,n=this.x*e.y-this.y*e.x;return this.p5?new l.default.Vector(this.p5,[t,r,n]):new l.default.Vector(t,r,n)},l.default.Vector.prototype.dist=function(e){return e.copy().sub(this).mag()},l.default.Vector.prototype.normalize=function(){var e=this.mag();return 0!==e&&this.mult(1/e),this},l.default.Vector.prototype.limit=function(e){var t=this.magSq();return e*e<t&&this.div(Math.sqrt(t)).mult(e),this},l.default.Vector.prototype.setMag=function(e){return this.normalize().mult(e)},l.default.Vector.prototype.heading=function(){var e=Math.atan2(this.y,this.x);return this.p5?this.p5._fromRadians(e):e},l.default.Vector.prototype.rotate=function(e){var t=this.heading()+e;this.p5&&(t=this.p5._toRadians(t));var r=this.mag();return this.x=Math.cos(t)*r,this.y=Math.sin(t)*r,this},l.default.Vector.prototype.angleBetween=function(e){var t,r=this.dot(e)/(this.mag()*e.mag());return t=Math.acos(Math.min(1,Math.max(-1,r))),t*=Math.sign(this.cross(e).z||1),this.p5&&(t=this.p5._fromRadians(t)),t},l.default.Vector.prototype.lerp=function(e,t,r,n){return e instanceof l.default.Vector?this.lerp(e.x,e.y,e.z,t):(this.x+=(e-this.x)*n||0,this.y+=(t-this.y)*n||0,this.z+=(r-this.z)*n||0,this)},l.default.Vector.prototype.reflect=function(e){return e.normalize(),this.sub(e.mult(2*this.dot(e)))},l.default.Vector.prototype.array=function(){return [this.x||0,this.y||0,this.z||0]},l.default.Vector.prototype.equals=function(e,t,r){var n,a,o;return o=e instanceof l.default.Vector?(n=e.x||0,a=e.y||0,e.z||0):e instanceof Array?(n=e[0]||0,a=e[1]||0,e[2]||0):(n=e||0,a=t||0,r||0),this.x===n&&this.y===a&&this.z===o},l.default.Vector.fromAngle=function(e,t){return void 0===t&&(t=1),new l.default.Vector(t*Math.cos(e),t*Math.sin(e),0)},l.default.Vector.fromAngles=function(e,t,r){void 0===r&&(r=1);var n=Math.cos(t),a=Math.sin(t),o=Math.cos(e),i=Math.sin(e);return new l.default.Vector(r*i*a,-r*o,r*i*n)},l.default.Vector.random2D=function(){return this.fromAngle(Math.random()*o.TWO_PI)},l.default.Vector.random3D=function(){var e=Math.random()*o.TWO_PI,t=2*Math.random()-1,r=Math.sqrt(1-t*t),n=r*Math.cos(e),a=r*Math.sin(e);return new l.default.Vector(n,a,t)},l.default.Vector.add=function(e,t,r){return r?r.set(e):(r=e.copy(),3===arguments.length&&l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector","p5.Vector.add")),r.add(t),r},l.default.Vector.rem=function(e,t){if(e instanceof l.default.Vector&&t instanceof l.default.Vector){var r=e.copy();return r.rem(t),r}},l.default.Vector.sub=function(e,t,r){return r?r.set(e):(r=e.copy(),3===arguments.length&&l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector","p5.Vector.sub")),r.sub(t),r},l.default.Vector.mult=function(e,t,r){return r?r.set(e):(r=e.copy(),3===arguments.length&&l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector","p5.Vector.mult")),r.mult(t),r},l.default.Vector.div=function(e,t,r){return r?r.set(e):(r=e.copy(),3===arguments.length&&l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector","p5.Vector.div")),r.div(t),r},l.default.Vector.dot=function(e,t){return e.dot(t)},l.default.Vector.cross=function(e,t){return e.cross(t)},l.default.Vector.dist=function(e,t){return e.dist(t)},l.default.Vector.lerp=function(e,t,r,n){return n?n.set(e):(n=e.copy(),4===arguments.length&&l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector","p5.Vector.lerp")),n.lerp(t,r),n},l.default.Vector.mag=function(e){var t=e.x,r=e.y,n=e.z,a=t*t+r*r+n*n;return Math.sqrt(a)};var a=l.default.Vector;r.default=a;},{"../core/constants":22,"../core/main":32}],66:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};var o="_lcg_random_state",i=4294967296,s=0;a.default.prototype._lcg=function(e){return this[e]=(1664525*this[e]+1013904223)%i,this[e]/i},a.default.prototype._lcgSetSeed=function(e,t){this[e]=(null==t?Math.random()*i:t)>>>0;},a.default.prototype.randomSeed=function(e){this._lcgSetSeed(o,e),this._gaussian_previous=!1;},a.default.prototype.random=function(e,t){var r;if(a.default._validateParameters("random",arguments),r=null!=this[o]?this._lcg(o):Math.random(),void 0===e)return r;if(void 0===t)return e instanceof Array?e[Math.floor(r*e.length)]:r*e;if(t<e){var n=e;e=t,t=n;}return r*(t-e)+e},a.default.prototype.randomGaussian=function(e,t){var r,n,a,o;if(this._gaussian_previous)r=s,this._gaussian_previous=!1;else {for(;1<=(o=(n=this.random(2)-1)*n+(a=this.random(2)-1)*a););r=n*(o=Math.sqrt(-2*Math.log(o)/o)),s=a*o,this._gaussian_previous=!0;}return r*(t||1)+(e||0)};var l=a.default;r.default=l;},{"../core/main":32}],67:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n},o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}a.default.prototype._angleMode=o.RADIANS,a.default.prototype.acos=function(e){return this._fromRadians(Math.acos(e))},a.default.prototype.asin=function(e){return this._fromRadians(Math.asin(e))},a.default.prototype.atan=function(e){return this._fromRadians(Math.atan(e))},a.default.prototype.atan2=function(e,t){return this._fromRadians(Math.atan2(e,t))},a.default.prototype.cos=function(e){return Math.cos(this._toRadians(e))},a.default.prototype.sin=function(e){return Math.sin(this._toRadians(e))},a.default.prototype.tan=function(e){return Math.tan(this._toRadians(e))},a.default.prototype.degrees=function(e){return e*o.RAD_TO_DEG},a.default.prototype.radians=function(e){return e*o.DEG_TO_RAD},a.default.prototype.angleMode=function(e){e!==o.DEGREES&&e!==o.RADIANS||(this._angleMode=e);},a.default.prototype._toRadians=function(e){return this._angleMode===o.DEGREES?e*o.DEG_TO_RAD:e},a.default.prototype._toDegrees=function(e){return this._angleMode===o.RADIANS?e*o.RAD_TO_DEG:e},a.default.prototype._fromRadians=function(e){return this._angleMode===o.DEGREES?e*o.RAD_TO_DEG:e};var l=a.default;r.default=l;},{"../core/constants":22,"../core/main":32}],68:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.textAlign=function(e,t){var r;return a.default._validateParameters("textAlign",arguments),(r=this._renderer).textAlign.apply(r,arguments)},a.default.prototype.textLeading=function(e){var t;return a.default._validateParameters("textLeading",arguments),(t=this._renderer).textLeading.apply(t,arguments)},a.default.prototype.textSize=function(e){var t;return a.default._validateParameters("textSize",arguments),(t=this._renderer).textSize.apply(t,arguments)},a.default.prototype.textStyle=function(e){var t;return a.default._validateParameters("textStyle",arguments),(t=this._renderer).textStyle.apply(t,arguments)},a.default.prototype.textWidth=function(){for(var e,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r[0]+="",a.default._validateParameters("textWidth",r),0===r[0].length?0:(e=this._renderer).textWidth.apply(e,r)},a.default.prototype.textAscent=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return a.default._validateParameters("textAscent",t),this._renderer.textAscent()},a.default.prototype.textDescent=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return a.default._validateParameters("textDescent",t),this._renderer.textDescent()},a.default.prototype._updateTextMetrics=function(){return this._renderer._updateTextMetrics()};var o=a.default;r.default=o;},{"../core/main":32}],69:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,d=(n=e("../core/main"))&&n.__esModule?n:{default:n},a=l(e("../core/constants")),o=l(e("opentype.js"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function l(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}return r.default=e,t&&t.set(e,r),r}e("../core/friendly_errors/validate_params"),e("../core/friendly_errors/file_errors"),e("../core/friendly_errors/fes_core"),d.default.prototype.loadFont=function(s,l,p){d.default._validateParameters("loadFont",arguments);var u=new d.default.Font(this),c=this;return o.load(s,function(e,t){if(e)return d.default._friendlyFileLoadError(4,s),void 0!==p?p(e):void console.error(e,s);u.font=t,void 0!==l&&l(u),c._decrementPreload();var r,n,a=s.split("\\").pop().split("/").pop(),o=a.lastIndexOf("."),i=o<1?null:a.substr(o+1);["ttf","otf","woff","woff2"].includes(i)&&(r=a.substr(0,o),(n=document.createElement("style")).appendChild(document.createTextNode("\n@font-face {\nfont-family: ".concat(r,";\nsrc: url(").concat(s,");\n}\n"))),document.head.appendChild(n));}),u},d.default.prototype.text=function(e,t,r,n,a){var o;return d.default._validateParameters("text",arguments),this._renderer._doFill||this._renderer._doStroke?(o=this._renderer).text.apply(o,arguments):this},d.default.prototype.textFont=function(e,t){if(d.default._validateParameters("textFont",arguments),arguments.length){if(!e)throw new Error("null font passed to textFont");return this._renderer._setProperty("_textFont",e),t&&(this._renderer._setProperty("_textSize",t),this._renderer._setProperty("_textLeading",t*a._DEFAULT_LEADMULT)),this._renderer._applyTextProperties()}return this._renderer._textFont};var p=d.default;r.default=p;},{"../core/constants":22,"../core/friendly_errors/fes_core":24,"../core/friendly_errors/file_errors":25,"../core/friendly_errors/validate_params":27,"../core/main":32,"opentype.js":13}],70:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n},x=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==h(e)&&"function"!=typeof e)return {default:e};var t=i();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function h(e){return (h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var r=function(e,t){if("object"!==h(e))e=t;else for(var r in t)void 0===e[r]&&(e[r]=t[r]);return e}(t,{sampleFactor:.1,simplifyThreshold:0}),n=l(e,0,1),a=n/(n*r.sampleFactor),o=[],i=0;i<n;i+=a)o.push(l(e,i));return r.simplifyThreshold&&function(e){for(var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,r=0,n=e.length-1;3<e.length&&0<=n;--n)d(s(e,n-1),s(e,n),s(e,n+1),t)&&(e.splice(n%e.length,1),r++);}(o,r.simplifyThreshold),o}function f(e){for(var t,r=[],n=0;n<e.length;n++)"M"===e[n].type&&(t&&r.push(t),t=[]),t.push(o(e[n]));return r.push(t),r}function o(e){var t=[e.type];return "M"===e.type||"L"===e.type?t.push(e.x,e.y):"C"===e.type?t.push(e.x1,e.y1,e.x2,e.y2,e.x,e.y):"Q"===e.type&&t.push(e.x1,e.y1,e.x,e.y),t}function s(e,t){var r=e.length;return e[t<0?t%r+r:t%r]}function d(e,t,r,n){if(!n)return 0==(a=e,i=r,((o=t)[0]-a[0])*(i[1]-a[1])-(i[0]-a[0])*(o[1]-a[1]));var a,o,i;void 0===d.tmpPoint1&&(d.tmpPoint1=[],d.tmpPoint2=[]);var s=d.tmpPoint1,l=d.tmpPoint2;s.x=t.x-e.x,s.y=t.y-e.y,l.x=r.x-t.x,l.y=r.y-t.y;var p=s.x*l.x+s.y*l.y,u=Math.sqrt(s.x*s.x+s.y*s.y),c=Math.sqrt(l.x*l.x+l.y*l.y);return Math.acos(p/(u*c))<n}function c(e,t,r,n,a,o,i,s,l){var p=1-l,u=Math.pow(p,3),c=Math.pow(p,2),d=l*l,h=d*l,m=u*e+3*c*l*r+3*p*l*l*a+h*i,f=u*t+3*c*l*n+3*p*l*l*o+h*s,y=e+2*l*(r-e)+d*(a-2*r+e),g=t+2*l*(n-t)+d*(o-2*n+t),v=r+2*l*(a-r)+d*(i-2*a+r),b=n+2*l*(o-n)+d*(s-2*o+n),_=p*e+l*r,x=p*t+l*n,S=p*a+l*i,w=p*o+l*s,M=90-180*Math.atan2(y-v,g-b)/Math.PI;return (v<y||g<b)&&(M+=180),{x:m,y:f,m:{x:y,y:g},n:{x:v,y:b},start:{x:_,y:x},end:{x:S,y:w},alpha:M}}function y(e,t,r,n,a,o,i,s,l){return null==l?g(e,t,r,n,a,o,i,s):c(e,t,r,n,a,o,i,s,function(e,t,r,n,a,o,i,s,l){if(l<0||g(e,t,r,n,a,o,i,s)<l)return;var p,u=.5,c=1-u;p=g(e,t,r,n,a,o,i,s,c);for(;.01<Math.abs(p-l);)p=g(e,t,r,n,a,o,i,s,c+=(p<l?1:-1)*(u/=2));return c}(e,t,r,n,a,o,i,s,l))}function l(e,t,r){for(var n,a,o,i,s,l=0,p=0,u=(e=function(e,t){function r(e,t,r){var n,a;if(!e)return ["C",t.x,t.y,t.x,t.y,t.x,t.y];switch(e[0]in{T:1,Q:1}||(t.qx=t.qy=null),e[0]){case"M":t.X=e[1],t.Y=e[2];break;case"A":e=["C"].concat(function e(t,r,n,a,o,i,s,l,p,u){var c=Math.PI;var d=120*c/180;var h;var m;var f;var y;var g=c/180*(+o||0);var v=[];var b;var _=function(e,t,r){var n=e*Math.cos(r)-t*Math.sin(r),a=e*Math.sin(r)+t*Math.cos(r);return {x:n,y:a}};if(u)h=u[0],m=u[1],f=u[2],y=u[3];else {b=_(t,r,-g),t=b.x,r=b.y,b=_(l,p,-g),l=b.x,p=b.y;var x=(t-l)/2,S=(r-p)/2,w=x*x/(n*n)+S*S/(a*a);1<w&&(w=Math.sqrt(w),n*=w,a*=w);var M=n*n,E=a*a,T=(i===s?-1:1)*Math.sqrt(Math.abs((M*E-M*S*S-E*x*x)/(M*S*S+E*x*x)));f=T*n*S/a+(t+l)/2,y=T*-a*x/n+(r+p)/2,h=Math.asin(((r-y)/a).toFixed(9)),m=Math.asin(((p-y)/a).toFixed(9)),(h=t<f?c-h:h)<0&&(h=2*c+h),(m=l<f?c-m:m)<0&&(m=2*c+m),s&&m<h&&(h-=2*c),!s&&h<m&&(m-=2*c);}var C=m-h;if(Math.abs(C)>d){var N=m,O=l,L=p;m=h+d*(s&&h<m?1:-1),l=f+n*Math.cos(m),p=y+a*Math.sin(m),v=e(l,p,n,a,o,0,s,O,L,[m,N,f,y]);}C=m-h;var I=Math.cos(h),P=Math.sin(h),R=Math.cos(m),D=Math.sin(m),A=Math.tan(C/4),k=4/3*n*A,F=4/3*a*A,U=[t,r],B=[t+k*P,r-F*I],G=[l+k*D,p-F*R],j=[l,p];B[0]=2*U[0]-B[0];B[1]=2*U[1]-B[1];{if(u)return [B,G,j].concat(v);v=[B,G,j].concat(v).join().split(",");for(var V=[],z=0,H=v.length;z<H;z++)V[z]=z%2?_(v[z-1],v[z],g).y:_(v[z],v[z+1],g).x;return V}}.apply(0,[t.x,t.y].concat(e.slice(1))));break;case"S":a="C"===r||"S"===r?(n=2*t.x-t.bx,2*t.y-t.by):(n=t.x,t.y),e=["C",n,a].concat(e.slice(1));break;case"T":"Q"===r||"T"===r?(t.qx=2*t.x-t.qx,t.qy=2*t.y-t.qy):(t.qx=t.x,t.qy=t.y),e=["C"].concat(w(t.x,t.y,t.qx,t.qy,e[1],e[2]));break;case"Q":t.qx=e[1],t.qy=e[2],e=["C"].concat(w(t.x,t.y,e[1],e[2],e[3],e[4]));break;case"L":e=["C"].concat(S(t.x,t.y,e[1],e[2]));break;case"H":e=["C"].concat(S(t.x,t.y,e[1],t.y));break;case"V":e=["C"].concat(S(t.x,t.y,t.x,e[1]));break;case"Z":e=["C"].concat(S(t.x,t.y,t.X,t.Y));}return e}function n(e,t){if(7<e[t].length){e[t].shift();for(var r=e[t];r.length;)u[t]="A",s&&(c[t]="A"),e.splice(t++,0,["C"].concat(r.splice(0,6)));e.splice(t,1),o=Math.max(i.length,s&&s.length||0);}}function a(e,t,r,n,a){e&&t&&"M"===e[a][0]&&"M"!==t[a][0]&&(t.splice(a,0,["M",n.x,n.y]),r.bx=0,r.by=0,r.x=e[a][1],r.y=e[a][2],o=Math.max(i.length,s&&s.length||0));}var o,i=b(e),s=t&&b(t),l={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},p={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},u=[],c=[],d="",h="";o=Math.max(i.length,s&&s.length||0);for(var m=0;m<o;m++){i[m]&&(d=i[m][0]),"C"!==d&&(u[m]=d,m&&(h=u[m-1])),i[m]=r(i[m],l,h),"A"!==u[m]&&"C"===d&&(u[m]="C"),n(i,m),s&&(s[m]&&(d=s[m][0]),"C"!==d&&(c[m]=d,m&&(h=c[m-1])),s[m]=r(s[m],p,h),"A"!==c[m]&&"C"===d&&(c[m]="C"),n(s,m)),a(i,s,l,p,m),a(s,i,p,l,m);var f=i[m],y=s&&s[m],g=f.length,v=s&&y.length;l.x=f[g-2],l.y=f[g-1],l.bx=parseFloat(f[g-4])||l.x,l.by=parseFloat(f[g-3])||l.y,p.bx=s&&(parseFloat(y[v-4])||p.x),p.by=s&&(parseFloat(y[v-3])||p.y),p.x=s&&y[v-2],p.y=s&&y[v-1];}return s?[i,s]:i}(e)).length;p<u;p++){if("M"===(o=e[p])[0])n=+o[1],a=+o[2];else {if(t<l+(i=y(n,a,o[1],o[2],o[3],o[4],o[5],o[6]))&&!r)return {x:(s=y(n,a,o[1],o[2],o[3],o[4],o[5],o[6],t-l)).x,y:s.y,alpha:s.alpha};l+=i,n=+o[5],a=+o[6];}o.shift()+o;}return (s=r?l:c(n,a,o[0],o[1],o[2],o[3],o[4],o[5],1)).alpha&&(s={x:s.x,y:s.y,alpha:s.alpha}),s}function b(e){var t,r=[],n=0,a=0,o=0,i=0,s=0;if(!e)return r;"M"===e[0][0]&&(o=n=+e[0][1],i=a=+e[0][2],s++,r[0]=["M",n,a]);for(var l,p,u=3===e.length&&"M"===e[0][0]&&"R"===e[1][0].toUpperCase()&&"Z"===e[2][0].toUpperCase(),c=s,d=e.length;c<d;c++){if(r.push(l=[]),(p=e[c])[0]!==String.prototype.toUpperCase.call(p[0]))switch(l[0]=String.prototype.toUpperCase.call(p[0]),l[0]){case"A":l[1]=p[1],l[2]=p[2],l[3]=p[3],l[4]=p[4],l[5]=p[5],l[6]=+(p[6]+n),l[7]=+(p[7]+a);break;case"V":l[1]=+p[1]+a;break;case"H":l[1]=+p[1]+n;break;case"R":for(var h=2,m=(t=[n,a].concat(p.slice(1))).length;h<m;h++)t[h]=+t[h]+n,t[++h]=+t[h]+a;r.pop(),r=r.concat(_(t,u));break;case"M":o=+p[1]+n,i=+p[2]+a;break;default:for(var f=1,y=p.length;f<y;f++)l[f]=+p[f]+(f%2?n:a);}else if("R"===p[0])t=[n,a].concat(p.slice(1)),r.pop(),r=r.concat(_(t,u)),l=["R"].concat(p.slice(-2));else for(var g=0,v=p.length;g<v;g++)l[g]=p[g];switch(l[0]){case"Z":n=o,a=i;break;case"H":n=l[1];break;case"V":a=l[1];break;case"M":o=l[l.length-2],i=l[l.length-1];break;default:n=l[l.length-2],a=l[l.length-1];}}return r}function _(e,t){for(var r=[],n=0,a=e.length;n<a-2*!t;n+=2){var o=[{x:+e[n-2],y:+e[n-1]},{x:+e[n],y:+e[n+1]},{x:+e[n+2],y:+e[n+3]},{x:+e[n+4],y:+e[n+5]}];t?n?a-4===n?o[3]={x:+e[0],y:+e[1]}:a-2===n&&(o[2]={x:+e[0],y:+e[1]},o[3]={x:+e[2],y:+e[3]}):o[0]={x:+e[a-2],y:+e[a-1]}:a-4===n?o[3]=o[2]:n||(o[0]={x:+e[n],y:+e[n+1]}),r.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y]);}return r}function S(e,t,r,n){return [e,t,r,n,r,n]}function w(e,t,r,n,a,o){return [1/3*e+2/3*r,1/3*t+2/3*n,1/3*a+2/3*r,1/3*o+2/3*n,a,o]}function g(e,t,r,n,a,o,i,s,l){null==l&&(l=1);for(var p=(l=1<l?1:l<0?0:l)/2,u=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],c=0,d=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],h=0;h<12;h++){var m=p*u[h]+p,f=v(m,e,r,a,i),y=v(m,t,n,o,s),g=f*f+y*y;c+=d[h]*Math.sqrt(g);}return p*c}function v(e,t,r,n,a){return e*(e*(-3*t+9*r-9*n+3*a)+6*t-12*r+6*n)-3*t+3*r}a.default.Font=function(e){this.parent=e,this.cache={},this.font=void 0;},a.default.Font.prototype.textBounds=function(e){var t,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,a=3<arguments.length?arguments[3]:void 0,o=4<arguments.length?arguments[4]:void 0,i=o&&o.renderer&&o.renderer._pInst||this.parent,s=i._renderer.drawingContext;s.textAlign||x.LEFT,s.textBaseline||x.BASELINE;if(a=a||i._renderer._textSize,!t){var l,p,u=[],c=[],d=[];d[0]=[];var h=[],m=this._scale(a),f=i._renderer.textLeading(),y=0;this.font.forEachGlyph(e,r,n,a,o,function(e,t,r,n){var a=e.getMetrics();0===e.index||10===e.index?d[y+=1]=[]:(d[y].push(t+a.xMin*m),d[y].push(t+a.xMax*m),h.push(r+y*f+-a.yMin*m),h.push(r+y*f+-a.yMax*m));}),0<d[y].length&&(u[y]=Math.min.apply(null,d[y]),c[y]=Math.max.apply(null,d[y]));for(var g=0,v=0;v<=y;v++){u[v]=Math.min.apply(null,d[v]),c[v]=Math.max.apply(null,d[v]);var b=c[v]-u[v];g<b&&(g=b);}var _=Math.min.apply(null,u);t={x:_,y:l=Math.min.apply(null,h),h:Math.max.apply(null,h)-l,w:g,advance:_-r},p=this._handleAlignment(i._renderer,e,t.x,t.y,t.w+t.advance),t.x=p.x,t.y=p.y;}return t},a.default.Font.prototype.textToPoints=function(e,t,r,n,a){var o,i=0,s=[],l=this._getGlyphs(e);n=n||this.parent._renderer._textSize;for(var p=0;p<l.length;p++){if(!(l[o=p].name&&"space"===l[o].name||e.length===l.length&&" "===e[o]||l[o].index&&3===l[o].index))for(var u=f(l[p].getPath(t,r,n).commands),c=0;c<u.length;c++)for(var d=m(u[c],a),h=0;h<d.length;h++)d[h].x+=i,s.push(d[h]);i+=l[p].advanceWidth*this._scale(n);}return s},a.default.Font.prototype._getGlyphs=function(e){return this.font.stringToGlyphs(e)},a.default.Font.prototype._getPath=function(e,t,r,n){var a=(n&&n.renderer&&n.renderer._pInst||this.parent)._renderer,o=this._handleAlignment(a,e,t,r);return this.font.getPath(e,o.x,o.y,a._textSize,n)},a.default.Font.prototype._getPathData=function(e,t,r,n){var a=3;return "string"==typeof e&&2<arguments.length?e=this._getPath(e,t,r,n):"object"===h(t)&&(n=t),n&&"number"==typeof n.decimals&&(a=n.decimals),e.toPathData(a)},a.default.Font.prototype._getSVG=function(e,t,r,n){var a=3;return "string"==typeof e&&2<arguments.length?e=this._getPath(e,t,r,n):"object"===h(t)&&(n=t),n&&("number"==typeof n.decimals&&(a=n.decimals),"number"==typeof n.strokeWidth&&(e.strokeWidth=n.strokeWidth),void 0!==n.fill&&(e.fill=n.fill),void 0!==n.stroke&&(e.stroke=n.stroke)),e.toSVG(a)},a.default.Font.prototype._renderPath=function(e,t,r,n){var a,o=n&&n.renderer||this.parent._renderer,i=o.drawingContext;a="object"===h(e)&&e.commands?e.commands:this._getPath(e,t,r,n).commands,i.beginPath();var s=!0,l=!1,p=void 0;try{for(var u,c=a[Symbol.iterator]();!(s=(u=c.next()).done);s=!0){var d=u.value;"M"===d.type?i.moveTo(d.x,d.y):"L"===d.type?i.lineTo(d.x,d.y):"C"===d.type?i.bezierCurveTo(d.x1,d.y1,d.x2,d.y2,d.x,d.y):"Q"===d.type?i.quadraticCurveTo(d.x1,d.y1,d.x,d.y):"Z"===d.type&&i.closePath();}}catch(e){l=!0,p=e;}finally{try{s||null==c.return||c.return();}finally{if(l)throw p}}return o._doStroke&&o._strokeSet&&i.stroke(),o._doFill&&(o._fillSet||o._setFill(x._DEFAULT_TEXT_FILL),i.fill()),this},a.default.Font.prototype._textWidth=function(e,t){return this.font.getAdvanceWidth(e,t)},a.default.Font.prototype._textAscent=function(e){return this.font.ascender*this._scale(e)},a.default.Font.prototype._textDescent=function(e){return -this.font.descender*this._scale(e)},a.default.Font.prototype._scale=function(e){return 1/this.font.unitsPerEm*(e||this.parent._renderer._textSize)},a.default.Font.prototype._handleAlignment=function(e,t,r,n,a){var o=e._textSize;switch(void 0===a&&(a=this._textWidth(t,o)),e._textAlign){case x.CENTER:r-=a/2;break;case x.RIGHT:r-=a;}switch(e._textBaseline){case x.TOP:n+=this._textAscent(o);break;case x.CENTER:n+=this._textAscent(o)/2;break;case x.BOTTOM:n-=this._textDescent(o);}return {x:r,y:n}};var p=a.default;r.default=p;},{"../core/constants":22,"../core/main":32}],71:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.append=function(e,t){return e.push(t),e},a.default.prototype.arrayCopy=function(e,t,r,n,a){var o,i;e=void 0!==a?(i=Math.min(a,e.length),o=n,e.slice(t,i+t)):(i=void 0!==r?(i=r,Math.min(i,e.length)):e.length,o=0,r=t,e.slice(0,i)),Array.prototype.splice.apply(r,[o,i].concat(e));},a.default.prototype.concat=function(e,t){return e.concat(t)},a.default.prototype.reverse=function(e){return e.reverse()},a.default.prototype.shorten=function(e){return e.pop(),e},a.default.prototype.shuffle=function(e,t){for(var r,n,a=ArrayBuffer&&ArrayBuffer.isView&&ArrayBuffer.isView(e),o=(e=t||a?e:e.slice()).length;1<o;)r=this.random(0,1)*o|0,n=e[--o],e[o]=e[r],e[r]=n;return e},a.default.prototype.sort=function(e,t){var r=t?e.slice(0,Math.min(t,e.length)):e,n=t?e.slice(Math.min(t,e.length)):[];return (r="string"==typeof r[0]?r.sort():r.sort(function(e,t){return e-t})).concat(n)},a.default.prototype.splice=function(e,t,r){return Array.prototype.splice.apply(e,[r,0].concat(t)),e},a.default.prototype.subset=function(e,t,r){return void 0!==r?e.slice(t,t+r):e.slice(t,e.length)};var o=a.default;r.default=o;},{"../core/main":32}],72:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.float=function(e){return e instanceof Array?e.map(parseFloat):parseFloat(e)},a.default.prototype.int=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:10;return e===1/0||"Infinity"===e?1/0:e===-1/0||"-Infinity"===e?-1/0:"string"==typeof e?parseInt(e,t):"number"==typeof e?0|e:"boolean"==typeof e?e?1:0:e instanceof Array?e.map(function(e){return a.default.prototype.int(e,t)}):void 0},a.default.prototype.str=function(e){return e instanceof Array?e.map(a.default.prototype.str):String(e)},a.default.prototype.boolean=function(e){return "number"==typeof e?0!==e:"string"==typeof e?"true"===e.toLowerCase():"boolean"==typeof e?e:e instanceof Array?e.map(a.default.prototype.boolean):void 0},a.default.prototype.byte=function(e){var t=a.default.prototype.int(e,10);return "number"==typeof t?(t+128)%256-128:t instanceof Array?t.map(a.default.prototype.byte):void 0},a.default.prototype.char=function(e){return "number"!=typeof e||isNaN(e)?e instanceof Array?e.map(a.default.prototype.char):"string"==typeof e?a.default.prototype.char(parseInt(e,10)):void 0:String.fromCharCode(e)},a.default.prototype.unchar=function(e){return "string"==typeof e&&1===e.length?e.charCodeAt(0):e instanceof Array?e.map(a.default.prototype.unchar):void 0},a.default.prototype.hex=function(e,t){if(t=null==t?t=8:t,e instanceof Array)return e.map(function(e){return a.default.prototype.hex(e,t)});if(e===1/0||e===-1/0)return (e===1/0?"F":"0").repeat(t);if("number"==typeof e){e<0&&(e=4294967295+e+1);for(var r=Number(e).toString(16).toUpperCase();r.length<t;)r="0".concat(r);return r.length>=t&&(r=r.substring(r.length-t,r.length)),r}},a.default.prototype.unhex=function(e){return e instanceof Array?e.map(a.default.prototype.unhex):parseInt("0x".concat(e),16)};var o=a.default;r.default=o;},{"../core/main":32}],73:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=e("../core/main"))&&n.__esModule?n:{default:n};function a(e,t,r){var n=e<0,a=n?e.toString().substring(1):e.toString(),o=a.indexOf("."),i=-1!==o?a.substring(0,o):a,s=-1!==o?a.substring(o+1):"",l=n?"-":"";if(void 0!==r){var p="";(-1!==o||0<r-s.length)&&(p="."),s.length>r&&(s=s.substring(0,r));for(var u=0;u<t-i.length;u++)l+="0";l+=i,l+=p,l+=s;for(var c=0;c<r-s.length;c++)l+="0";return l}for(var d=0;d<Math.max(t-i.length,0);d++)l+="0";return l+=a}function o(e,t){var r=(e=e.toString()).indexOf("."),n=-1!==r?e.substring(r):"",a=-1!==r?e.substring(0,r):e;if(a=a.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),0===t)n="";else if(void 0!==t)if(t>n.length)for(var o=t-(n+=-1===r?".":"").length+1,i=0;i<o;i++)n+="0";else n=n.substring(0,t+1);return a+n}function s(e){return 0<parseFloat(e)?"+".concat(e.toString()):e.toString()}function l(e){return 0<=parseFloat(e)?" ".concat(e.toString()):e.toString()}e("../core/friendly_errors/validate_params"),e("../core/friendly_errors/file_errors"),e("../core/friendly_errors/fes_core"),i.default.prototype.join=function(e,t){return i.default._validateParameters("join",arguments),e.join(t)},i.default.prototype.match=function(e,t){return i.default._validateParameters("match",arguments),e.match(t)},i.default.prototype.matchAll=function(e,t){i.default._validateParameters("matchAll",arguments);for(var r=new RegExp(t,"g"),n=r.exec(e),a=[];null!==n;)a.push(n),n=r.exec(e);return a},i.default.prototype.nf=function(e,t,r){return i.default._validateParameters("nf",arguments),e instanceof Array?e.map(function(e){return a(e,t,r)}):"[object Arguments]"===Object.prototype.toString.call(e)?3===e.length?this.nf(e[0],e[1],e[2]):2===e.length?this.nf(e[0],e[1]):this.nf(e[0]):a(e,t,r)},i.default.prototype.nfc=function(e,t){return i.default._validateParameters("nfc",arguments),e instanceof Array?e.map(function(e){return o(e,t)}):o(e,t)},i.default.prototype.nfp=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];i.default._validateParameters("nfp",t);var n=i.default.prototype.nf.apply(this,t);return n instanceof Array?n.map(s):s(n)},i.default.prototype.nfs=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];i.default._validateParameters("nfs",t);var n=i.default.prototype.nf.apply(this,t);return n instanceof Array?n.map(l):l(n)},i.default.prototype.split=function(e,t){return i.default._validateParameters("split",arguments),e.split(t)},i.default.prototype.splitTokens=function(e,t){var r;if(i.default._validateParameters("splitTokens",arguments),void 0!==t){var n=t,a=/\]/g.exec(n),o=/\[/g.exec(n);r=o&&a?(n=n.slice(0,a.index)+n.slice(a.index+1),o=/\[/g.exec(n),n=n.slice(0,o.index)+n.slice(o.index+1),new RegExp("[\\[".concat(n,"\\]]"),"g")):a?(n=n.slice(0,a.index)+n.slice(a.index+1),new RegExp("[".concat(n,"\\]]"),"g")):o?(n=n.slice(0,o.index)+n.slice(o.index+1),new RegExp("[".concat(n,"\\[]"),"g")):new RegExp("[".concat(n,"]"),"g");}else r=/\s/g;return e.split(r).filter(function(e){return e})},i.default.prototype.trim=function(e){return i.default._validateParameters("trim",arguments),e instanceof Array?e.map(this.trim):e.trim()};var p=i.default;r.default=p;},{"../core/friendly_errors/fes_core":24,"../core/friendly_errors/file_errors":25,"../core/friendly_errors/validate_params":27,"../core/main":32}],74:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.prototype.day=function(){return (new Date).getDate()},a.default.prototype.hour=function(){return (new Date).getHours()},a.default.prototype.minute=function(){return (new Date).getMinutes()},a.default.prototype.millis=function(){return -1===this._millisStart?0:window.performance.now()-this._millisStart},a.default.prototype.month=function(){return (new Date).getMonth()+1},a.default.prototype.second=function(){return (new Date).getSeconds()},a.default.prototype.year=function(){return (new Date).getFullYear()};var o=a.default;r.default=o;},{"../core/main":32}],75:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,T=(n=e("../core/main"))&&n.__esModule?n:{default:n};e("./p5.Geometry");var h=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}T.default.prototype.plane=function(e,t,r,n){this._assert3d("plane"),T.default._validateParameters("plane",arguments),void 0===e&&(e=50),void 0===t&&(t=e),void 0===r&&(r=1),void 0===n&&(n=1);var a="plane|".concat(r,"|").concat(n);if(!this._renderer.geometryInHash(a)){var o=new T.default.Geometry(r,n,function(){for(var e,t,r,n=0;n<=this.detailY;n++){t=n/this.detailY;for(var a=0;a<=this.detailX;a++)e=a/this.detailX,r=new T.default.Vector(e-.5,t-.5,0),this.vertices.push(r),this.uvs.push(e,t);}});o.computeFaces().computeNormals(),r<=1&&n<=1?o._makeTriangleEdges()._edgesToVertices():this._renderer._doStroke&&console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY"),this._renderer.createBuffers(a,o);}return this._renderer.drawBuffersScaled(a,e,t,1),this},T.default.prototype.box=function(e,t,r,n,a){this._assert3d("box"),T.default._validateParameters("box",arguments),void 0===e&&(e=50),void 0===t&&(t=e),void 0===r&&(r=t);var o=this._renderer.attributes&&this._renderer.attributes.perPixelLighting;void 0===n&&(n=o?1:4),void 0===a&&(a=o?1:4);var i="box|".concat(n,"|").concat(a);if(!this._renderer.geometryInHash(i)){var s=new T.default.Geometry(n,a,function(){var e=[[0,4,2,6],[1,3,5,7],[0,1,4,5],[2,6,3,7],[0,2,1,3],[4,5,6,7]];this.strokeIndices=[[0,1],[1,3],[3,2],[6,7],[8,9],[9,11],[14,15],[16,17],[17,19],[18,19],[20,21],[22,23]];for(var t=0;t<e.length;t++){for(var r=e[t],n=4*t,a=0;a<4;a++){var o=r[a],i=new T.default.Vector((2*(1&o)-1)/2,((2&o)-1)/2,((4&o)/2-1)/2);this.vertices.push(i),this.uvs.push(1&a,(2&a)/2);}this.faces.push([n,1+n,2+n]),this.faces.push([2+n,1+n,3+n]);}});s.computeNormals(),n<=4&&a<=4?s._makeTriangleEdges()._edgesToVertices():this._renderer._doStroke&&console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY"),this._renderer.createBuffers(i,s);}return this._renderer.drawBuffersScaled(i,e,t,r),this},T.default.prototype.sphere=function(e,t,r){return this._assert3d("sphere"),T.default._validateParameters("sphere",arguments),void 0===e&&(e=50),void 0===t&&(t=24),void 0===r&&(r=16),this.ellipsoid(e,e,e,t,r),this};function l(e,t,r,n,a,o,i){e=e<=0?1:e,t=t<0?0:t,r=r<=0?e:r,n=n<3?3:n;var s,l,p,u=(o=void 0===o||o)?-2:0,c=(a=a<1?1:a)+((i=void 0===i?0!==t:i)?2:0),d=Math.atan2(e-t,r),h=Math.sin(d),m=Math.cos(d);for(s=u;s<=c;++s){var f=s/a,y=r*f,g=void 0;for(g=s<0?(f=y=0,e):a<s?(y=r,f=1,t):e+(t-e)*f,-2!==s&&s!==a+2||(g=0),y-=r/2,l=0;l<n;++l){var v=l/(n-1),b=2*Math.PI*v,_=Math.sin(b),x=Math.cos(b);this.vertices.push(new T.default.Vector(_*g,y,x*g));var S=void 0;S=s<0?new T.default.Vector(0,-1,0):a<s&&t?new T.default.Vector(0,1,0):new T.default.Vector(_*m,h,x*m),this.vertexNormals.push(S),this.uvs.push(v,f);}}var w=0;if(o){for(p=0;p<n;++p){var M=(p+1)%n;this.faces.push([w+p,w+n+M,w+n+p]);}w+=2*n;}for(s=0;s<a;++s){for(l=0;l<n;++l){var E=(l+1)%n;this.faces.push([w+l,w+E,w+n+E]),this.faces.push([w+l,w+n+E,w+n+l]);}w+=n;}if(i)for(w+=n,l=0;l<n;++l)this.faces.push([w+l,w+(l+1)%n,w+n]);}T.default.prototype.cylinder=function(e,t,r,n,a,o){this._assert3d("cylinder"),T.default._validateParameters("cylinder",arguments),void 0===e&&(e=50),void 0===t&&(t=e),void 0===r&&(r=24),void 0===n&&(n=1),void 0===o&&(o=!0),void 0===a&&(a=!0);var i="cylinder|".concat(r,"|").concat(n,"|").concat(a,"|").concat(o);if(!this._renderer.geometryInHash(i)){var s=new T.default.Geometry(r,n);l.call(s,1,1,1,r,n,a,o),r<=24&&n<=16?s._makeTriangleEdges()._edgesToVertices():this._renderer._doStroke&&console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY"),this._renderer.createBuffers(i,s);}return this._renderer.drawBuffersScaled(i,e,t,e),this},T.default.prototype.cone=function(e,t,r,n,a){this._assert3d("cone"),T.default._validateParameters("cone",arguments),void 0===e&&(e=50),void 0===t&&(t=e),void 0===r&&(r=24),void 0===n&&(n=1),void 0===a&&(a=!0);var o="cone|".concat(r,"|").concat(n,"|").concat(a);if(!this._renderer.geometryInHash(o)){var i=new T.default.Geometry(r,n);l.call(i,1,0,1,r,n,a,!1),r<=24&&n<=16?i._makeTriangleEdges()._edgesToVertices():this._renderer._doStroke&&console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY"),this._renderer.createBuffers(o,i);}return this._renderer.drawBuffersScaled(o,e,t,e),this},T.default.prototype.ellipsoid=function(e,t,r,n,a){this._assert3d("ellipsoid"),T.default._validateParameters("ellipsoid",arguments),void 0===e&&(e=50),void 0===t&&(t=e),void 0===r&&(r=e),void 0===n&&(n=24),void 0===a&&(a=16);var o="ellipsoid|".concat(n,"|").concat(a);if(!this._renderer.geometryInHash(o)){var i=new T.default.Geometry(n,a,function(){for(var e=0;e<=this.detailY;e++)for(var t=e/this.detailY,r=Math.PI*t-Math.PI/2,n=Math.cos(r),a=Math.sin(r),o=0;o<=this.detailX;o++){var i=o/this.detailX,s=2*Math.PI*i,l=Math.cos(s),p=Math.sin(s),u=new T.default.Vector(n*p,a,n*l);this.vertices.push(u),this.vertexNormals.push(u),this.uvs.push(i,t);}});i.computeFaces(),n<=24&&a<=24?i._makeTriangleEdges()._edgesToVertices():this._renderer._doStroke&&console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY"),this._renderer.createBuffers(o,i);}return this._renderer.drawBuffersScaled(o,e,t,r),this},T.default.prototype.torus=function(e,t,r,n){if(this._assert3d("torus"),T.default._validateParameters("torus",arguments),void 0===e)e=50;else if(!e)return;if(void 0===t)t=10;else if(!t)return;void 0===r&&(r=24),void 0===n&&(n=16);var h=(t/e).toPrecision(4),a="torus|".concat(h,"|").concat(r,"|").concat(n);if(!this._renderer.geometryInHash(a)){var o=new T.default.Geometry(r,n,function(){for(var e=0;e<=this.detailY;e++)for(var t=e/this.detailY,r=2*Math.PI*t,n=Math.cos(r),a=Math.sin(r),o=1+h*n,i=0;i<=this.detailX;i++){var s=i/this.detailX,l=2*Math.PI*s,p=Math.cos(l),u=Math.sin(l),c=new T.default.Vector(o*p,o*u,h*a),d=new T.default.Vector(n*p,n*u,a);this.vertices.push(c),this.vertexNormals.push(d),this.uvs.push(s,t);}});o.computeFaces(),r<=24&&n<=16?o._makeTriangleEdges()._edgesToVertices():this._renderer._doStroke&&console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY"),this._renderer.createBuffers(a,o);}return this._renderer.drawBuffersScaled(a,e,e,e),this},T.default.RendererGL.prototype.point=function(e,t,r){void 0===r&&(r=0);var n=[];return n.push(new T.default.Vector(e,t,r)),this._drawPoints(n,this.immediateMode.buffers.point),this},T.default.RendererGL.prototype.triangle=function(e){var t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],i=e[5];if(!this.geometryInHash("tri")){var s=new T.default.Geometry(1,1,function(){var e=[];e.push(new T.default.Vector(0,0,0)),e.push(new T.default.Vector(0,1,0)),e.push(new T.default.Vector(1,0,0)),this.strokeIndices=[[0,1],[1,2],[2,0]],this.vertices=e,this.faces=[[0,1,2]],this.uvs=[0,0,0,1,1,1];});s._makeTriangleEdges()._edgesToVertices(),s.computeNormals(),this.createBuffers("tri",s);}var l=this.uMVMatrix.copy();try{var p=new T.default.Matrix([n-t,a-r,0,0,o-t,i-r,0,0,0,0,1,0,t,r,0,1]).mult(this.uMVMatrix);this.uMVMatrix=p,this.drawBuffers("tri");}finally{this.uMVMatrix=l;}return this},T.default.RendererGL.prototype.ellipse=function(e){this.arc(e[0],e[1],e[2],e[3],0,h.TWO_PI,h.OPEN,e[4]);},T.default.RendererGL.prototype.arc=function(e){var t,r=e,n=arguments[1],a=arguments[2],o=arguments[3],i=arguments[4],s=arguments[5],l=arguments[6],p=arguments[7]||25;if(t=Math.abs(s-i)>=h.TWO_PI?"".concat("ellipse","|").concat(p,"|"):"".concat("arc","|").concat(i,"|").concat(s,"|").concat(l,"|").concat(p,"|"),!this.geometryInHash(t)){var u=new T.default.Geometry(p,1,function(){if(this.strokeIndices=[],i.toFixed(10)!==s.toFixed(10)){l!==h.PIE&&void 0!==l||(this.vertices.push(new T.default.Vector(.5,.5,0)),this.uvs.push([.5,.5]));for(var e=0;e<=p;e++){var t=(s-i)*(e/p)+i,r=.5+Math.cos(t)/2,n=.5+Math.sin(t)/2;this.vertices.push(new T.default.Vector(r,n,0)),this.uvs.push([r,n]),e<p-1&&(this.faces.push([0,e+1,e+2]),this.strokeIndices.push([e+1,e+2]));}switch(l){case h.PIE:this.faces.push([0,this.vertices.length-2,this.vertices.length-1]),this.strokeIndices.push([0,1]),this.strokeIndices.push([this.vertices.length-2,this.vertices.length-1]),this.strokeIndices.push([0,this.vertices.length-1]);break;case h.CHORD:this.strokeIndices.push([0,1]),this.strokeIndices.push([0,this.vertices.length-1]);break;case h.OPEN:this.strokeIndices.push([0,1]);break;default:this.faces.push([0,this.vertices.length-2,this.vertices.length-1]),this.strokeIndices.push([this.vertices.length-2,this.vertices.length-1]);}}});u.computeNormals(),p<=50?u._makeTriangleEdges()._edgesToVertices(u):this._renderer._doStroke&&console.log("Cannot stroke ${shape} with more than 50 detail"),this.createBuffers(t,u);}var c=this.uMVMatrix.copy();try{this.uMVMatrix.translate([r,n,0]),this.uMVMatrix.scale(a,o,1),this.drawBuffers(t);}finally{this.uMVMatrix=c;}return this},T.default.RendererGL.prototype.rect=function(e){var t=this._pInst._glAttributes.perPixelLighting,r=e[0],n=e[1],a=e[2],o=e[3],i=e[4]||(t?1:24),s=e[5]||(t?1:16),l="rect|".concat(i,"|").concat(s);if(!this.geometryInHash(l)){var p=new T.default.Geometry(i,s,function(){for(var e=0;e<=this.detailY;e++)for(var t=e/this.detailY,r=0;r<=this.detailX;r++){var n=r/this.detailX,a=new T.default.Vector(n,t,0);this.vertices.push(a),this.uvs.push(n,t);}0<i&&0<s&&(this.strokeIndices=[[0,i],[i,(i+1)*(s+1)-1],[(i+1)*(s+1)-1,(i+1)*s],[(i+1)*s,0]]);});p.computeFaces().computeNormals()._makeTriangleEdges()._edgesToVertices(),this.createBuffers(l,p);}var u=this.uMVMatrix.copy();try{this.uMVMatrix.translate([r,n,0]),this.uMVMatrix.scale(a,o,1),this.drawBuffers(l);}finally{this.uMVMatrix=u;}return this},T.default.RendererGL.prototype.quad=function(e,t,r,n,a,o,i,s,l,p,u,c){var d="quad|".concat(e,"|").concat(t,"|").concat(r,"|").concat(n,"|").concat(a,"|").concat(o,"|").concat(i,"|").concat(s,"|").concat(l,"|").concat(p,"|").concat(u,"|").concat(c);if(!this.geometryInHash(d)){var h=new T.default.Geometry(2,2,function(){this.vertices.push(new T.default.Vector(e,t,r)),this.vertices.push(new T.default.Vector(n,a,o)),this.vertices.push(new T.default.Vector(i,s,l)),this.vertices.push(new T.default.Vector(p,u,c)),this.uvs.push(0,0,1,0,1,1,0,1),this.strokeIndices=[[0,1],[1,2],[2,3],[3,0]];});h.computeNormals()._makeTriangleEdges()._edgesToVertices(),h.faces=[[0,1,2],[2,3,0]],this.createBuffers(d,h);}return this.drawBuffers(d),this},T.default.RendererGL.prototype.bezier=function(e,t,r,n,a,o,i,s,l,p,u,c){8===arguments.length&&(u=s,p=i,s=o,i=a,a=n,n=r,r=o=l=c=0);var d=this._pInst._bezierDetail||20;this.beginShape();for(var h=0;h<=d;h++){var m=Math.pow(1-h/d,3),f=h/d*3*Math.pow(1-h/d,2),y=3*Math.pow(h/d,2)*(1-h/d),g=Math.pow(h/d,3);this.vertex(e*m+n*f+i*y+p*g,t*m+a*f+s*y+u*g,r*m+o*f+l*y+c*g);}return this.endShape(),this},T.default.RendererGL.prototype.curve=function(e,t,r,n,a,o,i,s,l,p,u,c){8===arguments.length&&(p=i,u=s,i=a,s=n,a=n=r,r=o=l=c=0);var d=this._pInst._curveDetail;this.beginShape();for(var h=0;h<=d;h++){var m=.5*Math.pow(h/d,3),f=.5*Math.pow(h/d,2),y=h/d*.5,g=m*(3*n-e-3*i+p)+f*(2*e-5*n+4*i-p)+y*(-e+i)+2*n*.5,v=m*(3*a-t-3*s+u)+f*(2*t-5*a+4*s-u)+y*(-t+s)+2*a*.5,b=m*(3*o-r-3*l+c)+f*(2*r-5*o+4*l-c)+y*(-r+l)+2*o*.5;this.vertex(g,v,b);}return this.endShape(),this},T.default.RendererGL.prototype.line=function(){return 6===arguments.length?(this.beginShape(h.LINES),this.vertex(arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1],arguments.length<=2?void 0:arguments[2]),this.vertex(arguments.length<=3?void 0:arguments[3],arguments.length<=4?void 0:arguments[4],arguments.length<=5?void 0:arguments[5]),this.endShape()):4===arguments.length&&(this.beginShape(h.LINES),this.vertex(arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1],0),this.vertex(arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3],0),this.endShape()),this},T.default.RendererGL.prototype.bezierVertex=function(){if(0===this.immediateMode._bezierVertex.length)throw Error("vertex() must be used once before calling bezierVertex()");var e,t,r,n,a,o=[],i=[],s=[],l=arguments.length;if((e=0)===this._lookUpTableBezier.length||this._lutBezierDetail!==this._pInst._curveDetail){this._lookUpTableBezier=[],this._lutBezierDetail=this._pInst._curveDetail;for(var p=1/this._lutBezierDetail,u=0,c=1,d=0;u<1;){if(e=parseFloat(u.toFixed(6)),this._lookUpTableBezier[d]=this._bezierCoefficients(e),c.toFixed(6)===p.toFixed(6)){e=parseFloat(c.toFixed(6))+parseFloat(u.toFixed(6)),++d,this._lookUpTableBezier[d]=this._bezierCoefficients(e);break}u+=p,c-=p,++d;}}var h=this._lookUpTableBezier.length;if(6===l){for(this.isBezier=!0,o=[this.immediateMode._bezierVertex[0],arguments.length<=0?void 0:arguments[0],arguments.length<=2?void 0:arguments[2],arguments.length<=4?void 0:arguments[4]],i=[this.immediateMode._bezierVertex[1],arguments.length<=1?void 0:arguments[1],arguments.length<=3?void 0:arguments[3],arguments.length<=5?void 0:arguments[5]],a=0;a<h;a++)t=o[0]*this._lookUpTableBezier[a][0]+o[1]*this._lookUpTableBezier[a][1]+o[2]*this._lookUpTableBezier[a][2]+o[3]*this._lookUpTableBezier[a][3],r=i[0]*this._lookUpTableBezier[a][0]+i[1]*this._lookUpTableBezier[a][1]+i[2]*this._lookUpTableBezier[a][2]+i[3]*this._lookUpTableBezier[a][3],this.vertex(t,r);this.immediateMode._bezierVertex[0]=arguments.length<=4?void 0:arguments[4],this.immediateMode._bezierVertex[1]=arguments.length<=5?void 0:arguments[5];}else if(9===l){for(this.isBezier=!0,o=[this.immediateMode._bezierVertex[0],arguments.length<=0?void 0:arguments[0],arguments.length<=3?void 0:arguments[3],arguments.length<=6?void 0:arguments[6]],i=[this.immediateMode._bezierVertex[1],arguments.length<=1?void 0:arguments[1],arguments.length<=4?void 0:arguments[4],arguments.length<=7?void 0:arguments[7]],s=[this.immediateMode._bezierVertex[2],arguments.length<=2?void 0:arguments[2],arguments.length<=5?void 0:arguments[5],arguments.length<=8?void 0:arguments[8]],a=0;a<h;a++)t=o[0]*this._lookUpTableBezier[a][0]+o[1]*this._lookUpTableBezier[a][1]+o[2]*this._lookUpTableBezier[a][2]+o[3]*this._lookUpTableBezier[a][3],r=i[0]*this._lookUpTableBezier[a][0]+i[1]*this._lookUpTableBezier[a][1]+i[2]*this._lookUpTableBezier[a][2]+i[3]*this._lookUpTableBezier[a][3],n=s[0]*this._lookUpTableBezier[a][0]+s[1]*this._lookUpTableBezier[a][1]+s[2]*this._lookUpTableBezier[a][2]+s[3]*this._lookUpTableBezier[a][3],this.vertex(t,r,n);this.immediateMode._bezierVertex[0]=arguments.length<=6?void 0:arguments[6],this.immediateMode._bezierVertex[1]=arguments.length<=7?void 0:arguments[7],this.immediateMode._bezierVertex[2]=arguments.length<=8?void 0:arguments[8];}},T.default.RendererGL.prototype.quadraticVertex=function(){if(0===this.immediateMode._quadraticVertex.length)throw Error("vertex() must be used once before calling quadraticVertex()");var e,t,r,n,a,o=[],i=[],s=[],l=arguments.length;if((e=0)===this._lookUpTableQuadratic.length||this._lutQuadraticDetail!==this._pInst._curveDetail){this._lookUpTableQuadratic=[],this._lutQuadraticDetail=this._pInst._curveDetail;for(var p=1/this._lutQuadraticDetail,u=0,c=1,d=0;u<1;){if(e=parseFloat(u.toFixed(6)),this._lookUpTableQuadratic[d]=this._quadraticCoefficients(e),c.toFixed(6)===p.toFixed(6)){e=parseFloat(c.toFixed(6))+parseFloat(u.toFixed(6)),++d,this._lookUpTableQuadratic[d]=this._quadraticCoefficients(e);break}u+=p,c-=p,++d;}}var h=this._lookUpTableQuadratic.length;if(4===l){for(this.isQuadratic=!0,o=[this.immediateMode._quadraticVertex[0],arguments.length<=0?void 0:arguments[0],arguments.length<=2?void 0:arguments[2]],i=[this.immediateMode._quadraticVertex[1],arguments.length<=1?void 0:arguments[1],arguments.length<=3?void 0:arguments[3]],a=0;a<h;a++)t=o[0]*this._lookUpTableQuadratic[a][0]+o[1]*this._lookUpTableQuadratic[a][1]+o[2]*this._lookUpTableQuadratic[a][2],r=i[0]*this._lookUpTableQuadratic[a][0]+i[1]*this._lookUpTableQuadratic[a][1]+i[2]*this._lookUpTableQuadratic[a][2],this.vertex(t,r);this.immediateMode._quadraticVertex[0]=arguments.length<=2?void 0:arguments[2],this.immediateMode._quadraticVertex[1]=arguments.length<=3?void 0:arguments[3];}else if(6===l){for(this.isQuadratic=!0,o=[this.immediateMode._quadraticVertex[0],arguments.length<=0?void 0:arguments[0],arguments.length<=3?void 0:arguments[3]],i=[this.immediateMode._quadraticVertex[1],arguments.length<=1?void 0:arguments[1],arguments.length<=4?void 0:arguments[4]],s=[this.immediateMode._quadraticVertex[2],arguments.length<=2?void 0:arguments[2],arguments.length<=5?void 0:arguments[5]],a=0;a<h;a++)t=o[0]*this._lookUpTableQuadratic[a][0]+o[1]*this._lookUpTableQuadratic[a][1]+o[2]*this._lookUpTableQuadratic[a][2],r=i[0]*this._lookUpTableQuadratic[a][0]+i[1]*this._lookUpTableQuadratic[a][1]+i[2]*this._lookUpTableQuadratic[a][2],n=s[0]*this._lookUpTableQuadratic[a][0]+s[1]*this._lookUpTableQuadratic[a][1]+s[2]*this._lookUpTableQuadratic[a][2],this.vertex(t,r,n);this.immediateMode._quadraticVertex[0]=arguments.length<=3?void 0:arguments[3],this.immediateMode._quadraticVertex[1]=arguments.length<=4?void 0:arguments[4],this.immediateMode._quadraticVertex[2]=arguments.length<=5?void 0:arguments[5];}},T.default.RendererGL.prototype.curveVertex=function(){var e,t,r,n,a,o=[],i=[],s=[],l=arguments.length;if((e=0)===this._lookUpTableBezier.length||this._lutBezierDetail!==this._pInst._curveDetail){this._lookUpTableBezier=[],this._lutBezierDetail=this._pInst._curveDetail;for(var p=1/this._lutBezierDetail,u=0,c=1,d=0;u<1;){if(e=parseFloat(u.toFixed(6)),this._lookUpTableBezier[d]=this._bezierCoefficients(e),c.toFixed(6)===p.toFixed(6)){e=parseFloat(c.toFixed(6))+parseFloat(u.toFixed(6)),++d,this._lookUpTableBezier[d]=this._bezierCoefficients(e);break}u+=p,c-=p,++d;}}var h=this._lookUpTableBezier.length;if(2===l){if(this.immediateMode._curveVertex.push(arguments.length<=0?void 0:arguments[0]),this.immediateMode._curveVertex.push(arguments.length<=1?void 0:arguments[1]),8===this.immediateMode._curveVertex.length){for(this.isCurve=!0,o=this._bezierToCatmull([this.immediateMode._curveVertex[0],this.immediateMode._curveVertex[2],this.immediateMode._curveVertex[4],this.immediateMode._curveVertex[6]]),i=this._bezierToCatmull([this.immediateMode._curveVertex[1],this.immediateMode._curveVertex[3],this.immediateMode._curveVertex[5],this.immediateMode._curveVertex[7]]),a=0;a<h;a++)t=o[0]*this._lookUpTableBezier[a][0]+o[1]*this._lookUpTableBezier[a][1]+o[2]*this._lookUpTableBezier[a][2]+o[3]*this._lookUpTableBezier[a][3],r=i[0]*this._lookUpTableBezier[a][0]+i[1]*this._lookUpTableBezier[a][1]+i[2]*this._lookUpTableBezier[a][2]+i[3]*this._lookUpTableBezier[a][3],this.vertex(t,r);for(a=0;a<l;a++)this.immediateMode._curveVertex.shift();}}else if(3===l&&(this.immediateMode._curveVertex.push(arguments.length<=0?void 0:arguments[0]),this.immediateMode._curveVertex.push(arguments.length<=1?void 0:arguments[1]),this.immediateMode._curveVertex.push(arguments.length<=2?void 0:arguments[2]),12===this.immediateMode._curveVertex.length)){for(this.isCurve=!0,o=this._bezierToCatmull([this.immediateMode._curveVertex[0],this.immediateMode._curveVertex[3],this.immediateMode._curveVertex[6],this.immediateMode._curveVertex[9]]),i=this._bezierToCatmull([this.immediateMode._curveVertex[1],this.immediateMode._curveVertex[4],this.immediateMode._curveVertex[7],this.immediateMode._curveVertex[10]]),s=this._bezierToCatmull([this.immediateMode._curveVertex[2],this.immediateMode._curveVertex[5],this.immediateMode._curveVertex[8],this.immediateMode._curveVertex[11]]),a=0;a<h;a++)t=o[0]*this._lookUpTableBezier[a][0]+o[1]*this._lookUpTableBezier[a][1]+o[2]*this._lookUpTableBezier[a][2]+o[3]*this._lookUpTableBezier[a][3],r=i[0]*this._lookUpTableBezier[a][0]+i[1]*this._lookUpTableBezier[a][1]+i[2]*this._lookUpTableBezier[a][2]+i[3]*this._lookUpTableBezier[a][3],n=s[0]*this._lookUpTableBezier[a][0]+s[1]*this._lookUpTableBezier[a][1]+s[2]*this._lookUpTableBezier[a][2]+s[3]*this._lookUpTableBezier[a][3],this.vertex(t,r,n);for(a=0;a<l;a++)this.immediateMode._curveVertex.shift();}},T.default.RendererGL.prototype.image=function(e,t,r,n,a,o,i,s,l){this._isErasing&&this.blendMode(this._cachedBlendMode),this._pInst.push(),this._pInst.noLights(),this._pInst.texture(e),this._pInst.textureMode(h.NORMAL);var p=0;t<=e.width&&(p=t/e.width);var u=1;t+n<=e.width&&(u=(t+n)/e.width);var c=0;r<=e.height&&(c=r/e.height);var d=1;r+a<=e.height&&(d=(r+a)/e.height),this.beginShape(),this.vertex(o,i,0,p,c),this.vertex(o+s,i,0,u,c),this.vertex(o+s,i+l,0,u,d),this.vertex(o,i+l,0,p,d),this.endShape(h.CLOSE),this._pInst.pop(),this._isErasing&&this.blendMode(h.REMOVE);};var a=T.default;r.default=a;},{"../core/constants":22,"../core/main":32,"./p5.Geometry":81}],76:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,d=(n=e("../core/main"))&&n.__esModule?n:{default:n},a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}d.default.prototype.orbitControl=function(e,t,r){if(this._assert3d("orbitControl"),d.default._validateParameters("orbitControl",arguments),this.mouseX<this.width&&0<this.mouseX&&this.mouseY<this.height&&0<this.mouseY){var n=this._renderer._curCamera;void 0===e&&(e=1),void 0===t&&(t=e),void 0===r&&(r=.5),!0!==this.contextMenuDisabled&&(this.canvas.oncontextmenu=function(){return !1},this._setProperty("contextMenuDisabled",!0)),!0!==this.wheelDefaultDisabled&&(this.canvas.onwheel=function(){return !1},this._setProperty("wheelDefaultDisabled",!0));var a=this.height<this.width?this.height:this.width;if(this._mouseWheelDeltaY!==this._pmouseWheelDeltaY&&(0<this._mouseWheelDeltaY?this._renderer._curCamera._orbit(0,0,r*a):this._renderer._curCamera._orbit(0,0,-r*a)),this.mouseIsPressed)if(this.mouseButton===this.LEFT){var o=-e*(this.mouseX-this.pmouseX)/a,i=t*(this.mouseY-this.pmouseY)/a;this._renderer._curCamera._orbit(o,i,0);}else if(this.mouseButton===this.RIGHT){var s=n._getLocalAxes(),l=Math.sqrt(s.x[0]*s.x[0]+s.x[2]*s.x[2]);0!==l&&(s.x[0]/=l,s.x[2]/=l);var p=Math.sqrt(s.y[0]*s.y[0]+s.y[2]*s.y[2]);0!==p&&(s.y[0]/=p,s.y[2]/=p);var u=-1*e*(this.mouseX-this.pmouseX),c=-1*t*(this.mouseY-this.pmouseY);n.setPosition(n.eyeX+u*s.x[0]+c*s.z[0],n.eyeY,n.eyeZ+u*s.x[2]+c*s.z[2]);}return this}},d.default.prototype.debugMode=function(){this._assert3d("debugMode");for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];d.default._validateParameters("debugMode",t);for(var n=this._registeredMethods.post.length-1;0<=n;n--)this._registeredMethods.post[n].toString()!==this._grid().toString()&&this._registeredMethods.post[n].toString()!==this._axesIcon().toString()||this._registeredMethods.post.splice(n,1);t[0]===a.GRID?this.registerMethod("post",this._grid.call(this,t[1],t[2],t[3],t[4],t[5])):t[0]===a.AXES?this.registerMethod("post",this._axesIcon.call(this,t[1],t[2],t[3],t[4])):(this.registerMethod("post",this._grid.call(this,t[0],t[1],t[2],t[3],t[4])),this.registerMethod("post",this._axesIcon.call(this,t[5],t[6],t[7],t[8])));},d.default.prototype.noDebugMode=function(){this._assert3d("noDebugMode");for(var e=this._registeredMethods.post.length-1;0<=e;e--)this._registeredMethods.post[e].toString()!==this._grid().toString()&&this._registeredMethods.post[e].toString()!==this._axesIcon().toString()||this._registeredMethods.post.splice(e,1);},d.default.prototype._grid=function(e,r,n,a,o){void 0===e&&(e=this.width/2),void 0===r&&(r=Math.round(e/30)<4?4:Math.round(e/30)),void 0===n&&(n=0),void 0===a&&(a=0),void 0===o&&(o=0);var i=e/r,s=e/2;return function(){this.push(),this.stroke(255*this._renderer.curStrokeColor[0],255*this._renderer.curStrokeColor[1],255*this._renderer.curStrokeColor[2]),this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0],this._renderer._curCamera.cameraMatrix.mat4[1],this._renderer._curCamera.cameraMatrix.mat4[2],this._renderer._curCamera.cameraMatrix.mat4[3],this._renderer._curCamera.cameraMatrix.mat4[4],this._renderer._curCamera.cameraMatrix.mat4[5],this._renderer._curCamera.cameraMatrix.mat4[6],this._renderer._curCamera.cameraMatrix.mat4[7],this._renderer._curCamera.cameraMatrix.mat4[8],this._renderer._curCamera.cameraMatrix.mat4[9],this._renderer._curCamera.cameraMatrix.mat4[10],this._renderer._curCamera.cameraMatrix.mat4[11],this._renderer._curCamera.cameraMatrix.mat4[12],this._renderer._curCamera.cameraMatrix.mat4[13],this._renderer._curCamera.cameraMatrix.mat4[14],this._renderer._curCamera.cameraMatrix.mat4[15]);for(var e=0;e<=r;e++)this.beginShape(this.LINES),this.vertex(-s+n,a,e*i-s+o),this.vertex(+s+n,a,e*i-s+o),this.endShape();for(var t=0;t<=r;t++)this.beginShape(this.LINES),this.vertex(t*i-s+n,a,-s+o),this.vertex(t*i-s+n,a,+s+o),this.endShape();this.pop();}},d.default.prototype._axesIcon=function(e,t,r,n){return void 0===e&&(e=40<this.width/20?this.width/20:40),void 0===t&&(t=-this.width/4),void 0===r&&(r=t),void 0===n&&(n=t),function(){this.push(),this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0],this._renderer._curCamera.cameraMatrix.mat4[1],this._renderer._curCamera.cameraMatrix.mat4[2],this._renderer._curCamera.cameraMatrix.mat4[3],this._renderer._curCamera.cameraMatrix.mat4[4],this._renderer._curCamera.cameraMatrix.mat4[5],this._renderer._curCamera.cameraMatrix.mat4[6],this._renderer._curCamera.cameraMatrix.mat4[7],this._renderer._curCamera.cameraMatrix.mat4[8],this._renderer._curCamera.cameraMatrix.mat4[9],this._renderer._curCamera.cameraMatrix.mat4[10],this._renderer._curCamera.cameraMatrix.mat4[11],this._renderer._curCamera.cameraMatrix.mat4[12],this._renderer._curCamera.cameraMatrix.mat4[13],this._renderer._curCamera.cameraMatrix.mat4[14],this._renderer._curCamera.cameraMatrix.mat4[15]),this.strokeWeight(2),this.stroke(255,0,0),this.beginShape(this.LINES),this.vertex(t,r,n),this.vertex(t+e,r,n),this.endShape(),this.stroke(0,255,0),this.beginShape(this.LINES),this.vertex(t,r,n),this.vertex(t,r+e,n),this.endShape(),this.stroke(0,0,255),this.beginShape(this.LINES),this.vertex(t,r,n),this.vertex(t,r,n+e),this.endShape(),this.pop();}};var o=d.default;r.default=o;},{"../core/constants":22,"../core/main":32}],77:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,f=(n=e("../core/main"))&&n.__esModule?n:{default:n};f.default.prototype.ambientLight=function(e,t,r,n){this._assert3d("ambientLight"),f.default._validateParameters("ambientLight",arguments);var a=this.color.apply(this,arguments);return this._renderer.ambientLightColors.push(a._array[0],a._array[1],a._array[2]),this._renderer._enableLighting=!0,this},f.default.prototype.specularColor=function(e,t,r){this._assert3d("specularColor"),f.default._validateParameters("specularColor",arguments);var n=this.color.apply(this,arguments);return this._renderer.specularColors=[n._array[0],n._array[1],n._array[2]],this},f.default.prototype.directionalLight=function(e,t,r,n,a,o){var i,s,l,p;this._assert3d("directionalLight"),f.default._validateParameters("directionalLight",arguments),i=e instanceof f.default.Color?e:this.color(e,t,r);var u=arguments[arguments.length-1];p="number"==typeof u?(s=arguments[arguments.length-3],l=arguments[arguments.length-2],arguments[arguments.length-1]):(s=u.x,l=u.y,u.z);var c=Math.sqrt(s*s+l*l+p*p);return this._renderer.directionalLightDirections.push(s/c,l/c,p/c),this._renderer.directionalLightDiffuseColors.push(i._array[0],i._array[1],i._array[2]),Array.prototype.push.apply(this._renderer.directionalLightSpecularColors,this._renderer.specularColors),this._renderer._enableLighting=!0,this},f.default.prototype.pointLight=function(e,t,r,n,a,o){var i,s,l,p;this._assert3d("pointLight"),f.default._validateParameters("pointLight",arguments),i=e instanceof f.default.Color?e:this.color(e,t,r);var u=arguments[arguments.length-1];return p="number"==typeof u?(s=arguments[arguments.length-3],l=arguments[arguments.length-2],arguments[arguments.length-1]):(s=u.x,l=u.y,u.z),this._renderer.pointLightPositions.push(s,l,p),this._renderer.pointLightDiffuseColors.push(i._array[0],i._array[1],i._array[2]),Array.prototype.push.apply(this._renderer.pointLightSpecularColors,this._renderer.specularColors),this._renderer._enableLighting=!0,this},f.default.prototype.lights=function(){return this._assert3d("lights"),this.ambientLight(128,128,128),this.directionalLight(128,128,128,0,0,-1),this},f.default.prototype.lightFalloff=function(e,t,r){return this._assert3d("lightFalloff"),f.default._validateParameters("lightFalloff",arguments),e<0&&(e=0,console.warn("Value of constant argument in lightFalloff() should be never be negative. Set to 0.")),t<0&&(t=0,console.warn("Value of linear argument in lightFalloff() should be never be negative. Set to 0.")),r<0&&(r=0,console.warn("Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.")),0===e&&0===t&&0===r&&(e=1,console.warn("Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.")),this._renderer.constantAttenuation=e,this._renderer.linearAttenuation=t,this._renderer.quadraticAttenuation=r,this},f.default.prototype.spotLight=function(e,t,r,n,a,o,i,s,l,p,u){var c,d,h;this._assert3d("spotLight"),f.default._validateParameters("spotLight",arguments);var m=arguments.length;switch(m){case 11:case 10:c=this.color(e,t,r),d=new f.default.Vector(n,a,o),h=new f.default.Vector(i,s,l);break;case 9:e instanceof f.default.Color?(c=e,d=new f.default.Vector(t,r,n),h=new f.default.Vector(a,o,i),p=s,u=l):n instanceof f.default.Vector?(c=this.color(e,t,r),d=n,h=new f.default.Vector(a,o,i),p=s,u=l):i instanceof f.default.Vector?(c=this.color(e,t,r),d=new f.default.Vector(n,a,o),h=i,p=s,u=l):(c=this.color(e,t,r),d=new f.default.Vector(n,a,o),h=new f.default.Vector(i,s,l));break;case 8:p=(h=e instanceof f.default.Color?(c=e,d=new f.default.Vector(t,r,n),new f.default.Vector(a,o,i)):n instanceof f.default.Vector?(c=this.color(e,t,r),d=n,new f.default.Vector(a,o,i)):(c=this.color(e,t,r),d=new f.default.Vector(n,a,o),i),s);break;case 7:e instanceof f.default.Color&&t instanceof f.default.Vector?(c=e,d=t,h=new f.default.Vector(r,n,a),p=o,u=i):e instanceof f.default.Color&&a instanceof f.default.Vector?(c=e,d=new f.default.Vector(t,r,n),h=a,p=o,u=i):n instanceof f.default.Vector&&a instanceof f.default.Vector?(c=this.color(e,t,r),d=n,h=a,p=o,u=i):h=e instanceof f.default.Color?(c=e,d=new f.default.Vector(t,r,n),new f.default.Vector(a,o,i)):n instanceof f.default.Vector?(c=this.color(e,t,r),d=n,new f.default.Vector(a,o,i)):(c=this.color(e,t,r),d=new f.default.Vector(n,a,o),i);break;case 6:n instanceof f.default.Vector&&a instanceof f.default.Vector?(c=this.color(e,t,r),d=n,h=a,p=o):e instanceof f.default.Color&&a instanceof f.default.Vector?(c=e,d=new f.default.Vector(t,r,n),h=a,p=o):e instanceof f.default.Color&&t instanceof f.default.Vector&&(c=e,d=t,h=new f.default.Vector(r,n,a),p=o);break;case 5:e instanceof f.default.Color&&t instanceof f.default.Vector&&r instanceof f.default.Vector?(c=e,d=t,h=r,p=n,u=a):n instanceof f.default.Vector&&a instanceof f.default.Vector?(c=this.color(e,t,r),d=n,h=a):e instanceof f.default.Color&&a instanceof f.default.Vector?(c=e,d=new f.default.Vector(t,r,n),h=a):e instanceof f.default.Color&&t instanceof f.default.Vector&&(c=e,d=t,h=new f.default.Vector(r,n,a));break;case 4:c=e,d=t,h=r,p=n;break;case 3:c=e,d=t,h=r;break;default:return console.warn("Sorry, input for spotlight() is not in prescribed format. Too ".concat(m<3?"few":"many"," arguments were provided")),this}return this._renderer.spotLightDiffuseColors.push(c._array[0],c._array[1],c._array[2]),Array.prototype.push.apply(this._renderer.spotLightSpecularColors,this._renderer.specularColors),this._renderer.spotLightPositions.push(d.x,d.y,d.z),h.normalize(),this._renderer.spotLightDirections.push(h.x,h.y,h.z),void 0===p&&(p=Math.PI/3),void 0!==u&&u<1?(u=1,console.warn("Value of concentration needs to be greater than 1. Setting it to 1")):void 0===u&&(u=100),p=this._renderer._pInst._toRadians(p),this._renderer.spotLightAngle.push(Math.cos(p)),this._renderer.spotLightConc.push(u),this._renderer._enableLighting=!0,this},f.default.prototype.noLights=function(){return this._assert3d("noLights"),f.default._validateParameters("noLights",arguments),this._renderer._enableLighting=!1,this._renderer.ambientLightColors.length=0,this._renderer.specularColors=[1,1,1],this._renderer.directionalLightDirections.length=0,this._renderer.directionalLightDiffuseColors.length=0,this._renderer.directionalLightSpecularColors.length=0,this._renderer.pointLightPositions.length=0,this._renderer.pointLightDiffuseColors.length=0,this._renderer.pointLightSpecularColors.length=0,this._renderer.spotLightPositions.length=0,this._renderer.spotLightDirections.length=0,this._renderer.spotLightDiffuseColors.length=0,this._renderer.spotLightSpecularColors.length=0,this._renderer.spotLightAngle.length=0,this._renderer.spotLightConc.length=0,this._renderer.constantAttenuation=1,this._renderer.linearAttenuation=0,this._renderer.quadraticAttenuation=0,this._renderer._useShininess=1,this};var a=f.default;r.default=a;},{"../core/main":32}],78:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,w=(n=e("../core/main"))&&n.__esModule?n:{default:n};function s(e,t,r){for(var n=0,a=e.length;n<a;n++)if(e[n]!==t.getUint8(r+n,!1))return !1;return !0}e("./p5.Geometry"),w.default.prototype.loadModel=function(e){var t,r,n;w.default._validateParameters("loadModel",arguments);var a=e.slice(-4);"boolean"==typeof arguments[1]?(t=arguments[1],r=arguments[2],n=arguments[3],void 0!==arguments[4]&&(a=arguments[4])):(t=!1,r=arguments[1],n=arguments[2],void 0!==arguments[3]&&(a=arguments[3]));var o=new w.default.Geometry;o.gid="".concat(e,"|").concat(t);var i=this;return a.match(/\.stl$/i)?this.httpDo(e,"GET","arrayBuffer",function(e){!function(e,t){if(function(e){for(var t=new DataView(e),r=[115,111,108,105,100],n=0;n<5;n++)if(s(r,t,n))return !1;return !0}(t))!function(e,t){for(var r,n,a,o,i,s,l,p=new DataView(t),u=p.getUint32(80,!0),c=!1,d=0;d<70;d++)1129270351===p.getUint32(d,!1)&&82===p.getUint8(d+4)&&61===p.getUint8(d+5)&&(c=!0,o=[],i=p.getUint8(d+6)/255,s=p.getUint8(d+7)/255,l=p.getUint8(d+8)/255);for(var h=0;h<u;h++){var m=84+50*h,f=p.getFloat32(m,!0),y=p.getFloat32(4+m,!0),g=p.getFloat32(8+m,!0);if(c){var v=p.getUint16(48+m,!0);a=0==(32768&v)?(r=(31&v)/31,n=(v>>5&31)/31,(v>>10&31)/31):(r=i,n=s,l);}for(var b=new w.default.Vector(f,y,g),_=1;_<=3;_++){var x=m+12*_,S=new w.default.Vector(p.getFloat32(x,!0),p.getFloat32(4+x,!0),p.getFloat32(8+x,!0));e.vertices.push(S),e.vertexNormals.push(b),c&&o.push(r,n,a);}e.faces.push([3*h,3*h+1,3*h+2]),e.uvs.push([0,0],[0,0],[0,0]);}}(e,t);else {var r=new DataView(t);if(!("TextDecoder"in window))return console.warn("Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)");var n=new TextDecoder("utf-8").decode(r).split("\n");!function(e,t){for(var r,n,a="",o=[],i=0;i<t.length;++i){for(var s=t[i].trim(),l=s.split(" "),p=0;p<l.length;++p)""===l[p]&&l.splice(p,1);if(0!==l.length)switch(a){case"":if("solid"!==l[0])return console.error(s),console.error('Invalid state "'.concat(l[0],'", should be "solid"'));a="solid";break;case"solid":if("facet"!==l[0]||"normal"!==l[1])return console.error(s),console.error('Invalid state "'.concat(l[0],'", should be "facet normal"'));r=new w.default.Vector(parseFloat(l[2]),parseFloat(l[3]),parseFloat(l[4])),e.vertexNormals.push(r,r,r),a="facet normal";break;case"facet normal":if("outer"!==l[0]||"loop"!==l[1])return console.error(s),console.error('Invalid state "'.concat(l[0],'", should be "outer loop"'));a="vertex";break;case"vertex":if("vertex"===l[0])n=new w.default.Vector(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3])),e.vertices.push(n),e.uvs.push([0,0]),o.push(e.vertices.indexOf(n));else {if("endloop"!==l[0])return console.error(s),console.error('Invalid state "'.concat(l[0],'", should be "vertex" or "endloop"'));e.faces.push(o),o=[],a="endloop";}break;case"endloop":if("endfacet"!==l[0])return console.error(s),console.error('Invalid state "'.concat(l[0],'", should be "endfacet"'));a="endfacet";break;case"endfacet":if("endsolid"!==l[0]){if("facet"!==l[0]||"normal"!==l[1])return console.error(s),console.error('Invalid state "'.concat(l[0],'", should be "endsolid" or "facet normal"'));r=new w.default.Vector(parseFloat(l[2]),parseFloat(l[3]),parseFloat(l[4])),e.vertexNormals.push(r,r,r),a="facet normal";}break;default:console.error('Invalid state "'.concat(a,'"'));}}}(e,n);}}(o,e),t&&o.normalize(),i._decrementPreload(),"function"==typeof r&&r(o);},n):a.match(/\.obj$/i)?this.loadStrings(e,function(e){!function(e,t){for(var r={v:[],vt:[],vn:[]},n={},a=0;a<t.length;++a){var o=t[a].trim().split(/\b\s+/);if(0<o.length)if("v"===o[0]||"vn"===o[0]){var i=new w.default.Vector(parseFloat(o[1]),parseFloat(o[2]),parseFloat(o[3]));r[o[0]].push(i);}else if("vt"===o[0]){var s=[parseFloat(o[1]),parseFloat(o[2])];r[o[0]].push(s);}else if("f"===o[0])for(var l=3;l<o.length;++l){for(var p=[],u=[1,l-1,l],c=0;c<u.length;++c){var d=o[u[c]],h=0;if(void 0!==n[d])h=n[d];else {for(var m=d.split("/"),f=0;f<m.length;f++)m[f]=parseInt(m[f])-1;h=n[d]=e.vertices.length,e.vertices.push(r.v[m[0]].copy()),r.vt[m[1]]?e.uvs.push(r.vt[m[1]].slice()):e.uvs.push([0,0]),r.vn[m[2]]&&e.vertexNormals.push(r.vn[m[2]].copy());}p.push(h);}p[0]!==p[1]&&p[0]!==p[2]&&p[1]!==p[2]&&e.faces.push(p);}}0===e.vertexNormals.length&&e.computeNormals();}(o,e),t&&o.normalize(),i._decrementPreload(),"function"==typeof r&&r(o);},n):(w.default._friendlyFileLoadError(3,e),n?n():console.error("Sorry, the file type is invalid. Only OBJ and STL files are supported.")),o},w.default.prototype.model=function(e){this._assert3d("model"),w.default._validateParameters("model",arguments),0<e.vertices.length&&(this._renderer.geometryInHash(e.gid)||(e._makeTriangleEdges()._edgesToVertices(),this._renderer.createBuffers(e.gid,e)),this._renderer.drawBuffers(e.gid));};var a=w.default;r.default=a;},{"../core/main":32,"./p5.Geometry":81}],79:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,p=(n=e("../core/main"))&&n.__esModule?n:{default:n},a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}e("./p5.Texture"),p.default.prototype.loadShader=function(e,t,r,n){p.default._validateParameters("loadShader",arguments),n=n||console.error;function a(){i._decrementPreload(),r&&r(o);}var o=new p.default.Shader,i=this,s=!1,l=!1;return this.loadStrings(e,function(e){o._vertSrc=e.join("\n"),l=!0,s&&a();},n),this.loadStrings(t,function(e){o._fragSrc=e.join("\n"),s=!0,l&&a();},n),o},p.default.prototype.createShader=function(e,t){return this._assert3d("createShader"),p.default._validateParameters("createShader",arguments),new p.default.Shader(this._renderer,e,t)},p.default.prototype.shader=function(e){return this._assert3d("shader"),p.default._validateParameters("shader",arguments),void 0===e._renderer&&(e._renderer=this._renderer),e.isStrokeShader()?this._renderer.userStrokeShader=e:(this._renderer.userFillShader=e,this._renderer._useNormalMaterial=!1),e.init(),this},p.default.prototype.resetShader=function(){return this._renderer.userFillShader=this._renderer.userStrokeShader=null,this},p.default.prototype.normalMaterial=function(){this._assert3d("normalMaterial");for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return p.default._validateParameters("normalMaterial",t),this._renderer.drawMode=a.FILL,this._renderer._useSpecularMaterial=!1,this._renderer._useEmissiveMaterial=!1,this._renderer._useNormalMaterial=!0,this._renderer.curFillColor=[1,1,1,1],this._renderer._setProperty("_doFill",!0),this.noStroke(),this},p.default.prototype.texture=function(e){return this._assert3d("texture"),p.default._validateParameters("texture",arguments),e.gifProperties&&e._animateGif(this),this._renderer.drawMode=a.TEXTURE,this._renderer._useSpecularMaterial=!1,this._renderer._useEmissiveMaterial=!1,this._renderer._useNormalMaterial=!1,this._renderer._tex=e,this._renderer._setProperty("_doFill",!0),this},p.default.prototype.textureMode=function(e){e!==a.IMAGE&&e!==a.NORMAL?console.warn("You tried to set ".concat(e," textureMode only supports IMAGE & NORMAL ")):this._renderer.textureMode=e;},p.default.prototype.textureWrap=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e;this._renderer.textureWrapX=e,this._renderer.textureWrapY=t;for(var r=this._renderer.textures,n=0;n<r.length;n++)r[n].setWrapMode(e,t);},p.default.prototype.ambientMaterial=function(e,t,r){this._assert3d("ambientMaterial"),p.default._validateParameters("ambientMaterial",arguments);var n=p.default.prototype.color.apply(this,arguments);return this._renderer.curFillColor=n._array,this._renderer._useSpecularMaterial=!1,this._renderer._useEmissiveMaterial=!1,this._renderer._useNormalMaterial=!1,this._renderer._enableLighting=!0,this._renderer._tex=null,this},p.default.prototype.emissiveMaterial=function(e,t,r,n){this._assert3d("emissiveMaterial"),p.default._validateParameters("emissiveMaterial",arguments);var a=p.default.prototype.color.apply(this,arguments);return this._renderer.curFillColor=a._array,this._renderer._useSpecularMaterial=!1,this._renderer._useEmissiveMaterial=!0,this._renderer._useNormalMaterial=!1,this._renderer._enableLighting=!0,this._renderer._tex=null,this},p.default.prototype.specularMaterial=function(e,t,r,n){this._assert3d("specularMaterial"),p.default._validateParameters("specularMaterial",arguments);var a=p.default.prototype.color.apply(this,arguments);return this._renderer.curFillColor=a._array,this._renderer._useSpecularMaterial=!0,this._renderer._useEmissiveMaterial=!1,this._renderer._useNormalMaterial=!1,this._renderer._enableLighting=!0,this._renderer._tex=null,this},p.default.prototype.shininess=function(e){return this._assert3d("shininess"),p.default._validateParameters("shininess",arguments),e<1&&(e=1),this._renderer._useShininess=e,this},p.default.RendererGL.prototype._applyColorBlend=function(e){var t=this.GL,r=this.drawMode===a.TEXTURE||e[e.length-1]<1||this._isErasing;return r!==this._isBlending&&(r||this.curBlendMode!==a.BLEND&&this.curBlendMode!==a.ADD?t.enable(t.BLEND):t.disable(t.BLEND),t.depthMask(!0),this._isBlending=r),this._applyBlendMode(),e},p.default.RendererGL.prototype._applyBlendMode=function(){if(this._cachedBlendMode!==this.curBlendMode){var e=this.GL;switch(this.curBlendMode){case a.BLEND:case a.ADD:e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA);break;case a.REMOVE:e.blendEquation(e.FUNC_REVERSE_SUBTRACT),e.blendFunc(e.SRC_ALPHA,e.DST_ALPHA);break;case a.MULTIPLY:e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ONE,e.ONE);break;case a.SCREEN:e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE_MINUS_DST_COLOR,e.ONE,e.ONE,e.ONE);break;case a.EXCLUSION:e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE_MINUS_DST_COLOR,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE);break;case a.REPLACE:e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO);break;case a.SUBTRACT:e.blendEquationSeparate(e.FUNC_REVERSE_SUBTRACT,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE,e.ONE,e.ONE);break;case a.DARKEST:this.blendExt?(e.blendEquationSeparate(this.blendExt.MIN_EXT,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):console.warn("blendMode(DARKEST) does not work in your browser in WEBGL mode.");break;case a.LIGHTEST:this.blendExt?(e.blendEquationSeparate(this.blendExt.MAX_EXT,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):console.warn("blendMode(LIGHTEST) does not work in your browser in WEBGL mode.");break;default:console.error("Oops! Somehow RendererGL set curBlendMode to an unsupported mode.");}this._isErasing||(this._cachedBlendMode=this.curBlendMode);}};var o=p.default;r.default=o;},{"../core/constants":22,"../core/main":32,"./p5.Texture":88}],80:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,f=(n=e("../core/main"))&&n.__esModule?n:{default:n};f.default.prototype.camera=function(){var e;this._assert3d("camera");for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return f.default._validateParameters("camera",r),(e=this._renderer._curCamera).camera.apply(e,r),this},f.default.prototype.perspective=function(){var e;this._assert3d("perspective");for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return f.default._validateParameters("perspective",r),(e=this._renderer._curCamera).perspective.apply(e,r),this},f.default.prototype.ortho=function(){var e;this._assert3d("ortho");for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return f.default._validateParameters("ortho",r),(e=this._renderer._curCamera).ortho.apply(e,r),this},f.default.prototype.frustum=function(){var e;this._assert3d("frustum");for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return f.default._validateParameters("frustum",r),(e=this._renderer._curCamera).frustum.apply(e,r),this},f.default.prototype.createCamera=function(){this._assert3d("createCamera");var e=new f.default.Camera(this._renderer);return e._computeCameraDefaultSettings(),e._setDefaultCamera(),this._renderer._curCamera=e},f.default.Camera=function(e){this._renderer=e,this.cameraType="default",this.cameraMatrix=new f.default.Matrix,this.projMatrix=new f.default.Matrix;},f.default.Camera.prototype.perspective=function(e,t,r,n){this.cameraType=0<arguments.length?"custom":"default",void 0===e?(e=this.defaultCameraFOV,this.cameraFOV=e):this.cameraFOV=this._renderer._pInst._toRadians(e),void 0===t&&(t=this.defaultAspectRatio),void 0===r&&(r=this.defaultCameraNear),void 0===n&&(n=this.defaultCameraFar),r<=1e-4&&(r=.01,console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.")),n<r&&console.log("Perspective far plane value is less than near plane value. Nothing will be shown."),this.aspectRatio=t,this.cameraNear=r,this.cameraFar=n,this.projMatrix=f.default.Matrix.identity();var a=1/Math.tan(this.cameraFOV/2),o=1/(this.cameraNear-this.cameraFar);this.projMatrix.set(a/t,0,0,0,0,-a,0,0,0,0,(n+r)*o,-1,0,0,2*n*r*o,0),this._isActive()&&this._renderer.uPMatrix.set(this.projMatrix.mat4[0],this.projMatrix.mat4[1],this.projMatrix.mat4[2],this.projMatrix.mat4[3],this.projMatrix.mat4[4],this.projMatrix.mat4[5],this.projMatrix.mat4[6],this.projMatrix.mat4[7],this.projMatrix.mat4[8],this.projMatrix.mat4[9],this.projMatrix.mat4[10],this.projMatrix.mat4[11],this.projMatrix.mat4[12],this.projMatrix.mat4[13],this.projMatrix.mat4[14],this.projMatrix.mat4[15]);},f.default.Camera.prototype.ortho=function(e,t,r,n,a,o){void 0===e&&(e=-this._renderer.width/2),void 0===t&&(t=this._renderer.width/2),void 0===r&&(r=-this._renderer.height/2),void 0===n&&(n=this._renderer.height/2),void 0===a&&(a=0),void 0===o&&(o=Math.max(this._renderer.width,this._renderer.height));var i=t-e,s=n-r,l=o-a,p=2/i,u=2/s,c=-2/l,d=-(t+e)/i,h=-(n+r)/s,m=-(o+a)/l;this.projMatrix=f.default.Matrix.identity(),this.projMatrix.set(p,0,0,0,0,-u,0,0,0,0,c,0,d,h,m,1),this._isActive()&&this._renderer.uPMatrix.set(this.projMatrix.mat4[0],this.projMatrix.mat4[1],this.projMatrix.mat4[2],this.projMatrix.mat4[3],this.projMatrix.mat4[4],this.projMatrix.mat4[5],this.projMatrix.mat4[6],this.projMatrix.mat4[7],this.projMatrix.mat4[8],this.projMatrix.mat4[9],this.projMatrix.mat4[10],this.projMatrix.mat4[11],this.projMatrix.mat4[12],this.projMatrix.mat4[13],this.projMatrix.mat4[14],this.projMatrix.mat4[15]),this.cameraType="custom";},f.default.Camera.prototype.frustum=function(e,t,r,n,a,o){void 0===e&&(e=-this._renderer.width/2),void 0===t&&(t=this._renderer.width/2),void 0===r&&(r=-this._renderer.height/2),void 0===n&&(n=this._renderer.height/2),void 0===a&&(a=0),void 0===o&&(o=Math.max(this._renderer.width,this._renderer.height));var i=t-e,s=n-r,l=o-a,p=2*a/i,u=2*a/s,c=-2*o*a/l,d=(t+e)/i,h=(n+r)/s,m=-(o+a)/l;this.projMatrix=f.default.Matrix.identity(),this.projMatrix.set(p,0,0,0,0,u,0,0,d,h,m,-1,0,0,c,0),this._isActive()&&this._renderer.uPMatrix.set(this.projMatrix.mat4[0],this.projMatrix.mat4[1],this.projMatrix.mat4[2],this.projMatrix.mat4[3],this.projMatrix.mat4[4],this.projMatrix.mat4[5],this.projMatrix.mat4[6],this.projMatrix.mat4[7],this.projMatrix.mat4[8],this.projMatrix.mat4[9],this.projMatrix.mat4[10],this.projMatrix.mat4[11],this.projMatrix.mat4[12],this.projMatrix.mat4[13],this.projMatrix.mat4[14],this.projMatrix.mat4[15]),this.cameraType="custom";},f.default.Camera.prototype._rotateView=function(e,t,r,n){var a=this.centerX,o=this.centerY,i=this.centerZ;a-=this.eyeX,o-=this.eyeY,i-=this.eyeZ;var s=f.default.Matrix.identity(this._renderer._pInst);s.rotate(this._renderer._pInst._toRadians(e),t,r,n);var l=[a*s.mat4[0]+o*s.mat4[4]+i*s.mat4[8],a*s.mat4[1]+o*s.mat4[5]+i*s.mat4[9],a*s.mat4[2]+o*s.mat4[6]+i*s.mat4[10]];l[0]+=this.eyeX,l[1]+=this.eyeY,l[2]+=this.eyeZ,this.camera(this.eyeX,this.eyeY,this.eyeZ,l[0],l[1],l[2],this.upX,this.upY,this.upZ);},f.default.Camera.prototype.pan=function(e){var t=this._getLocalAxes();this._rotateView(e,t.y[0],t.y[1],t.y[2]);},f.default.Camera.prototype.tilt=function(e){var t=this._getLocalAxes();this._rotateView(e,t.x[0],t.x[1],t.x[2]);},f.default.Camera.prototype.lookAt=function(e,t,r){this.camera(this.eyeX,this.eyeY,this.eyeZ,e,t,r,this.upX,this.upY,this.upZ);},f.default.Camera.prototype.camera=function(e,t,r,n,a,o,i,s,l){void 0===e&&(e=this.defaultEyeX,t=this.defaultEyeY,r=this.defaultEyeZ,n=e,a=t,s=1,l=i=o=0),this.eyeX=e,this.eyeY=t,this.eyeZ=r,this.centerX=n,this.centerY=a,this.centerZ=o,this.upX=i,this.upY=s,this.upZ=l;var p=this._getLocalAxes();this.cameraMatrix.set(p.x[0],p.y[0],p.z[0],0,p.x[1],p.y[1],p.z[1],0,p.x[2],p.y[2],p.z[2],0,0,0,0,1);var u=-e,c=-t,d=-r;return this.cameraMatrix.translate([u,c,d]),this._isActive()&&this._renderer.uMVMatrix.set(this.cameraMatrix.mat4[0],this.cameraMatrix.mat4[1],this.cameraMatrix.mat4[2],this.cameraMatrix.mat4[3],this.cameraMatrix.mat4[4],this.cameraMatrix.mat4[5],this.cameraMatrix.mat4[6],this.cameraMatrix.mat4[7],this.cameraMatrix.mat4[8],this.cameraMatrix.mat4[9],this.cameraMatrix.mat4[10],this.cameraMatrix.mat4[11],this.cameraMatrix.mat4[12],this.cameraMatrix.mat4[13],this.cameraMatrix.mat4[14],this.cameraMatrix.mat4[15]),this},f.default.Camera.prototype.move=function(e,t,r){var n=this._getLocalAxes(),a=[n.x[0]*e,n.x[1]*e,n.x[2]*e],o=[n.y[0]*t,n.y[1]*t,n.y[2]*t],i=[n.z[0]*r,n.z[1]*r,n.z[2]*r];this.camera(this.eyeX+a[0]+o[0]+i[0],this.eyeY+a[1]+o[1]+i[1],this.eyeZ+a[2]+o[2]+i[2],this.centerX+a[0]+o[0]+i[0],this.centerY+a[1]+o[1]+i[1],this.centerZ+a[2]+o[2]+i[2],0,1,0);},f.default.Camera.prototype.setPosition=function(e,t,r){var n=e-this.eyeX,a=t-this.eyeY,o=r-this.eyeZ;this.camera(e,t,r,this.centerX+n,this.centerY+a,this.centerZ+o,0,1,0);},f.default.Camera.prototype._computeCameraDefaultSettings=function(){this.defaultCameraFOV=60/180*Math.PI,this.defaultAspectRatio=this._renderer.width/this._renderer.height,this.defaultEyeX=0,this.defaultEyeY=0,this.defaultEyeZ=this._renderer.height/2/Math.tan(this.defaultCameraFOV/2),this.defaultCenterX=0,this.defaultCenterY=0,this.defaultCenterZ=0,this.defaultCameraNear=.1*this.defaultEyeZ,this.defaultCameraFar=10*this.defaultEyeZ;},f.default.Camera.prototype._setDefaultCamera=function(){this.cameraFOV=this.defaultCameraFOV,this.aspectRatio=this.defaultAspectRatio,this.eyeX=this.defaultEyeX,this.eyeY=this.defaultEyeY,this.eyeZ=this.defaultEyeZ,this.centerX=this.defaultCenterX,this.centerY=this.defaultCenterY,this.centerZ=this.defaultCenterZ,this.upX=0,this.upY=1,this.upZ=0,this.cameraNear=this.defaultCameraNear,this.cameraFar=this.defaultCameraFar,this.perspective(),this.camera(),this.cameraType="default";},f.default.Camera.prototype._resize=function(){"default"===this.cameraType?(this._computeCameraDefaultSettings(),this._setDefaultCamera()):this.perspective(this.cameraFOV,this._renderer.width/this._renderer.height);},f.default.Camera.prototype.copy=function(){var e=new f.default.Camera(this._renderer);return e.cameraFOV=this.cameraFOV,e.aspectRatio=this.aspectRatio,e.eyeX=this.eyeX,e.eyeY=this.eyeY,e.eyeZ=this.eyeZ,e.centerX=this.centerX,e.centerY=this.centerY,e.centerZ=this.centerZ,e.cameraNear=this.cameraNear,e.cameraFar=this.cameraFar,e.cameraType=this.cameraType,e.cameraMatrix=this.cameraMatrix.copy(),e.projMatrix=this.projMatrix.copy(),e},f.default.Camera.prototype._getLocalAxes=function(){var e=this.eyeX-this.centerX,t=this.eyeY-this.centerY,r=this.eyeZ-this.centerZ,n=Math.sqrt(e*e+t*t+r*r);0!==n&&(e/=n,t/=n,r/=n);var a=this.upX,o=this.upY,i=this.upZ,s=o*r-i*t,l=-a*r+i*e,p=a*t-o*e;a=t*p-r*l,o=-e*p+r*s,i=e*l-t*s;var u=Math.sqrt(s*s+l*l+p*p);0!==u&&(s/=u,l/=u,p/=u);var c=Math.sqrt(a*a+o*o+i*i);return 0!==c&&(a/=c,o/=c,i/=c),{x:[s,l,p],y:[a,o,i],z:[e,t,r]}},f.default.Camera.prototype._orbit=function(e,t,r){var n=this.eyeX-this.centerX,a=this.eyeY-this.centerY,o=this.eyeZ-this.centerZ,i=Math.sqrt(n*n+a*a+o*o),s=Math.atan2(n,o),l=Math.acos(Math.max(-1,Math.min(1,a/i)));s+=e,(i+=r)<0&&(i=.1),(l+=t)>Math.PI?l=Math.PI:l<=0&&(l=.001);var p=Math.sin(l)*i*Math.sin(s),u=Math.cos(l)*i,c=Math.sin(l)*i*Math.cos(s);this.camera(p+this.centerX,u+this.centerY,c+this.centerZ,this.centerX,this.centerY,this.centerZ,0,1,0);},f.default.Camera.prototype._isActive=function(){return this===this._renderer._curCamera},f.default.prototype.setCamera=function(e){this._renderer._curCamera=e,this._renderer.uPMatrix.set(e.projMatrix.mat4[0],e.projMatrix.mat4[1],e.projMatrix.mat4[2],e.projMatrix.mat4[3],e.projMatrix.mat4[4],e.projMatrix.mat4[5],e.projMatrix.mat4[6],e.projMatrix.mat4[7],e.projMatrix.mat4[8],e.projMatrix.mat4[9],e.projMatrix.mat4[10],e.projMatrix.mat4[11],e.projMatrix.mat4[12],e.projMatrix.mat4[13],e.projMatrix.mat4[14],e.projMatrix.mat4[15]);};var a=f.default.Camera;r.default=a;},{"../core/main":32}],81:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,u=(n=e("../core/main"))&&n.__esModule?n:{default:n};u.default.Geometry=function(e,t,r){return this.vertices=[],this.lineVertices=[],this.lineNormals=[],this.vertexNormals=[],this.faces=[],this.uvs=[],this.edges=[],this.vertexColors=[],this.detailX=void 0!==e?e:1,this.detailY=void 0!==t?t:1,this.dirtyFlags={},r instanceof Function&&r.call(this),this},u.default.Geometry.prototype.reset=function(){this.lineVertices.length=0,this.lineNormals.length=0,this.vertices.length=0,this.edges.length=0,this.vertexColors.length=0,this.vertexNormals.length=0,this.uvs.length=0,this.dirtyFlags={};},u.default.Geometry.prototype.computeFaces=function(){this.faces.length=0;for(var e,t,r,n,a=this.detailX+1,o=0;o<this.detailY;o++)for(var i=0;i<this.detailX;i++)t=(e=o*a+i)+1,r=(o+1)*a+i+1,n=(o+1)*a+i,this.faces.push([e,t,n]),this.faces.push([n,t,r]);return this},u.default.Geometry.prototype._getFaceNormal=function(e){var t=this.faces[e],r=this.vertices[t[0]],n=this.vertices[t[1]],a=this.vertices[t[2]],o=u.default.Vector.sub(n,r),i=u.default.Vector.sub(a,r),s=u.default.Vector.cross(o,i),l=u.default.Vector.mag(s),p=l/(u.default.Vector.mag(o)*u.default.Vector.mag(i));return 0===p||isNaN(p)?(console.warn("p5.Geometry.prototype._getFaceNormal:","face has colinear sides or a repeated vertex"),s):(1<p&&(p=1),s.mult(Math.asin(p)/l))},u.default.Geometry.prototype.computeNormals=function(){var e,t=this.vertexNormals,r=this.vertices,n=this.faces;for(e=t.length=0;e<r.length;++e)t.push(new u.default.Vector);for(var a=0;a<n.length;++a)for(var o=n[a],i=this._getFaceNormal(a),s=0;s<3;++s){t[o[s]].add(i);}for(e=0;e<r.length;++e)t[e].normalize();return this},u.default.Geometry.prototype.averageNormals=function(){for(var e=0;e<=this.detailY;e++){var t=this.detailX+1,r=u.default.Vector.add(this.vertexNormals[e*t],this.vertexNormals[e*t+this.detailX]);r=u.default.Vector.div(r,2),this.vertexNormals[e*t]=r,this.vertexNormals[e*t+this.detailX]=r;}return this},u.default.Geometry.prototype.averagePoleNormals=function(){for(var e=new u.default.Vector(0,0,0),t=0;t<this.detailX;t++)e.add(this.vertexNormals[t]);e=u.default.Vector.div(e,this.detailX);for(var r=0;r<this.detailX;r++)this.vertexNormals[r]=e;e=new u.default.Vector(0,0,0);for(var n=this.vertices.length-1;n>this.vertices.length-1-this.detailX;n--)e.add(this.vertexNormals[n]);e=u.default.Vector.div(e,this.detailX);for(var a=this.vertices.length-1;a>this.vertices.length-1-this.detailX;a--)this.vertexNormals[a]=e;return this},u.default.Geometry.prototype._makeTriangleEdges=function(){if(this.edges.length=0,Array.isArray(this.strokeIndices))for(var e=0,t=this.strokeIndices.length;e<t;e++)this.edges.push(this.strokeIndices[e]);else for(var r=0;r<this.faces.length;r++)this.edges.push([this.faces[r][0],this.faces[r][1]]),this.edges.push([this.faces[r][1],this.faces[r][2]]),this.edges.push([this.faces[r][2],this.faces[r][0]]);return this},u.default.Geometry.prototype._edgesToVertices=function(){this.lineVertices.length=0;for(var e=this.lineNormals.length=0;e<this.edges.length;e++){var t=this.vertices[this.edges[e][0]],r=this.vertices[this.edges[e][1]],n=r.copy().sub(t).normalize(),a=t.array(),o=t.array(),i=r.array(),s=r.array(),l=n.array(),p=n.array();l.push(1),p.push(-1),this.lineNormals.push(l,p,l,l,p,p),this.lineVertices.push(a,o,i,i,o,s);}return this},u.default.Geometry.prototype.normalize=function(){if(0<this.vertices.length){for(var e=this.vertices[0].copy(),t=this.vertices[0].copy(),r=0;r<this.vertices.length;r++)e.x=Math.max(e.x,this.vertices[r].x),t.x=Math.min(t.x,this.vertices[r].x),e.y=Math.max(e.y,this.vertices[r].y),t.y=Math.min(t.y,this.vertices[r].y),e.z=Math.max(e.z,this.vertices[r].z),t.z=Math.min(t.z,this.vertices[r].z);for(var n=u.default.Vector.lerp(e,t,.5),a=u.default.Vector.sub(e,t),o=200/Math.max(Math.max(a.x,a.y),a.z),i=0;i<this.vertices.length;i++)this.vertices[i].sub(n),this.vertices[i].mult(o);}return this};var a=u.default.Geometry;r.default=a;},{"../core/main":32}],82:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,L=(n=e("../core/main"))&&n.__esModule?n:{default:n};var a=Array,I=function(e){return e instanceof Array};"undefined"!=typeof Float32Array&&(a=Float32Array,I=function(e){return e instanceof Array||e instanceof Float32Array}),L.default.Matrix=function(){for(var e=new Array(arguments.length),t=0;t<e.length;++t)e[t]=arguments[t];return e.length&&e[e.length-1]instanceof L.default&&(this.p5=e[e.length-1]),"mat3"===e[0]?this.mat3=Array.isArray(e[1])?e[1]:new a([1,0,0,0,1,0,0,0,1]):this.mat4=Array.isArray(e[0])?e[0]:new a([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),this},L.default.Matrix.prototype.set=function(e){return e instanceof L.default.Matrix?this.mat4=e.mat4:I(e)?this.mat4=e:16===arguments.length&&(this.mat4[0]=e,this.mat4[1]=arguments[1],this.mat4[2]=arguments[2],this.mat4[3]=arguments[3],this.mat4[4]=arguments[4],this.mat4[5]=arguments[5],this.mat4[6]=arguments[6],this.mat4[7]=arguments[7],this.mat4[8]=arguments[8],this.mat4[9]=arguments[9],this.mat4[10]=arguments[10],this.mat4[11]=arguments[11],this.mat4[12]=arguments[12],this.mat4[13]=arguments[13],this.mat4[14]=arguments[14],this.mat4[15]=arguments[15]),this},L.default.Matrix.prototype.get=function(){return new L.default.Matrix(this.mat4,this.p5)},L.default.Matrix.prototype.copy=function(){var e=new L.default.Matrix(this.p5);return e.mat4[0]=this.mat4[0],e.mat4[1]=this.mat4[1],e.mat4[2]=this.mat4[2],e.mat4[3]=this.mat4[3],e.mat4[4]=this.mat4[4],e.mat4[5]=this.mat4[5],e.mat4[6]=this.mat4[6],e.mat4[7]=this.mat4[7],e.mat4[8]=this.mat4[8],e.mat4[9]=this.mat4[9],e.mat4[10]=this.mat4[10],e.mat4[11]=this.mat4[11],e.mat4[12]=this.mat4[12],e.mat4[13]=this.mat4[13],e.mat4[14]=this.mat4[14],e.mat4[15]=this.mat4[15],e},L.default.Matrix.identity=function(e){return new L.default.Matrix(e)},L.default.Matrix.prototype.transpose=function(e){var t,r,n,a,o,i;return e instanceof L.default.Matrix?(t=e.mat4[1],r=e.mat4[2],n=e.mat4[3],a=e.mat4[6],o=e.mat4[7],i=e.mat4[11],this.mat4[0]=e.mat4[0],this.mat4[1]=e.mat4[4],this.mat4[2]=e.mat4[8],this.mat4[3]=e.mat4[12],this.mat4[4]=t,this.mat4[5]=e.mat4[5],this.mat4[6]=e.mat4[9],this.mat4[7]=e.mat4[13],this.mat4[8]=r,this.mat4[9]=a,this.mat4[10]=e.mat4[10],this.mat4[11]=e.mat4[14],this.mat4[12]=n,this.mat4[13]=o,this.mat4[14]=i,this.mat4[15]=e.mat4[15]):I(e)&&(t=e[1],r=e[2],n=e[3],a=e[6],o=e[7],i=e[11],this.mat4[0]=e[0],this.mat4[1]=e[4],this.mat4[2]=e[8],this.mat4[3]=e[12],this.mat4[4]=t,this.mat4[5]=e[5],this.mat4[6]=e[9],this.mat4[7]=e[13],this.mat4[8]=r,this.mat4[9]=a,this.mat4[10]=e[10],this.mat4[11]=e[14],this.mat4[12]=n,this.mat4[13]=o,this.mat4[14]=i,this.mat4[15]=e[15]),this},L.default.Matrix.prototype.invert=function(e){var t,r,n,a,o,i,s,l,p,u,c,d,h,m,f,y;e instanceof L.default.Matrix?(t=e.mat4[0],r=e.mat4[1],n=e.mat4[2],a=e.mat4[3],o=e.mat4[4],i=e.mat4[5],s=e.mat4[6],l=e.mat4[7],p=e.mat4[8],u=e.mat4[9],c=e.mat4[10],d=e.mat4[11],h=e.mat4[12],m=e.mat4[13],f=e.mat4[14],y=e.mat4[15]):I(e)&&(t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],i=e[5],s=e[6],l=e[7],p=e[8],u=e[9],c=e[10],d=e[11],h=e[12],m=e[13],f=e[14],y=e[15]);var g=t*i-r*o,v=t*s-n*o,b=t*l-a*o,_=r*s-n*i,x=r*l-a*i,S=n*l-a*s,w=p*m-u*h,M=p*f-c*h,E=p*y-d*h,T=u*f-c*m,C=u*y-d*m,N=c*y-d*f,O=g*N-v*C+b*T+_*E-x*M+S*w;return O?(O=1/O,this.mat4[0]=(i*N-s*C+l*T)*O,this.mat4[1]=(n*C-r*N-a*T)*O,this.mat4[2]=(m*S-f*x+y*_)*O,this.mat4[3]=(c*x-u*S-d*_)*O,this.mat4[4]=(s*E-o*N-l*M)*O,this.mat4[5]=(t*N-n*E+a*M)*O,this.mat4[6]=(f*b-h*S-y*v)*O,this.mat4[7]=(p*S-c*b+d*v)*O,this.mat4[8]=(o*C-i*E+l*w)*O,this.mat4[9]=(r*E-t*C-a*w)*O,this.mat4[10]=(h*x-m*b+y*g)*O,this.mat4[11]=(u*b-p*x-d*g)*O,this.mat4[12]=(i*M-o*T-s*w)*O,this.mat4[13]=(t*T-r*M+n*w)*O,this.mat4[14]=(m*v-h*_-f*g)*O,this.mat4[15]=(p*_-u*v+c*g)*O,this):null},L.default.Matrix.prototype.invert3x3=function(){var e=this.mat3[0],t=this.mat3[1],r=this.mat3[2],n=this.mat3[3],a=this.mat3[4],o=this.mat3[5],i=this.mat3[6],s=this.mat3[7],l=this.mat3[8],p=l*a-o*s,u=-l*n+o*i,c=s*n-a*i,d=e*p+t*u+r*c;return d?(d=1/d,this.mat3[0]=p*d,this.mat3[1]=(-l*t+r*s)*d,this.mat3[2]=(o*t-r*a)*d,this.mat3[3]=u*d,this.mat3[4]=(l*e-r*i)*d,this.mat3[5]=(-o*e+r*n)*d,this.mat3[6]=c*d,this.mat3[7]=(-s*e+t*i)*d,this.mat3[8]=(a*e-t*n)*d,this):null},L.default.Matrix.prototype.transpose3x3=function(e){var t=e[1],r=e[2],n=e[5];return this.mat3[1]=e[3],this.mat3[2]=e[6],this.mat3[3]=t,this.mat3[5]=e[7],this.mat3[6]=r,this.mat3[7]=n,this},L.default.Matrix.prototype.inverseTranspose=function(e){void 0===this.mat3?console.error("sorry, this function only works with mat3"):(this.mat3[0]=e.mat4[0],this.mat3[1]=e.mat4[1],this.mat3[2]=e.mat4[2],this.mat3[3]=e.mat4[4],this.mat3[4]=e.mat4[5],this.mat3[5]=e.mat4[6],this.mat3[6]=e.mat4[8],this.mat3[7]=e.mat4[9],this.mat3[8]=e.mat4[10]);var t=this.invert3x3();if(t)t.transpose3x3(this.mat3);else for(var r=0;r<9;r++)this.mat3[r]=0;return this},L.default.Matrix.prototype.determinant=function(){var e=this.mat4[0]*this.mat4[5]-this.mat4[1]*this.mat4[4],t=this.mat4[0]*this.mat4[6]-this.mat4[2]*this.mat4[4],r=this.mat4[0]*this.mat4[7]-this.mat4[3]*this.mat4[4],n=this.mat4[1]*this.mat4[6]-this.mat4[2]*this.mat4[5],a=this.mat4[1]*this.mat4[7]-this.mat4[3]*this.mat4[5],o=this.mat4[2]*this.mat4[7]-this.mat4[3]*this.mat4[6],i=this.mat4[8]*this.mat4[13]-this.mat4[9]*this.mat4[12],s=this.mat4[8]*this.mat4[14]-this.mat4[10]*this.mat4[12],l=this.mat4[8]*this.mat4[15]-this.mat4[11]*this.mat4[12],p=this.mat4[9]*this.mat4[14]-this.mat4[10]*this.mat4[13],u=this.mat4[9]*this.mat4[15]-this.mat4[11]*this.mat4[13];return e*(this.mat4[10]*this.mat4[15]-this.mat4[11]*this.mat4[14])-t*u+r*p+n*l-a*s+o*i},L.default.Matrix.prototype.mult=function(e){var t;if(e===this||e===this.mat4)t=this.copy().mat4;else if(e instanceof L.default.Matrix)t=e.mat4;else if(I(e))t=e;else {if(16!==arguments.length)return;t=arguments;}var r=this.mat4[0],n=this.mat4[1],a=this.mat4[2],o=this.mat4[3];return this.mat4[0]=r*t[0]+n*t[4]+a*t[8]+o*t[12],this.mat4[1]=r*t[1]+n*t[5]+a*t[9]+o*t[13],this.mat4[2]=r*t[2]+n*t[6]+a*t[10]+o*t[14],this.mat4[3]=r*t[3]+n*t[7]+a*t[11]+o*t[15],r=this.mat4[4],n=this.mat4[5],a=this.mat4[6],o=this.mat4[7],this.mat4[4]=r*t[0]+n*t[4]+a*t[8]+o*t[12],this.mat4[5]=r*t[1]+n*t[5]+a*t[9]+o*t[13],this.mat4[6]=r*t[2]+n*t[6]+a*t[10]+o*t[14],this.mat4[7]=r*t[3]+n*t[7]+a*t[11]+o*t[15],r=this.mat4[8],n=this.mat4[9],a=this.mat4[10],o=this.mat4[11],this.mat4[8]=r*t[0]+n*t[4]+a*t[8]+o*t[12],this.mat4[9]=r*t[1]+n*t[5]+a*t[9]+o*t[13],this.mat4[10]=r*t[2]+n*t[6]+a*t[10]+o*t[14],this.mat4[11]=r*t[3]+n*t[7]+a*t[11]+o*t[15],r=this.mat4[12],n=this.mat4[13],a=this.mat4[14],o=this.mat4[15],this.mat4[12]=r*t[0]+n*t[4]+a*t[8]+o*t[12],this.mat4[13]=r*t[1]+n*t[5]+a*t[9]+o*t[13],this.mat4[14]=r*t[2]+n*t[6]+a*t[10]+o*t[14],this.mat4[15]=r*t[3]+n*t[7]+a*t[11]+o*t[15],this},L.default.Matrix.prototype.apply=function(e){var t;if(e===this||e===this.mat4)t=this.copy().mat4;else if(e instanceof L.default.Matrix)t=e.mat4;else if(I(e))t=e;else {if(16!==arguments.length)return;t=arguments;}var r=this.mat4,n=r[0],a=r[4],o=r[8],i=r[12];r[0]=t[0]*n+t[1]*a+t[2]*o+t[3]*i,r[4]=t[4]*n+t[5]*a+t[6]*o+t[7]*i,r[8]=t[8]*n+t[9]*a+t[10]*o+t[11]*i,r[12]=t[12]*n+t[13]*a+t[14]*o+t[15]*i;var s=r[1],l=r[5],p=r[9],u=r[13];r[1]=t[0]*s+t[1]*l+t[2]*p+t[3]*u,r[5]=t[4]*s+t[5]*l+t[6]*p+t[7]*u,r[9]=t[8]*s+t[9]*l+t[10]*p+t[11]*u,r[13]=t[12]*s+t[13]*l+t[14]*p+t[15]*u;var c=r[2],d=r[6],h=r[10],m=r[14];r[2]=t[0]*c+t[1]*d+t[2]*h+t[3]*m,r[6]=t[4]*c+t[5]*d+t[6]*h+t[7]*m,r[10]=t[8]*c+t[9]*d+t[10]*h+t[11]*m,r[14]=t[12]*c+t[13]*d+t[14]*h+t[15]*m;var f=r[3],y=r[7],g=r[11],v=r[15];return r[3]=t[0]*f+t[1]*y+t[2]*g+t[3]*v,r[7]=t[4]*f+t[5]*y+t[6]*g+t[7]*v,r[11]=t[8]*f+t[9]*y+t[10]*g+t[11]*v,r[15]=t[12]*f+t[13]*y+t[14]*g+t[15]*v,this},L.default.Matrix.prototype.scale=function(e,t,r){return e instanceof L.default.Vector?(t=e.y,r=e.z,e=e.x):e instanceof Array&&(t=e[1],r=e[2],e=e[0]),this.mat4[0]*=e,this.mat4[1]*=e,this.mat4[2]*=e,this.mat4[3]*=e,this.mat4[4]*=t,this.mat4[5]*=t,this.mat4[6]*=t,this.mat4[7]*=t,this.mat4[8]*=r,this.mat4[9]*=r,this.mat4[10]*=r,this.mat4[11]*=r,this},L.default.Matrix.prototype.rotate=function(e,t,r,n){t instanceof L.default.Vector?(r=t.y,n=t.z,t=t.x):t instanceof Array&&(r=t[1],n=t[2],t=t[0]);var a=Math.sqrt(t*t+r*r+n*n);t*=1/a,r*=1/a,n*=1/a;var o=this.mat4[0],i=this.mat4[1],s=this.mat4[2],l=this.mat4[3],p=this.mat4[4],u=this.mat4[5],c=this.mat4[6],d=this.mat4[7],h=this.mat4[8],m=this.mat4[9],f=this.mat4[10],y=this.mat4[11],g=Math.sin(e),v=Math.cos(e),b=1-v,_=t*t*b+v,x=r*t*b+n*g,S=n*t*b-r*g,w=t*r*b-n*g,M=r*r*b+v,E=n*r*b+t*g,T=t*n*b+r*g,C=r*n*b-t*g,N=n*n*b+v;return this.mat4[0]=o*_+p*x+h*S,this.mat4[1]=i*_+u*x+m*S,this.mat4[2]=s*_+c*x+f*S,this.mat4[3]=l*_+d*x+y*S,this.mat4[4]=o*w+p*M+h*E,this.mat4[5]=i*w+u*M+m*E,this.mat4[6]=s*w+c*M+f*E,this.mat4[7]=l*w+d*M+y*E,this.mat4[8]=o*T+p*C+h*N,this.mat4[9]=i*T+u*C+m*N,this.mat4[10]=s*T+c*C+f*N,this.mat4[11]=l*T+d*C+y*N,this},L.default.Matrix.prototype.translate=function(e){var t=e[0],r=e[1],n=e[2]||0;this.mat4[12]+=this.mat4[0]*t+this.mat4[4]*r+this.mat4[8]*n,this.mat4[13]+=this.mat4[1]*t+this.mat4[5]*r+this.mat4[9]*n,this.mat4[14]+=this.mat4[2]*t+this.mat4[6]*r+this.mat4[10]*n,this.mat4[15]+=this.mat4[3]*t+this.mat4[7]*r+this.mat4[11]*n;},L.default.Matrix.prototype.rotateX=function(e){this.rotate(e,1,0,0);},L.default.Matrix.prototype.rotateY=function(e){this.rotate(e,0,1,0);},L.default.Matrix.prototype.rotateZ=function(e){this.rotate(e,0,0,1);},L.default.Matrix.prototype.perspective=function(e,t,r,n){var a=1/Math.tan(e/2),o=1/(r-n);return this.mat4[0]=a/t,this.mat4[1]=0,this.mat4[2]=0,this.mat4[3]=0,this.mat4[4]=0,this.mat4[5]=a,this.mat4[6]=0,this.mat4[7]=0,this.mat4[8]=0,this.mat4[9]=0,this.mat4[10]=(n+r)*o,this.mat4[11]=-1,this.mat4[12]=0,this.mat4[13]=0,this.mat4[14]=2*n*r*o,this.mat4[15]=0,this},L.default.Matrix.prototype.ortho=function(e,t,r,n,a,o){var i=1/(e-t),s=1/(r-n),l=1/(a-o);return this.mat4[0]=-2*i,this.mat4[1]=0,this.mat4[2]=0,this.mat4[3]=0,this.mat4[4]=0,this.mat4[5]=-2*s,this.mat4[6]=0,this.mat4[7]=0,this.mat4[8]=0,this.mat4[9]=0,this.mat4[10]=2*l,this.mat4[11]=0,this.mat4[12]=(e+t)*i,this.mat4[13]=(n+r)*s,this.mat4[14]=(o+a)*l,this.mat4[15]=1,this};var o=L.default.Matrix;r.default=o;},{"../core/main":32}],83:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.RenderBuffer=function(e,t,r,n,a,o){this.size=e,this.src=t,this.dst=r,this.attr=n,this._renderer=a,this.map=o;},a.default.RenderBuffer.prototype._prepareBuffer=function(e,t){var r,n=t.attributes,a=this._renderer.GL;r=e.model?e.model:e;var o=n[this.attr];if(o){var i=e[this.dst],s=r[this.src];if(0<s.length){var l=!i;if(l&&(e[this.dst]=i=a.createBuffer()),a.bindBuffer(a.ARRAY_BUFFER,i),l||!1!==r.dirtyFlags[this.src]){var p=this.map,u=p?p(s):s;this._renderer._bindBuffer(i,a.ARRAY_BUFFER,u),r.dirtyFlags[this.src]=!1;}t.enableAttrib(o,this.size);}}};var o=a.default.RenderBuffer;r.default=o;},{"../core/main":32}],84:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("../core/main"))&&n.__esModule?n:{default:n},l=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=p();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}e("./p5.RenderBuffer"),s.default.RendererGL.prototype.beginShape=function(e){return this.immediateMode.shapeMode=void 0!==e?e:l.TRIANGLE_FAN,this.immediateMode.geometry.reset(),this},s.default.RendererGL.prototype.vertex=function(e,t){var r,n,a;r=n=a=0,3===arguments.length?r=arguments[2]:4===arguments.length?(n=arguments[2],a=arguments[3]):5===arguments.length&&(r=arguments[2],n=arguments[3],a=arguments[4]);var o=new s.default.Vector(e,t,r);this.immediateMode.geometry.vertices.push(o);var i=this.curFillColor||[.5,.5,.5,1];return this.immediateMode.geometry.vertexColors.push(i[0],i[1],i[2],i[3]),this.textureMode===l.IMAGE&&(null!==this._tex?0<this._tex.width&&0<this._tex.height&&(n/=this._tex.width,a/=this._tex.height):null===this._tex&&4<=arguments.length&&console.warn("You must first call texture() before using vertex() with image based u and v coordinates")),this.immediateMode.geometry.uvs.push(n,a),this.immediateMode._bezierVertex[0]=e,this.immediateMode._bezierVertex[1]=t,this.immediateMode._bezierVertex[2]=r,this.immediateMode._quadraticVertex[0]=e,this.immediateMode._quadraticVertex[1]=t,this.immediateMode._quadraticVertex[2]=r,this},s.default.RendererGL.prototype.endShape=function(e,t,r,n,a,o){return this.immediateMode.shapeMode===l.POINTS?this._drawPoints(this.immediateMode.geometry.vertices,this.immediateMode.buffers.point):(this._processVertices.apply(this,arguments),this._doFill&&1<this.immediateMode.geometry.vertices.length&&this._drawImmediateFill(),this._doStroke&&1<this.immediateMode.geometry.lineVertices.length&&this._drawImmediateStroke(),this.isBezier=!1,this.isQuadratic=!1,this.isCurve=!1,this.immediateMode._bezierVertex.length=0,this.immediateMode._quadraticVertex.length=0,this.immediateMode._curveVertex.length=0),this},s.default.RendererGL.prototype._processVertices=function(e){if(0!==this.immediateMode.geometry.vertices.length){var t=this._doStroke&&this.drawMode!==l.TEXTURE,r=e===l.CLOSE;t&&(this.immediateMode.geometry.edges=this._calculateEdges(this.immediateMode.shapeMode,this.immediateMode.geometry.vertices,r),this.immediateMode.geometry._edgesToVertices());var n=this.immediateMode.shapeMode===l.TESS;(this.isBezier||this.isQuadratic||this.isCurve||n)&&this.immediateMode.shapeMode!==l.LINES&&this._tesselateShape();}},s.default.RendererGL.prototype._calculateEdges=function(e,t,r){var n=[],a=0;switch(e){case l.TRIANGLE_STRIP:for(a=0;a<t.length-2;a++)n.push([a,a+1]),n.push([a,a+2]);n.push([a,a+1]);break;case l.TRIANGLES:for(a=0;a<t.length-2;a+=3)n.push([a,a+1]),n.push([a+1,a+2]),n.push([a+2,a]);break;case l.LINES:for(a=0;a<t.length-1;a+=2)n.push([a,a+1]);break;default:for(a=0;a<t.length-1;a++)n.push([a,a+1]);}return r&&n.push([t.length-1,0]),n},s.default.RendererGL.prototype._tesselateShape=function(){this.immediateMode.shapeMode=l.TRIANGLES;var e=[new Float32Array(this._vToNArray(this.immediateMode.geometry.vertices))],t=this._triangulate(e);this.immediateMode.geometry.vertices=[];for(var r=0,n=t.length;r<n;r+=3)this.vertex(t[r],t[r+1],t[r+2]);},s.default.RendererGL.prototype._drawImmediateFill=function(){var e=this.GL,t=this._getImmediateFillShader();this._calculateNormals(this.immediateMode.geometry),this._setFillUniforms(t);var r=!0,n=!1,a=void 0;try{for(var o,i=this.immediateMode.buffers.fill[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){o.value._prepareBuffer(this.immediateMode.geometry,t);}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}this.immediateMode.shapeMode!==l.LINE_STRIP&&this.immediateMode.shapeMode!==l.LINES||(this.immediateMode.shapeMode=l.TRIANGLE_FAN),this._applyColorBlend(this.curFillColor),e.drawArrays(this.immediateMode.shapeMode,0,this.immediateMode.geometry.vertices.length),t.unbindShader();},s.default.RendererGL.prototype._drawImmediateStroke=function(){var e=this.GL,t=this._getImmediateStrokeShader();this._setStrokeUniforms(t);var r=!0,n=!1,a=void 0;try{for(var o,i=this.immediateMode.buffers.stroke[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){o.value._prepareBuffer(this.immediateMode.geometry,t);}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}this._applyColorBlend(this.curStrokeColor),e.drawArrays(e.TRIANGLES,0,this.immediateMode.geometry.lineVertices.length),t.unbindShader();},s.default.RendererGL.prototype._calculateNormals=function(e){e.vertices.forEach(function(){e.vertexNormals.push(new s.default.Vector(0,0,1));});};var a=s.default.RendererGL;r.default=a;},{"../core/constants":22,"../core/main":32,"./p5.RenderBuffer":83}],85:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=e("../core/main"))&&n.__esModule?n:{default:n};e("./p5.RendererGL"),e("./p5.RenderBuffer");var a=0;i.default.RendererGL.prototype._initBufferDefaults=function(e){if(this._freeBuffers(e),1e3<++a){var t=Object.keys(this.retainedMode.geometry)[0];delete this.retainedMode.geometry[t],a--;}return this.retainedMode.geometry[e]={}},i.default.RendererGL.prototype._freeBuffers=function(e){var s=this.retainedMode.geometry[e];if(s){delete this.retainedMode.geometry[e],a--;var l=this.GL;s.indexBuffer&&l.deleteBuffer(s.indexBuffer),t(this.retainedMode.buffers.stroke),t(this.retainedMode.buffers.fill);}function t(e){var t=!0,r=!1,n=void 0;try{for(var a,o=e[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value;s[i.dst]&&(l.deleteBuffer(s[i.dst]),s[i.dst]=null);}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}}},i.default.RendererGL.prototype.createBuffers=function(e,t){var r=this.GL,n=this._initBufferDefaults(e);n.model=t;var a=n.indexBuffer;if(t.faces.length){a=a||(n.indexBuffer=r.createBuffer());var o=i.default.RendererGL.prototype._flatten(t.faces);this._bindBuffer(a,r.ELEMENT_ARRAY_BUFFER,o,Uint16Array),n.vertexCount=3*t.faces.length;}else a&&(r.deleteBuffer(a),n.indexBuffer=null),n.vertexCount=t.vertices?t.vertices.length:0;return n.lineVertexCount=t.lineVertices?t.lineVertices.length:0,n},i.default.RendererGL.prototype.drawBuffers=function(e){var t=this.GL,r=this.retainedMode.geometry[e];if(this._doStroke&&0<r.lineVertexCount){var n=this._getRetainedStrokeShader();this._setStrokeUniforms(n);var a=!0,o=!1,i=void 0;try{for(var s,l=this.retainedMode.buffers.stroke[Symbol.iterator]();!(a=(s=l.next()).done);a=!0){s.value._prepareBuffer(r,n);}}catch(e){o=!0,i=e;}finally{try{a||null==l.return||l.return();}finally{if(o)throw i}}this._applyColorBlend(this.curStrokeColor),this._drawArrays(t.TRIANGLES,e),n.unbindShader();}if(this._doFill){var p=this._getRetainedFillShader();this._setFillUniforms(p);var u=!0,c=!1,d=void 0;try{for(var h,m=this.retainedMode.buffers.fill[Symbol.iterator]();!(u=(h=m.next()).done);u=!0){h.value._prepareBuffer(r,p);}}catch(e){c=!0,d=e;}finally{try{u||null==m.return||m.return();}finally{if(c)throw d}}r.indexBuffer&&this._bindBuffer(r.indexBuffer,t.ELEMENT_ARRAY_BUFFER),this._applyColorBlend(this.curFillColor),this._drawElements(t.TRIANGLES,e),p.unbindShader();}return this},i.default.RendererGL.prototype.drawBuffersScaled=function(e,t,r,n){var a=this.uMVMatrix.copy();try{this.uMVMatrix.scale(t,r,n),this.drawBuffers(e);}finally{this.uMVMatrix=a;}},i.default.RendererGL.prototype._drawArrays=function(e,t){return this.GL.drawArrays(e,0,this.retainedMode.geometry[t].lineVertexCount),this},i.default.RendererGL.prototype._drawElements=function(e,t){var r=this.retainedMode.geometry[t],n=this.GL;r.indexBuffer?n.drawElements(n.TRIANGLES,r.vertexCount,n.UNSIGNED_SHORT,0):n.drawArrays(e||n.TRIANGLES,0,r.vertexCount);},i.default.RendererGL.prototype._drawPoints=function(e,t){var r=this.GL,n=this._getImmediatePointShader();this._setPointUniforms(n),this._bindBuffer(t,r.ARRAY_BUFFER,this._vToNArray(e),Float32Array,r.STATIC_DRAW),n.enableAttrib(n.attributes.aPosition,3),r.drawArrays(r.Points,0,e.length),n.unbindShader();};var o=i.default.RendererGL;r.default=o;},{"../core/main":32,"./p5.RenderBuffer":83,"./p5.RendererGL":86}],86:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var p=a(e("../core/main")),o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants")),n=a(e("libtess"));e("./p5.Shader"),e("./p5.Camera"),e("../core/p5.Renderer"),e("./p5.Matrix");e("path");function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function a(e){return e&&e.__esModule?e:{default:e}}function l(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var u="precision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\n\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];\t\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  if (uSpecular)\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\n  return lr;\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n",c={immediateVert:"attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",vertexColorVert:"attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",vertexColorFrag:"precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}",normalVert:"attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n}\n",normalFrag:"precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",basicFrag:"precision mediump float;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}",lightVert:u+"// include lighting.glgl\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n}\n",lightTextureFrag:"precision highp float;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * vDiffuseColor + vSpecularColor;\n  }\n}",phongVert:"precision highp float;\nprecision highp int;\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = uNormalMatrix * aNormal;\n  vTexCoord = aTexCoord;\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n}\n",phongFrag:u+"// include lighting.glsl\nprecision highp float;\nprecision highp int;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\n\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * (diffuse + vAmbientColor) + specular;\n  }\n}",fontVert:"precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nvarying vec2 vTexCoord;\nvarying float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord;\n  w = gl_Position.w;\n}\n",fontFrag:"#extension GL_OES_standard_derivatives : enable\nprecision mediump float;\n\n#if 0\n  // simulate integer math using floats\n\t#define int float\n\t#define ivec2 vec2\n\t#define INT(x) float(x)\n\n\tint ifloor(float v) { return floor(v); }\n\tivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n\tprecision highp int;\n\t#define INT(x) x\n\n\tint ifloor(float v) { return int(v); }\n\tint ifloor(int v) { return v; }\n\tivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nvarying vec2 vTexCoord;\n\n// some helper functions\nint round(float v) { return ifloor(v + 0.5); }\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = round(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  gl_FragColor = uMaterialColor;\n  gl_FragColor.a *= saturate(max(antialias, cover));\n}",lineVert:"/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform vec4 uViewport;\nuniform int uPerspective;\n\nattribute vec4 aPosition;\nattribute vec4 aDirection;\n  \nvoid main() {\n  // using a scale <1 moves the lines towards the camera\n  // in order to prevent popping effects due to half of\n  // the line disappearing behind the geometry faces.\n  vec3 scale = vec3(0.9995);\n\n  vec4 posp = uModelViewMatrix * aPosition;\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  posp.xyz = posp.xyz * scale;\n  posq.xyz = posq.xyz * scale;\n\n  vec4 p = uProjectionMatrix * posp;\n  vec4 q = uProjectionMatrix * posq;\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\n\n  // flip tangent to normal (it's already normalized)\n  vec2 normal = vec2(-tangent.y, tangent.x);\n\n  float thickness = aDirection.w * uStrokeWeight;\n  vec2 offset = normal * thickness / 2.0;\n\n  vec2 curPerspScale;\n\n  if(uPerspective == 1) {\n    // Perspective ---\n    // convert from world to clip by multiplying with projection scaling factor\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n    // invert Y, projections in Processing invert Y\n    curPerspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\n  } else {\n    // No Perspective ---\n    // multiply by W (to cancel out division by W later in the pipeline) and\n    // convert from screen to clip (derived from clip to screen above)\n    curPerspScale = p.w / (0.5 * uViewport.zw);\n  }\n\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\n  gl_Position.zw = p.zw;\n}\n",lineFrag:"precision mediump float;\nprecision mediump int;\n\nuniform vec4 uMaterialColor;\n\nvoid main() {\n  gl_FragColor = uMaterialColor;\n}",pointVert:"attribute vec3 aPosition;\nuniform float uPointSize;\nvarying float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n\tvec4 positionVec4 =  vec4(aPosition, 1.0);\n\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\tgl_PointSize = uPointSize;\n\tvStrokeWeight = uPointSize;\n}",pointFrag:"precision mediump float;\nprecision mediump int;\nuniform vec4 uMaterialColor;\nvarying float vStrokeWeight;\n\nvoid main(){\n\tfloat mask = 0.0;\n\n\t// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n\tmask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n\t// if strokeWeight is 1 or less lets just draw a square\n\t// this prevents weird artifacting from carving circles when our points are really small\n\t// if strokeWeight is larger than 1, we just use it as is\n\n\tmask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n\t// throw away the borders of the mask\n    // otherwise we get weird alpha blending issues\n\n\tif(mask > 0.98){\n      discard;\n  \t}\n\n  \tgl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\n}"};p.default.RendererGL=function(e,t,r,n){return p.default.Renderer.call(this,e,t,r),this._setAttributeDefaults(t),this._initContext(),this.isP3D=!0,this.GL=this.drawingContext,this._pInst._setProperty("drawingContext",this.drawingContext),this._isErasing=!1,this._enableLighting=!1,this.ambientLightColors=[],this.specularColors=[1,1,1],this.directionalLightDirections=[],this.directionalLightDiffuseColors=[],this.directionalLightSpecularColors=[],this.pointLightPositions=[],this.pointLightDiffuseColors=[],this.pointLightSpecularColors=[],this.spotLightPositions=[],this.spotLightDirections=[],this.spotLightDiffuseColors=[],this.spotLightSpecularColors=[],this.spotLightAngle=[],this.spotLightConc=[],this.drawMode=o.FILL,this.curFillColor=this._cachedFillStyle=[1,1,1,1],this.curStrokeColor=this._cachedStrokeStyle=[0,0,0,1],this.curBlendMode=o.BLEND,this._cachedBlendMode=void 0,this.blendExt=this.GL.getExtension("EXT_blend_minmax"),this._isBlending=!1,this._useSpecularMaterial=!1,this._useEmissiveMaterial=!1,this._useNormalMaterial=!1,this._useShininess=1,this._tint=[255,255,255,255],this.constantAttenuation=1,this.linearAttenuation=0,this.quadraticAttenuation=0,this.uMVMatrix=new p.default.Matrix,this.uPMatrix=new p.default.Matrix,this.uNMatrix=new p.default.Matrix("mat3"),this._curCamera=new p.default.Camera(this),this._curCamera._computeCameraDefaultSettings(),this._curCamera._setDefaultCamera(),this._defaultLightShader=void 0,this._defaultImmediateModeShader=void 0,this._defaultNormalShader=void 0,this._defaultColorShader=void 0,this._defaultPointShader=void 0,this.userFillShader=void 0,this.userStrokeShader=void 0,this.userPointShader=void 0,this.retainedMode={geometry:{},buffers:{stroke:[new p.default.RenderBuffer(3,"lineVertices","lineVertexBuffer","aPosition",this,this._flatten),new p.default.RenderBuffer(4,"lineNormals","lineNormalBuffer","aDirection",this,this._flatten)],fill:[new p.default.RenderBuffer(3,"vertices","vertexBuffer","aPosition",this,this._vToNArray),new p.default.RenderBuffer(3,"vertexNormals","normalBuffer","aNormal",this,this._vToNArray),new p.default.RenderBuffer(4,"vertexColors","colorBuffer","aMaterialColor",this),new p.default.RenderBuffer(3,"vertexAmbients","ambientBuffer","aAmbientColor",this),new p.default.RenderBuffer(2,"uvs","uvBuffer","aTexCoord",this,this._flatten)],text:[new p.default.RenderBuffer(3,"vertices","vertexBuffer","aPosition",this,this._vToNArray),new p.default.RenderBuffer(2,"uvs","uvBuffer","aTexCoord",this,this._flatten)]}},this.immediateMode={geometry:new p.default.Geometry,shapeMode:o.TRIANGLE_FAN,_bezierVertex:[],_quadraticVertex:[],_curveVertex:[],buffers:{fill:[new p.default.RenderBuffer(3,"vertices","vertexBuffer","aPosition",this,this._vToNArray),new p.default.RenderBuffer(3,"vertexNormals","normalBuffer","aNormal",this,this._vToNArray),new p.default.RenderBuffer(4,"vertexColors","colorBuffer","aVertexColor",this),new p.default.RenderBuffer(3,"vertexAmbients","ambientBuffer","aAmbientColor",this),new p.default.RenderBuffer(2,"uvs","uvBuffer","aTexCoord",this,this._flatten)],stroke:[new p.default.RenderBuffer(3,"lineVertices","lineVertexBuffer","aPosition",this,this._flatten),new p.default.RenderBuffer(4,"lineNormals","lineNormalBuffer","aDirection",this,this._flatten)],point:this.GL.createBuffer()}},this.pointSize=5,this.curStrokeWeight=1,this.textures=[],this.textureMode=o.IMAGE,this.textureWrapX=o.CLAMP,this.textureWrapY=o.CLAMP,this._tex=null,this._curveTightness=6,this._lookUpTableBezier=[],this._lookUpTableQuadratic=[],this._lutBezierDetail=0,this._lutQuadraticDetail=0,this._tessy=this._initTessy(),this.fontInfos={},this._curShader=void 0,this},p.default.RendererGL.prototype=Object.create(p.default.Renderer.prototype),p.default.RendererGL.prototype._setAttributeDefaults=function(e){var t={alpha:!0,depth:!0,stencil:!0,antialias:navigator.userAgent.toLowerCase().includes("safari"),premultipliedAlpha:!1,preserveDrawingBuffer:!0,perPixelLighting:!0};null===e._glAttributes?e._glAttributes=t:e._glAttributes=Object.assign(t,e._glAttributes);},p.default.RendererGL.prototype._initContext=function(){try{if(this.drawingContext=this.canvas.getContext("webgl",this._pInst._glAttributes)||this.canvas.getContext("experimental-webgl",this._pInst._glAttributes),null===this.drawingContext)throw new Error("Error creating webgl context");var e=this.drawingContext;e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),this._viewport=this.drawingContext.getParameter(this.drawingContext.VIEWPORT);}catch(e){throw e}},p.default.RendererGL.prototype._resetContext=function(e,t){var r=this.width,n=this.height,a=this.canvas.id,o=this._pInst instanceof p.default.Graphics;if(o){var i=this._pInst;i.canvas.parentNode.removeChild(i.canvas),i.canvas=document.createElement("canvas"),(i._pInst._userNode||document.body).appendChild(i.canvas),p.default.Element.call(i,i.canvas,i._pInst),i.width=r,i.height=n;}else {var s=this.canvas;s&&s.parentNode.removeChild(s),(s=document.createElement("canvas")).id=a,this._pInst._userNode?this._pInst._userNode.appendChild(s):document.body.appendChild(s),this._pInst.canvas=s;}var l=new p.default.RendererGL(this._pInst.canvas,this._pInst,!o);this._pInst._setProperty("_renderer",l),l.resize(r,n),l._applyDefaults(),o||this._pInst._elements.push(l),"function"==typeof t&&setTimeout(function(){t.apply(window._renderer,e);},0);},p.default.prototype.setAttributes=function(e,t){if(void 0!==this._glAttributes){var r=!0;if(void 0!==t?(null===this._glAttributes&&(this._glAttributes={}),this._glAttributes[e]!==t&&(this._glAttributes[e]=t,r=!1)):e instanceof Object&&this._glAttributes!==e&&(this._glAttributes=e,r=!1),this._renderer.isP3D&&!r){if(!this._setupDone)for(var n in this._renderer.retainedMode.geometry)if(this._renderer.retainedMode.geometry.hasOwnProperty(n))return void console.error("Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()");this.push(),this._renderer._resetContext(),this.pop(),this._renderer._curCamera&&(this._renderer._curCamera._renderer=this._renderer);}}else console.log("You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.");},p.default.RendererGL.prototype._update=function(){this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0],this._curCamera.cameraMatrix.mat4[1],this._curCamera.cameraMatrix.mat4[2],this._curCamera.cameraMatrix.mat4[3],this._curCamera.cameraMatrix.mat4[4],this._curCamera.cameraMatrix.mat4[5],this._curCamera.cameraMatrix.mat4[6],this._curCamera.cameraMatrix.mat4[7],this._curCamera.cameraMatrix.mat4[8],this._curCamera.cameraMatrix.mat4[9],this._curCamera.cameraMatrix.mat4[10],this._curCamera.cameraMatrix.mat4[11],this._curCamera.cameraMatrix.mat4[12],this._curCamera.cameraMatrix.mat4[13],this._curCamera.cameraMatrix.mat4[14],this._curCamera.cameraMatrix.mat4[15]),this.ambientLightColors.length=0,this.specularColors=[1,1,1],this.directionalLightDirections.length=0,this.directionalLightDiffuseColors.length=0,this.directionalLightSpecularColors.length=0,this.pointLightPositions.length=0,this.pointLightDiffuseColors.length=0,this.pointLightSpecularColors.length=0,this.spotLightPositions.length=0,this.spotLightDirections.length=0,this.spotLightDiffuseColors.length=0,this.spotLightSpecularColors.length=0,this.spotLightAngle.length=0,this.spotLightConc.length=0,this._enableLighting=!1,this._tint=[255,255,255,255],this.GL.clear(this.GL.DEPTH_BUFFER_BIT);},p.default.RendererGL.prototype.background=function(){var e,t=(e=this._pInst).color.apply(e,arguments),r=t.levels[0]/255,n=t.levels[1]/255,a=t.levels[2]/255,o=t.levels[3]/255;this.GL.clearColor(r,n,a,o),this.GL.clear(this.GL.COLOR_BUFFER_BIT);},p.default.RendererGL.prototype.fill=function(e,t,r,n){var a=p.default.prototype.color.apply(this._pInst,arguments);this.curFillColor=a._array,this.drawMode=o.FILL,this._useNormalMaterial=!1,this._tex=null;},p.default.RendererGL.prototype.stroke=function(e,t,r,n){arguments[3]=255;var a=p.default.prototype.color.apply(this._pInst,arguments);this.curStrokeColor=a._array;},p.default.RendererGL.prototype.strokeCap=function(e){console.error("Sorry, strokeCap() is not yet implemented in WEBGL mode");},p.default.RendererGL.prototype.strokeJoin=function(e){console.error("Sorry, strokeJoin() is not yet implemented in WEBGL mode");},p.default.RendererGL.prototype.filter=function(e){console.error("filter() does not work in WEBGL mode");},p.default.RendererGL.prototype.blendMode=function(e){e===o.DARKEST||e===o.LIGHTEST||e===o.ADD||e===o.BLEND||e===o.SUBTRACT||e===o.SCREEN||e===o.EXCLUSION||e===o.REPLACE||e===o.MULTIPLY||e===o.REMOVE?this.curBlendMode=e:e!==o.BURN&&e!==o.OVERLAY&&e!==o.HARD_LIGHT&&e!==o.SOFT_LIGHT&&e!==o.DODGE||console.warn("BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.");},p.default.RendererGL.prototype.erase=function(e,t){this._isErasing||(this._applyBlendMode(o.REMOVE),this._isErasing=!0,this._cachedFillStyle=this.curFillColor.slice(),this.curFillColor=[1,1,1,e/255],this._cachedStrokeStyle=this.curStrokeColor.slice(),this.curStrokeColor=[1,1,1,t/255]);},p.default.RendererGL.prototype.noErase=function(){this._isErasing&&(this._isErasing=!1,this.curFillColor=this._cachedFillStyle.slice(),this.curStrokeColor=this._cachedStrokeStyle.slice(),this.blendMode(this._cachedBlendMode));},p.default.RendererGL.prototype.strokeWeight=function(e){this.curStrokeWeight!==e&&(this.pointSize=e,this.curStrokeWeight=e);},p.default.RendererGL.prototype._getPixel=function(e,t){var r;return r=new Uint8Array(4),this.drawingContext.readPixels(e,t,1,1,this.drawingContext.RGBA,this.drawingContext.UNSIGNED_BYTE,r),[r[0],r[1],r[2],r[3]]},p.default.RendererGL.prototype.loadPixels=function(){var e=this._pixelsState;if(!0===this._pInst._glAttributes.preserveDrawingBuffer){var t=e.pixels,r=this.GL.drawingBufferWidth*this.GL.drawingBufferHeight*4;t instanceof Uint8Array&&t.length===r||(t=new Uint8Array(r),this._pixelsState._setProperty("pixels",t));var n=this._pInst._pixelDensity;this.GL.readPixels(0,0,this.width*n,this.height*n,this.GL.RGBA,this.GL.UNSIGNED_BYTE,t);}else console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.");},p.default.RendererGL.prototype.geometryInHash=function(e){return void 0!==this.retainedMode.geometry[e]},p.default.RendererGL.prototype.resize=function(e,t){p.default.Renderer.prototype.resize.call(this,e,t),this.GL.viewport(0,0,this.GL.drawingBufferWidth,this.GL.drawingBufferHeight),this._viewport=this.GL.getParameter(this.GL.VIEWPORT),this._curCamera._resize();var r=this._pixelsState;void 0!==r.pixels&&r._setProperty("pixels",new Uint8Array(this.GL.drawingBufferWidth*this.GL.drawingBufferHeight*4));},p.default.RendererGL.prototype.clear=function(){var e=(arguments.length<=0?void 0:arguments[0])||0,t=(arguments.length<=1?void 0:arguments[1])||0,r=(arguments.length<=2?void 0:arguments[2])||0,n=(arguments.length<=3?void 0:arguments[3])||0;this.GL.clearColor(e,t,r,n),this.GL.clear(this.GL.COLOR_BUFFER_BIT|this.GL.DEPTH_BUFFER_BIT);},p.default.RendererGL.prototype.applyMatrix=function(e,t,r,n,a,o){16===arguments.length?p.default.Matrix.prototype.apply.apply(this.uMVMatrix,arguments):this.uMVMatrix.apply([e,t,0,0,r,n,0,0,0,0,1,0,a,o,0,1]);},p.default.RendererGL.prototype.translate=function(e,t,r){return e instanceof p.default.Vector&&(r=e.z,t=e.y,e=e.x),this.uMVMatrix.translate([e,t,r]),this},p.default.RendererGL.prototype.scale=function(e,t,r){return this.uMVMatrix.scale(e,t,r),this},p.default.RendererGL.prototype.rotate=function(e,t){return void 0===t?this.rotateZ(e):(p.default.Matrix.prototype.rotate.apply(this.uMVMatrix,arguments),this)},p.default.RendererGL.prototype.rotateX=function(e){return this.rotate(e,1,0,0),this},p.default.RendererGL.prototype.rotateY=function(e){return this.rotate(e,0,1,0),this},p.default.RendererGL.prototype.rotateZ=function(e){return this.rotate(e,0,0,1),this},p.default.RendererGL.prototype.push=function(){var e=p.default.Renderer.prototype.push.apply(this),t=e.properties;return t.uMVMatrix=this.uMVMatrix.copy(),t.uPMatrix=this.uPMatrix.copy(),t._curCamera=this._curCamera,this._curCamera=this._curCamera.copy(),t.ambientLightColors=this.ambientLightColors.slice(),t.specularColors=this.specularColors.slice(),t.directionalLightDirections=this.directionalLightDirections.slice(),t.directionalLightDiffuseColors=this.directionalLightDiffuseColors.slice(),t.directionalLightSpecularColors=this.directionalLightSpecularColors.slice(),t.pointLightPositions=this.pointLightPositions.slice(),t.pointLightDiffuseColors=this.pointLightDiffuseColors.slice(),t.pointLightSpecularColors=this.pointLightSpecularColors.slice(),t.spotLightPositions=this.spotLightPositions.slice(),t.spotLightDirections=this.spotLightDirections.slice(),t.spotLightDiffuseColors=this.spotLightDiffuseColors.slice(),t.spotLightSpecularColors=this.spotLightSpecularColors.slice(),t.spotLightAngle=this.spotLightAngle.slice(),t.spotLightConc=this.spotLightConc.slice(),t.userFillShader=this.userFillShader,t.userStrokeShader=this.userStrokeShader,t.userPointShader=this.userPointShader,t.pointSize=this.pointSize,t.curStrokeWeight=this.curStrokeWeight,t.curStrokeColor=this.curStrokeColor,t.curFillColor=this.curFillColor,t._useSpecularMaterial=this._useSpecularMaterial,t._useEmissiveMaterial=this._useEmissiveMaterial,t._useShininess=this._useShininess,t.constantAttenuation=this.constantAttenuation,t.linearAttenuation=this.linearAttenuation,t.quadraticAttenuation=this.quadraticAttenuation,t._enableLighting=this._enableLighting,t._useNormalMaterial=this._useNormalMaterial,t._tex=this._tex,t.drawMode=this.drawMode,e},p.default.RendererGL.prototype.resetMatrix=function(){return this.uMVMatrix=p.default.Matrix.identity(this._pInst),this},p.default.RendererGL.prototype._getImmediateStrokeShader=function(){var e=this.userStrokeShader;return e&&e.isStrokeShader()?e:this._getLineShader()},p.default.RendererGL.prototype._getRetainedStrokeShader=p.default.RendererGL.prototype._getImmediateStrokeShader,p.default.RendererGL.prototype._getImmediateFillShader=function(){var e=this.userFillShader;if(this._useNormalMaterial&&(!e||!e.isNormalShader()))return this._getNormalShader();if(this._enableLighting){if(!e||!e.isLightShader())return this._getLightShader()}else if(this._tex){if(!e||!e.isTextureShader())return this._getLightShader()}else if(!e)return this._getImmediateModeShader();return e},p.default.RendererGL.prototype._getRetainedFillShader=function(){if(this._useNormalMaterial)return this._getNormalShader();var e=this.userFillShader;if(this._enableLighting){if(!e||!e.isLightShader())return this._getLightShader()}else if(this._tex){if(!e||!e.isTextureShader())return this._getLightShader()}else if(!e)return this._getColorShader();return e},p.default.RendererGL.prototype._getImmediatePointShader=function(){var e=this.userPointShader;return e&&e.isPointShader()?e:this._getPointShader()},p.default.RendererGL.prototype._getRetainedLineShader=p.default.RendererGL.prototype._getImmediateLineShader,p.default.RendererGL.prototype._getLightShader=function(){return this._defaultLightShader||(this._pInst._glAttributes.perPixelLighting?this._defaultLightShader=new p.default.Shader(this,c.phongVert,c.phongFrag):this._defaultLightShader=new p.default.Shader(this,c.lightVert,c.lightTextureFrag)),this._defaultLightShader},p.default.RendererGL.prototype._getImmediateModeShader=function(){return this._defaultImmediateModeShader||(this._defaultImmediateModeShader=new p.default.Shader(this,c.immediateVert,c.vertexColorFrag)),this._defaultImmediateModeShader},p.default.RendererGL.prototype._getNormalShader=function(){return this._defaultNormalShader||(this._defaultNormalShader=new p.default.Shader(this,c.normalVert,c.normalFrag)),this._defaultNormalShader},p.default.RendererGL.prototype._getColorShader=function(){return this._defaultColorShader||(this._defaultColorShader=new p.default.Shader(this,c.normalVert,c.basicFrag)),this._defaultColorShader},p.default.RendererGL.prototype._getPointShader=function(){return this._defaultPointShader||(this._defaultPointShader=new p.default.Shader(this,c.pointVert,c.pointFrag)),this._defaultPointShader},p.default.RendererGL.prototype._getLineShader=function(){return this._defaultLineShader||(this._defaultLineShader=new p.default.Shader(this,c.lineVert,c.lineFrag)),this._defaultLineShader},p.default.RendererGL.prototype._getFontShader=function(){return this._defaultFontShader||(this.GL.getExtension("OES_standard_derivatives"),this._defaultFontShader=new p.default.Shader(this,c.fontVert,c.fontFrag)),this._defaultFontShader},p.default.RendererGL.prototype._getEmptyTexture=function(){if(!this._emptyTexture){var e=new p.default.Image(1,1);e.set(0,0,255),this._emptyTexture=new p.default.Texture(this,e);}return this._emptyTexture},p.default.RendererGL.prototype.getTexture=function(e){var t=this.textures,r=!0,n=!1,a=void 0;try{for(var o,i=t[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){var s=o.value;if(s.src===e)return s}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}var l=new p.default.Texture(this,e);return t.push(l),l},p.default.RendererGL.prototype._setStrokeUniforms=function(e){e.bindShader(),e.setUniform("uMaterialColor",this.curStrokeColor),e.setUniform("uStrokeWeight",this.curStrokeWeight);},p.default.RendererGL.prototype._setFillUniforms=function(e){e.bindShader(),e.setUniform("uMaterialColor",this.curFillColor),e.setUniform("isTexture",!!this._tex),this._tex&&e.setUniform("uSampler",this._tex),e.setUniform("uTint",this._tint),e.setUniform("uSpecular",this._useSpecularMaterial),e.setUniform("uEmissive",this._useEmissiveMaterial),e.setUniform("uShininess",this._useShininess),e.setUniform("uUseLighting",this._enableLighting);var t=this.pointLightDiffuseColors.length/3;e.setUniform("uPointLightCount",t),e.setUniform("uPointLightLocation",this.pointLightPositions),e.setUniform("uPointLightDiffuseColors",this.pointLightDiffuseColors),e.setUniform("uPointLightSpecularColors",this.pointLightSpecularColors);var r=this.directionalLightDiffuseColors.length/3;e.setUniform("uDirectionalLightCount",r),e.setUniform("uLightingDirection",this.directionalLightDirections),e.setUniform("uDirectionalDiffuseColors",this.directionalLightDiffuseColors),e.setUniform("uDirectionalSpecularColors",this.directionalLightSpecularColors);var n=this.ambientLightColors.length/3;e.setUniform("uAmbientLightCount",n),e.setUniform("uAmbientColor",this.ambientLightColors);var a=this.spotLightDiffuseColors.length/3;e.setUniform("uSpotLightCount",a),e.setUniform("uSpotLightAngle",this.spotLightAngle),e.setUniform("uSpotLightConc",this.spotLightConc),e.setUniform("uSpotLightDiffuseColors",this.spotLightDiffuseColors),e.setUniform("uSpotLightSpecularColors",this.spotLightSpecularColors),e.setUniform("uSpotLightLocation",this.spotLightPositions),e.setUniform("uSpotLightDirection",this.spotLightDirections),e.setUniform("uConstantAttenuation",this.constantAttenuation),e.setUniform("uLinearAttenuation",this.linearAttenuation),e.setUniform("uQuadraticAttenuation",this.quadraticAttenuation),e.bindTextures();},p.default.RendererGL.prototype._setPointUniforms=function(e){e.bindShader(),e.setUniform("uMaterialColor",this.curStrokeColor),e.setUniform("uPointSize",this.pointSize);},p.default.RendererGL.prototype._bindBuffer=function(e,t,r,n,a){if(t=t||this.GL.ARRAY_BUFFER,this.GL.bindBuffer(t,e),void 0!==r){var o=new(n||Float32Array)(r);this.GL.bufferData(t,o,a||this.GL.STATIC_DRAW);}},p.default.RendererGL.prototype._arraysEqual=function(e,t){var r=e.length;if(r!==t.length)return !1;for(var n=0;n<r;n++)if(e[n]!==t[n])return !1;return !0},p.default.RendererGL.prototype._isTypedArray=function(e){return e instanceof Uint32Array},p.default.RendererGL.prototype._flatten=function(e){if(0===e.length)return [];if(2e4<e.length){var t,r=Object.prototype.toString,n=[],a=e.slice();for(t=a.pop();"[object Array]"===r.call(t)?a.push.apply(a,l(t)):n.push(t),a.length&&void 0!==(t=a.pop()););return n.reverse(),n}var o;return (o=[]).concat.apply(o,l(e))},p.default.RendererGL.prototype._vToNArray=function(e){var t=[],r=!0,n=!1,a=void 0;try{for(var o,i=e[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){var s=o.value;t.push(s.x,s.y,s.z);}}catch(e){n=!0,a=e;}finally{try{r||null==i.return||i.return();}finally{if(n)throw a}}return t},p.default.prototype._assert3d=function(e){if(!this._renderer.isP3D)throw new Error("".concat(e,"() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information."))},p.default.RendererGL.prototype._initTessy=function(){var e=new n.default.GluTesselator;return e.gluTessCallback(n.default.gluEnum.GLU_TESS_VERTEX_DATA,function(e,t){t[t.length]=e[0],t[t.length]=e[1],t[t.length]=e[2];}),e.gluTessCallback(n.default.gluEnum.GLU_TESS_BEGIN,function(e){e!==n.default.primitiveType.GL_TRIANGLES&&console.log("expected TRIANGLES but got type: ".concat(e));}),e.gluTessCallback(n.default.gluEnum.GLU_TESS_ERROR,function(e){console.log("error callback"),console.log("error number: ".concat(e));}),e.gluTessCallback(n.default.gluEnum.GLU_TESS_COMBINE,function(e,t,r){return [e[0],e[1],e[2]]}),e.gluTessCallback(n.default.gluEnum.GLU_TESS_EDGE_FLAG,function(e){}),e},p.default.RendererGL.prototype._triangulate=function(e){this._tessy.gluTessNormal(0,0,1);var t=[];this._tessy.gluTessBeginPolygon(t);for(var r=0;r<e.length;r++){this._tessy.gluTessBeginContour();for(var n=e[r],a=0;a<n.length;a+=3){var o=[n[a],n[a+1],n[a+2]];this._tessy.gluTessVertex(o,o);}this._tessy.gluTessEndContour();}return this._tessy.gluTessEndPolygon(),t},p.default.RendererGL.prototype._bezierCoefficients=function(e){var t=e*e,r=1-e,n=r*r;return [n*r,3*n*e,3*r*t,t*e]},p.default.RendererGL.prototype._quadraticCoefficients=function(e){var t=1-e;return [t*t,2*t*e,e*e]},p.default.RendererGL.prototype._bezierToCatmull=function(e){return [e[1],e[1]+(e[2]-e[0])/this._curveTightness,e[2]-(e[3]-e[1])/this._curveTightness,e[2]]};var d=p.default.RendererGL;r.default=d;},{"../core/constants":22,"../core/main":32,"../core/p5.Renderer":35,"./p5.Camera":80,"./p5.Matrix":82,"./p5.Shader":87,libtess:11,path:14}],87:[function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n};a.default.Shader=function(e,t,r){this._renderer=e,this._vertSrc=t,this._fragSrc=r,this._vertShader=-1,this._fragShader=-1,this._glProgram=0,this._loadedAttributes=!1,this.attributes={},this._loadedUniforms=!1,this.uniforms={},this._bound=!1,this.samplers=[];},a.default.Shader.prototype.init=function(){if(0===this._glProgram){var e=this._renderer.GL;if(this._vertShader=e.createShader(e.VERTEX_SHADER),e.shaderSource(this._vertShader,this._vertSrc),e.compileShader(this._vertShader),!e.getShaderParameter(this._vertShader,e.COMPILE_STATUS))return console.error("Yikes! An error occurred compiling the vertex shader:".concat(e.getShaderInfoLog(this._vertShader))),null;if(this._fragShader=e.createShader(e.FRAGMENT_SHADER),e.shaderSource(this._fragShader,this._fragSrc),e.compileShader(this._fragShader),!e.getShaderParameter(this._fragShader,e.COMPILE_STATUS))return console.error("Darn! An error occurred compiling the fragment shader:".concat(e.getShaderInfoLog(this._fragShader))),null;this._glProgram=e.createProgram(),e.attachShader(this._glProgram,this._vertShader),e.attachShader(this._glProgram,this._fragShader),e.linkProgram(this._glProgram),e.getProgramParameter(this._glProgram,e.LINK_STATUS)||console.error("Snap! Error linking shader program: ".concat(e.getProgramInfoLog(this._glProgram))),this._loadAttributes(),this._loadUniforms();}return this},a.default.Shader.prototype._loadAttributes=function(){if(!this._loadedAttributes){this.attributes={};for(var e=this._renderer.GL,t=e.getProgramParameter(this._glProgram,e.ACTIVE_ATTRIBUTES),r=0;r<t;++r){var n=e.getActiveAttrib(this._glProgram,r),a=n.name,o=e.getAttribLocation(this._glProgram,a),i={};i.name=a,i.location=o,i.index=r,i.type=n.type,i.size=n.size,this.attributes[a]=i;}this._loadedAttributes=!0;}},a.default.Shader.prototype._loadUniforms=function(){if(!this._loadedUniforms){for(var e=this._renderer.GL,t=e.getProgramParameter(this._glProgram,e.ACTIVE_UNIFORMS),r=0,n=0;n<t;++n){var a=e.getActiveUniform(this._glProgram,n),o={};o.location=e.getUniformLocation(this._glProgram,a.name),o.size=a.size;var i=a.name;1<a.size&&(i=i.substring(0,i.indexOf("[0]"))),o.name=i,o.type=a.type,o._cachedData=void 0,o.type===e.SAMPLER_2D&&(o.samplerIndex=r,r++,this.samplers.push(o)),o.isArray=o.type===e.FLOAT_MAT3||o.type===e.FLOAT_MAT4||o.type===e.FLOAT_VEC2||o.type===e.FLOAT_VEC3||o.type===e.FLOAT_VEC4||o.type===e.INT_VEC2||o.type===e.INT_VEC3||o.type===e.INT_VEC4,this.uniforms[i]=o;}this._loadedUniforms=!0;}},a.default.Shader.prototype.compile=function(){},a.default.Shader.prototype.bindShader=function(){this.init(),this._bound||(this.useProgram(),this._bound=!0,this._setMatrixUniforms(),this.setUniform("uViewport",this._renderer._viewport));},a.default.Shader.prototype.unbindShader=function(){return this._bound&&(this.unbindTextures(),this._bound=!1),this},a.default.Shader.prototype.bindTextures=function(){var e=this._renderer.GL,t=!0,r=!1,n=void 0;try{for(var a,o=this.samplers[Symbol.iterator]();!(t=(a=o.next()).done);t=!0){var i=a.value,s=i.texture;void 0===s&&(s=this._renderer._getEmptyTexture()),e.activeTexture(e.TEXTURE0+i.samplerIndex),s.bindTexture(),s.update(),e.uniform1i(i.location,i.samplerIndex);}}catch(e){r=!0,n=e;}finally{try{t||null==o.return||o.return();}finally{if(r)throw n}}},a.default.Shader.prototype.updateTextures=function(){var e=!0,t=!1,r=void 0;try{for(var n,a=this.samplers[Symbol.iterator]();!(e=(n=a.next()).done);e=!0){var o=n.value.texture;o&&o.update();}}catch(e){t=!0,r=e;}finally{try{e||null==a.return||a.return();}finally{if(t)throw r}}},a.default.Shader.prototype.unbindTextures=function(){},a.default.Shader.prototype._setMatrixUniforms=function(){this.setUniform("uProjectionMatrix",this._renderer.uPMatrix.mat4),this.isStrokeShader()&&("default"===this._renderer._curCamera.cameraType?this.setUniform("uPerspective",1):this.setUniform("uPerspective",0)),this.setUniform("uModelViewMatrix",this._renderer.uMVMatrix.mat4),this.setUniform("uViewMatrix",this._renderer._curCamera.cameraMatrix.mat4),this.uniforms.uNormalMatrix&&(this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix),this.setUniform("uNormalMatrix",this._renderer.uNMatrix.mat3));},a.default.Shader.prototype.useProgram=function(){var e=this._renderer.GL;return this._renderer._curShader!==this&&(e.useProgram(this._glProgram),this._renderer._curShader=this),this},a.default.Shader.prototype.setUniform=function(e,t){var r=this.uniforms[e];if(r){var n=this._renderer.GL;if(r.isArray){if(r._cachedData&&this._renderer._arraysEqual(r._cachedData,t))return;r._cachedData=t.slice(0);}else {if(r._cachedData&&r._cachedData===t)return;r._cachedData=t;}var a=r.location;switch(this.useProgram(),r.type){case n.BOOL:!0===t?n.uniform1i(a,1):n.uniform1i(a,0);break;case n.INT:1<r.size?t.length&&n.uniform1iv(a,t):n.uniform1i(a,t);break;case n.FLOAT:1<r.size?t.length&&n.uniform1fv(a,t):n.uniform1f(a,t);break;case n.FLOAT_MAT3:n.uniformMatrix3fv(a,!1,t);break;case n.FLOAT_MAT4:n.uniformMatrix4fv(a,!1,t);break;case n.FLOAT_VEC2:1<r.size?t.length&&n.uniform2fv(a,t):n.uniform2f(a,t[0],t[1]);break;case n.FLOAT_VEC3:1<r.size?t.length&&n.uniform3fv(a,t):n.uniform3f(a,t[0],t[1],t[2]);break;case n.FLOAT_VEC4:1<r.size?t.length&&n.uniform4fv(a,t):n.uniform4f(a,t[0],t[1],t[2],t[3]);break;case n.INT_VEC2:1<r.size?t.length&&n.uniform2iv(a,t):n.uniform2i(a,t[0],t[1]);break;case n.INT_VEC3:1<r.size?t.length&&n.uniform3iv(a,t):n.uniform3i(a,t[0],t[1],t[2]);break;case n.INT_VEC4:1<r.size?t.length&&n.uniform4iv(a,t):n.uniform4i(a,t[0],t[1],t[2],t[3]);break;case n.SAMPLER_2D:n.activeTexture(n.TEXTURE0+r.samplerIndex),r.texture=this._renderer.getTexture(t),n.uniform1i(r.location,r.samplerIndex);}return this}},a.default.Shader.prototype.isLightShader=function(){return void 0!==this.attributes.aNormal||void 0!==this.uniforms.uUseLighting||void 0!==this.uniforms.uAmbientLightCount||void 0!==this.uniforms.uDirectionalLightCount||void 0!==this.uniforms.uPointLightCount||void 0!==this.uniforms.uAmbientColor||void 0!==this.uniforms.uDirectionalDiffuseColors||void 0!==this.uniforms.uDirectionalSpecularColors||void 0!==this.uniforms.uPointLightLocation||void 0!==this.uniforms.uPointLightDiffuseColors||void 0!==this.uniforms.uPointLightSpecularColors||void 0!==this.uniforms.uLightingDirection||void 0!==this.uniforms.uSpecular},a.default.Shader.prototype.isNormalShader=function(){return void 0!==this.attributes.aNormal},a.default.Shader.prototype.isTextureShader=function(){return 0<this.samplerIndex},a.default.Shader.prototype.isColorShader=function(){return void 0!==this.attributes.aVertexColor||void 0!==this.uniforms.uMaterialColor},a.default.Shader.prototype.isTexLightShader=function(){return this.isLightShader()&&this.isTextureShader()},a.default.Shader.prototype.isStrokeShader=function(){return void 0!==this.uniforms.uStrokeWeight},a.default.Shader.prototype.enableAttrib=function(e,t,r,n,a,o){if(e){var i=e.location;if(-1!==i){var s=this._renderer.GL;e.enabled||(s.enableVertexAttribArray(i),e.enabled=!0),this._renderer.GL.vertexAttribPointer(i,t,r||s.FLOAT,n||!1,a||0,o||0);}}return this};var o=a.default.Shader;r.default=o;},{"../core/main":32}],88:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,a=(n=e("../core/main"))&&n.__esModule?n:{default:n},s=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=l();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}a.default.Texture=function(e,t){this._renderer=e;var r=this._renderer.GL;this.src=t,this.glTex=void 0,this.glTarget=r.TEXTURE_2D,this.glFormat=r.RGBA,this.mipmaps=!1,this.glMinFilter=r.LINEAR,this.glMagFilter=r.LINEAR,this.glWrapS=r.CLAMP_TO_EDGE,this.glWrapT=r.CLAMP_TO_EDGE,this.isSrcMediaElement=void 0!==a.default.MediaElement&&t instanceof a.default.MediaElement,this._videoPrevUpdateTime=0,this.isSrcHTMLElement=void 0!==a.default.Element&&t instanceof a.default.Element&&!(t instanceof a.default.Graphics),this.isSrcP5Image=t instanceof a.default.Image,this.isSrcP5Graphics=t instanceof a.default.Graphics,this.isImageData="undefined"!=typeof ImageData&&t instanceof ImageData;var n=this._getTextureDataFromSource();return this.width=n.width,this.height=n.height,this.init(n),this},a.default.Texture.prototype._getTextureDataFromSource=function(){var e;return this.isSrcP5Image?e=this.src.canvas:this.isSrcMediaElement||this.isSrcP5Graphics||this.isSrcHTMLElement?e=this.src.elt:this.isImageData&&(e=this.src),e},a.default.Texture.prototype.init=function(e){var t=this._renderer.GL;if(this.glTex=t.createTexture(),this.glWrapS=this._renderer.textureWrapX,this.glWrapT=this._renderer.textureWrapY,this.setWrapMode(this.glWrapS,this.glWrapT),this.bindTexture(),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,this.glMagFilter),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,this.glMinFilter),0===this.width||0===this.height||this.isSrcMediaElement&&!this.src.loadedmetadata){var r=new Uint8Array([1,1,1,1]);t.texImage2D(this.glTarget,0,t.RGBA,1,1,0,this.glFormat,t.UNSIGNED_BYTE,r);}else t.texImage2D(this.glTarget,0,this.glFormat,this.glFormat,t.UNSIGNED_BYTE,e);},a.default.Texture.prototype.update=function(){var e=this.src;if(0===e.width||0===e.height)return !1;var t=this._getTextureDataFromSource(),r=!1,n=this._renderer.GL;return t.width!==this.width||t.height!==this.height?(r=!0,this.width=t.width,this.height=t.height,this.isSrcP5Image?e.setModified(!1):(this.isSrcMediaElement||this.isSrcHTMLElement)&&e.setModified(!0)):this.isSrcP5Image?e.isModified()&&(r=!0,e.setModified(!1)):this.isSrcMediaElement?e.isModified()?(r=!0,e.setModified(!1)):e.loadedmetadata&&this._videoPrevUpdateTime!==e.time()&&(this._videoPrevUpdateTime=e.time(),r=!0):this.isImageData?e._dirty&&(r=!(e._dirty=!1)):r=!0,r&&(this.bindTexture(),n.texImage2D(this.glTarget,0,this.glFormat,this.glFormat,n.UNSIGNED_BYTE,t)),r},a.default.Texture.prototype.bindTexture=function(){return this._renderer.GL.bindTexture(this.glTarget,this.glTex),this},a.default.Texture.prototype.unbindTexture=function(){this._renderer.GL.bindTexture(this.glTarget,null);},a.default.Texture.prototype.setInterpolation=function(e,t){var r=this._renderer.GL;e===s.NEAREST?this.glMinFilter=r.NEAREST:this.glMinFilter=r.LINEAR,t===s.NEAREST?this.glMagFilter=r.NEAREST:this.glMagFilter=r.LINEAR,this.bindTexture(),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,this.glMinFilter),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,this.glMagFilter),this.unbindTexture();},a.default.Texture.prototype.setWrapMode=function(e,t){function r(e){return 0==(e&e-1)}var n=this._renderer.GL,a=r(this.width),o=r(this.height);e===s.REPEAT?a&&o?this.glWrapS=n.REPEAT:(console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapS=n.CLAMP_TO_EDGE):e===s.MIRROR?a&&o?this.glWrapS=n.MIRRORED_REPEAT:(console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapS=n.CLAMP_TO_EDGE):this.glWrapS=n.CLAMP_TO_EDGE,t===s.REPEAT?a&&o?this.glWrapT=n.REPEAT:(console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapT=n.CLAMP_TO_EDGE):t===s.MIRROR?a&&o?this.glWrapT=n.MIRRORED_REPEAT:(console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapT=n.CLAMP_TO_EDGE):this.glWrapT=n.CLAMP_TO_EDGE,this.bindTexture(),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,this.glWrapS),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,this.glWrapT),this.unbindTexture();};var o=a.default.Texture;r.default=o;},{"../core/constants":22,"../core/main":32}],89:[function(e,t,r){function i(e){return (i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var n,j=(n=e("../core/main"))&&n.__esModule?n:{default:n},R=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return {default:e};var t=s();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(r,a,o):r[a]=e[a];}r.default=e,t&&t.set(e,r);return r}(e("../core/constants"));function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}e("./p5.Shader"),e("./p5.RendererGL.Retained"),j.default.RendererGL.prototype._applyTextProperties=function(){},j.default.RendererGL.prototype.textWidth=function(e){return this._isOpenType()?this._textFont._textWidth(e,this._textSize):0};function a(e,t){this.width=e,this.height=t,this.infos=[],this.findImage=function(e){var t,r,n=this.width*this.height;if(n<e)throw new Error("font is too complex to render in 3D");for(var a=this.infos.length-1;0<=a;--a){var o=this.infos[a];if(o.index+e<n){r=(t=o).imageData;break}}if(!t){try{r=new ImageData(this.width,this.height);}catch(e){var i=document.getElementsByTagName("canvas")[0],s=!i;i||((i=document.createElement("canvas")).style.display="none",document.body.appendChild(i));var l=i.getContext("2d");l&&(r=l.createImageData(this.width,this.height)),s&&document.body.removeChild(i);}t={index:0,imageData:r},this.infos.push(t);}var p=t.index;return t.index+=e,r._dirty=!0,{imageData:r,index:p}};}function V(e,t,r,n,a){var o=e.imageData.data,i=4*e.index++;o[i++]=t,o[i++]=r,o[i++]=n,o[i++]=a;}function D(e){this.font=e,this.strokeImageInfos=new a(64,64),this.colDimImageInfos=new a(64,64),this.rowDimImageInfos=new a(64,64),this.colCellImageInfos=new a(64,64),this.rowCellImageInfos=new a(64,64),this.glyphInfos={},this.getGlyphInfo=function(e){var t=this.glyphInfos[e.index];if(t)return t;var r,n=e.getBoundingBox(),a=n.x1,o=n.y1,i=n.x2-a,s=n.y2-o,l=e.path.commands;if(0==i||0==s||!l.length)return this.glyphInfos[e.index]={};var p,u,c,d,h=[],m=[],f=[];for(r=8;0<=r;--r)f.push([]);for(r=8;0<=r;--r)m.push([]);function y(e,t,r){var n=h.length;function a(e,t,r){for(var n=e.length;0<n--;){var a=e[n];a<t&&(t=a),r<a&&(r=a);}return {min:t,max:r}}h.push(r);for(var o=a(e,1,0),i=Math.max(Math.floor(9*o.min),0),s=Math.min(Math.ceil(9*o.max),9),l=i;l<s;++l)f[l].push(n);for(var p=a(t,1,0),u=Math.max(Math.floor(9*p.min),0),c=Math.min(Math.ceil(9*p.max),9),d=u;d<c;++d)m[d].push(n);}function g(e){return (t=(n=255)*e)<(r=0)?r:n<t?n:t;var t,r,n;}function S(e,t,r,n){this.p0=e,this.c0=t,this.c1=r,this.p1=n,this.toQuadratic=function(){return {x:this.p0.x,y:this.p0.y,x1:this.p1.x,y1:this.p1.y,cx:(3*(this.c0.x+this.c1.x)-(this.p0.x+this.p1.x))/4,cy:(3*(this.c0.y+this.c1.y)-(this.p0.y+this.p1.y))/4}},this.quadError=function(){return j.default.Vector.sub(j.default.Vector.sub(this.p1,this.p0),j.default.Vector.mult(j.default.Vector.sub(this.c1,this.c0),3)).mag()/2},this.split=function(e){var t=j.default.Vector.lerp(this.p0,this.c0,e),r=j.default.Vector.lerp(this.c0,this.c1,e),n=j.default.Vector.lerp(t,r,e);this.c1=j.default.Vector.lerp(this.c1,this.p1,e),this.c0=j.default.Vector.lerp(r,this.c1,e);var a=j.default.Vector.lerp(n,this.c0,e),o=new S(this.p0,t,n,a);return this.p0=a,o},this.splitInflections=function(){var e=j.default.Vector.sub(this.c0,this.p0),t=j.default.Vector.sub(j.default.Vector.sub(this.c1,this.c0),e),r=j.default.Vector.sub(j.default.Vector.sub(j.default.Vector.sub(this.p1,this.c1),e),j.default.Vector.mult(t,2)),n=[],a=t.x*r.y-t.y*r.x;if(0!==a){var o=e.x*r.y-e.y*r.x,i=e.x*t.y-e.y*t.x,s=o*o-4*a*i;if(0<=s){a<0&&(a=-a,o=-o,i=-i);var l=Math.sqrt(s),p=(-o-l)/(2*a),u=(-o+l)/(2*a);0<p&&p<1&&(n.push(this.split(p)),u=1-(1-u)/(1-p)),0<u&&u<1&&n.push(this.split(u));}}return n.push(this),n};}function v(e,t,r,n,a,o,i,s){var l=new S(new j.default.Vector(e,t),new j.default.Vector(r,n),new j.default.Vector(a,o),new j.default.Vector(i,s)).splitInflections(),p=[],u=30/z,c=!0,d=!1,h=void 0;try{for(var m,f=l[Symbol.iterator]();!(c=(m=f.next()).done);c=!0){for(var y=m.value,g=[],v=void 0;!(.125<=(v=u/y.quadError()));){var b=Math.pow(v,1/3),_=y.split(b),x=y.split(1-b/(1-b));p.push(_),g.push(y),y=x;}v<1&&p.push(y.split(.5)),p.push(y),Array.prototype.push.apply(p,g.reverse());}}catch(e){d=!0,h=e;}finally{try{c||null==f.return||f.return();}finally{if(d)throw h}}return p}function b(e,t,r,n){y([e,r],[t,n],{x:e,y:t,cx:(e+r)/2,cy:(t+n)/2});}function _(e,t,r,n){return Math.abs(r-e)<1e-5&&Math.abs(n-t)<1e-5}var x=!0,w=!1,M=void 0;try{for(var E,T=l[Symbol.iterator]();!(x=(E=T.next()).done);x=!0){var C=E.value,N=(C.x-a)/i,O=(C.y-o)/s;if(!_(p,u,N,O)){switch(C.type){case"M":c=N,d=O;break;case"L":b(p,u,N,O);break;case"Q":var L=(C.x1-a)/i,I=(C.y1-o)/s;y([p,N,L],[u,O,I],{x:p,y:u,cx:L,cy:I});break;case"Z":_(p,u,c,d)?h.push({x:p,y:u}):(b(p,u,c,d),h.push({x:c,y:d}));break;case"C":for(var P=v(p,u,(C.x1-a)/i,(C.y1-o)/s,(C.x2-a)/i,(C.y2-o)/s,N,O),R=0;R<P.length;R++){var D=P[R].toQuadratic();y([D.x,D.x1,D.cx],[D.y,D.y1,D.cy],D);}break;default:throw new Error("unknown command type: ".concat(C.type))}p=N,u=O;}}}catch(e){w=!0,M=e;}finally{try{x||null==T.return||T.return();}finally{if(w)throw M}}for(var A=h.length,k=this.strokeImageInfos.findImage(A),F=k.index,U=0;U<A;++U){var B=h[U];V(k,g(B.x),g(B.y),g(B.cx),g(B.cy));}function G(e,t,r){for(var n=e.length,a=t.findImage(n),o=a.index,i=0,s=0;s<n;++s)i+=e[s].length;for(var l=r.findImage(i),p=0;p<n;++p){var u=e[p],c=u.length,d=l.index;V(a,d>>7,127&d,c>>7,127&c);for(var h=0;h<c;++h){var m=u[h]+F;V(l,m>>7,127&m,0,0);}}return {cellImageInfo:l,dimOffset:o,dimImageInfo:a}}return (t=this.glyphInfos[e.index]={glyph:e,uGlyphRect:[n.x1,-n.y1,n.x2,-n.y2],strokeImageInfo:k,strokes:h,colInfo:G(f,this.colDimImageInfos,this.colCellImageInfos),rowInfo:G(m,this.rowDimImageInfos,this.rowCellImageInfos)}).uGridOffset=[t.colInfo.dimOffset,t.rowInfo.dimOffset],t};}var z=Math.sqrt(3);j.default.RendererGL.prototype._renderText=function(e,t,r,n,a){if(this._textFont&&"string"!=typeof this._textFont){if(!(a<=n)&&this._doFill){if(!this._isOpenType())return console.log("WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported"),e;e.push();var o=this._doStroke,i=this.drawMode;this._doStroke=!1,this.drawMode=R.TEXTURE;var s=this._textFont.font,l=this._textFont._fontInfo;l=l||(this._textFont._fontInfo=new D(s));var p=this._textFont._handleAlignment(this,t,r,n),u=this._textSize/s.unitsPerEm;this.translate(p.x,p.y,0),this.scale(u,u,1);var c=this.GL,d=!this._defaultFontShader,h=this._getFontShader();h.init(),h.bindShader(),d&&(h.setUniform("uGridImageSize",[64,64]),h.setUniform("uCellsImageSize",[64,64]),h.setUniform("uStrokeImageSize",[64,64]),h.setUniform("uGridSize",[9,9])),this._applyColorBlend(this.curFillColor);var m=this.retainedMode.geometry.glyph;if(!m){var f=this._textGeom=new j.default.Geometry(1,1,function(){for(var e=0;e<=1;e++)for(var t=0;t<=1;t++)this.vertices.push(new j.default.Vector(t,e,0)),this.uvs.push(t,e);});f.computeFaces().computeNormals(),m=this.createBuffers("glyph",f);}var y=!0,g=!1,v=void 0;try{for(var b,_=this.retainedMode.buffers.text[Symbol.iterator]();!(y=(b=_.next()).done);y=!0){b.value._prepareBuffer(m,h);}}catch(e){g=!0,v=e;}finally{try{y||null==_.return||_.return();}finally{if(g)throw v}}this._bindBuffer(m.indexBuffer,c.ELEMENT_ARRAY_BUFFER),h.setUniform("uMaterialColor",this.curFillColor);try{var x=0,S=null,w=s.stringToGlyphs(t),M=!0,E=!1,T=void 0;try{for(var C,N=w[Symbol.iterator]();!(M=(C=N.next()).done);M=!0){var O=C.value;S&&(x+=s.getKerningValue(S,O));var L=l.getGlyphInfo(O);if(L.uGlyphRect){var I=L.rowInfo,P=L.colInfo;h.setUniform("uSamplerStrokes",L.strokeImageInfo.imageData),h.setUniform("uSamplerRowStrokes",I.cellImageInfo.imageData),h.setUniform("uSamplerRows",I.dimImageInfo.imageData),h.setUniform("uSamplerColStrokes",P.cellImageInfo.imageData),h.setUniform("uSamplerCols",P.dimImageInfo.imageData),h.setUniform("uGridOffset",L.uGridOffset),h.setUniform("uGlyphRect",L.uGlyphRect),h.setUniform("uGlyphOffset",x),h.bindTextures(),c.drawElements(c.TRIANGLES,6,this.GL.UNSIGNED_SHORT,0);}x+=O.advanceWidth,S=O;}}catch(e){E=!0,T=e;}finally{try{M||null==N.return||N.return();}finally{if(E)throw T}}}finally{h.unbindShader(),this._doStroke=o,this.drawMode=i,e.pop();}return e}}else console.log("WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.");};},{"../core/constants":22,"../core/main":32,"./p5.RendererGL.Retained":85,"./p5.Shader":87}]},{},[17])(17)});
    });

    /* src\Sketch.svelte generated by Svelte v3.29.0 */

    const { console: console_1 } = globals;
    const file = "src\\Sketch.svelte";

    function create_fragment(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", /*id*/ ctx[0]);
    			add_location(div, file, 20, 0, 400);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*id*/ 1) {
    				attr_dev(div, "id", /*id*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Sketch", slots, []);
    	let { sketch } = $$props;
    	let { id } = $$props;

    	onMount(() => {
    		try {
    			// convert the string to a runnable function
    			let s = new Function(`return ${sketch}`)();

    			// instantiate a new p5 sketch instance
    			let render = new p5_min(s, id);
    		} catch(e) {
    			console.log(e);
    		}
    	});

    	const writable_props = ["sketch", "id"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Sketch> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("sketch" in $$props) $$invalidate(1, sketch = $$props.sketch);
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({ p5: p5_min, onMount, sketch, id });

    	$$self.$inject_state = $$props => {
    		if ("sketch" in $$props) $$invalidate(1, sketch = $$props.sketch);
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [id, sketch];
    }

    class Sketch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { sketch: 1, id: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sketch",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*sketch*/ ctx[1] === undefined && !("sketch" in props)) {
    			console_1.warn("<Sketch> was created without expected prop 'sketch'");
    		}

    		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
    			console_1.warn("<Sketch> was created without expected prop 'id'");
    		}
    	}

    	get sketch() {
    		throw new Error("<Sketch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sketch(value) {
    		throw new Error("<Sketch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Sketch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Sketch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const clock = //whitespace matteres here
`(p5) => {
  let cx, cy;
  let secondsRadius;
  let minutesRadius;
  let hoursRadius;
  let clockDiameter;

  p5.setup = function() {
    p5.createCanvas(720, 400);
    p5.stroke(255);

    let radius = p5.min(p5.width, p5.height) / 2;
    secondsRadius = radius * 0.71;
    minutesRadius = radius * 0.6;
    hoursRadius = radius * 0.5;
    clockDiameter = radius * 1.7;

    cx = p5.width / 2;
    cy = p5.height / 2;
  }

  p5.draw = function()  {
    p5.background(230);

    // Draw the clock background
    p5.noStroke();
    p5.fill(244, 122, 158);
    p5.ellipse(cx, cy, clockDiameter + 25, clockDiameter + 25);
    p5.fill(237, 34, 93);
    p5.ellipse(cx, cy, clockDiameter, clockDiameter);

    // Angles for sin() and cos() start at 3 o'clock;
    // subtract HALF_PI to make them start at the top
    let s = p5.map(p5.second(), 0, 60, 0, p5.TWO_PI) - p5.HALF_PI;
    let m = p5.map(p5.minute() + p5.norm(p5.second(), 0, 60), 0, 60, 0, p5.TWO_PI) - p5.HALF_PI;
    let h = p5.map(p5.hour() + p5.norm(p5.minute(), 0, 60), 0, 24, 0, p5.TWO_PI * 2) - p5.HALF_PI;

    // Draw the hands of the clock
    p5.stroke(255);
    p5.strokeWeight(1);
    p5.line(cx, cy, cx + p5.cos(s) * secondsRadius, cy + p5.sin(s) * secondsRadius);
    p5.strokeWeight(2);
    p5.line(cx, cy, cx + p5.cos(m) * minutesRadius, cy + p5.sin(m) * minutesRadius);
    p5.strokeWeight(4);
    p5.line(cx, cy, cx + p5.cos(h) * hoursRadius, cy + p5.sin(h) * hoursRadius);

    // Draw the minute ticks
    p5.strokeWeight(2);
    p5.beginShape(p5.POINTS);
    for (let a = 0; a < 360; a += 6) {
      let angle = p5.radians(a);
      let x = cx + p5.cos(angle) * secondsRadius;
      let y = cy + p5.sin(angle) * secondsRadius;
      p5.vertex(x, y);
    }
    p5.endShape();
  }
}`    ;

    const whiteBox =
`(p5) => {
  let x = 100;
  let y = 100;
  p5.setup = function() {
    p5.createCanvas(300, 200);
  };
  p5.draw = function() {
    y = y - 1;
    if (y < 0) {
      y = p5.height;
    }
    p5.background(0);
    p5.fill(255);
    p5.rect(x,y,50,50);
  };
}`    ;

    const line =
`(p5) => {
  let y = 100;

  // The statements in the setup() function
  // execute once when the program begins
  p5.setup = function() {
    // createCanvas must be the first statement
    p5.createCanvas(720, 400);
    p5.stroke(255); // Set line drawing color to white
    p5.frameRate(30);
  }
  // The statements in draw() are executed until the
  // program is stopped. Each statement is executed in
  // sequence and after the last line is read, the first
  // line is executed again.
  p5.draw = function() {
    p5.background(0); // Set the background to black
    y = y - 1;
    if (y < 0) {
      y = p5.height;
    }
    p5.line(0, y, p5.width, y);
  }
}`    ;

    var _from = "web3";
    var _id = "web3@1.3.0";
    var _inBundle = false;
    var _integrity = "sha512-4q9dna0RecnrlgD/bD1C5S+81Untbd6Z/TBD7rb+D5Bvvc0Wxjr4OP70x+LlnwuRDjDtzBwJbNUblh2grlVArw==";
    var _location = "/web3";
    var _phantomChildren = {
    };
    var _requested = {
    	type: "tag",
    	registry: true,
    	raw: "web3",
    	name: "web3",
    	escapedName: "web3",
    	rawSpec: "",
    	saveSpec: null,
    	fetchSpec: "latest"
    };
    var _requiredBy = [
    	"#USER",
    	"/",
    	"/@types/web3"
    ];
    var _resolved = "https://registry.npmjs.org/web3/-/web3-1.3.0.tgz";
    var _shasum = "8fe4cd6e2a21c91904f343ba75717ee4c76bb349";
    var _spec = "web3";
    var _where = "C:\\Users\\donno\\Documents\\GitHub\\interactive-nfts\\ethereum";
    var author = {
    	name: "ethereum.org"
    };
    var authors = [
    	{
    		name: "Fabian Vogelsteller",
    		email: "fabian@ethereum.org",
    		homepage: "http://frozeman.de"
    	},
    	{
    		name: "Marek Kotewicz",
    		email: "marek@parity.io",
    		url: "https://github.com/debris"
    	},
    	{
    		name: "Marian Oancea",
    		url: "https://github.com/cubedro"
    	},
    	{
    		name: "Gav Wood",
    		email: "g@parity.io",
    		homepage: "http://gavwood.com"
    	},
    	{
    		name: "Jeffery Wilcke",
    		email: "jeffrey.wilcke@ethereum.org",
    		url: "https://github.com/obscuren"
    	}
    ];
    var bugs = {
    	url: "https://github.com/ethereum/web3.js/issues"
    };
    var bundleDependencies = false;
    var dependencies = {
    	"web3-bzz": "1.3.0",
    	"web3-core": "1.3.0",
    	"web3-eth": "1.3.0",
    	"web3-eth-personal": "1.3.0",
    	"web3-net": "1.3.0",
    	"web3-shh": "1.3.0",
    	"web3-utils": "1.3.0"
    };
    var deprecated = false;
    var description = "Ethereum JavaScript API";
    var devDependencies = {
    	"@types/node": "^12.12.6",
    	dtslint: "^3.4.1",
    	typescript: "^3.9.5"
    };
    var engines = {
    	node: ">=8.0.0"
    };
    var gitHead = "a88944fff1f62b2b6f00e3de52446d24d9e92cc6";
    var homepage = "https://github.com/ethereum/web3.js#readme";
    var keywords = [
    	"Ethereum",
    	"JavaScript",
    	"API"
    ];
    var license = "LGPL-3.0";
    var main = "lib/index.js";
    var name$1 = "web3";
    var repository = {
    	type: "git",
    	url: "git+https://github.com/ethereum/web3.js.git"
    };
    var scripts = {
    	dtslint: "dtslint --localTs ../../node_modules/typescript/lib types",
    	postinstall: "node angular-patch.js",
    	tsc: "tsc -b tsconfig.json"
    };
    var types = "types/index.d.ts";
    var version = "1.3.0";
    var _package = {
    	_from: _from,
    	_id: _id,
    	_inBundle: _inBundle,
    	_integrity: _integrity,
    	_location: _location,
    	_phantomChildren: _phantomChildren,
    	_requested: _requested,
    	_requiredBy: _requiredBy,
    	_resolved: _resolved,
    	_shasum: _shasum,
    	_spec: _spec,
    	_where: _where,
    	author: author,
    	authors: authors,
    	bugs: bugs,
    	bundleDependencies: bundleDependencies,
    	dependencies: dependencies,
    	deprecated: deprecated,
    	description: description,
    	devDependencies: devDependencies,
    	engines: engines,
    	gitHead: gitHead,
    	homepage: homepage,
    	keywords: keywords,
    	license: license,
    	main: main,
    	name: name$1,
    	repository: repository,
    	scripts: scripts,
    	types: types,
    	version: version
    };

    var _package$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _from: _from,
        _id: _id,
        _inBundle: _inBundle,
        _integrity: _integrity,
        _location: _location,
        _phantomChildren: _phantomChildren,
        _requested: _requested,
        _requiredBy: _requiredBy,
        _resolved: _resolved,
        _shasum: _shasum,
        _spec: _spec,
        _where: _where,
        author: author,
        authors: authors,
        bugs: bugs,
        bundleDependencies: bundleDependencies,
        dependencies: dependencies,
        deprecated: deprecated,
        description: description,
        devDependencies: devDependencies,
        engines: engines,
        gitHead: gitHead,
        homepage: homepage,
        keywords: keywords,
        license: license,
        main: main,
        name: name$1,
        repository: repository,
        scripts: scripts,
        types: types,
        version: version,
        'default': _package
    });

    var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$1 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop$1() {}

    var on = noop$1;
    var addListener = noop$1;
    var once = noop$1;
    var off = noop$1;
    var removeListener = noop$1;
    var removeAllListeners = noop$1;
    var emit = noop$1;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$1,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    var isBufferBrowser = function isBuffer(arg) {
      return arg && typeof arg === 'object'
        && typeof arg.copy === 'function'
        && typeof arg.fill === 'function'
        && typeof arg.readUInt8 === 'function';
    };

    var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    });

    var util = createCommonjsModule(function (module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    };


    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    exports.deprecate = function(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(commonjsGlobal.process)) {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }

      if (process.noDeprecation === true) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    };


    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    };


    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        exports._extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;


    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;

    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;

    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;

    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;

    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;

    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;

    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;

    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;

    exports.isBuffer = isBufferBrowser;

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    exports.log = function() {
      console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
    };


    /**
     * Inherit the prototype methods from one constructor into another.
     *
     * The Function.prototype.inherits from lang.js rewritten as a standalone
     * function (not on Function.prototype). NOTE: If this file is to be loaded
     * during bootstrapping this function needs to be rewritten using some native
     * functions as prototype setup using normal JavaScript does not work as
     * expected during bootstrapping (see mirror.js in r114903).
     *
     * @param {function} ctor Constructor function which needs to inherit the
     *     prototype.
     * @param {function} superCtor Constructor function to inherit prototype from.
     */
    exports.inherits = inherits_browser;

    exports._extend = function(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    });

    var underscore = createCommonjsModule(function (module, exports) {
    //     Underscore.js 1.9.1
    //     http://underscorejs.org
    //     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.

    (function() {

      // Baseline setup
      // --------------

      // Establish the root object, `window` (`self`) in the browser, `global`
      // on the server, or `this` in some virtual machines. We use `self`
      // instead of `window` for `WebWorker` support.
      var root = typeof self == 'object' && self.self === self && self ||
                typeof commonjsGlobal == 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal ||
                this ||
                {};

      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;

      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype, ObjProto = Object.prototype;
      var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

      // Create quick reference variables for speed access to core prototypes.
      var push = ArrayProto.push,
          slice = ArrayProto.slice,
          toString = ObjProto.toString,
          hasOwnProperty = ObjProto.hasOwnProperty;

      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var nativeIsArray = Array.isArray,
          nativeKeys = Object.keys,
          nativeCreate = Object.create;

      // Naked function reference for surrogate-prototype-swapping.
      var Ctor = function(){};

      // Create a safe reference to the Underscore object for use below.
      var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };

      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for their old module API. If we're in
      // the browser, add `_` as a global object.
      // (`nodeType` is checked to ensure that `module`
      // and `exports` are not HTML elements.)
      if ( !exports.nodeType) {
        if ( !module.nodeType && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }

      // Current version.
      _.VERSION = '1.9.1';

      // Internal function that returns an efficient (for current engines) version
      // of the passed-in callback, to be repeatedly applied in other Underscore
      // functions.
      var optimizeCb = function(func, context, argCount) {
        if (context === void 0) return func;
        switch (argCount == null ? 3 : argCount) {
          case 1: return function(value) {
            return func.call(context, value);
          };
          // The 2-argument case is omitted because we’re not using it.
          case 3: return function(value, index, collection) {
            return func.call(context, value, index, collection);
          };
          case 4: return function(accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection);
          };
        }
        return function() {
          return func.apply(context, arguments);
        };
      };

      var builtinIteratee;

      // An internal function to generate callbacks that can be applied to each
      // element in a collection, returning the desired result — either `identity`,
      // an arbitrary callback, a property matcher, or a property accessor.
      var cb = function(value, context, argCount) {
        if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
        if (value == null) return _.identity;
        if (_.isFunction(value)) return optimizeCb(value, context, argCount);
        if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
        return _.property(value);
      };

      // External wrapper for our callback generator. Users may customize
      // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
      // This abstraction hides the internal-only argCount argument.
      _.iteratee = builtinIteratee = function(value, context) {
        return cb(value, context, Infinity);
      };

      // Some functions take a variable number of arguments, or a few expected
      // arguments at the beginning and then a variable number of values to operate
      // on. This helper accumulates all remaining arguments past the function’s
      // argument length (or an explicit `startIndex`), into an array that becomes
      // the last argument. Similar to ES6’s "rest parameter".
      var restArguments = function(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
          var length = Math.max(arguments.length - startIndex, 0),
              rest = Array(length),
              index = 0;
          for (; index < length; index++) {
            rest[index] = arguments[index + startIndex];
          }
          switch (startIndex) {
            case 0: return func.call(this, rest);
            case 1: return func.call(this, arguments[0], rest);
            case 2: return func.call(this, arguments[0], arguments[1], rest);
          }
          var args = Array(startIndex + 1);
          for (index = 0; index < startIndex; index++) {
            args[index] = arguments[index];
          }
          args[startIndex] = rest;
          return func.apply(this, args);
        };
      };

      // An internal function for creating a new object that inherits from another.
      var baseCreate = function(prototype) {
        if (!_.isObject(prototype)) return {};
        if (nativeCreate) return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor;
        Ctor.prototype = null;
        return result;
      };

      var shallowProperty = function(key) {
        return function(obj) {
          return obj == null ? void 0 : obj[key];
        };
      };

      var has = function(obj, path) {
        return obj != null && hasOwnProperty.call(obj, path);
      };

      var deepGet = function(obj, path) {
        var length = path.length;
        for (var i = 0; i < length; i++) {
          if (obj == null) return void 0;
          obj = obj[path[i]];
        }
        return length ? obj : void 0;
      };

      // Helper for collection methods to determine whether a collection
      // should be iterated as an array or as an object.
      // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
      // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
      var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
      var getLength = shallowProperty('length');
      var isArrayLike = function(collection) {
        var length = getLength(collection);
        return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
      };

      // Collection Functions
      // --------------------

      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles raw objects in addition to array-likes. Treats all
      // sparse array-likes as if they were dense.
      _.each = _.forEach = function(obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
          for (i = 0, length = obj.length; i < length; i++) {
            iteratee(obj[i], i, obj);
          }
        } else {
          var keys = _.keys(obj);
          for (i = 0, length = keys.length; i < length; i++) {
            iteratee(obj[keys[i]], keys[i], obj);
          }
        }
        return obj;
      };

      // Return the results of applying the iteratee to each element.
      _.map = _.collect = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            results = Array(length);
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };

      // Create a reducing function iterating left or right.
      var createReduce = function(dir) {
        // Wrap code that reassigns argument variables in a separate function than
        // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
        var reducer = function(obj, iteratee, memo, initial) {
          var keys = !isArrayLike(obj) && _.keys(obj),
              length = (keys || obj).length,
              index = dir > 0 ? 0 : length - 1;
          if (!initial) {
            memo = obj[keys ? keys[index] : index];
            index += dir;
          }
          for (; index >= 0 && index < length; index += dir) {
            var currentKey = keys ? keys[index] : index;
            memo = iteratee(memo, obj[currentKey], currentKey, obj);
          }
          return memo;
        };

        return function(obj, iteratee, memo, context) {
          var initial = arguments.length >= 3;
          return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
        };
      };

      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`.
      _.reduce = _.foldl = _.inject = createReduce(1);

      // The right-associative version of reduce, also known as `foldr`.
      _.reduceRight = _.foldr = createReduce(-1);

      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function(obj, predicate, context) {
        var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
        var key = keyFinder(obj, predicate, context);
        if (key !== void 0 && key !== -1) return obj[key];
      };

      // Return all the elements that pass a truth test.
      // Aliased as `select`.
      _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function(value, index, list) {
          if (predicate(value, index, list)) results.push(value);
        });
        return results;
      };

      // Return all the elements for which a truth test fails.
      _.reject = function(obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context);
      };

      // Determine whether all of the elements match a truth test.
      // Aliased as `all`.
      _.every = _.all = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (!predicate(obj[currentKey], currentKey, obj)) return false;
        }
        return true;
      };

      // Determine if at least one element in the object matches a truth test.
      // Aliased as `any`.
      _.some = _.any = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (predicate(obj[currentKey], currentKey, obj)) return true;
        }
        return false;
      };

      // Determine if the array or object contains a given item (using `===`).
      // Aliased as `includes` and `include`.
      _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        if (typeof fromIndex != 'number' || guard) fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0;
      };

      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = restArguments(function(obj, path, args) {
        var contextPath, func;
        if (_.isFunction(path)) {
          func = path;
        } else if (_.isArray(path)) {
          contextPath = path.slice(0, -1);
          path = path[path.length - 1];
        }
        return _.map(obj, function(context) {
          var method = func;
          if (!method) {
            if (contextPath && contextPath.length) {
              context = deepGet(context, contextPath);
            }
            if (context == null) return void 0;
            method = context[path];
          }
          return method == null ? method : method.apply(context, args);
        });
      });

      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
      };

      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function(obj, attrs) {
        return _.filter(obj, _.matcher(attrs));
      };

      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matcher(attrs));
      };

      // Return the maximum element (or element-based computation).
      _.max = function(obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity,
            value, computed;
        if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value != null && value > result) {
              result = value;
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function(v, index, list) {
            computed = iteratee(v, index, list);
            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
              result = v;
              lastComputed = computed;
            }
          });
        }
        return result;
      };

      // Return the minimum element (or element-based computation).
      _.min = function(obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity,
            value, computed;
        if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value != null && value < result) {
              result = value;
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function(v, index, list) {
            computed = iteratee(v, index, list);
            if (computed < lastComputed || computed === Infinity && result === Infinity) {
              result = v;
              lastComputed = computed;
            }
          });
        }
        return result;
      };

      // Shuffle a collection.
      _.shuffle = function(obj) {
        return _.sample(obj, Infinity);
      };

      // Sample **n** random values from a collection using the modern version of the
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      // If **n** is not specified, returns a single random element.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function(obj, n, guard) {
        if (n == null || guard) {
          if (!isArrayLike(obj)) obj = _.values(obj);
          return obj[_.random(obj.length - 1)];
        }
        var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
        var length = getLength(sample);
        n = Math.max(Math.min(n, length), 0);
        var last = length - 1;
        for (var index = 0; index < n; index++) {
          var rand = _.random(index, last);
          var temp = sample[index];
          sample[index] = sample[rand];
          sample[rand] = temp;
        }
        return sample.slice(0, n);
      };

      // Sort the object's values by a criterion produced by an iteratee.
      _.sortBy = function(obj, iteratee, context) {
        var index = 0;
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function(value, key, list) {
          return {
            value: value,
            index: index++,
            criteria: iteratee(value, key, list)
          };
        }).sort(function(left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };

      // An internal function used for aggregate "group by" operations.
      var group = function(behavior, partition) {
        return function(obj, iteratee, context) {
          var result = partition ? [[], []] : {};
          iteratee = cb(iteratee, context);
          _.each(obj, function(value, index) {
            var key = iteratee(value, index, obj);
            behavior(result, value, key);
          });
          return result;
        };
      };

      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function(result, value, key) {
        if (has(result, key)) result[key].push(value); else result[key] = [value];
      });

      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function(result, value, key) {
        result[key] = value;
      });

      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function(result, value, key) {
        if (has(result, key)) result[key]++; else result[key] = 1;
      });

      var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
      // Safely create a real, live array from anything iterable.
      _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (_.isString(obj)) {
          // Keep surrogate pair characters together
          return obj.match(reStrSymbol);
        }
        if (isArrayLike(obj)) return _.map(obj, _.identity);
        return _.values(obj);
      };

      // Return the number of elements in an object.
      _.size = function(obj) {
        if (obj == null) return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length;
      };

      // Split a collection into two arrays: one whose elements all satisfy the given
      // predicate, and one whose elements all do not satisfy the predicate.
      _.partition = group(function(result, value, pass) {
        result[pass ? 0 : 1].push(value);
      }, true);

      // Array Functions
      // ---------------

      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function(array, n, guard) {
        if (array == null || array.length < 1) return n == null ? void 0 : [];
        if (n == null || guard) return array[0];
        return _.initial(array, array.length - n);
      };

      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N.
      _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
      };

      // Get the last element of an array. Passing **n** will return the last N
      // values in the array.
      _.last = function(array, n, guard) {
        if (array == null || array.length < 1) return n == null ? void 0 : [];
        if (n == null || guard) return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n));
      };

      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array.
      _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };

      // Trim out all falsy values from an array.
      _.compact = function(array) {
        return _.filter(array, Boolean);
      };

      // Internal implementation of a recursive `flatten` function.
      var flatten = function(input, shallow, strict, output) {
        output = output || [];
        var idx = output.length;
        for (var i = 0, length = getLength(input); i < length; i++) {
          var value = input[i];
          if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
            // Flatten current level of array or arguments object.
            if (shallow) {
              var j = 0, len = value.length;
              while (j < len) output[idx++] = value[j++];
            } else {
              flatten(value, shallow, strict, output);
              idx = output.length;
            }
          } else if (!strict) {
            output[idx++] = value;
          }
        }
        return output;
      };

      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function(array, shallow) {
        return flatten(array, shallow, false);
      };

      // Return a version of the array that does not contain the specified value(s).
      _.without = restArguments(function(array, otherArrays) {
        return _.difference(array, otherArrays);
      });

      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // The faster algorithm will not work with an iteratee if the iteratee
      // is not a one-to-one function, so providing an iteratee will disable
      // the faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
          context = iteratee;
          iteratee = isSorted;
          isSorted = false;
        }
        if (iteratee != null) iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
          var value = array[i],
              computed = iteratee ? iteratee(value, i, array) : value;
          if (isSorted && !iteratee) {
            if (!i || seen !== computed) result.push(value);
            seen = computed;
          } else if (iteratee) {
            if (!_.contains(seen, computed)) {
              seen.push(computed);
              result.push(value);
            }
          } else if (!_.contains(result, value)) {
            result.push(value);
          }
        }
        return result;
      };

      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = restArguments(function(arrays) {
        return _.uniq(flatten(arrays, true, true));
      });

      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function(array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
          var item = array[i];
          if (_.contains(result, item)) continue;
          var j;
          for (j = 1; j < argsLength; j++) {
            if (!_.contains(arguments[j], item)) break;
          }
          if (j === argsLength) result.push(item);
        }
        return result;
      };

      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = restArguments(function(array, rest) {
        rest = flatten(rest, true, true);
        return _.filter(array, function(value){
          return !_.contains(rest, value);
        });
      });

      // Complement of _.zip. Unzip accepts an array of arrays and groups
      // each array's elements on shared indices.
      _.unzip = function(array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);

        for (var index = 0; index < length; index++) {
          result[index] = _.pluck(array, index);
        }
        return result;
      };

      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = restArguments(_.unzip);

      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values. Passing by pairs is the reverse of _.pairs.
      _.object = function(list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };

      // Generator function to create the findIndex and findLastIndex functions.
      var createPredicateIndexFinder = function(dir) {
        return function(array, predicate, context) {
          predicate = cb(predicate, context);
          var length = getLength(array);
          var index = dir > 0 ? 0 : length - 1;
          for (; index >= 0 && index < length; index += dir) {
            if (predicate(array[index], index, array)) return index;
          }
          return -1;
        };
      };

      // Returns the first index on an array-like that passes a predicate test.
      _.findIndex = createPredicateIndexFinder(1);
      _.findLastIndex = createPredicateIndexFinder(-1);

      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function(array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
          var mid = Math.floor((low + high) / 2);
          if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
        }
        return low;
      };

      // Generator function to create the indexOf and lastIndexOf functions.
      var createIndexFinder = function(dir, predicateFind, sortedIndex) {
        return function(array, item, idx) {
          var i = 0, length = getLength(array);
          if (typeof idx == 'number') {
            if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i);
            } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
            }
          } else if (sortedIndex && idx && length) {
            idx = sortedIndex(array, item);
            return array[idx] === item ? idx : -1;
          }
          if (item !== item) {
            idx = predicateFind(slice.call(array, i, length), _.isNaN);
            return idx >= 0 ? idx + i : -1;
          }
          for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
            if (array[idx] === item) return idx;
          }
          return -1;
        };
      };

      // Return the position of the first occurrence of an item in an array,
      // or -1 if the item is not included in the array.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
      _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function(start, stop, step) {
        if (stop == null) {
          stop = start || 0;
          start = 0;
        }
        if (!step) {
          step = stop < start ? -1 : 1;
        }

        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);

        for (var idx = 0; idx < length; idx++, start += step) {
          range[idx] = start;
        }

        return range;
      };

      // Chunk a single array into multiple arrays, each containing `count` or fewer
      // items.
      _.chunk = function(array, count) {
        if (count == null || count < 1) return [];
        var result = [];
        var i = 0, length = array.length;
        while (i < length) {
          result.push(slice.call(array, i, i += count));
        }
        return result;
      };

      // Function (ahem) Functions
      // ------------------

      // Determines whether to execute a function as a constructor
      // or a normal function with the provided arguments.
      var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
        var self = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self, args);
        if (_.isObject(result)) return result;
        return self;
      };

      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = restArguments(function(func, context, args) {
        if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
        var bound = restArguments(function(callArgs) {
          return executeBound(func, bound, context, this, args.concat(callArgs));
        });
        return bound;
      });

      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context. _ acts
      // as a placeholder by default, allowing any combination of arguments to be
      // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
      _.partial = restArguments(function(func, boundArgs) {
        var placeholder = _.partial.placeholder;
        var bound = function() {
          var position = 0, length = boundArgs.length;
          var args = Array(length);
          for (var i = 0; i < length; i++) {
            args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
          }
          while (position < arguments.length) args.push(arguments[position++]);
          return executeBound(func, bound, this, this, args);
        };
        return bound;
      });

      _.partial.placeholder = _;

      // Bind a number of an object's methods to that object. Remaining arguments
      // are the method names to be bound. Useful for ensuring that all callbacks
      // defined on an object belong to it.
      _.bindAll = restArguments(function(obj, keys) {
        keys = flatten(keys, false, false);
        var index = keys.length;
        if (index < 1) throw new Error('bindAll must be passed function names');
        while (index--) {
          var key = keys[index];
          obj[key] = _.bind(obj[key], obj);
        }
      });

      // Memoize an expensive function by storing its results.
      _.memoize = function(func, hasher) {
        var memoize = function(key) {
          var cache = memoize.cache;
          var address = '' + (hasher ? hasher.apply(this, arguments) : key);
          if (!has(cache, address)) cache[address] = func.apply(this, arguments);
          return cache[address];
        };
        memoize.cache = {};
        return memoize;
      };

      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = restArguments(function(func, wait, args) {
        return setTimeout(function() {
          return func.apply(null, args);
        }, wait);
      });

      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = _.partial(_.delay, _, 1);

      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function(func, wait, options) {
        var timeout, context, args, result;
        var previous = 0;
        if (!options) options = {};

        var later = function() {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        };

        var throttled = function() {
          var now = _.now();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
            if (timeout) {
              clearTimeout(timeout);
              timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };

        throttled.cancel = function() {
          clearTimeout(timeout);
          previous = 0;
          timeout = context = args = null;
        };

        return throttled;
      };

      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function(func, wait, immediate) {
        var timeout, result;

        var later = function(context, args) {
          timeout = null;
          if (args) result = func.apply(context, args);
        };

        var debounced = restArguments(function(args) {
          if (timeout) clearTimeout(timeout);
          if (immediate) {
            var callNow = !timeout;
            timeout = setTimeout(later, wait);
            if (callNow) result = func.apply(this, args);
          } else {
            timeout = _.delay(later, wait, this, args);
          }

          return result;
        });

        debounced.cancel = function() {
          clearTimeout(timeout);
          timeout = null;
        };

        return debounced;
      };

      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
      };

      // Returns a negated version of the passed-in predicate.
      _.negate = function(predicate) {
        return function() {
          return !predicate.apply(this, arguments);
        };
      };

      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function() {
        var args = arguments;
        var start = args.length - 1;
        return function() {
          var i = start;
          var result = args[start].apply(this, arguments);
          while (i--) result = args[i].call(this, result);
          return result;
        };
      };

      // Returns a function that will only be executed on and after the Nth call.
      _.after = function(times, func) {
        return function() {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };

      // Returns a function that will only be executed up to (but not including) the Nth call.
      _.before = function(times, func) {
        var memo;
        return function() {
          if (--times > 0) {
            memo = func.apply(this, arguments);
          }
          if (times <= 1) func = null;
          return memo;
        };
      };

      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = _.partial(_.before, 2);

      _.restArguments = restArguments;

      // Object Functions
      // ----------------

      // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
      var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
      var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
        'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

      var collectNonEnumProps = function(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

        // Constructor is a special case.
        var prop = 'constructor';
        if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

        while (nonEnumIdx--) {
          prop = nonEnumerableProps[nonEnumIdx];
          if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
            keys.push(prop);
          }
        }
      };

      // Retrieve the names of an object's own properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`.
      _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) if (has(obj, key)) keys.push(key);
        // Ahem, IE < 9.
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
      };

      // Retrieve all the property names of an object.
      _.allKeys = function(obj) {
        if (!_.isObject(obj)) return [];
        var keys = [];
        for (var key in obj) keys.push(key);
        // Ahem, IE < 9.
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
      };

      // Retrieve the values of an object's properties.
      _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };

      // Returns the results of applying the iteratee to each element of the object.
      // In contrast to _.map it returns an object.
      _.mapObject = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj),
            length = keys.length,
            results = {};
        for (var index = 0; index < length; index++) {
          var currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };

      // Convert an object into a list of `[key, value]` pairs.
      // The opposite of _.object.
      _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };

      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };

      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`.
      _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };

      // An internal function for creating assigner functions.
      var createAssigner = function(keysFunc, defaults) {
        return function(obj) {
          var length = arguments.length;
          if (defaults) obj = Object(obj);
          if (length < 2 || obj == null) return obj;
          for (var index = 1; index < length; index++) {
            var source = arguments[index],
                keys = keysFunc(source),
                l = keys.length;
            for (var i = 0; i < l; i++) {
              var key = keys[i];
              if (!defaults || obj[key] === void 0) obj[key] = source[key];
            }
          }
          return obj;
        };
      };

      // Extend a given object with all the properties in passed-in object(s).
      _.extend = createAssigner(_.allKeys);

      // Assigns a given object with all the own properties in the passed-in object(s).
      // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
      _.extendOwn = _.assign = createAssigner(_.keys);

      // Returns the first key on an object that passes a predicate test.
      _.findKey = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];
          if (predicate(obj[key], key, obj)) return key;
        }
      };

      // Internal pick helper function to determine if `obj` has key `key`.
      var keyInObj = function(value, key, obj) {
        return key in obj;
      };

      // Return a copy of the object only containing the whitelisted properties.
      _.pick = restArguments(function(obj, keys) {
        var result = {}, iteratee = keys[0];
        if (obj == null) return result;
        if (_.isFunction(iteratee)) {
          if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
          keys = _.allKeys(obj);
        } else {
          iteratee = keyInObj;
          keys = flatten(keys, false, false);
          obj = Object(obj);
        }
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];
          var value = obj[key];
          if (iteratee(value, key, obj)) result[key] = value;
        }
        return result;
      });

      // Return a copy of the object without the blacklisted properties.
      _.omit = restArguments(function(obj, keys) {
        var iteratee = keys[0], context;
        if (_.isFunction(iteratee)) {
          iteratee = _.negate(iteratee);
          if (keys.length > 1) context = keys[1];
        } else {
          keys = _.map(flatten(keys, false, false), String);
          iteratee = function(value, key) {
            return !_.contains(keys, key);
          };
        }
        return _.pick(obj, iteratee, context);
      });

      // Fill in a given object with default properties.
      _.defaults = createAssigner(_.allKeys, true);

      // Creates an object that inherits from the given prototype object.
      // If additional properties are provided then they will be added to the
      // created object.
      _.create = function(prototype, props) {
        var result = baseCreate(prototype);
        if (props) _.extendOwn(result, props);
        return result;
      };

      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };

      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
      };

      // Returns whether an object has a given set of `key:value` pairs.
      _.isMatch = function(object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null) return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
          var key = keys[i];
          if (attrs[key] !== obj[key] || !(key in obj)) return false;
        }
        return true;
      };


      // Internal recursive comparison function for `isEqual`.
      var eq, deepEq;
      eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        // `null` or `undefined` only equal to itself (strict comparison).
        if (a == null || b == null) return false;
        // `NaN`s are equivalent, but non-reflexive.
        if (a !== a) return b !== b;
        // Exhaust primitive checks
        var type = typeof a;
        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
        return deepEq(a, b, aStack, bStack);
      };

      // Internal recursive comparison function for `isEqual`.
      deepEq = function(a, b, aStack, bStack) {
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, regular expressions, dates, and booleans are compared by value.
          case '[object RegExp]':
          // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return '' + a === '' + b;
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a) return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
          case '[object Symbol]':
            return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        }

        var areArrays = className === '[object Array]';
        if (!areArrays) {
          if (typeof a != 'object' || typeof b != 'object') return false;

          // Objects with different constructors are not equivalent, but `Object`s or `Array`s
          // from different frames are.
          var aCtor = a.constructor, bCtor = b.constructor;
          if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                                   _.isFunction(bCtor) && bCtor instanceof bCtor)
                              && ('constructor' in a && 'constructor' in b)) {
            return false;
          }
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] === a) return bStack[length] === b;
        }

        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);

        // Recursively compare objects and arrays.
        if (areArrays) {
          // Compare array lengths to determine if a deep comparison is necessary.
          length = a.length;
          if (length !== b.length) return false;
          // Deep compare the contents, ignoring non-numeric properties.
          while (length--) {
            if (!eq(a[length], b[length], aStack, bStack)) return false;
          }
        } else {
          // Deep compare objects.
          var keys = _.keys(a), key;
          length = keys.length;
          // Ensure that both objects contain the same number of properties before comparing deep equality.
          if (_.keys(b).length !== length) return false;
          while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true;
      };

      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function(a, b) {
        return eq(a, b);
      };

      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
        return _.keys(obj).length === 0;
      };

      // Is a given value a DOM element?
      _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
      };

      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) === '[object Array]';
      };

      // Is a given variable an object?
      _.isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
      };

      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
      _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
        _['is' + name] = function(obj) {
          return toString.call(obj) === '[object ' + name + ']';
        };
      });

      // Define a fallback version of the method in browsers (ahem, IE < 9), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
          return has(obj, 'callee');
        };
      }

      // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
      // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
      var nodelist = root.document && root.document.childNodes;
      if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
        _.isFunction = function(obj) {
          return typeof obj == 'function' || false;
        };
      }

      // Is a given object a finite number?
      _.isFinite = function(obj) {
        return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
      };

      // Is the given value `NaN`?
      _.isNaN = function(obj) {
        return _.isNumber(obj) && isNaN(obj);
      };

      // Is a given value a boolean?
      _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
      };

      // Is a given value equal to null?
      _.isNull = function(obj) {
        return obj === null;
      };

      // Is a given variable undefined?
      _.isUndefined = function(obj) {
        return obj === void 0;
      };

      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function(obj, path) {
        if (!_.isArray(path)) {
          return has(obj, path);
        }
        var length = path.length;
        for (var i = 0; i < length; i++) {
          var key = path[i];
          if (obj == null || !hasOwnProperty.call(obj, key)) {
            return false;
          }
          obj = obj[key];
        }
        return !!length;
      };

      // Utility Functions
      // -----------------

      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
      };

      // Keep the identity function around for default iteratees.
      _.identity = function(value) {
        return value;
      };

      // Predicate-generating functions. Often useful outside of Underscore.
      _.constant = function(value) {
        return function() {
          return value;
        };
      };

      _.noop = function(){};

      // Creates a function that, when passed an object, will traverse that object’s
      // properties down the given `path`, specified as an array of keys or indexes.
      _.property = function(path) {
        if (!_.isArray(path)) {
          return shallowProperty(path);
        }
        return function(obj) {
          return deepGet(obj, path);
        };
      };

      // Generates a function for a given object that returns a given property.
      _.propertyOf = function(obj) {
        if (obj == null) {
          return function(){};
        }
        return function(path) {
          return !_.isArray(path) ? obj[path] : deepGet(obj, path);
        };
      };

      // Returns a predicate for checking whether an object has a given set of
      // `key:value` pairs.
      _.matcher = _.matches = function(attrs) {
        attrs = _.extendOwn({}, attrs);
        return function(obj) {
          return _.isMatch(obj, attrs);
        };
      };

      // Run a function **n** times.
      _.times = function(n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++) accum[i] = iteratee(i);
        return accum;
      };

      // Return a random integer between min and max (inclusive).
      _.random = function(min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };

      // A (possibly faster) way to get the current timestamp as an integer.
      _.now = Date.now || function() {
        return new Date().getTime();
      };

      // List of HTML entities for escaping.
      var escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;'
      };
      var unescapeMap = _.invert(escapeMap);

      // Functions for escaping and unescaping strings to/from HTML interpolation.
      var createEscaper = function(map) {
        var escaper = function(match) {
          return map[match];
        };
        // Regexes for identifying a key that needs to be escaped.
        var source = '(?:' + _.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function(string) {
          string = string == null ? '' : '' + string;
          return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
      };
      _.escape = createEscaper(escapeMap);
      _.unescape = createEscaper(unescapeMap);

      // Traverses the children of `obj` along `path`. If a child is a function, it
      // is invoked with its parent as context. Returns the value of the final
      // child, or `fallback` if any child is undefined.
      _.result = function(obj, path, fallback) {
        if (!_.isArray(path)) path = [path];
        var length = path.length;
        if (!length) {
          return _.isFunction(fallback) ? fallback.call(obj) : fallback;
        }
        for (var i = 0; i < length; i++) {
          var prop = obj == null ? void 0 : obj[path[i]];
          if (prop === void 0) {
            prop = fallback;
            i = length; // Ensure we don't continue iterating.
          }
          obj = _.isFunction(prop) ? prop.call(obj) : prop;
        }
        return obj;
      };

      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };

      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };

      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;

      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

      var escapeChar = function(match) {
        return '\\' + escapes[match];
      };

      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      // NB: `oldSettings` only exists for backwards compatibility.
      _.template = function(text, settings, oldSettings) {
        if (!settings && oldSettings) settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);

        // Combine delimiters into one regular expression via alternation.
        var matcher = RegExp([
          (settings.escape || noMatch).source,
          (settings.interpolate || noMatch).source,
          (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');

        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
          index = offset + match.length;

          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          } else if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          } else if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }

          // Adobe VMs need the match returned to produce the correct offset.
          return match;
        });
        source += "';\n";

        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

        source = "var __t,__p='',__j=Array.prototype.join," +
          "print=function(){__p+=__j.call(arguments,'');};\n" +
          source + 'return __p;\n';

        var render;
        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }

        var template = function(data) {
          return render.call(this, data, _);
        };

        // Provide the compiled source as a convenience for precompilation.
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';

        return template;
      };

      // Add a "chain" function. Start chaining a wrapped Underscore object.
      _.chain = function(obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
      };

      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.

      // Helper function to continue chaining intermediate results.
      var chainResult = function(instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
      };

      // Add your own custom functions to the Underscore object.
      _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function() {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return chainResult(this, func.apply(_, args));
          };
        });
        return _;
      };

      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);

      // Add all mutator Array functions to the wrapper.
      _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
          return chainResult(this, obj);
        };
      });

      // Add all accessor Array functions to the wrapper.
      _.each(['concat', 'join', 'slice'], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          return chainResult(this, method.apply(this._wrapped, arguments));
        };
      });

      // Extracts the result from a wrapped and chained object.
      _.prototype.value = function() {
        return this._wrapped;
      };

      // Provide unwrapping proxy for some methods used in engine operations
      // such as arithmetic and JSON stringification.
      _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

      _.prototype.toString = function() {
        return String(this._wrapped);
      };
    }());
    });

    /*
        This file is part of web3.js.

        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    var errors = {
        ErrorResponse: function (result) {
            var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
            var data = (!!result.error && !!result.error.data) ? result.error.data : null;
            var err = new Error('Returned error: ' + message);
            err.data = data;
            return err;
        },
        InvalidNumberOfParams: function (got, expected, method) {
            return new Error('Invalid number of parameters for "' + method + '". Got ' + got + ' expected ' + expected + '!');
        },
        InvalidConnection: function (host, event) {
            return this.ConnectionError('CONNECTION ERROR: Couldn\'t connect to node ' + host + '.', event);
        },
        InvalidProvider: function () {
            return new Error('Provider not set or invalid');
        },
        InvalidResponse: function (result) {
            var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
            return new Error(message);
        },
        ConnectionTimeout: function (ms) {
            return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
        },
        ConnectionNotOpenError: function (event) {
            return this.ConnectionError('connection not open on send()', event);
        },
        ConnectionCloseError: function (event) {
            if (typeof event === 'object' && event.code && event.reason) {
                return this.ConnectionError('CONNECTION ERROR: The connection got closed with ' +
                    'the close code `' + event.code + '` and the following ' +
                    'reason string `' + event.reason + '`', event);
            }
            return new Error('CONNECTION ERROR: The connection closed unexpectedly');
        },
        MaxAttemptsReachedOnReconnectingError: function () {
            return new Error('Maximum number of reconnect attempts reached!');
        },
        PendingRequestsOnReconnectingError: function () {
            return new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!');
        },
        ConnectionError: function (msg, event) {
            const error = new Error(msg);
            if (event) {
                error.code = event.code;
                error.reason = event.reason;
            }
            return error;
        },
        RevertInstructionError: function (reason, signature) {
            var error = new Error('Your request got reverted with the following reason string: ' + reason);
            error.reason = reason;
            error.signature = signature;
            return error;
        },
        TransactionRevertInstructionError: function (reason, signature, receipt) {
            var error = new Error('Transaction has been reverted by the EVM:\n' + JSON.stringify(receipt, null, 2));
            error.reason = reason;
            error.signature = signature;
            error.receipt = receipt;
            return error;
        },
        TransactionError: function (message, receipt) {
            var error = new Error(message);
            error.receipt = receipt;
            return error;
        },
        NoContractAddressFoundError: function (receipt) {
            return this.TransactionError('The transaction receipt didn\'t contain a contract address.', receipt);
        },
        ContractCodeNotStoredError: function (receipt) {
            return this.TransactionError('The contract code couldn\'t be stored, please check your gas limit.', receipt);
        },
        TransactionRevertedWithoutReasonError: function (receipt) {
            return this.TransactionError('Transaction has been reverted by the EVM:\n' + JSON.stringify(receipt, null, 2), receipt);
        },
        TransactionOutOfGasError: function (receipt) {
            return this.TransactionError('Transaction ran out of gas. Please provide more gas:\n' + JSON.stringify(receipt, null, 2), receipt);
        },
        ResolverMethodMissingError: function (address, name) {
            return new Error('The resolver at ' + address + 'does not implement requested method: "' + name + '".');
        },
        ContractMissingABIError: function () {
            return new Error('You must provide the json interface of the contract when instantiating a contract object.');
        },
        ContractOnceRequiresCallbackError: function () {
            return new Error('Once requires a callback as the second parameter.');
        },
        ContractEventDoesNotExistError: function (eventName) {
            return new Error('Event "' + eventName + '" doesn\'t exist in this contract.');
        },
        ContractReservedEventError: function (type) {
            return new Error('The event "' + type + '" is a reserved event name, you can\'t use it.');
        },
        ContractMissingDeployDataError: function () {
            return new Error('No "data" specified in neither the given options, nor the default options.');
        },
        ContractNoAddressDefinedError: function () {
            return new Error('This contract object doesn\'t have address set yet, please set an address first.');
        },
        ContractNoFromAddressDefinedError: function () {
            return new Error('No "from" address specified in neither the given options, nor the default options.');
        }
    };

    var bn = createCommonjsModule(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        Buffer = commonjsRequire('buf' + 'fer').Buffer;
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this.strip();

        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex (str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r <<= 4;

          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;

          // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;

          // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this.strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })( module, commonjsGlobal);
    });

    var bn$1 = createCommonjsModule(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        Buffer = commonjsRequire('buf' + 'fer').Buffer;
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this.strip();

        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex (str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r <<= 4;

          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;

          // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;

          // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this.strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })( module, commonjsGlobal);
    });

    /**
     * Returns a `Boolean` on whether or not the a `String` starts with '0x'
     * @param {String} str the string input value
     * @return {Boolean} a boolean if it is or is not hex prefixed
     * @throws if the str input is not a string
     */
    var src = function isHexPrefixed(str) {
      if (typeof str !== 'string') {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
      }

      return str.slice(0, 2) === '0x';
    };

    /**
     * Removes '0x' from a given `String` is present
     * @param {String} str the string value
     * @return {String|Optional} a string by pass if necessary
     */
    var src$1 = function stripHexPrefix(str) {
      if (typeof str !== 'string') {
        return str;
      }

      return src(str) ? str.slice(2) : str;
    };

    /**
     * Returns a BN object, converts a number value to a BN
     * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
     * @return {Object} `output` BN object of the number
     * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
     */
    var src$2 = function numberToBN(arg) {
      if (typeof arg === 'string' || typeof arg === 'number') {
        var multiplier = new bn$1(1); // eslint-disable-line
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
        var stringArg = src$1(formattedString); // eslint-disable-line
        if (stringArg.substr(0, 1) === '-') {
          stringArg = src$1(stringArg.slice(1));
          multiplier = new bn$1(-1, 10);
        }
        stringArg = stringArg === '' ? '0' : stringArg;

        if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
          || stringArg.match(/^[a-fA-F]+$/)
          || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
          return new bn$1(stringArg, 16).mul(multiplier);
        }

        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
          return new bn$1(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new bn$1(arg.toString(10), 10);
        }
      }

      throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
    };

    var zero = new bn(0);
    var negative1 = new bn(-1);

    // complete ethereum unit map
    var unitMap = {
      'noether': '0', // eslint-disable-line
      'wei': '1', // eslint-disable-line
      'kwei': '1000', // eslint-disable-line
      'Kwei': '1000', // eslint-disable-line
      'babbage': '1000', // eslint-disable-line
      'femtoether': '1000', // eslint-disable-line
      'mwei': '1000000', // eslint-disable-line
      'Mwei': '1000000', // eslint-disable-line
      'lovelace': '1000000', // eslint-disable-line
      'picoether': '1000000', // eslint-disable-line
      'gwei': '1000000000', // eslint-disable-line
      'Gwei': '1000000000', // eslint-disable-line
      'shannon': '1000000000', // eslint-disable-line
      'nanoether': '1000000000', // eslint-disable-line
      'nano': '1000000000', // eslint-disable-line
      'szabo': '1000000000000', // eslint-disable-line
      'microether': '1000000000000', // eslint-disable-line
      'micro': '1000000000000', // eslint-disable-line
      'finney': '1000000000000000', // eslint-disable-line
      'milliether': '1000000000000000', // eslint-disable-line
      'milli': '1000000000000000', // eslint-disable-line
      'ether': '1000000000000000000', // eslint-disable-line
      'kether': '1000000000000000000000', // eslint-disable-line
      'grand': '1000000000000000000000', // eslint-disable-line
      'mether': '1000000000000000000000000', // eslint-disable-line
      'gether': '1000000000000000000000000000', // eslint-disable-line
      'tether': '1000000000000000000000000000000' };

    /**
     * Returns value of unit in Wei
     *
     * @method getValueOfUnit
     * @param {String} unit the unit to convert to, default ether
     * @returns {BigNumber} value of the unit (in Wei)
     * @throws error if the unit is not correct:w
     */
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : 'ether';
      var unitValue = unitMap[unit]; // eslint-disable-line

      if (typeof unitValue !== 'string') {
        throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
      }

      return new bn(unitValue, 10);
    }

    function numberToString(arg) {
      if (typeof arg === 'string') {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
        }
        return arg;
      } else if (typeof arg === 'number') {
        return String(arg);
      } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          // eslint-disable-line
          return arg.toString(10);
        }
      }
      throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
    }

    function fromWei(weiInput, unit, optionsInput) {
      var wei = src$2(weiInput); // eslint-disable-line
      var negative = wei.lt(zero); // eslint-disable-line
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};

      if (negative) {
        wei = wei.mul(negative1);
      }

      var fraction = wei.mod(base).toString(10); // eslint-disable-line

      while (fraction.length < baseLength) {
        fraction = '0' + fraction;
      }

      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }

      var whole = wei.div(base).toString(10); // eslint-disable-line

      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      }

      var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line

      if (negative) {
        value = '-' + value;
      }

      return value;
    }

    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput); // eslint-disable-line
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;

      // Is it negative?
      var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
      if (negative) {
        ether = ether.substring(1);
      }

      if (ether === '.') {
        throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
      }

      // Split it into a whole and fractional part
      var comps = ether.split('.'); // eslint-disable-line
      if (comps.length > 2) {
        throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
      }

      var whole = comps[0],
          fraction = comps[1]; // eslint-disable-line

      if (!whole) {
        whole = '0';
      }
      if (!fraction) {
        fraction = '0';
      }
      if (fraction.length > baseLength) {
        throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
      }

      while (fraction.length < baseLength) {
        fraction += '0';
      }

      whole = new bn(whole);
      fraction = new bn(fraction);
      var wei = whole.mul(base).add(fraction); // eslint-disable-line

      if (negative) {
        wei = wei.mul(negative1);
      }

      return new bn(wei.toString(10), 10);
    }

    var lib = {
      unitMap: unitMap,
      numberToString: numberToString,
      getValueOfUnit: getValueOfUnit,
      fromWei: fromWei,
      toWei: toWei
    };

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init$1 () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init$1();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init$1();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0 = getCjsExportFromNamespace(_nodeResolve_empty$1);

    var bn$2 = createCommonjsModule(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        Buffer = require$$0.Buffer;
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this.strip();

        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex (str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r <<= 4;

          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;

          // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;

          // '0' - '9'
          } else {
            r |= c & 0xf;
          }
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this.strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is BN v4 instance
            r.strip();
          } else {
            // r is BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })( module, commonjsGlobal);
    });

    var utf8 = createCommonjsModule(function (module, exports) {
    (function(root) {

    	var stringFromCharCode = String.fromCharCode;

    	// Taken from https://mths.be/punycode
    	function ucs2decode(string) {
    		var output = [];
    		var counter = 0;
    		var length = string.length;
    		var value;
    		var extra;
    		while (counter < length) {
    			value = string.charCodeAt(counter++);
    			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    				// high surrogate, and there is a next character
    				extra = string.charCodeAt(counter++);
    				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
    					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    				} else {
    					// unmatched surrogate; only append this code unit, in case the next
    					// code unit is the high surrogate of a surrogate pair
    					output.push(value);
    					counter--;
    				}
    			} else {
    				output.push(value);
    			}
    		}
    		return output;
    	}

    	// Taken from https://mths.be/punycode
    	function ucs2encode(array) {
    		var length = array.length;
    		var index = -1;
    		var value;
    		var output = '';
    		while (++index < length) {
    			value = array[index];
    			if (value > 0xFFFF) {
    				value -= 0x10000;
    				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
    				value = 0xDC00 | value & 0x3FF;
    			}
    			output += stringFromCharCode(value);
    		}
    		return output;
    	}

    	function checkScalarValue(codePoint) {
    		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
    			throw Error(
    				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
    				' is not a scalar value'
    			);
    		}
    	}
    	/*--------------------------------------------------------------------------*/

    	function createByte(codePoint, shift) {
    		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
    	}

    	function encodeCodePoint(codePoint) {
    		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
    			return stringFromCharCode(codePoint);
    		}
    		var symbol = '';
    		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
    			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
    		}
    		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
    			checkScalarValue(codePoint);
    			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
    			symbol += createByte(codePoint, 6);
    		}
    		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
    			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
    			symbol += createByte(codePoint, 12);
    			symbol += createByte(codePoint, 6);
    		}
    		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
    		return symbol;
    	}

    	function utf8encode(string) {
    		var codePoints = ucs2decode(string);
    		var length = codePoints.length;
    		var index = -1;
    		var codePoint;
    		var byteString = '';
    		while (++index < length) {
    			codePoint = codePoints[index];
    			byteString += encodeCodePoint(codePoint);
    		}
    		return byteString;
    	}

    	/*--------------------------------------------------------------------------*/

    	function readContinuationByte() {
    		if (byteIndex >= byteCount) {
    			throw Error('Invalid byte index');
    		}

    		var continuationByte = byteArray[byteIndex] & 0xFF;
    		byteIndex++;

    		if ((continuationByte & 0xC0) == 0x80) {
    			return continuationByte & 0x3F;
    		}

    		// If we end up here, it’s not a continuation byte
    		throw Error('Invalid continuation byte');
    	}

    	function decodeSymbol() {
    		var byte1;
    		var byte2;
    		var byte3;
    		var byte4;
    		var codePoint;

    		if (byteIndex > byteCount) {
    			throw Error('Invalid byte index');
    		}

    		if (byteIndex == byteCount) {
    			return false;
    		}

    		// Read first byte
    		byte1 = byteArray[byteIndex] & 0xFF;
    		byteIndex++;

    		// 1-byte sequence (no continuation bytes)
    		if ((byte1 & 0x80) == 0) {
    			return byte1;
    		}

    		// 2-byte sequence
    		if ((byte1 & 0xE0) == 0xC0) {
    			byte2 = readContinuationByte();
    			codePoint = ((byte1 & 0x1F) << 6) | byte2;
    			if (codePoint >= 0x80) {
    				return codePoint;
    			} else {
    				throw Error('Invalid continuation byte');
    			}
    		}

    		// 3-byte sequence (may include unpaired surrogates)
    		if ((byte1 & 0xF0) == 0xE0) {
    			byte2 = readContinuationByte();
    			byte3 = readContinuationByte();
    			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
    			if (codePoint >= 0x0800) {
    				checkScalarValue(codePoint);
    				return codePoint;
    			} else {
    				throw Error('Invalid continuation byte');
    			}
    		}

    		// 4-byte sequence
    		if ((byte1 & 0xF8) == 0xF0) {
    			byte2 = readContinuationByte();
    			byte3 = readContinuationByte();
    			byte4 = readContinuationByte();
    			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
    				(byte3 << 0x06) | byte4;
    			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
    				return codePoint;
    			}
    		}

    		throw Error('Invalid UTF-8 detected');
    	}

    	var byteArray;
    	var byteCount;
    	var byteIndex;
    	function utf8decode(byteString) {
    		byteArray = ucs2decode(byteString);
    		byteCount = byteArray.length;
    		byteIndex = 0;
    		var codePoints = [];
    		var tmp;
    		while ((tmp = decodeSymbol()) !== false) {
    			codePoints.push(tmp);
    		}
    		return ucs2encode(codePoints);
    	}

    	/*--------------------------------------------------------------------------*/

    	root.version = '3.0.0';
    	root.encode = utf8encode;
    	root.decode = utf8decode;

    }( exports));
    });

    // This was ported from https://github.com/emn178/js-sha3, with some minor
    // modifications and pruning. It is licensed under MIT:
    //
    // Copyright 2015-2016 Chen, Yi-Cyuan
    //  
    // Permission is hereby granted, free of charge, to any person obtaining
    // a copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to
    // permit persons to whom the Software is furnished to do so, subject to
    // the following conditions:
    // 
    // The above copyright notice and this permission notice shall be
    // included in all copies or substantial portions of the Software.
    // 
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    const HEX_CHARS = '0123456789abcdef'.split('');
    const KECCAK_PADDING = [1, 256, 65536, 16777216];
    const SHIFT = [0, 8, 16, 24];
    const RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

    const Keccak = bits => ({
      blocks: [],
      reset: true,
      block: 0,
      start: 0,
      blockCount: 1600 - (bits << 1) >> 5,
      outputBlocks: bits >> 5,
      s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    });

    const update$1 = (state, message) => {
      var length = message.length,
          blocks = state.blocks,
          byteCount = state.blockCount << 2,
          blockCount = state.blockCount,
          outputBlocks = state.outputBlocks,
          s = state.s,
          index = 0,
          i,
          code;

      // update
      while (index < length) {
        if (state.reset) {
          state.reset = false;
          blocks[0] = state.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (typeof message !== "string") {
          for (i = state.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = state.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            }
          }
        }
        state.lastByteIndex = i;
        if (i >= byteCount) {
          state.start = i - byteCount;
          state.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          state.reset = true;
        } else {
          state.start = i;
        }
      }

      // finalize
      i = state.lastByteIndex;
      blocks[i >> 2] |= KECCAK_PADDING[i & 3];
      if (state.lastByteIndex === byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);

      // toString
      var hex = '',
          i = 0,
          j = 0,
          block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      return "0x" + hex;
    };

    const f = s => {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;

        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };

    const keccak = bits => str => {
      var msg;
      if (str.slice(0, 2) === "0x") {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));
      } else {
        msg = str;
      }
      return update$1(Keccak(bits), msg);
    };

    var hash = {
      keccak256: keccak(256),
      keccak512: keccak(512),
      keccak256s: keccak(256),
      keccak512s: keccak(512)
    };

    var sha3 = createCommonjsModule(function (module) {
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    var utils = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    /**
     * Keccak256 hash
     * @param data The data
     */
    function keccak256(data) {
        return '0x' + sha3.keccak_256(toByteArray(data));
    }
    exports.keccak256 = keccak256;
    /**
     * Adding padding to string on the left
     * @param value The value
     * @param chars The chars
     */
    exports.padLeft = (value, chars) => {
        const hasPrefix = /^0x/i.test(value) || typeof value === 'number';
        value = value.toString().replace(/^0x/i, '');
        const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
        return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;
    };
    /**
     * Convert bytes to hex
     * @param bytes The bytes
     */
    function bytesToHex(bytes) {
        const hex = [];
        for (let i = 0; i < bytes.length; i++) {
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 0xf).toString(16));
        }
        return `0x${hex.join('').replace(/^0+/, '')}`;
    }
    exports.bytesToHex = bytesToHex;
    /**
     * To byte array
     * @param value The value
     */
    function toByteArray(value) {
        if (value == null) {
            throw new Error('cannot convert null value to array');
        }
        if (typeof value === 'string') {
            const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
            if (!match) {
                throw new Error('invalid hexidecimal string');
            }
            if (match[1] !== '0x') {
                throw new Error('hex string must have 0x prefix');
            }
            value = value.substring(2);
            if (value.length % 2) {
                value = '0' + value;
            }
            const result = [];
            for (let i = 0; i < value.length; i += 2) {
                result.push(parseInt(value.substr(i, 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isByteArray(value)) {
            return addSlice(new Uint8Array(value));
        }
        throw new Error('invalid arrayify value');
    }
    exports.toByteArray = toByteArray;
    /**
     * Is byte array
     * @param value The value
     */
    function isByteArray(value) {
        if (!value ||
            // tslint:disable-next-line: radix
            parseInt(String(value.length)) != value.length ||
            typeof value === 'string') {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            // tslint:disable-next-line: radix
            if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
                return false;
            }
        }
        return true;
    }
    /**
     * Add slice to array
     * @param array The array
     */
    function addSlice(array) {
        if (array.slice !== undefined) {
            return array;
        }
        array.slice = () => {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    });

    var dist = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    /**
     * Returns true if the bloom is a valid bloom
     * @param bloom The bloom
     */
    function isBloom(bloom) {
        if (typeof bloom !== 'string') {
            return false;
        }
        if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
            return false;
        }
        if (/^(0x)?[0-9a-f]{512}$/.test(bloom) ||
            /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
            return true;
        }
        return false;
    }
    exports.isBloom = isBloom;
    /**
     * Returns true if the value is part of the given bloom
     * note: false positives are possible.
     * @param bloom encoded bloom
     * @param value The value
     */
    function isInBloom(bloom, value) {
        if (typeof value === 'object' && value.constructor === Uint8Array) {
            value = utils.bytesToHex(value);
        }
        const hash = utils.keccak256(value).replace('0x', '');
        for (let i = 0; i < 12; i += 4) {
            // calculate bit position in bloom filter that must be active
            const bitpos = ((parseInt(hash.substr(i, 2), 16) << 8) +
                parseInt(hash.substr(i + 2, 2), 16)) &
                2047;
            // test if bitpos in bloom is active
            const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
            const offset = 1 << bitpos % 4;
            if ((code & offset) !== offset) {
                return false;
            }
        }
        return true;
    }
    exports.isInBloom = isInBloom;
    /**
     * Code points to int
     * @param codePoint The code point
     */
    function codePointToInt(codePoint) {
        if (codePoint >= 48 && codePoint <= 57) {
            /* ['0'..'9'] -> [0..9] */
            return codePoint - 48;
        }
        if (codePoint >= 65 && codePoint <= 70) {
            /* ['A'..'F'] -> [10..15] */
            return codePoint - 55;
        }
        if (codePoint >= 97 && codePoint <= 102) {
            /* ['a'..'f'] -> [10..15] */
            return codePoint - 87;
        }
        throw new Error('invalid bloom');
    }
    /**
     * Returns true if the ethereum users address is part of the given bloom.
     * note: false positives are possible.
     * @param bloom encoded bloom
     * @param address the address to test
     */
    function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
        if (!isBloom(bloom)) {
            throw new Error('Invalid bloom given');
        }
        if (!isAddress(ethereumAddress)) {
            throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
        }
        // you have to pad the ethereum address to 32 bytes
        // else the bloom filter does not work
        // this is only if your matching the USERS
        // ethereum address. Contract address do not need this
        // hence why we have 2 methods
        // (0x is not in the 2nd parameter of padleft so 64 chars is fine)
        const address = utils.padLeft(ethereumAddress, 64);
        return isInBloom(bloom, address);
    }
    exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
    /**
     * Returns true if the contract address is part of the given bloom.
     * note: false positives are possible.
     * @param bloom encoded bloom
     * @param contractAddress the contract address to test
     */
    function isContractAddressInBloom(bloom, contractAddress) {
        if (!isBloom(bloom)) {
            throw new Error('Invalid bloom given');
        }
        if (!isAddress(contractAddress)) {
            throw new Error(`Invalid contract address given: "${contractAddress}"`);
        }
        return isInBloom(bloom, contractAddress);
    }
    exports.isContractAddressInBloom = isContractAddressInBloom;
    /**
     * Returns true if the topic is part of the given bloom.
     * note: false positives are possible.
     * @param bloom encoded bloom
     * @param topic the topic encoded hex
     */
    function isTopicInBloom(bloom, topic) {
        if (!isBloom(bloom)) {
            throw new Error('Invalid bloom given');
        }
        if (!isTopic(topic)) {
            throw new Error('Invalid topic');
        }
        return isInBloom(bloom, topic);
    }
    exports.isTopicInBloom = isTopicInBloom;
    /**
     * Checks if its a valid topic
     * @param topic encoded hex topic
     */
    function isTopic(topic) {
        if (typeof topic !== 'string') {
            return false;
        }
        if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
            return false;
        }
        else if (/^(0x)?[0-9a-f]{64}$/.test(topic) ||
            /^(0x)?[0-9A-F]{64}$/.test(topic)) {
            return true;
        }
        return false;
    }
    exports.isTopic = isTopic;
    /**
     * Is valid address
     * @param address The address
     */
    function isAddress(address) {
        if (typeof address !== 'string') {
            return false;
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            return true;
        }
        if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            return true;
        }
        return false;
    }
    exports.isAddress = isAddress;
    });

    /*
     This file is part of web3.js.

     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file utils.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */






    /**
     * Returns true if object is BN, otherwise false
     *
     * @method isBN
     * @param {Object} object
     * @return {Boolean}
     */
    var isBN = function (object) {
        return bn$2.isBN(object);
    };
    /**
     * Returns true if object is BigNumber, otherwise false
     *
     * @method isBigNumber
     * @param {Object} object
     * @return {Boolean}
     */
    var isBigNumber = function (object) {
        return object && object.constructor && object.constructor.name === 'BigNumber';
    };
    /**
     * Takes an input and transforms it into an BN
     *
     * @method toBN
     * @param {Number|String|BN} number, string, HEX string or BN
     * @return {BN} BN
     */
    var toBN = function (number) {
        try {
            return src$2.apply(null, arguments);
        }
        catch (e) {
            throw new Error(e + ' Given value: "' + number + '"');
        }
    };
    /**
     * Takes and input transforms it into BN and if it is negative value, into two's complement
     *
     * @method toTwosComplement
     * @param {Number|String|BN} number
     * @return {String}
     */
    var toTwosComplement = function (number) {
        return '0x' + toBN(number).toTwos(256).toString(16, 64);
    };
    /**
     * Checks if the given string is an address
     *
     * @method isAddress
     * @param {String} address the given HEX address
     * @return {Boolean}
     */
    var isAddress = function (address) {
        // check if it has the basic requirements of an address
        if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
            return false;
            // If it's ALL lowercase or ALL upppercase
        }
        else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
            return true;
            // Otherwise check each case
        }
        else {
            return checkAddressChecksum(address);
        }
    };
    /**
     * Checks if the given string is a checksummed address
     *
     * @method checkAddressChecksum
     * @param {String} address the given HEX address
     * @return {Boolean}
     */
    var checkAddressChecksum = function (address) {
        // Check each case
        address = address.replace(/^0x/i, '');
        var addressHash = sha3$1(address.toLowerCase()).replace(/^0x/i, '');
        for (var i = 0; i < 40; i++) {
            // the nth letter should be uppercase if the nth digit of casemap is 1
            if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * Should be called to pad string to expected length
     *
     * @method leftPad
     * @param {String} string to be padded
     * @param {Number} chars that result string should have
     * @param {String} sign, by default 0
     * @returns {String} right aligned string
     */
    var leftPad = function (string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
        string = string.toString(16).replace(/^0x/i, '');
        var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
        return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
    };
    /**
     * Should be called to pad string to expected length
     *
     * @method rightPad
     * @param {String} string to be padded
     * @param {Number} chars that result string should have
     * @param {String} sign, by default 0
     * @returns {String} right aligned string
     */
    var rightPad = function (string, chars, sign) {
        var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
        string = string.toString(16).replace(/^0x/i, '');
        var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
        return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
    };
    /**
     * Should be called to get hex representation (prefixed by 0x) of utf8 string
     *
     * @method utf8ToHex
     * @param {String} str
     * @returns {String} hex representation of input string
     */
    var utf8ToHex = function (str) {
        str = utf8.encode(str);
        var hex = "";
        // remove \u0000 padding from either side
        str = str.replace(/^(?:\u0000)*/, '');
        str = str.split("").reverse().join("");
        str = str.replace(/^(?:\u0000)*/, '');
        str = str.split("").reverse().join("");
        for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            // if (code !== 0) {
            var n = code.toString(16);
            hex += n.length < 2 ? '0' + n : n;
            // }
        }
        return "0x" + hex;
    };
    /**
     * Should be called to get utf8 from it's hex representation
     *
     * @method hexToUtf8
     * @param {String} hex
     * @returns {String} ascii string representation of hex value
     */
    var hexToUtf8 = function (hex) {
        if (!isHexStrict(hex))
            throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
        var str = "";
        var code = 0;
        hex = hex.replace(/^0x/i, '');
        // remove 00 padding from either side
        hex = hex.replace(/^(?:00)*/, '');
        hex = hex.split("").reverse().join("");
        hex = hex.replace(/^(?:00)*/, '');
        hex = hex.split("").reverse().join("");
        var l = hex.length;
        for (var i = 0; i < l; i += 2) {
            code = parseInt(hex.substr(i, 2), 16);
            // if (code !== 0) {
            str += String.fromCharCode(code);
            // }
        }
        return utf8.decode(str);
    };
    /**
     * Converts value to it's number representation
     *
     * @method hexToNumber
     * @param {String|Number|BN} value
     * @return {String}
     */
    var hexToNumber = function (value) {
        if (!value) {
            return value;
        }
        if (underscore.isString(value) && !isHexStrict(value)) {
            throw new Error('Given value "' + value + '" is not a valid hex string.');
        }
        return toBN(value).toNumber();
    };
    /**
     * Converts value to it's decimal representation in string
     *
     * @method hexToNumberString
     * @param {String|Number|BN} value
     * @return {String}
     */
    var hexToNumberString = function (value) {
        if (!value)
            return value;
        if (underscore.isString(value) && !isHexStrict(value)) {
            throw new Error('Given value "' + value + '" is not a valid hex string.');
        }
        return toBN(value).toString(10);
    };
    /**
     * Converts value to it's hex representation
     *
     * @method numberToHex
     * @param {String|Number|BN} value
     * @return {String}
     */
    var numberToHex = function (value) {
        if (underscore.isNull(value) || underscore.isUndefined(value)) {
            return value;
        }
        if (!isFinite(value) && !isHexStrict(value)) {
            throw new Error('Given input "' + value + '" is not a number.');
        }
        var number = toBN(value);
        var result = number.toString(16);
        return number.lt(new bn$2(0)) ? '-0x' + result.substr(1) : '0x' + result;
    };
    /**
     * Convert a byte array to a hex string
     *
     * Note: Implementation from crypto-js
     *
     * @method bytesToHex
     * @param {Array} bytes
     * @return {String} the hex string
     */
    var bytesToHex = function (bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
            /* jshint ignore:start */
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 0xF).toString(16));
            /* jshint ignore:end */
        }
        return '0x' + hex.join("");
    };
    /**
     * Convert a hex string to a byte array
     *
     * Note: Implementation from crypto-js
     *
     * @method hexToBytes
     * @param {string} hex
     * @return {Array} the byte array
     */
    var hexToBytes = function (hex) {
        hex = hex.toString(16);
        if (!isHexStrict(hex)) {
            throw new Error('Given value "' + hex + '" is not a valid hex string.');
        }
        hex = hex.replace(/^0x/i, '');
        for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
    };
    /**
     * Auto converts any given value into it's hex representation.
     *
     * And even stringifys objects before.
     *
     * @method toHex
     * @param {String|Number|BN|Object|Buffer} value
     * @param {Boolean} returnType
     * @return {String}
     */
    var toHex$1 = function (value, returnType) {
        /*jshint maxcomplexity: false */
        if (isAddress(value)) {
            return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');
        }
        if (underscore.isBoolean(value)) {
            return returnType ? 'bool' : value ? '0x01' : '0x00';
        }
        if (isBuffer(value)) {
            return '0x' + value.toString('hex');
        }
        if (underscore.isObject(value) && !isBigNumber(value) && !isBN(value)) {
            return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
        }
        // if its a negative number, pass it through numberToHex
        if (underscore.isString(value)) {
            if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
                return returnType ? 'int256' : numberToHex(value);
            }
            else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
                return returnType ? 'bytes' : value;
            }
            else if (!isFinite(value)) {
                return returnType ? 'string' : utf8ToHex(value);
            }
        }
        return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
    };
    /**
     * Check if string is HEX, requires a 0x in front
     *
     * @method isHexStrict
     * @param {String} hex to be checked
     * @returns {Boolean}
     */
    var isHexStrict = function (hex) {
        return ((underscore.isString(hex) || underscore.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
    };
    /**
     * Check if string is HEX
     *
     * @method isHex
     * @param {String} hex to be checked
     * @returns {Boolean}
     */
    var isHex = function (hex) {
        return ((underscore.isString(hex) || underscore.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
    };
    /**
     * Returns true if given string is a valid Ethereum block header bloom.
     *
     * @method isBloom
     * @param {String} bloom encoded bloom filter
     * @return {Boolean}
     */
    var isBloom = function (bloom) {
        return dist.isBloom(bloom);
    };
    /**
     * Returns true if the ethereum users address is part of the given bloom
     * note: false positives are possible.
     *
     * @method isUserEthereumAddressInBloom
     * @param {String} ethereumAddress encoded bloom filter
     * @param {String} bloom ethereum addresss
     * @return {Boolean}
     */
    var isUserEthereumAddressInBloom = function (bloom, ethereumAddress) {
        return dist.isUserEthereumAddressInBloom(bloom, ethereumAddress);
    };
    /**
     * Returns true if the contract address is part of the given bloom
     * note: false positives are possible.
     *
     * @method isUserEthereumAddressInBloom
     * @param {String} bloom encoded bloom filter
     * @param {String} contractAddress contract addresss
     * @return {Boolean}
     */
    var isContractAddressInBloom = function (bloom, contractAddress) {
        return dist.isContractAddressInBloom(bloom, contractAddress);
    };
    /**
     * Returns true if given string is a valid log topic.
     *
     * @method isTopic
     * @param {String} topic encoded topic
     * @return {Boolean}
     */
    var isTopic = function (topic) {
        return dist.isTopic(topic);
    };
    /**
     * Returns true if the topic is part of the given bloom
     * note: false positives are possible.
     *
     * @method isTopicInBloom
     * @param {String} bloom encoded bloom filter
     * @param {String} topic encoded topic
     * @return {Boolean}
     */
    var isTopicInBloom = function (bloom, topic) {
        return dist.isTopicInBloom(bloom, topic);
    };
    /**
     * Returns true if the value is part of the given bloom
     * note: false positives are possible.
     *
     * @method isInBloom
     * @param {String} bloom encoded bloom filter
     * @param {String | Uint8Array} topic encoded value
     * @return {Boolean}
     */
    var isInBloom = function (bloom, topic) {
        return dist.isInBloom(bloom, topic);
    };
    /**
     * Hashes values to a sha3 hash using keccak 256
     *
     * To hash a HEX string the hex must have 0x in front.
     *
     * @method sha3
     * @return {String} the sha3 string
     */
    var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    var sha3$1 = function (value) {
        if (isBN(value)) {
            value = value.toString();
        }
        if (isHexStrict(value) && /^0x/i.test((value).toString())) {
            value = hexToBytes(value);
        }
        var returnValue = hash.keccak256(value); // jshint ignore:line
        if (returnValue === SHA3_NULL_S) {
            return null;
        }
        else {
            return returnValue;
        }
    };
    // expose the under the hood keccak256
    sha3$1._Hash = hash;
    /**
     * @method sha3Raw
     *
     * @param value
     *
     * @returns {string}
     */
    var sha3Raw = function (value) {
        value = sha3$1(value);
        if (value === null) {
            return SHA3_NULL_S;
        }
        return value;
    };
    var utils$1 = {
        BN: bn$2,
        isBN: isBN,
        isBigNumber: isBigNumber,
        toBN: toBN,
        isAddress: isAddress,
        isBloom: isBloom,
        isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,
        isContractAddressInBloom: isContractAddressInBloom,
        isTopic: isTopic,
        isTopicInBloom: isTopicInBloom,
        isInBloom: isInBloom,
        checkAddressChecksum: checkAddressChecksum,
        utf8ToHex: utf8ToHex,
        hexToUtf8: hexToUtf8,
        hexToNumber: hexToNumber,
        hexToNumberString: hexToNumberString,
        numberToHex: numberToHex,
        toHex: toHex$1,
        hexToBytes: hexToBytes,
        bytesToHex: bytesToHex,
        isHex: isHex,
        isHexStrict: isHexStrict,
        leftPad: leftPad,
        rightPad: rightPad,
        toTwosComplement: toTwosComplement,
        sha3: sha3$1,
        sha3Raw: sha3Raw
    };

    /*
     This file is part of web3.js.

     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file soliditySha3.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */



    var _elementaryName = function (name) {
        /*jshint maxcomplexity:false */
        if (name.startsWith('int[')) {
            return 'int256' + name.slice(3);
        }
        else if (name === 'int') {
            return 'int256';
        }
        else if (name.startsWith('uint[')) {
            return 'uint256' + name.slice(4);
        }
        else if (name === 'uint') {
            return 'uint256';
        }
        else if (name.startsWith('fixed[')) {
            return 'fixed128x128' + name.slice(5);
        }
        else if (name === 'fixed') {
            return 'fixed128x128';
        }
        else if (name.startsWith('ufixed[')) {
            return 'ufixed128x128' + name.slice(6);
        }
        else if (name === 'ufixed') {
            return 'ufixed128x128';
        }
        return name;
    };
    // Parse N from type<N>
    var _parseTypeN = function (type) {
        var typesize = /^\D+(\d+).*$/.exec(type);
        return typesize ? parseInt(typesize[1], 10) : null;
    };
    // Parse N from type[<N>]
    var _parseTypeNArray = function (type) {
        var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
        return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    var _parseNumber = function (arg) {
        var type = typeof arg;
        if (type === 'string') {
            if (utils$1.isHexStrict(arg)) {
                return new bn$2(arg.replace(/0x/i, ''), 16);
            }
            else {
                return new bn$2(arg, 10);
            }
        }
        else if (type === 'number') {
            return new bn$2(arg);
        }
        else if (utils$1.isBigNumber(arg)) {
            return new bn$2(arg.toString(10));
        }
        else if (utils$1.isBN(arg)) {
            return arg;
        }
        else {
            throw new Error(arg + ' is not a number');
        }
    };
    var _solidityPack = function (type, value, arraySize) {
        /*jshint maxcomplexity:false */
        var size, num;
        type = _elementaryName(type);
        if (type === 'bytes') {
            if (value.replace(/^0x/i, '').length % 2 !== 0) {
                throw new Error('Invalid bytes characters ' + value.length);
            }
            return value;
        }
        else if (type === 'string') {
            return utils$1.utf8ToHex(value);
        }
        else if (type === 'bool') {
            return value ? '01' : '00';
        }
        else if (type.startsWith('address')) {
            if (arraySize) {
                size = 64;
            }
            else {
                size = 40;
            }
            if (!utils$1.isAddress(value)) {
                throw new Error(value + ' is not a valid address, or the checksum is invalid.');
            }
            return utils$1.leftPad(value.toLowerCase(), size);
        }
        size = _parseTypeN(type);
        if (type.startsWith('bytes')) {
            if (!size) {
                throw new Error('bytes[] not yet supported in solidity');
            }
            // must be 32 byte slices when in an array
            if (arraySize) {
                size = 32;
            }
            if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {
                throw new Error('Invalid bytes' + size + ' for ' + value);
            }
            return utils$1.rightPad(value, size * 2);
        }
        else if (type.startsWith('uint')) {
            if ((size % 8) || (size < 8) || (size > 256)) {
                throw new Error('Invalid uint' + size + ' size');
            }
            num = _parseNumber(value);
            if (num.bitLength() > size) {
                throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
            }
            if (num.lt(new bn$2(0))) {
                throw new Error('Supplied uint ' + num.toString() + ' is negative');
            }
            return size ? utils$1.leftPad(num.toString('hex'), size / 8 * 2) : num;
        }
        else if (type.startsWith('int')) {
            if ((size % 8) || (size < 8) || (size > 256)) {
                throw new Error('Invalid int' + size + ' size');
            }
            num = _parseNumber(value);
            if (num.bitLength() > size) {
                throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
            }
            if (num.lt(new bn$2(0))) {
                return num.toTwos(size).toString('hex');
            }
            else {
                return size ? utils$1.leftPad(num.toString('hex'), size / 8 * 2) : num;
            }
        }
        else {
            // FIXME: support all other types
            throw new Error('Unsupported or invalid type: ' + type);
        }
    };
    var _processSolidityEncodePackedArgs = function (arg) {
        /*jshint maxcomplexity:false */
        if (underscore.isArray(arg)) {
            throw new Error('Autodetection of array types is not supported.');
        }
        var type, value = '';
        var hexArg, arraySize;
        // if type is given
        if (underscore.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
            type = arg.hasOwnProperty('t') ? arg.t : arg.type;
            value = arg.hasOwnProperty('v') ? arg.v : arg.value;
            // otherwise try to guess the type
        }
        else {
            type = utils$1.toHex(arg, true);
            value = utils$1.toHex(arg);
            if (!type.startsWith('int') && !type.startsWith('uint')) {
                type = 'bytes';
            }
        }
        if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {
            value = new bn$2(value);
        }
        // get the array size
        if (underscore.isArray(value)) {
            arraySize = _parseTypeNArray(type);
            if (arraySize && value.length !== arraySize) {
                throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));
            }
            else {
                arraySize = value.length;
            }
        }
        if (underscore.isArray(value)) {
            hexArg = value.map(function (val) {
                return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');
            });
            return hexArg.join('');
        }
        else {
            hexArg = _solidityPack(type, value, arraySize);
            return hexArg.toString('hex').replace('0x', '');
        }
    };
    /**
     * Hashes solidity values to a sha3 hash using keccak 256
     *
     * @method soliditySha3
     * @return {Object} the sha3
     */
    var soliditySha3 = function () {
        /*jshint maxcomplexity:false */
        var args = Array.prototype.slice.call(arguments);
        var hexArgs = underscore.map(args, _processSolidityEncodePackedArgs);
        // console.log(args, hexArgs);
        // console.log('0x'+ hexArgs.join(''));
        return utils$1.sha3('0x' + hexArgs.join(''));
    };
    /**
     * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`
     *
     * @method soliditySha3Raw
     * @return {Object} the sha3
     */
    var soliditySha3Raw = function () {
        return utils$1.sha3Raw('0x' + underscore.map(Array.prototype.slice.call(arguments), _processSolidityEncodePackedArgs).join(''));
    };
    /**
     * Encode packed args to hex
     *
     * @method encodePacked
     * @return {String} the hex encoded arguments
     */
    var encodePacked = function () {
        /*jshint maxcomplexity:false */
        var args = Array.prototype.slice.call(arguments);
        var hexArgs = underscore.map(args, _processSolidityEncodePackedArgs);
        return '0x' + hexArgs.join('').toLowerCase();
    };
    var soliditySha3_1 = {
        soliditySha3: soliditySha3,
        soliditySha3Raw: soliditySha3Raw,
        encodePacked: encodePacked
    };

    var byteLength_1 = byteLength$1;
    var toByteArray_1 = toByteArray$1;
    var fromByteArray_1 = fromByteArray$1;

    var lookup$1 = [];
    var revLookup$1 = [];
    var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup$1[i] = code[i];
      revLookup$1[code.charCodeAt(i)] = i;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup$1['-'.charCodeAt(0)] = 62;
    revLookup$1['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength$1 (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray$1 (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr$1(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup$1[b64.charCodeAt(i)] << 18) |
          (revLookup$1[b64.charCodeAt(i + 1)] << 12) |
          (revLookup$1[b64.charCodeAt(i + 2)] << 6) |
          revLookup$1[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup$1[b64.charCodeAt(i)] << 2) |
          (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup$1[b64.charCodeAt(i)] << 10) |
          (revLookup$1[b64.charCodeAt(i + 1)] << 4) |
          (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64$1 (num) {
      return lookup$1[num >> 18 & 0x3F] +
        lookup$1[num >> 12 & 0x3F] +
        lookup$1[num >> 6 & 0x3F] +
        lookup$1[num & 0x3F]
    }

    function encodeChunk$1 (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64$1(tmp));
      }
      return output.join('')
    }

    function fromByteArray$1 (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk$1(
          uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
        ));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup$1[tmp >> 2] +
          lookup$1[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup$1[tmp >> 10] +
          lookup$1[(tmp >> 4) & 0x3F] +
          lookup$1[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var base64Js = {
    	byteLength: byteLength_1,
    	toByteArray: toByteArray_1,
    	fromByteArray: fromByteArray_1
    };

    var read$1 = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    var write$1 = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    var ieee754 = {
    	read: read$1,
    	write: write$1
    };

    var buffer = createCommonjsModule(function (module, exports) {



    var customInspectSymbol =
      (typeof Symbol === 'function' && typeof Symbol.for === 'function')
        ? Symbol.for('nodejs.util.inspect.custom')
        : null;

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;

    var K_MAX_LENGTH = 0x7fffffff;
    exports.kMaxLength = K_MAX_LENGTH;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      );
    }

    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function () { return 42 } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }

    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    });

    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    });

    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }

      if (ArrayBuffer.isView(value)) {
        return fromArrayLike(value)
      }

      if (value == null) {
        throw new TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }

      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof SharedArrayBuffer !== 'undefined' &&
          (isInstance(value, SharedArrayBuffer) ||
          (value && isInstance(value.buffer, SharedArrayBuffer)))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }

      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }

      var b = fromObject(value);
      if (b) return b

      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(
          value[Symbol.toPrimitive]('string'), encodingOrOffset, length
        )
      }

      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    };

    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }

    function alloc (size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    };

    function allocUnsafe (size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    };

    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }

      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);

      var actual = buf.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
      }

      return buf
    }

    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf
    }

    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }

      var buf;
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }

      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(buf, Buffer.prototype);

      return buf
    }

    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);

        if (buf.length === 0) {
          return buf
        }

        obj.copy(buf, 0, 0, len);
        return buf
      }

      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }

      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }

    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    };

    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          buf = Buffer.from(buf);
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }

      var len = string.length;
      var mustMatch = (arguments.length > 2 && arguments[2] === true);
      if (!mustMatch && len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.toLocaleString = Buffer.prototype.toString;

    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
      if (this.length > max) str += ' ... ';
      return '<Buffer ' + str + '>'
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset; // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      var strLen = string.length;

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64Js.fromByteArray(buf)
      } else {
        return base64Js.fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
            : (firstByte > 0xBF) ? 2
              : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(newBuf, Buffer.prototype);

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;

      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } else if (typeof val === 'boolean') {
        val = Number(val);
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0];
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }

    function base64ToBytes (str) {
      return base64Js.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }

    // Create lookup table for `toString('hex')`
    // See: https://github.com/feross/buffer/issues/219
    var hexSliceLookupTable = (function () {
      var alphabet = '0123456789abcdef';
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table
    })();
    });

    var safeBuffer = createCommonjsModule(function (module, exports) {
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    /* eslint-disable node/no-deprecated-api */

    var Buffer = buffer.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype);

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    };
    });

    var browser$1 = createCommonjsModule(function (module) {

    // limit of Crypto.getRandomValues()
    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
    var MAX_BYTES = 65536;

    // Node supports requesting up to this number of bytes
    // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
    var MAX_UINT32 = 4294967295;

    function oldBrowser () {
      throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
    }

    var Buffer = safeBuffer.Buffer;
    var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

    if (crypto && crypto.getRandomValues) {
      module.exports = randomBytes;
    } else {
      module.exports = oldBrowser;
    }

    function randomBytes (size, cb) {
      // phantomjs needs to throw
      if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

      var bytes = Buffer.allocUnsafe(size);

      if (size > 0) {  // getRandomValues fails on IE if size == 0
        if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
          // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            // buffer.slice automatically checks if the end is past the end of
            // the buffer so we don't have to here
            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto.getRandomValues(bytes);
        }
      }

      if (typeof cb === 'function') {
        return nextTick(function () {
          cb(null, bytes);
        })
      }

      return bytes
    }
    });

    /*
     This file is part of web3.js.

     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file utils.js
     * @author Marek Kotewicz <marek@parity.io>
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */






    /**
     * Fires an error in an event emitter and callback and returns the eventemitter
     *
     * @method _fireError
     * @param {Object} error a string, a error, or an object with {message, data}
     * @param {Object} emitter
     * @param {Function} reject
     * @param {Function} callback
     * @param {any} optionalData
     * @return {Object} the emitter
     */
    var _fireError = function (error, emitter, reject, callback, optionalData) {
        /*jshint maxcomplexity: 10 */
        // add data if given
        if (underscore.isObject(error) && !(error instanceof Error) && error.data) {
            if (underscore.isObject(error.data) || underscore.isArray(error.data)) {
                error.data = JSON.stringify(error.data, null, 2);
            }
            error = error.message + "\n" + error.data;
        }
        if (underscore.isString(error)) {
            error = new Error(error);
        }
        if (underscore.isFunction(callback)) {
            callback(error, optionalData);
        }
        if (underscore.isFunction(reject)) {
            // suppress uncatched error if an error listener is present
            // OR suppress uncatched error if an callback listener is present
            if (emitter &&
                (underscore.isFunction(emitter.listeners) &&
                    emitter.listeners('error').length) || underscore.isFunction(callback)) {
                emitter.catch(function () { });
            }
            // reject later, to be able to return emitter
            setTimeout(function () {
                reject(error);
            }, 1);
        }
        if (emitter && underscore.isFunction(emitter.emit)) {
            // emit later, to be able to return emitter
            setTimeout(function () {
                emitter.emit('error', error, optionalData);
                emitter.removeAllListeners();
            }, 1);
        }
        return emitter;
    };
    /**
     * Should be used to create full function/event name from json abi
     *
     * @method _jsonInterfaceMethodToString
     * @param {Object} json
     * @return {String} full function/event name
     */
    var _jsonInterfaceMethodToString = function (json) {
        if (underscore.isObject(json) && json.name && json.name.indexOf('(') !== -1) {
            return json.name;
        }
        return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';
    };
    /**
     * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings
     *
     * @method _flattenTypes
     * @param {bool} includeTuple
     * @param {Object} puts
     * @return {Array} parameters as strings
     */
    var _flattenTypes = function (includeTuple, puts) {
        // console.log("entered _flattenTypes. inputs/outputs: " + puts)
        var types = [];
        puts.forEach(function (param) {
            if (typeof param.components === 'object') {
                if (param.type.substring(0, 5) !== 'tuple') {
                    throw new Error('components found but type is not tuple; report on GitHub');
                }
                var suffix = '';
                var arrayBracket = param.type.indexOf('[');
                if (arrayBracket >= 0) {
                    suffix = param.type.substring(arrayBracket);
                }
                var result = _flattenTypes(includeTuple, param.components);
                // console.log("result should have things: " + result)
                if (underscore.isArray(result) && includeTuple) {
                    // console.log("include tuple word, and its an array. joining...: " + result.types)
                    types.push('tuple(' + result.join(',') + ')' + suffix);
                }
                else if (!includeTuple) {
                    // console.log("don't include tuple, but its an array. joining...: " + result)
                    types.push('(' + result.join(',') + ')' + suffix);
                }
                else {
                    // console.log("its a single type within a tuple: " + result.types)
                    types.push('(' + result + ')');
                }
            }
            else {
                // console.log("its a type and not directly in a tuple: " + param.type)
                types.push(param.type);
            }
        });
        return types;
    };
    /**
     * Returns a random hex string by the given bytes size
     *
     * @param {Number} size
     * @returns {string}
     */
    var randomHex = function (size) {
        return '0x' + browser$1(size).toString('hex');
    };
    /**
     * Should be called to get ascii from it's hex representation
     *
     * @method hexToAscii
     * @param {String} hex
     * @returns {String} ascii string representation of hex value
     */
    var hexToAscii = function (hex) {
        if (!utils$1.isHexStrict(hex))
            throw new Error('The parameter must be a valid HEX string.');
        var str = "";
        var i = 0, l = hex.length;
        if (hex.substring(0, 2) === '0x') {
            i = 2;
        }
        for (; i < l; i += 2) {
            var code = parseInt(hex.substr(i, 2), 16);
            str += String.fromCharCode(code);
        }
        return str;
    };
    /**
     * Should be called to get hex representation (prefixed by 0x) of ascii string
     *
     * @method asciiToHex
     * @param {String} str
     * @returns {String} hex representation of input string
     */
    var asciiToHex = function (str) {
        if (!str)
            return "0x00";
        var hex = "";
        for (var i = 0; i < str.length; i++) {
            var code = str.charCodeAt(i);
            var n = code.toString(16);
            hex += n.length < 2 ? '0' + n : n;
        }
        return "0x" + hex;
    };
    /**
     * Returns value of unit in Wei
     *
     * @method getUnitValue
     * @param {String} unit the unit to convert to, default ether
     * @returns {BN} value of the unit (in Wei)
     * @throws error if the unit is not correct:w
     */
    var getUnitValue = function (unit) {
        unit = unit ? unit.toLowerCase() : 'ether';
        if (!lib.unitMap[unit]) {
            throw new Error('This unit "' + unit + '" doesn\'t exist, please use the one of the following units' + JSON.stringify(lib.unitMap, null, 2));
        }
        return unit;
    };
    /**
     * Takes a number of wei and converts it to any other ether unit.
     *
     * Possible units are:
     *   SI Short   SI Full        Effigy       Other
     * - kwei       femtoether     babbage
     * - mwei       picoether      lovelace
     * - gwei       nanoether      shannon      nano
     * - --         microether     szabo        micro
     * - --         milliether     finney       milli
     * - ether      --             --
     * - kether                    --           grand
     * - mether
     * - gether
     * - tether
     *
     * @method fromWei
     * @param {Number|String} number can be a number, number string or a HEX of a decimal
     * @param {String} unit the unit to convert to, default ether
     * @return {String|Object} When given a BN object it returns one as well, otherwise a number
     */
    var fromWei$1 = function (number, unit) {
        unit = getUnitValue(unit);
        if (!utils$1.isBN(number) && !underscore.isString(number)) {
            throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
        }
        return utils$1.isBN(number) ? lib.fromWei(number, unit) : lib.fromWei(number, unit).toString(10);
    };
    /**
     * Takes a number of a unit and converts it to wei.
     *
     * Possible units are:
     *   SI Short   SI Full        Effigy       Other
     * - kwei       femtoether     babbage
     * - mwei       picoether      lovelace
     * - gwei       nanoether      shannon      nano
     * - --         microether     szabo        micro
     * - --         microether     szabo        micro
     * - --         milliether     finney       milli
     * - ether      --             --
     * - kether                    --           grand
     * - mether
     * - gether
     * - tether
     *
     * @method toWei
     * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
     * @param {String} unit the unit to convert from, default ether
     * @return {String|Object} When given a BN object it returns one as well, otherwise a number
     */
    var toWei$1 = function (number, unit) {
        unit = getUnitValue(unit);
        if (!utils$1.isBN(number) && !underscore.isString(number)) {
            throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
        }
        return utils$1.isBN(number) ? lib.toWei(number, unit) : lib.toWei(number, unit).toString(10);
    };
    /**
     * Converts to a checksum address
     *
     * @method toChecksumAddress
     * @param {String} address the given HEX address
     * @return {String}
     */
    var toChecksumAddress = function (address) {
        if (typeof address === 'undefined')
            return '';
        if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
            throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
        address = address.toLowerCase().replace(/^0x/i, '');
        var addressHash = utils$1.sha3(address).replace(/^0x/i, '');
        var checksumAddress = '0x';
        for (var i = 0; i < address.length; i++) {
            // If ith character is 8 to f then make it uppercase
            if (parseInt(addressHash[i], 16) > 7) {
                checksumAddress += address[i].toUpperCase();
            }
            else {
                checksumAddress += address[i];
            }
        }
        return checksumAddress;
    };
    /**
     * Returns -1 if a<b, 1 if a>b; 0 if a == b.
     * For more details on this type of function, see
     * developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
     *
     * @method compareBlockNumbers
     *
     * @param {String|Number|BN} a
     *
     * @param {String|Number|BN} b
     *
     * @returns {Number} -1, 0, or 1
     */
    var compareBlockNumbers = function (a, b) {
        if (a == b) {
            return 0;
        }
        else if (("genesis" == a || "earliest" == a || 0 == a) && ("genesis" == b || "earliest" == b || 0 == b)) {
            return 0;
        }
        else if ("genesis" == a || "earliest" == a) {
            // b !== a, thus a < b
            return -1;
        }
        else if ("genesis" == b || "earliest" == b) {
            // b !== a, thus a > b
            return 1;
        }
        else if (a == "latest") {
            if (b == "pending") {
                return -1;
            }
            else {
                // b !== ("pending" OR "latest"), thus a > b
                return 1;
            }
        }
        else if (b === "latest") {
            if (a == "pending") {
                return 1;
            }
            else {
                // b !== ("pending" OR "latest"), thus a > b
                return -1;
            }
        }
        else if (a == "pending") {
            // b (== OR <) "latest", thus a > b
            return 1;
        }
        else if (b == "pending") {
            return -1;
        }
        else {
            let bnA = new bn$2(a);
            let bnB = new bn$2(b);
            if (bnA.lt(bnB)) {
                return -1;
            }
            else if (bnA.eq(bnB)) {
                return 0;
            }
            else {
                return 1;
            }
        }
    };
    var lib$1 = {
        _fireError: _fireError,
        _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
        _flattenTypes: _flattenTypes,
        // extractDisplayName: extractDisplayName,
        // extractTypeName: extractTypeName,
        randomHex: randomHex,
        _: underscore,
        BN: utils$1.BN,
        isBN: utils$1.isBN,
        isBigNumber: utils$1.isBigNumber,
        isHex: utils$1.isHex,
        isHexStrict: utils$1.isHexStrict,
        sha3: utils$1.sha3,
        sha3Raw: utils$1.sha3Raw,
        keccak256: utils$1.sha3,
        soliditySha3: soliditySha3_1.soliditySha3,
        soliditySha3Raw: soliditySha3_1.soliditySha3Raw,
        encodePacked: soliditySha3_1.encodePacked,
        isAddress: utils$1.isAddress,
        checkAddressChecksum: utils$1.checkAddressChecksum,
        toChecksumAddress: toChecksumAddress,
        toHex: utils$1.toHex,
        toBN: utils$1.toBN,
        bytesToHex: utils$1.bytesToHex,
        hexToBytes: utils$1.hexToBytes,
        hexToNumberString: utils$1.hexToNumberString,
        hexToNumber: utils$1.hexToNumber,
        toDecimal: utils$1.hexToNumber,
        numberToHex: utils$1.numberToHex,
        fromDecimal: utils$1.numberToHex,
        hexToUtf8: utils$1.hexToUtf8,
        hexToString: utils$1.hexToUtf8,
        toUtf8: utils$1.hexToUtf8,
        utf8ToHex: utils$1.utf8ToHex,
        stringToHex: utils$1.utf8ToHex,
        fromUtf8: utils$1.utf8ToHex,
        hexToAscii: hexToAscii,
        toAscii: hexToAscii,
        asciiToHex: asciiToHex,
        fromAscii: asciiToHex,
        unitMap: lib.unitMap,
        toWei: toWei$1,
        fromWei: fromWei$1,
        padLeft: utils$1.leftPad,
        leftPad: utils$1.leftPad,
        padRight: utils$1.rightPad,
        rightPad: utils$1.rightPad,
        toTwosComplement: utils$1.toTwosComplement,
        isBloom: utils$1.isBloom,
        isUserEthereumAddressInBloom: utils$1.isUserEthereumAddressInBloom,
        isContractAddressInBloom: utils$1.isContractAddressInBloom,
        isTopic: utils$1.isTopic,
        isTopicInBloom: utils$1.isTopicInBloom,
        isInBloom: utils$1.isInBloom,
        compareBlockNumbers: compareBlockNumbers
    };

    var leftPad$1 = function (string, bytes) {
        var result = string;
        while (result.length < bytes * 2) {
            result = '0' + result;
        }
        return result;
    };
    /**
     * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
     * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
     *
     * @method iso13616Prepare
     * @param {String} iban the IBAN
     * @returns {String} the prepared IBAN
     */
    var iso13616Prepare = function (iban) {
        var A = 'A'.charCodeAt(0);
        var Z = 'Z'.charCodeAt(0);
        iban = iban.toUpperCase();
        iban = iban.substr(4) + iban.substr(0, 4);
        return iban.split('').map(function (n) {
            var code = n.charCodeAt(0);
            if (code >= A && code <= Z) {
                // A = 10, B = 11, ... Z = 35
                return code - A + 10;
            }
            else {
                return n;
            }
        }).join('');
    };
    /**
     * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
     *
     * @method mod9710
     * @param {String} iban
     * @returns {Number}
     */
    var mod9710 = function (iban) {
        var remainder = iban, block;
        while (remainder.length > 2) {
            block = remainder.slice(0, 9);
            remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
        }
        return parseInt(remainder, 10) % 97;
    };
    /**
     * This prototype should be used to create iban object from iban correct string
     *
     * @param {String} iban
     */
    var Iban = function Iban(iban) {
        this._iban = iban;
    };
    /**
     * This method should be used to create an ethereum address from a direct iban address
     *
     * @method toAddress
     * @param {String} iban address
     * @return {String} the ethereum address
     */
    Iban.toAddress = function (ib) {
        ib = new Iban(ib);
        if (!ib.isDirect()) {
            throw new Error('IBAN is indirect and can\'t be converted');
        }
        return ib.toAddress();
    };
    /**
     * This method should be used to create iban address from an ethereum address
     *
     * @method toIban
     * @param {String} address
     * @return {String} the IBAN address
     */
    Iban.toIban = function (address) {
        return Iban.fromAddress(address).toString();
    };
    /**
     * This method should be used to create iban object from an ethereum address
     *
     * @method fromAddress
     * @param {String} address
     * @return {Iban} the IBAN object
     */
    Iban.fromAddress = function (address) {
        if (!lib$1.isAddress(address)) {
            throw new Error('Provided address is not a valid address: ' + address);
        }
        address = address.replace('0x', '').replace('0X', '');
        var asBn = new bn$2(address, 16);
        var base36 = asBn.toString(36);
        var padded = leftPad$1(base36, 15);
        return Iban.fromBban(padded.toUpperCase());
    };
    /**
     * Convert the passed BBAN to an IBAN for this country specification.
     * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
     *
     * @method fromBban
     * @param {String} bban the BBAN to convert to IBAN
     * @returns {Iban} the IBAN object
     */
    Iban.fromBban = function (bban) {
        var countryCode = 'XE';
        var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
        var checkDigit = ('0' + (98 - remainder)).slice(-2);
        return new Iban(countryCode + checkDigit + bban);
    };
    /**
     * Should be used to create IBAN object for given institution and identifier
     *
     * @method createIndirect
     * @param {Object} options, required options are "institution" and "identifier"
     * @return {Iban} the IBAN object
     */
    Iban.createIndirect = function (options) {
        return Iban.fromBban('ETH' + options.institution + options.identifier);
    };
    /**
     * This method should be used to check if given string is valid iban object
     *
     * @method isValid
     * @param {String} iban string
     * @return {Boolean} true if it is valid IBAN
     */
    Iban.isValid = function (iban) {
        var i = new Iban(iban);
        return i.isValid();
    };
    /**
     * Should be called to check if iban is correct
     *
     * @method isValid
     * @returns {Boolean} true if it is, otherwise false
     */
    Iban.prototype.isValid = function () {
        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
            mod9710(iso13616Prepare(this._iban)) === 1;
    };
    /**
     * Should be called to check if iban number is direct
     *
     * @method isDirect
     * @returns {Boolean} true if it is, otherwise false
     */
    Iban.prototype.isDirect = function () {
        return this._iban.length === 34 || this._iban.length === 35;
    };
    /**
     * Should be called to check if iban number if indirect
     *
     * @method isIndirect
     * @returns {Boolean} true if it is, otherwise false
     */
    Iban.prototype.isIndirect = function () {
        return this._iban.length === 20;
    };
    /**
     * Should be called to get iban checksum
     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
     *
     * @method checksum
     * @returns {String} checksum
     */
    Iban.prototype.checksum = function () {
        return this._iban.substr(2, 2);
    };
    /**
     * Should be called to get institution identifier
     * eg. XREG
     *
     * @method institution
     * @returns {String} institution identifier
     */
    Iban.prototype.institution = function () {
        return this.isIndirect() ? this._iban.substr(7, 4) : '';
    };
    /**
     * Should be called to get client identifier within institution
     * eg. GAVOFYORK
     *
     * @method client
     * @returns {String} client identifier
     */
    Iban.prototype.client = function () {
        return this.isIndirect() ? this._iban.substr(11) : '';
    };
    /**
     * Should be called to get client direct address
     *
     * @method toAddress
     * @returns {String} ethereum address
     */
    Iban.prototype.toAddress = function () {
        if (this.isDirect()) {
            var base36 = this._iban.substr(4);
            var asBn = new bn$2(base36, 36);
            return lib$1.toChecksumAddress(asBn.toString(16, 20));
        }
        return '';
    };
    Iban.prototype.toString = function () {
        return this._iban;
    };
    var lib$2 = Iban;

    /**
     * Will format the given storage key array values to hex strings.
     *
     * @method inputStorageKeysFormatter
     *
     * @param {Array<Number|String|BN|BigNumber>} keys
     *
     * @returns {Array<String>}
     */
    var inputStorageKeysFormatter = function (keys) {
        return keys.map(lib$1.numberToHex);
    };
    /**
     * Will format the given proof response from the node.
     *
     * @method outputProofFormatter
     *
     * @param {object} proof
     *
     * @returns {object}
     */
    var outputProofFormatter = function (proof) {
        proof.address = lib$1.toChecksumAddress(proof.address);
        proof.nonce = lib$1.hexToNumberString(proof.nonce);
        proof.balance = lib$1.hexToNumberString(proof.balance);
        return proof;
    };
    /**
     * Should the format output to a big number
     *
     * @method outputBigNumberFormatter
     *
     * @param {String|Number|BigNumber|BN} number
     *
     * @returns {BN} object
     */
    var outputBigNumberFormatter = function (number) {
        return lib$1.toBN(number).toString(10);
    };
    /**
     * Returns true if the given blockNumber is 'latest', 'pending', or 'earliest.
     *
     * @method isPredefinedBlockNumber
     *
     * @param {String} blockNumber
     *
     * @returns {Boolean}
     */
    var isPredefinedBlockNumber = function (blockNumber) {
        return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
    };
    /**
     * Returns the given block number as hex string or does return the defaultBlock property of the current module
     *
     * @method inputDefaultBlockNumberFormatter
     *
     * @param {String|Number|BN|BigNumber} blockNumber
     *
     * @returns {String}
     */
    var inputDefaultBlockNumberFormatter = function (blockNumber) {
        if (this && (blockNumber === undefined || blockNumber === null)) {
            return inputBlockNumberFormatter(this.defaultBlock);
        }
        return inputBlockNumberFormatter(blockNumber);
    };
    /**
     * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'
     *
     * @param {String|Number|BN|BigNumber} blockNumber
     *
     * @returns {String}
     */
    var inputBlockNumberFormatter = function (blockNumber) {
        if (blockNumber === undefined) {
            return undefined;
        }
        if (isPredefinedBlockNumber(blockNumber)) {
            return blockNumber;
        }
        if (blockNumber === 'genesis') {
            return '0x0';
        }
        return (lib$1.isHexStrict(blockNumber)) ? ((underscore.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : lib$1.numberToHex(blockNumber);
    };
    /**
     * Formats the input of a transaction and converts all values to HEX
     *
     * @method _txInputFormatter
     * @param {Object} transaction options
     * @returns object
     */
    var _txInputFormatter = function (options) {
        if (options.to) { // it might be contract creation
            options.to = inputAddressFormatter(options.to);
        }
        if (options.data && options.input) {
            throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
        }
        if (!options.data && options.input) {
            options.data = options.input;
            delete options.input;
        }
        if (options.data && !options.data.startsWith('0x')) {
            options.data = '0x' + options.data;
        }
        if (options.data && !lib$1.isHex(options.data)) {
            throw new Error('The data field must be HEX encoded data.');
        }
        // allow both
        if (options.gas || options.gasLimit) {
            options.gas = options.gas || options.gasLimit;
        }
        ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
            return options[key] !== undefined;
        }).forEach(function (key) {
            options[key] = lib$1.numberToHex(options[key]);
        });
        return options;
    };
    /**
     * Formats the input of a transaction and converts all values to HEX
     *
     * @method inputCallFormatter
     * @param {Object} transaction options
     * @returns object
     */
    var inputCallFormatter = function (options) {
        options = _txInputFormatter(options);
        var from = options.from || (this ? this.defaultAccount : null);
        if (from) {
            options.from = inputAddressFormatter(from);
        }
        return options;
    };
    /**
     * Formats the input of a transaction and converts all values to HEX
     *
     * @method inputTransactionFormatter
     * @param {Object} options
     * @returns object
     */
    var inputTransactionFormatter = function (options) {
        options = _txInputFormatter(options);
        // check from, only if not number, or object
        if (!underscore.isNumber(options.from) && !underscore.isObject(options.from)) {
            options.from = options.from || (this ? this.defaultAccount : null);
            if (!options.from && !underscore.isNumber(options.from)) {
                throw new Error('The send transactions "from" field must be defined!');
            }
            options.from = inputAddressFormatter(options.from);
        }
        return options;
    };
    /**
     * Hex encodes the data passed to eth_sign and personal_sign
     *
     * @method inputSignFormatter
     * @param {String} data
     * @returns {String}
     */
    var inputSignFormatter = function (data) {
        return (lib$1.isHexStrict(data)) ? data : lib$1.utf8ToHex(data);
    };
    /**
     * Formats the output of a transaction to its proper values
     *
     * @method outputTransactionFormatter
     * @param {Object} tx
     * @returns {Object}
     */
    var outputTransactionFormatter = function (tx) {
        if (tx.blockNumber !== null)
            tx.blockNumber = lib$1.hexToNumber(tx.blockNumber);
        if (tx.transactionIndex !== null)
            tx.transactionIndex = lib$1.hexToNumber(tx.transactionIndex);
        tx.nonce = lib$1.hexToNumber(tx.nonce);
        tx.gas = lib$1.hexToNumber(tx.gas);
        tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
        tx.value = outputBigNumberFormatter(tx.value);
        if (tx.to && lib$1.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation
            tx.to = lib$1.toChecksumAddress(tx.to);
        }
        else {
            tx.to = null; // set to `null` if invalid address
        }
        if (tx.from) {
            tx.from = lib$1.toChecksumAddress(tx.from);
        }
        return tx;
    };
    /**
     * Formats the output of a transaction receipt to its proper values
     *
     * @method outputTransactionReceiptFormatter
     * @param {Object} receipt
     * @returns {Object}
     */
    var outputTransactionReceiptFormatter = function (receipt) {
        if (typeof receipt !== 'object') {
            throw new Error('Received receipt is invalid: ' + receipt);
        }
        if (receipt.blockNumber !== null)
            receipt.blockNumber = lib$1.hexToNumber(receipt.blockNumber);
        if (receipt.transactionIndex !== null)
            receipt.transactionIndex = lib$1.hexToNumber(receipt.transactionIndex);
        receipt.cumulativeGasUsed = lib$1.hexToNumber(receipt.cumulativeGasUsed);
        receipt.gasUsed = lib$1.hexToNumber(receipt.gasUsed);
        if (underscore.isArray(receipt.logs)) {
            receipt.logs = receipt.logs.map(outputLogFormatter);
        }
        if (receipt.contractAddress) {
            receipt.contractAddress = lib$1.toChecksumAddress(receipt.contractAddress);
        }
        if (typeof receipt.status !== 'undefined' && receipt.status !== null) {
            receipt.status = Boolean(parseInt(receipt.status));
        }
        return receipt;
    };
    /**
     * Formats the output of a block to its proper values
     *
     * @method outputBlockFormatter
     * @param {Object} block
     * @returns {Object}
     */
    var outputBlockFormatter = function (block) {
        // transform to number
        block.gasLimit = lib$1.hexToNumber(block.gasLimit);
        block.gasUsed = lib$1.hexToNumber(block.gasUsed);
        block.size = lib$1.hexToNumber(block.size);
        block.timestamp = lib$1.hexToNumber(block.timestamp);
        if (block.number !== null)
            block.number = lib$1.hexToNumber(block.number);
        if (block.difficulty)
            block.difficulty = outputBigNumberFormatter(block.difficulty);
        if (block.totalDifficulty)
            block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
        if (underscore.isArray(block.transactions)) {
            block.transactions.forEach(function (item) {
                if (!underscore.isString(item))
                    return outputTransactionFormatter(item);
            });
        }
        if (block.miner)
            block.miner = lib$1.toChecksumAddress(block.miner);
        return block;
    };
    /**
     * Formats the input of a log
     *
     * @method inputLogFormatter
     * @param {Object} log object
     * @returns {Object} log
     */
    var inputLogFormatter = function (options) {
        var toTopic = function (value) {
            if (value === null || typeof value === 'undefined')
                return null;
            value = String(value);
            if (value.indexOf('0x') === 0)
                return value;
            else
                return lib$1.fromUtf8(value);
        };
        if (options.fromBlock || options.fromBlock === 0)
            options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
        if (options.toBlock || options.toBlock === 0)
            options.toBlock = inputBlockNumberFormatter(options.toBlock);
        // make sure topics, get converted to hex
        options.topics = options.topics || [];
        options.topics = options.topics.map(function (topic) {
            return (underscore.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
        });
        toTopic = null;
        if (options.address) {
            options.address = (underscore.isArray(options.address)) ? options.address.map(function (addr) {
                return inputAddressFormatter(addr);
            }) : inputAddressFormatter(options.address);
        }
        return options;
    };
    /**
     * Formats the output of a log
     *
     * @method outputLogFormatter
     * @param {Object} log object
     * @returns {Object} log
     */
    var outputLogFormatter = function (log) {
        // generate a custom log id
        if (typeof log.blockHash === 'string' &&
            typeof log.transactionHash === 'string' &&
            typeof log.logIndex === 'string') {
            var shaId = lib$1.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));
            log.id = 'log_' + shaId.replace('0x', '').substr(0, 8);
        }
        else if (!log.id) {
            log.id = null;
        }
        if (log.blockNumber !== null)
            log.blockNumber = lib$1.hexToNumber(log.blockNumber);
        if (log.transactionIndex !== null)
            log.transactionIndex = lib$1.hexToNumber(log.transactionIndex);
        if (log.logIndex !== null)
            log.logIndex = lib$1.hexToNumber(log.logIndex);
        if (log.address) {
            log.address = lib$1.toChecksumAddress(log.address);
        }
        return log;
    };
    /**
     * Formats the input of a whisper post and converts all values to HEX
     *
     * @method inputPostFormatter
     * @param {Object} transaction object
     * @returns {Object}
     */
    var inputPostFormatter = function (post) {
        // post.payload = utils.toHex(post.payload);
        if (post.ttl)
            post.ttl = lib$1.numberToHex(post.ttl);
        if (post.workToProve)
            post.workToProve = lib$1.numberToHex(post.workToProve);
        if (post.priority)
            post.priority = lib$1.numberToHex(post.priority);
        // fallback
        if (!underscore.isArray(post.topics)) {
            post.topics = post.topics ? [post.topics] : [];
        }
        // format the following options
        post.topics = post.topics.map(function (topic) {
            // convert only if not hex
            return (topic.indexOf('0x') === 0) ? topic : lib$1.fromUtf8(topic);
        });
        return post;
    };
    /**
     * Formats the output of a received post message
     *
     * @method outputPostFormatter
     * @param {Object}
     * @returns {Object}
     */
    var outputPostFormatter = function (post) {
        post.expiry = lib$1.hexToNumber(post.expiry);
        post.sent = lib$1.hexToNumber(post.sent);
        post.ttl = lib$1.hexToNumber(post.ttl);
        post.workProved = lib$1.hexToNumber(post.workProved);
        // post.payloadRaw = post.payload;
        // post.payload = utils.hexToAscii(post.payload);
        // if (utils.isJson(post.payload)) {
        //     post.payload = JSON.parse(post.payload);
        // }
        // format the following options
        if (!post.topics) {
            post.topics = [];
        }
        post.topics = post.topics.map(function (topic) {
            return lib$1.toUtf8(topic);
        });
        return post;
    };
    var inputAddressFormatter = function (address) {
        var iban = new lib$2(address);
        if (iban.isValid() && iban.isDirect()) {
            return iban.toAddress().toLowerCase();
        }
        else if (lib$1.isAddress(address)) {
            return '0x' + address.toLowerCase().replace('0x', '');
        }
        throw new Error('Provided address "' + address + '" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\'t be converted.');
    };
    var outputSyncingFormatter = function (result) {
        result.startingBlock = lib$1.hexToNumber(result.startingBlock);
        result.currentBlock = lib$1.hexToNumber(result.currentBlock);
        result.highestBlock = lib$1.hexToNumber(result.highestBlock);
        if (result.knownStates) {
            result.knownStates = lib$1.hexToNumber(result.knownStates);
            result.pulledStates = lib$1.hexToNumber(result.pulledStates);
        }
        return result;
    };
    var formatters = {
        inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
        inputBlockNumberFormatter: inputBlockNumberFormatter,
        inputCallFormatter: inputCallFormatter,
        inputTransactionFormatter: inputTransactionFormatter,
        inputAddressFormatter: inputAddressFormatter,
        inputPostFormatter: inputPostFormatter,
        inputLogFormatter: inputLogFormatter,
        inputSignFormatter: inputSignFormatter,
        inputStorageKeysFormatter: inputStorageKeysFormatter,
        outputProofFormatter: outputProofFormatter,
        outputBigNumberFormatter: outputBigNumberFormatter,
        outputTransactionFormatter: outputTransactionFormatter,
        outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
        outputBlockFormatter: outputBlockFormatter,
        outputLogFormatter: outputLogFormatter,
        outputPostFormatter: outputPostFormatter,
        outputSyncingFormatter: outputSyncingFormatter
    };

    var lib$3 = {
        errors: errors,
        formatters: formatters
    };

    /*
        This file is part of web3.js.

        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    // Initialize Jsonrpc as a simple object with utility functions.
    var Jsonrpc = {
        messageId: 0
    };
    /**
     * Should be called to valid json create payload object
     *
     * @method toPayload
     * @param {Function} method of jsonrpc call, required
     * @param {Array} params, an array of method params, optional
     * @returns {Object} valid jsonrpc payload object
     */
    Jsonrpc.toPayload = function (method, params) {
        if (!method) {
            throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(params) + '"!');
        }
        // advance message ID
        Jsonrpc.messageId++;
        return {
            jsonrpc: '2.0',
            id: Jsonrpc.messageId,
            method: method,
            params: params || []
        };
    };
    /**
     * Should be called to check if jsonrpc response is valid
     *
     * @method isValidResponse
     * @param {Object}
     * @returns {Boolean} true if response is valid, otherwise false
     */
    Jsonrpc.isValidResponse = function (response) {
        return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);
        function validateSingleMessage(message) {
            return !!message &&
                !message.error &&
                message.jsonrpc === '2.0' &&
                (typeof message.id === 'number' || typeof message.id === 'string') &&
                message.result !== undefined; // only undefined is not valid json object
        }
    };
    /**
     * Should be called to create batch payload object
     *
     * @method toBatchPayload
     * @param {Array} messages, an array of objects with method (required) and params (optional) fields
     * @returns {Array} batch payload
     */
    Jsonrpc.toBatchPayload = function (messages) {
        return messages.map(function (message) {
            return Jsonrpc.toPayload(message.method, message.params);
        });
    };
    var jsonrpc = Jsonrpc;

    var errors$1 = lib$3.errors;
    var Batch = function (requestManager) {
        this.requestManager = requestManager;
        this.requests = [];
    };
    /**
     * Should be called to add create new request to batch request
     *
     * @method add
     * @param {Object} jsonrpc requet object
     */
    Batch.prototype.add = function (request) {
        this.requests.push(request);
    };
    /**
     * Should be called to execute batch request
     *
     * @method execute
     */
    Batch.prototype.execute = function () {
        var requests = this.requests;
        this.requestManager.sendBatch(requests, function (err, results) {
            results = results || [];
            requests.map(function (request, index) {
                return results[index] || {};
            }).forEach(function (result, index) {
                if (requests[index].callback) {
                    if (result && result.error) {
                        return requests[index].callback(errors$1.ErrorResponse(result));
                    }
                    if (!jsonrpc.isValidResponse(result)) {
                        return requests[index].callback(errors$1.InvalidResponse(result));
                    }
                    try {
                        requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);
                    }
                    catch (err) {
                        requests[index].callback(err);
                    }
                }
            });
        });
    };
    var batch = Batch;

    /*
     This file is part of web3.js.

     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    var givenProvider = null;
    // ADD GIVEN PROVIDER
    /* jshint ignore:start */
    var global$2;
    try {
        global$2 = Function('return this')();
    }
    catch (e) {
        global$2 = window;
    }
    // EIP-1193: window.ethereum
    if (typeof global$2.ethereum !== 'undefined') {
        givenProvider = global$2.ethereum;
        // Legacy web3.currentProvider
    }
    else if (typeof global$2.web3 !== 'undefined' && global$2.web3.currentProvider) {
        if (global$2.web3.currentProvider.sendAsync) {
            global$2.web3.currentProvider.send = global$2.web3.currentProvider.sendAsync;
            delete global$2.web3.currentProvider.sendAsync;
        }
        // if connection is 'ipcProviderWrapper', add subscription support
        if (!global$2.web3.currentProvider.on &&
            global$2.web3.currentProvider.connection &&
            global$2.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {
            global$2.web3.currentProvider.on = function (type, callback) {
                if (typeof callback !== 'function')
                    throw new Error('The second parameter callback must be a function.');
                switch (type) {
                    case 'data':
                        this.connection.on('data', function (data) {
                            var result = '';
                            data = data.toString();
                            try {
                                result = JSON.parse(data);
                            }
                            catch (e) {
                                return callback(new Error('Couldn\'t parse response data' + data));
                            }
                            // notification
                            if (!result.id && result.method.indexOf('_subscription') !== -1) {
                                callback(null, result);
                            }
                        });
                        break;
                    default:
                        this.connection.on(type, callback);
                        break;
                }
            };
        }
        givenProvider = global$2.web3.currentProvider;
    }
    /* jshint ignore:end */
    var givenProvider_1 = givenProvider;

    var eventemitter3 = createCommonjsModule(function (module) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }
    });

    /** Highest positive signed 32-bit float value */
    const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    const base = 36;
    const tMin = 1;
    const tMax = 26;
    const skew = 38;
    const damp = 700;
    const initialBias = 72;
    const initialN = 128; // 0x80
    const delimiter = '-'; // '\x2D'
    const regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    const errors$2 = {
    	'overflow': 'Overflow: input needs wider integers to process',
    	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    	'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    const baseMinusTMin = base - tMin;
    const floor = Math.floor;
    const stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
    	throw new RangeError(errors$2[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
    	const result = [];
    	let length = array.length;
    	while (length--) {
    		result[length] = fn(array[length]);
    	}
    	return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
    	const parts = string.split('@');
    	let result = '';
    	if (parts.length > 1) {
    		// In email addresses, only the domain name should be punycoded. Leave
    		// the local part (i.e. everything up to `@`) intact.
    		result = parts[0] + '@';
    		string = parts[1];
    	}
    	// Avoid `split(regex)` for IE8 compatibility. See #17.
    	string = string.replace(regexSeparators, '\x2E');
    	const labels = string.split('.');
    	const encoded = map(labels, fn).join('.');
    	return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
    	const output = [];
    	let counter = 0;
    	const length = string.length;
    	while (counter < length) {
    		const value = string.charCodeAt(counter++);
    		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    			// It's a high surrogate, and there is a next character.
    			const extra = string.charCodeAt(counter++);
    			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
    				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    			} else {
    				// It's an unmatched surrogate; only append this code unit, in case the
    				// next code unit is the high surrogate of a surrogate pair.
    				output.push(value);
    				counter--;
    			}
    		} else {
    			output.push(value);
    		}
    	}
    	return output;
    }

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    const digitToBasic = function(digit, flag) {
    	//  0..25 map to ASCII a..z or A..Z
    	// 26..35 map to ASCII 0..9
    	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    const adapt = function(delta, numPoints, firstTime) {
    	let k = 0;
    	delta = firstTime ? floor(delta / damp) : delta >> 1;
    	delta += floor(delta / numPoints);
    	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
    		delta = floor(delta / baseMinusTMin);
    	}
    	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    const encode = function(input) {
    	const output = [];

    	// Convert the input in UCS-2 to an array of Unicode code points.
    	input = ucs2decode(input);

    	// Cache the length.
    	let inputLength = input.length;

    	// Initialize the state.
    	let n = initialN;
    	let delta = 0;
    	let bias = initialBias;

    	// Handle the basic code points.
    	for (const currentValue of input) {
    		if (currentValue < 0x80) {
    			output.push(stringFromCharCode(currentValue));
    		}
    	}

    	let basicLength = output.length;
    	let handledCPCount = basicLength;

    	// `handledCPCount` is the number of code points that have been handled;
    	// `basicLength` is the number of basic code points.

    	// Finish the basic string with a delimiter unless it's empty.
    	if (basicLength) {
    		output.push(delimiter);
    	}

    	// Main encoding loop:
    	while (handledCPCount < inputLength) {

    		// All non-basic code points < n have been handled already. Find the next
    		// larger one:
    		let m = maxInt;
    		for (const currentValue of input) {
    			if (currentValue >= n && currentValue < m) {
    				m = currentValue;
    			}
    		}

    		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    		// but guard against overflow.
    		const handledCPCountPlusOne = handledCPCount + 1;
    		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
    			error('overflow');
    		}

    		delta += (m - n) * handledCPCountPlusOne;
    		n = m;

    		for (const currentValue of input) {
    			if (currentValue < n && ++delta > maxInt) {
    				error('overflow');
    			}
    			if (currentValue == n) {
    				// Represent delta as a generalized variable-length integer.
    				let q = delta;
    				for (let k = base; /* no condition */; k += base) {
    					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
    					if (q < t) {
    						break;
    					}
    					const qMinusT = q - t;
    					const baseMinusT = base - t;
    					output.push(
    						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
    					);
    					q = floor(qMinusT / baseMinusT);
    				}

    				output.push(stringFromCharCode(digitToBasic(q, 0)));
    				bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
    				delta = 0;
    				++handledCPCount;
    			}
    		}

    		++delta;
    		++n;

    	}
    	return output.join('');
    };

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    const toASCII = function(input) {
    	return mapDomain(input, function(string) {
    		return regexNonASCII.test(string)
    			? 'xn--' + encode(string)
    			: string;
    	});
    };

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.


    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var isArray$1 = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    function stringifyPrimitive(v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    }

    function stringify (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map$1(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray$1(obj[k])) {
            return map$1(obj[k], function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);

      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
             encodeURIComponent(stringifyPrimitive(obj));
    }
    function map$1 (xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };

    function parse(qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);

      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray$1(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    }

    // Copyright Joyent, Inc. and other Node contributors.
    var url = {
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      format: urlFormat,
      Url: Url
    };
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }

    // Reference: RFC 3986, RFC 1808, RFC 2396

    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,

      // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      };

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url) return url;

      var u = new Url;
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      return parse$1(this, url, parseQueryString, slashesDenoteHost);
    };

    function parse$1(self, url, parseQueryString, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
      }

      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      var queryIndex = url.indexOf('?'),
        splitter =
        (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);

      var rest = url;

      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          self.path = rest;
          self.href = rest;
          self.pathname = simplePath[1];
          if (simplePath[2]) {
            self.search = simplePath[2];
            if (parseQueryString) {
              self.query = parse(self.search.substr(1));
            } else {
              self.query = self.search.substr(1);
            }
          } else if (parseQueryString) {
            self.search = '';
            self.query = {};
          }
          return self;
        }
      }

      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        self.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }

      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          self.slashes = true;
        }
      }
      var i, hec, l, p;
      if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {

        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c

        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.

        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }

        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }

        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          self.auth = decodeURIComponent(auth);
        }

        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1)
          hostEnd = rest.length;

        self.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);

        // pull out port.
        parseHost(self);

        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        self.hostname = self.hostname || '';

        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = self.hostname[0] === '[' &&
          self.hostname[self.hostname.length - 1] === ']';

        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = self.hostname.split(/\./);
          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }
                self.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (self.hostname.length > hostnameMaxLen) {
          self.hostname = '';
        } else {
          // hostnames are always lower case.
          self.hostname = self.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          self.hostname = toASCII(self.hostname);
        }

        p = self.port ? ':' + self.port : '';
        var h = self.hostname || '';
        self.host = h + p;
        self.href += self.host;

        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          self.hostname = self.hostname.substr(1, self.hostname.length - 2);
          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      }

      // now rest is set to the post-host stuff.
      // chop off any delim chars.
      if (!unsafeProtocol[lowerProto]) {

        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }


      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        self.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        self.search = rest.substr(qm);
        self.query = rest.substr(qm + 1);
        if (parseQueryString) {
          self.query = parse(self.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        self.search = '';
        self.query = {};
      }
      if (rest) self.pathname = rest;
      if (slashedProtocol[lowerProto] &&
        self.hostname && !self.pathname) {
        self.pathname = '/';
      }

      //to support http.request
      if (self.pathname || self.search) {
        p = self.pathname || '';
        var s = self.search || '';
        self.path = p + s;
      }

      // finally, reconstruct the href based on what has been validated.
      self.href = format(self);
      return self;
    }

    // format a parsed object into a url string
    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (util.isString(obj)) obj = parse$1({}, obj);
      return format(obj);
    }

    function format(self) {
      var auth = self.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = self.protocol || '',
        pathname = self.pathname || '',
        hash = self.hash || '',
        host = false,
        query = '';

      if (self.host) {
        host = auth + self.host;
      } else if (self.hostname) {
        host = auth + (self.hostname.indexOf(':') === -1 ?
          self.hostname :
          '[' + this.hostname + ']');
        if (self.port) {
          host += ':' + self.port;
        }
      }

      if (self.query &&
        util.isObject(self.query) &&
        Object.keys(self.query).length) {
        query = stringify(self.query);
      }

      var search = self.search || (query && ('?' + query)) || '';

      if (protocol && protocol.substr(-1) !== ':') protocol += ':';

      // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.
      if (self.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;

      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');

      return protocol + host + pathname + search + hash;
    }

    Url.prototype.format = function() {
      return format(this);
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function(relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }

      // hash is always overridden, no matter what.
      // even href="" will remove it.
      result.hash = relative.hash;

      // if the relative url is empty, then there's nothing left to do here.
      if (relative.href === '') {
        result.href = result.format();
        return result;
      }

      // hrefs like //foo/bar always cut to the protocol.
      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol')
            result[rkey] = relative[rkey];
        }

        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }
      var relPath;
      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift()));
          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
          (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
      relPath = relative.pathname && relative.pathname.split('/') || [];
      // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.
      if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;
          else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;
            else relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }
      var authInHost;
      if (isRelAbs) {
        // it's absolute.
        result.host = (relative.host || relative.host === '') ?
          relative.host : result.host;
        result.hostname = (relative.hostname || relative.hostname === '') ?
          relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
        // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          authInHost = result.host && result.host.indexOf('@') > 0 ?
            result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
            (result.search ? result.search : '');
        }
        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }

      // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');

      // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');

      // put the host back
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' :
          srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || (result.host && srcPath.length);

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      }

      //to support request.http
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function() {
      return parseHost(this);
    };

    function parseHost(self) {
      var host = self.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          self.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) self.hostname = host;
    }

    var isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
    var isRN = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';
    var _btoa = null;
    var helpers = null;
    if (isNode || isRN) {
        _btoa = function (str) {
            return Buffer.from(str).toString('base64');
        };
        var url$1 = url;
        if (url$1.URL) {
            // Use the new Node 6+ API for parsing URLs that supports username/password
            var newURL = url$1.URL;
            helpers = function (url) {
                return new newURL(url);
            };
        }
        else {
            // Web3 supports Node.js 5, so fall back to the legacy URL API if necessary
            helpers = url.parse;
        }
    }
    else {
        _btoa = btoa.bind(window);
        helpers = function (url) {
            return new URL(url);
        };
    }
    var helpers_1 = {
        parseURL: helpers,
        btoa: _btoa
    };

    var naiveFallback = function () {
    	if (typeof self === "object" && self) return self;
    	if (typeof window === "object" && window) return window;
    	throw new Error("Unable to resolve global `this`");
    };

    var global$3 = (function () {
    	if (this) return this;

    	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

    	// Fallback to standard globalThis if available
    	if (typeof globalThis === "object" && globalThis) return globalThis;

    	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
    	// In all ES5+ engines global object inherits from Object.prototype
    	// (if you approached one that doesn't please report)
    	try {
    		Object.defineProperty(Object.prototype, "__global__", {
    			get: function () { return this; },
    			configurable: true
    		});
    	} catch (error) {
    		// Unfortunate case of updates to Object.prototype being restricted
    		// via preventExtensions, seal or freeze
    		return naiveFallback();
    	}
    	try {
    		// Safari case (window.__global__ works, but __global__ does not)
    		if (!__global__) return naiveFallback();
    		return __global__;
    	} finally {
    		delete Object.prototype.__global__;
    	}
    })();

    var _from$1 = "websocket@^1.0.32";
    var _id$1 = "websocket@1.0.32";
    var _inBundle$1 = false;
    var _integrity$1 = "sha512-i4yhcllSP4wrpoPMU2N0TQ/q0O94LRG/eUQjEAamRltjQ1oT1PFFKOG4i877OlJgCG8rw6LrrowJp+TYCEWF7Q==";
    var _location$1 = "/websocket";
    var _phantomChildren$1 = {
    };
    var _requested$1 = {
    	type: "range",
    	registry: true,
    	raw: "websocket@^1.0.32",
    	name: "websocket",
    	escapedName: "websocket",
    	rawSpec: "^1.0.32",
    	saveSpec: null,
    	fetchSpec: "^1.0.32"
    };
    var _requiredBy$1 = [
    	"/web3-providers-ws"
    ];
    var _resolved$1 = "https://registry.npmjs.org/websocket/-/websocket-1.0.32.tgz";
    var _shasum$1 = "1f16ddab3a21a2d929dec1687ab21cfdc6d3dbb1";
    var _spec$1 = "websocket@^1.0.32";
    var _where$1 = "C:\\Users\\donno\\Documents\\GitHub\\interactive-nfts\\node_modules\\web3-providers-ws";
    var author$1 = {
    	name: "Brian McKelvey",
    	email: "theturtle32@gmail.com",
    	url: "https://github.com/theturtle32"
    };
    var browser$2 = "lib/browser.js";
    var bugs$1 = {
    	url: "https://github.com/theturtle32/WebSocket-Node/issues"
    };
    var bundleDependencies$1 = false;
    var config$1 = {
    	verbose: false
    };
    var contributors = [
    	{
    		name: "Iñaki Baz Castillo",
    		email: "ibc@aliax.net",
    		url: "http://dev.sipdoc.net"
    	}
    ];
    var dependencies$1 = {
    	bufferutil: "^4.0.1",
    	debug: "^2.2.0",
    	"es5-ext": "^0.10.50",
    	"typedarray-to-buffer": "^3.1.5",
    	"utf-8-validate": "^5.0.2",
    	yaeti: "^0.0.6"
    };
    var deprecated$1 = false;
    var description$1 = "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.";
    var devDependencies$1 = {
    	"buffer-equal": "^1.0.0",
    	gulp: "^4.0.2",
    	"gulp-jshint": "^2.0.4",
    	jshint: "^2.0.0",
    	"jshint-stylish": "^2.2.1",
    	tape: "^4.9.1"
    };
    var directories = {
    	lib: "./lib"
    };
    var engines$1 = {
    	node: ">=4.0.0"
    };
    var homepage$1 = "https://github.com/theturtle32/WebSocket-Node";
    var keywords$1 = [
    	"websocket",
    	"websockets",
    	"socket",
    	"networking",
    	"comet",
    	"push",
    	"RFC-6455",
    	"realtime",
    	"server",
    	"client"
    ];
    var license$1 = "Apache-2.0";
    var main$1 = "index";
    var name$2 = "websocket";
    var repository$1 = {
    	type: "git",
    	url: "git+https://github.com/theturtle32/WebSocket-Node.git"
    };
    var scripts$1 = {
    	gulp: "gulp",
    	test: "tape test/unit/*.js"
    };
    var version$2 = "1.0.32";
    var _package$2 = {
    	_from: _from$1,
    	_id: _id$1,
    	_inBundle: _inBundle$1,
    	_integrity: _integrity$1,
    	_location: _location$1,
    	_phantomChildren: _phantomChildren$1,
    	_requested: _requested$1,
    	_requiredBy: _requiredBy$1,
    	_resolved: _resolved$1,
    	_shasum: _shasum$1,
    	_spec: _spec$1,
    	_where: _where$1,
    	author: author$1,
    	browser: browser$2,
    	bugs: bugs$1,
    	bundleDependencies: bundleDependencies$1,
    	config: config$1,
    	contributors: contributors,
    	dependencies: dependencies$1,
    	deprecated: deprecated$1,
    	description: description$1,
    	devDependencies: devDependencies$1,
    	directories: directories,
    	engines: engines$1,
    	homepage: homepage$1,
    	keywords: keywords$1,
    	license: license$1,
    	main: main$1,
    	name: name$2,
    	repository: repository$1,
    	scripts: scripts$1,
    	version: version$2
    };

    var _package$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _from: _from$1,
        _id: _id$1,
        _inBundle: _inBundle$1,
        _integrity: _integrity$1,
        _location: _location$1,
        _phantomChildren: _phantomChildren$1,
        _requested: _requested$1,
        _requiredBy: _requiredBy$1,
        _resolved: _resolved$1,
        _shasum: _shasum$1,
        _spec: _spec$1,
        _where: _where$1,
        author: author$1,
        browser: browser$2,
        bugs: bugs$1,
        bundleDependencies: bundleDependencies$1,
        config: config$1,
        contributors: contributors,
        dependencies: dependencies$1,
        deprecated: deprecated$1,
        description: description$1,
        devDependencies: devDependencies$1,
        directories: directories,
        engines: engines$1,
        homepage: homepage$1,
        keywords: keywords$1,
        license: license$1,
        main: main$1,
        name: name$2,
        repository: repository$1,
        scripts: scripts$1,
        version: version$2,
        'default': _package$2
    });

    var require$$0$1 = getCjsExportFromNamespace(_package$3);

    var version$3 = require$$0$1.version;

    var _globalThis;
    try {
    	_globalThis = global$3;
    } catch (error) {
    } finally {
    	if (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }
    	if (!_globalThis) { throw new Error('Could not determine global this'); }
    }

    var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;



    /**
     * Expose a W3C WebSocket class with just one or two arguments.
     */
    function W3CWebSocket(uri, protocols) {
    	var native_instance;

    	if (protocols) {
    		native_instance = new NativeWebSocket(uri, protocols);
    	}
    	else {
    		native_instance = new NativeWebSocket(uri);
    	}

    	/**
    	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
    	 * class). Since it is an Object it will be returned as it is when creating an
    	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
    	 *
    	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
    	 */
    	return native_instance;
    }
    if (NativeWebSocket) {
    	['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
    		Object.defineProperty(W3CWebSocket, prop, {
    			get: function() { return NativeWebSocket[prop]; }
    		});
    	});
    }

    /**
     * Module exports.
     */
    var browser$3 = {
        'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
        'version'      : version$3
    };

    var errors$3 = lib$3.errors;
    var Ws = browser$3.w3cwebsocket;
    /**
     * @param {string} url
     * @param {Object} options
     *
     * @constructor
     */
    var WebsocketProvider = function WebsocketProvider(url, options) {
        eventemitter3.call(this);
        options = options || {};
        this.url = url;
        this._customTimeout = options.timeout || 1000 * 15;
        this.headers = options.headers || {};
        this.protocol = options.protocol || undefined;
        this.reconnectOptions = Object.assign({
            auto: false,
            delay: 5000,
            maxAttempts: false,
            onTimeout: false
        }, options.reconnect);
        this.clientConfig = options.clientConfig || undefined; // Allow a custom client configuration
        this.requestOptions = options.requestOptions || undefined; // Allow a custom request options (https://github.com/theturtle32/WebSocket-Node/blob/master/docs/WebSocketClient.md#connectrequesturl-requestedprotocols-origin-headers-requestoptions)
        this.DATA = 'data';
        this.CLOSE = 'close';
        this.ERROR = 'error';
        this.CONNECT = 'connect';
        this.RECONNECT = 'reconnect';
        this.connection = null;
        this.requestQueue = new Map();
        this.responseQueue = new Map();
        this.reconnectAttempts = 0;
        this.reconnecting = false;
        // The w3cwebsocket implementation does not support Basic Auth
        // username/password in the URL. So generate the basic auth header, and
        // pass through with any additional headers supplied in constructor
        var parsedURL = helpers_1.parseURL(url);
        if (parsedURL.username && parsedURL.password) {
            this.headers.authorization = 'Basic ' + helpers_1.btoa(parsedURL.username + ':' + parsedURL.password);
        }
        // When all node core implementations that do not have the
        // WHATWG compatible URL parser go out of service this line can be removed.
        if (parsedURL.auth) {
            this.headers.authorization = 'Basic ' + helpers_1.btoa(parsedURL.auth);
        }
        // make property `connected` which will return the current connection status
        Object.defineProperty(this, 'connected', {
            get: function () {
                return this.connection && this.connection.readyState === this.connection.OPEN;
            },
            enumerable: true
        });
        this.connect();
    };
    // Inherit from EventEmitter
    WebsocketProvider.prototype = Object.create(eventemitter3.prototype);
    WebsocketProvider.prototype.constructor = WebsocketProvider;
    /**
     * Connects to the configured node
     *
     * @method connect
     *
     * @returns {void}
     */
    WebsocketProvider.prototype.connect = function () {
        this.connection = new Ws(this.url, this.protocol, undefined, this.headers, this.requestOptions, this.clientConfig);
        this._addSocketListeners();
    };
    /**
     * Listener for the `data` event of the underlying WebSocket object
     *
     * @method _onMessage
     *
     * @returns {void}
     */
    WebsocketProvider.prototype._onMessage = function (e) {
        var _this = this;
        this._parseResponse((typeof e.data === 'string') ? e.data : '').forEach(function (result) {
            if (result.method && result.method.indexOf('_subscription') !== -1) {
                _this.emit(_this.DATA, result);
                return;
            }
            var id = result.id;
            // get the id which matches the returned id
            if (Array.isArray(result)) {
                id = result[0].id;
            }
            if (_this.responseQueue.has(id)) {
                if (_this.responseQueue.get(id).callback !== undefined) {
                    _this.responseQueue.get(id).callback(false, result);
                }
                _this.responseQueue.delete(id);
            }
        });
    };
    /**
     * Listener for the `open` event of the underlying WebSocket object
     *
     * @method _onConnect
     *
     * @returns {void}
     */
    WebsocketProvider.prototype._onConnect = function () {
        this.emit(this.CONNECT);
        this.reconnectAttempts = 0;
        this.reconnecting = false;
        if (this.requestQueue.size > 0) {
            var _this = this;
            this.requestQueue.forEach(function (request, key) {
                _this.send(request.payload, request.callback);
                _this.requestQueue.delete(key);
            });
        }
    };
    /**
     * Listener for the `close` event of the underlying WebSocket object
     *
     * @method _onClose
     *
     * @returns {void}
     */
    WebsocketProvider.prototype._onClose = function (event) {
        var _this = this;
        if (this.reconnectOptions.auto && (![1000, 1001].includes(event.code) || event.wasClean === false)) {
            this.reconnect();
            return;
        }
        this.emit(this.CLOSE, event);
        if (this.requestQueue.size > 0) {
            this.requestQueue.forEach(function (request, key) {
                request.callback(errors$3.ConnectionNotOpenError(event));
                _this.requestQueue.delete(key);
            });
        }
        if (this.responseQueue.size > 0) {
            this.responseQueue.forEach(function (request, key) {
                request.callback(errors$3.InvalidConnection('on WS', event));
                _this.responseQueue.delete(key);
            });
        }
        this._removeSocketListeners();
        this.removeAllListeners();
    };
    /**
     * Will add the required socket listeners
     *
     * @method _addSocketListeners
     *
     * @returns {void}
     */
    WebsocketProvider.prototype._addSocketListeners = function () {
        this.connection.addEventListener('message', this._onMessage.bind(this));
        this.connection.addEventListener('open', this._onConnect.bind(this));
        this.connection.addEventListener('close', this._onClose.bind(this));
    };
    /**
     * Will remove all socket listeners
     *
     * @method _removeSocketListeners
     *
     * @returns {void}
     */
    WebsocketProvider.prototype._removeSocketListeners = function () {
        this.connection.removeEventListener('message', this._onMessage);
        this.connection.removeEventListener('open', this._onConnect);
        this.connection.removeEventListener('close', this._onClose);
    };
    /**
     * Will parse the response and make an array out of it.
     *
     * @method _parseResponse
     *
     * @param {String} data
     *
     * @returns {Array}
     */
    WebsocketProvider.prototype._parseResponse = function (data) {
        var _this = this, returnValues = [];
        // DE-CHUNKER
        var dechunkedData = data
            .replace(/\}[\n\r]?\{/g, '}|--|{') // }{
            .replace(/\}\][\n\r]?\[\{/g, '}]|--|[{') // }][{
            .replace(/\}[\n\r]?\[\{/g, '}|--|[{') // }[{
            .replace(/\}\][\n\r]?\{/g, '}]|--|{') // }]{
            .split('|--|');
        dechunkedData.forEach(function (data) {
            // prepend the last chunk
            if (_this.lastChunk)
                data = _this.lastChunk + data;
            var result = null;
            try {
                result = JSON.parse(data);
            }
            catch (e) {
                _this.lastChunk = data;
                // start timeout to cancel all requests
                clearTimeout(_this.lastChunkTimeout);
                _this.lastChunkTimeout = setTimeout(function () {
                    if (_this.reconnectOptions.auto && _this.reconnectOptions.onTimeout) {
                        _this.reconnect();
                        return;
                    }
                    _this.emit(_this.ERROR, errors$3.ConnectionTimeout(_this._customTimeout));
                    if (_this.requestQueue.size > 0) {
                        _this.requestQueue.forEach(function (request, key) {
                            request.callback(errors$3.ConnectionTimeout(_this._customTimeout));
                            _this.requestQueue.delete(key);
                        });
                    }
                }, _this._customTimeout);
                return;
            }
            // cancel timeout and set chunk to null
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunk = null;
            if (result)
                returnValues.push(result);
        });
        return returnValues;
    };
    /**
     * Does check if the provider is connecting and will add it to the queue or will send it directly
     *
     * @method send
     *
     * @param {Object} payload
     * @param {Function} callback
     *
     * @returns {void}
     */
    WebsocketProvider.prototype.send = function (payload, callback) {
        var _this = this;
        var id = payload.id;
        var request = { payload: payload, callback: callback };
        if (Array.isArray(payload)) {
            id = payload[0].id;
        }
        if (this.connection.readyState === this.connection.CONNECTING || this.reconnecting) {
            this.requestQueue.set(id, request);
            return;
        }
        if (this.connection.readyState !== this.connection.OPEN) {
            this.requestQueue.delete(id);
            this.emit(this.ERROR, errors$3.ConnectionNotOpenError());
            request.callback(errors$3.ConnectionNotOpenError());
            return;
        }
        this.responseQueue.set(id, request);
        this.requestQueue.delete(id);
        try {
            this.connection.send(JSON.stringify(request.payload));
        }
        catch (error) {
            request.callback(error);
            _this.responseQueue.delete(id);
        }
    };
    /**
     * Resets the providers, clears all callbacks
     *
     * @method reset
     *
     * @returns {void}
     */
    WebsocketProvider.prototype.reset = function () {
        this.responseQueue.clear();
        this.requestQueue.clear();
        this.removeAllListeners();
        this._removeSocketListeners();
        this._addSocketListeners();
    };
    /**
     * Closes the current connection with the given code and reason arguments
     *
     * @method disconnect
     *
     * @param {number} code
     * @param {string} reason
     *
     * @returns {void}
     */
    WebsocketProvider.prototype.disconnect = function (code, reason) {
        this._removeSocketListeners();
        this.connection.close(code || 1000, reason);
    };
    /**
     * Returns the desired boolean.
     *
     * @method supportsSubscriptions
     *
     * @returns {boolean}
     */
    WebsocketProvider.prototype.supportsSubscriptions = function () {
        return true;
    };
    /**
     * Removes the listeners and reconnects to the socket.
     *
     * @method reconnect
     *
     * @returns {void}
     */
    WebsocketProvider.prototype.reconnect = function () {
        var _this = this;
        this.reconnecting = true;
        if (this.responseQueue.size > 0) {
            this.responseQueue.forEach(function (request, key) {
                request.callback(errors$3.PendingRequestsOnReconnectingError());
                _this.responseQueue.delete(key);
            });
        }
        if (!this.reconnectOptions.maxAttempts ||
            this.reconnectAttempts < this.reconnectOptions.maxAttempts) {
            setTimeout(function () {
                _this.reconnectAttempts++;
                _this._removeSocketListeners();
                _this.emit(_this.RECONNECT, _this.reconnectAttempts);
                _this.connect();
            }, this.reconnectOptions.delay);
            return;
        }
        this.emit(this.ERROR, errors$3.MaxAttemptsReachedOnReconnectingError());
        this.reconnecting = false;
        if (this.requestQueue.size > 0) {
            this.requestQueue.forEach(function (request, key) {
                request.callback(errors$3.MaxAttemptsReachedOnReconnectingError());
                _this.requestQueue.delete(key);
            });
        }
    };
    var lib$4 = WebsocketProvider;

    var hasFetch = isFunction(global$1.fetch) && isFunction(global$1.ReadableStream);

    var _blobConstructor;
    function blobConstructor() {
      if (typeof _blobConstructor !== 'undefined') {
        return _blobConstructor;
      }
      try {
        new global$1.Blob([new ArrayBuffer(1)]);
        _blobConstructor = true;
      } catch (e) {
        _blobConstructor = false;
      }
      return _blobConstructor
    }
    var xhr;

    function checkTypeSupport(type) {
      if (!xhr) {
        xhr = new global$1.XMLHttpRequest();
        // If location.host is empty, e.g. if this page/worker was loaded
        // from a Blob, then use example.com to avoid an error
        xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
      }
      try {
        xhr.responseType = type;
        return xhr.responseType === type
      } catch (e) {
        return false
      }

    }

    // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
    // Safari 7.1 appears to have fixed this bug.
    var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
    var haveSlice = haveArrayBuffer && isFunction(global$1.ArrayBuffer.prototype.slice);

    var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
      // These next two tests unavoidably show warnings in Chrome. Since fetch will always
      // be used if it's available, just return false for these to avoid the warnings.
    var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
    var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
      checkTypeSupport('moz-chunked-arraybuffer');
    var overrideMimeType = isFunction(xhr.overrideMimeType);
    var vbArray = isFunction(global$1.VBArray);

    function isFunction(value) {
      return typeof value === 'function'
    }

    xhr = null; // Help gc

    // Copyright Joyent, Inc. and other Node contributors.

    var R = typeof Reflect === 'object' ? Reflect : null;
    var ReflectApply = R && typeof R.apply === 'function'
      ? R.apply
      : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };

    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target)
          .concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    };

    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    var events = EventEmitter;
    var once_1 = once$1;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;

    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
      }
    });

    EventEmitter.init = function() {

      if (this._events === undefined ||
          this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }
      this._maxListeners = n;
      return this;
    };

    function _getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = (type === 'error');

      var events = this._events;
      if (events !== undefined)
        doError = (doError && events.error === undefined);
      else if (!doError)
        return false;

      // If there is no 'error' event listener then throw.
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      var handler = events[type];

      if (handler === undefined)
        return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      checkListener(listener);

      events = target._events;
      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
          // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }

        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + String(type) + ' listeners ' +
                              'added. Use emitter.setMaxListeners() to ' +
                              'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          checkListener(listener);

          events = this._events;
          if (events === undefined)
            return this;

          list = events[type];
          if (list === undefined)
            return this;

          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }

            if (list.length === 1)
              events[type] = list[0];

            if (events.removeListener !== undefined)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;

          events = this._events;
          if (events === undefined)
            return this;

          // not listening for removeListener, no need to emit
          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null);
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }

          return this;
        };

    function _listeners(target, type, unwrap) {
      var events = target._events;

      if (events === undefined)
        return [];

      var evlistener = events[type];
      if (evlistener === undefined)
        return [];

      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

      return unwrap ?
        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function once$1(emitter, name) {
      return new Promise(function (resolve, reject) {
        function eventListener() {
          if (errorListener !== undefined) {
            emitter.removeListener('error', errorListener);
          }
          resolve([].slice.call(arguments));
        }    var errorListener;

        // Adding an error listener is not optional because
        // if an error is thrown on an event emitter we cannot
        // guarantee that the actual event we are waiting will
        // be fired. The result could be a silent way to create
        // memory or file descriptor leaks, which is something
        // we should avoid.
        if (name !== 'error') {
          errorListener = function errorListener(err) {
            emitter.removeListener(name, eventListener);
            reject(err);
          };

          emitter.once('error', errorListener);
        }

        emitter.once(name, eventListener);
      });
    }
    events.once = once_1;

    var browser$4 = createCommonjsModule(function (module) {
    // shim for using process in browser

    var process = module.exports = {};

    process.nextTick = (function () {
        var canSetImmediate = typeof window !== 'undefined'
        && window.setImmediate;
        var canPost = typeof window !== 'undefined'
        && window.postMessage && window.addEventListener
        ;

        if (canSetImmediate) {
            return function (f) { return window.setImmediate(f) };
        }

        if (canPost) {
            var queue = [];
            window.addEventListener('message', function (ev) {
                var source = ev.source;
                if ((source === window || source === null) && ev.data === 'process-tick') {
                    ev.stopPropagation();
                    if (queue.length > 0) {
                        var fn = queue.shift();
                        fn();
                    }
                }
            }, true);

            return function nextTick(fn) {
                queue.push(fn);
                window.postMessage('process-tick', '*');
            };
        }

        return function nextTick(fn) {
            setTimeout(fn, 0);
        };
    })();

    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    // TODO(shtylman)
    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    });

    var byteLength_1$1 = byteLength$2;
    var toByteArray_1$1 = toByteArray$2;
    var fromByteArray_1$1 = fromByteArray$2;

    var lookup$2 = [];
    var revLookup$2 = [];
    var Arr$2 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i$1 = 0, len$1 = code$1.length; i$1 < len$1; ++i$1) {
      lookup$2[i$1] = code$1[i$1];
      revLookup$2[code$1.charCodeAt(i$1)] = i$1;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup$2['-'.charCodeAt(0)] = 62;
    revLookup$2['_'.charCodeAt(0)] = 63;

    function getLens$1 (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength$2 (b64) {
      var lens = getLens$1(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength$1 (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray$2 (b64) {
      var tmp;
      var lens = getLens$1(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr$2(_byteLength$1(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup$2[b64.charCodeAt(i)] << 18) |
          (revLookup$2[b64.charCodeAt(i + 1)] << 12) |
          (revLookup$2[b64.charCodeAt(i + 2)] << 6) |
          revLookup$2[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup$2[b64.charCodeAt(i)] << 2) |
          (revLookup$2[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup$2[b64.charCodeAt(i)] << 10) |
          (revLookup$2[b64.charCodeAt(i + 1)] << 4) |
          (revLookup$2[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64$2 (num) {
      return lookup$2[num >> 18 & 0x3F] +
        lookup$2[num >> 12 & 0x3F] +
        lookup$2[num >> 6 & 0x3F] +
        lookup$2[num & 0x3F]
    }

    function encodeChunk$2 (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64$2(tmp));
      }
      return output.join('')
    }

    function fromByteArray$2 (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk$2(
          uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
        ));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup$2[tmp >> 2] +
          lookup$2[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup$2[tmp >> 10] +
          lookup$2[(tmp >> 4) & 0x3F] +
          lookup$2[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var base64Js$1 = {
    	byteLength: byteLength_1$1,
    	toByteArray: toByteArray_1$1,
    	fromByteArray: fromByteArray_1$1
    };

    var read$2 = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    var write$2 = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    var ieee754$1 = {
    	read: read$2,
    	write: write$2
    };

    var buffer$1 = createCommonjsModule(function (module, exports) {



    var customInspectSymbol =
      (typeof Symbol === 'function' && typeof Symbol.for === 'function')
        ? Symbol.for('nodejs.util.inspect.custom')
        : null;

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;

    var K_MAX_LENGTH = 0x7fffffff;
    exports.kMaxLength = K_MAX_LENGTH;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      );
    }

    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function () { return 42 } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }

    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    });

    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    });

    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }

      if (ArrayBuffer.isView(value)) {
        return fromArrayLike(value)
      }

      if (value == null) {
        throw new TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }

      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof SharedArrayBuffer !== 'undefined' &&
          (isInstance(value, SharedArrayBuffer) ||
          (value && isInstance(value.buffer, SharedArrayBuffer)))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }

      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }

      var b = fromObject(value);
      if (b) return b

      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(
          value[Symbol.toPrimitive]('string'), encodingOrOffset, length
        )
      }

      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    };

    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }

    function alloc (size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    };

    function allocUnsafe (size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    };

    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }

      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);

      var actual = buf.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
      }

      return buf
    }

    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf
    }

    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }

      var buf;
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }

      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(buf, Buffer.prototype);

      return buf
    }

    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);

        if (buf.length === 0) {
          return buf
        }

        obj.copy(buf, 0, 0, len);
        return buf
      }

      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }

      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }

    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    };

    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          buf = Buffer.from(buf);
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }

      var len = string.length;
      var mustMatch = (arguments.length > 2 && arguments[2] === true);
      if (!mustMatch && len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.toLocaleString = Buffer.prototype.toString;

    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
      if (this.length > max) str += ' ... ';
      return '<Buffer ' + str + '>'
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset; // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      var strLen = string.length;

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64Js$1.fromByteArray(buf)
      } else {
        return base64Js$1.fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
            : (firstByte > 0xBF) ? 2
              : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(newBuf, Buffer.prototype);

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;

      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } else if (typeof val === 'boolean') {
        val = Number(val);
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0];
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }

    function base64ToBytes (str) {
      return base64Js$1.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }

    // Create lookup table for `toString('hex')`
    // See: https://github.com/feross/buffer/issues/219
    var hexSliceLookupTable = (function () {
      var alphabet = '0123456789abcdef';
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table
    })();
    });

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return buffer$1.Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = buffer$1.Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    var safeBuffer$1 = createCommonjsModule(function (module, exports) {
    /* eslint-disable node/no-deprecated-api */

    var Buffer = buffer$1.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer$1;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer$1, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer$1.SlowBuffer(size)
    };
    });

    /*<replacement>*/

    var Buffer$1 = safeBuffer$1.Buffer;
    /*</replacement>*/

    var isEncoding = Buffer$1.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };

    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer$1.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    var StringDecoder_1 = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer$1.allocUnsafe(nb);
    }

    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder.prototype.end = utf8End;

    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }

    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }

    Readable.ReadableState = ReadableState;

    var debug = util.debuglog('stream');
    util.inherits(Readable, events);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount$1 (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder_1(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      events.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder_1(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) browser$4.nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        browser$4.nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) browser$4.nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = events.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            browser$4.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        browser$4.nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        browser$4.nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    Writable.WritableState = WritableState;
    util.inherits(Writable, events.EventEmitter);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: util.deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      events.EventEmitter.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      browser$4.nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!buffer$1.Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        browser$4.nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (buffer$1.Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = buffer$1.Buffer.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (buffer$1.Buffer.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) browser$4.nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            browser$4.nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) browser$4.nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    util.inherits(Duplex, Readable);

    var keys = Object.keys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      browser$4.nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    util.inherits(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    util.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    util.inherits(Stream, events);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      events.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (events.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    var rStates = {
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4
    };
    function IncomingMessage(xhr, response, mode) {
      var self = this;
      Readable.call(self);

      self._mode = mode;
      self.headers = {};
      self.rawHeaders = [];
      self.trailers = {};
      self.rawTrailers = [];

      // Fake the 'close' event, but only once 'end' fires
      self.on('end', function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        nextTick(function() {
          self.emit('close');
        });
      });
      var read;
      if (mode === 'fetch') {
        self._fetchResponse = response;

        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
          // backwards compatible version of for (<item> of <iterable>):
          // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
        for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
          self.headers[header[0].toLowerCase()] = header[1];
          self.rawHeaders.push(header[0], header[1]);
        }

        // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
        var reader = response.body.getReader();

        read = function () {
          reader.read().then(function(result) {
            if (self._destroyed)
              return
            if (result.done) {
              self.push(null);
              return
            }
            self.push(new Buffer(result.value));
            read();
          });
        };
        read();

      } else {
        self._xhr = xhr;
        self._pos = 0;

        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
          var matches = header.match(/^([^:]+):\s*(.*)/);
          if (matches) {
            var key = matches[1].toLowerCase();
            if (key === 'set-cookie') {
              if (self.headers[key] === undefined) {
                self.headers[key] = [];
              }
              self.headers[key].push(matches[2]);
            } else if (self.headers[key] !== undefined) {
              self.headers[key] += ', ' + matches[2];
            } else {
              self.headers[key] = matches[2];
            }
            self.rawHeaders.push(matches[1], matches[2]);
          }
        });

        self._charset = 'x-user-defined';
        if (!overrideMimeType) {
          var mimeType = self.rawHeaders['mime-type'];
          if (mimeType) {
            var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
            if (charsetMatch) {
              self._charset = charsetMatch[1].toLowerCase();
            }
          }
          if (!self._charset)
            self._charset = 'utf-8'; // best guess
        }
      }
    }

    util.inherits(IncomingMessage, Readable);

    IncomingMessage.prototype._read = function() {};

    IncomingMessage.prototype._onXHRProgress = function() {
      var self = this;

      var xhr = self._xhr;

      var response = null;
      switch (self._mode) {
      case 'text:vbarray': // For IE9
        if (xhr.readyState !== rStates.DONE)
          break
        try {
          // This fails in IE8
          response = new global$1.VBArray(xhr.responseBody).toArray();
        } catch (e) {
          // pass
        }
        if (response !== null) {
          self.push(new Buffer(response));
          break
        }
        // Falls through in IE8
      case 'text':
        try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
          response = xhr.responseText;
        } catch (e) {
          self._mode = 'text:vbarray';
          break
        }
        if (response.length > self._pos) {
          var newData = response.substr(self._pos);
          if (self._charset === 'x-user-defined') {
            var buffer = new Buffer(newData.length);
            for (var i = 0; i < newData.length; i++)
              buffer[i] = newData.charCodeAt(i) & 0xff;

            self.push(buffer);
          } else {
            self.push(newData, self._charset);
          }
          self._pos = response.length;
        }
        break
      case 'arraybuffer':
        if (xhr.readyState !== rStates.DONE || !xhr.response)
          break
        response = xhr.response;
        self.push(new Buffer(new Uint8Array(response)));
        break
      case 'moz-chunked-arraybuffer': // take whole
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING || !response)
          break
        self.push(new Buffer(new Uint8Array(response)));
        break
      case 'ms-stream':
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING)
          break
        var reader = new global$1.MSStreamReader();
        reader.onprogress = function() {
          if (reader.result.byteLength > self._pos) {
            self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
            self._pos = reader.result.byteLength;
          }
        };
        reader.onload = function() {
          self.push(null);
        };
          // reader.onerror = ??? // TODO: this
        reader.readAsArrayBuffer(response);
        break
      }

      // The ms-stream case handles end separately in reader.onload()
      if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
        self.push(null);
      }
    };

    // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
    function toArrayBuffer (buf) {
      // If the buffer is backed by a Uint8Array, a faster version will work
      if (buf instanceof Uint8Array) {
        // If the buffer isn't a subarray, return the underlying ArrayBuffer
        if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
          return buf.buffer
        } else if (typeof buf.buffer.slice === 'function') {
          // Otherwise we need to get a proper copy
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
        }
      }

      if (buffer$1.isBuffer(buf)) {
        // This is the slow version that will work with any Buffer
        // implementation (even in old browsers)
        var arrayCopy = new Uint8Array(buf.length);
        var len = buf.length;
        for (var i = 0; i < len; i++) {
          arrayCopy[i] = buf[i];
        }
        return arrayCopy.buffer
      } else {
        throw new Error('Argument must be a Buffer')
      }
    }

    function decideMode(preferBinary, useFetch) {
      if (hasFetch && useFetch) {
        return 'fetch'
      } else if (mozchunkedarraybuffer) {
        return 'moz-chunked-arraybuffer'
      } else if (msstream) {
        return 'ms-stream'
      } else if (arraybuffer && preferBinary) {
        return 'arraybuffer'
      } else if (vbArray && preferBinary) {
        return 'text:vbarray'
      } else {
        return 'text'
      }
    }

    function ClientRequest(opts) {
      var self = this;
      Writable.call(self);

      self._opts = opts;
      self._body = [];
      self._headers = {};
      if (opts.auth)
        self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
      Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
      });

      var preferBinary;
      var useFetch = true;
      if (opts.mode === 'disable-fetch') {
        // If the use of XHR should be preferred and includes preserving the 'content-type' header
        useFetch = false;
        preferBinary = true;
      } else if (opts.mode === 'prefer-streaming') {
        // If streaming is a high priority but binary compatibility and
        // the accuracy of the 'content-type' header aren't
        preferBinary = false;
      } else if (opts.mode === 'allow-wrong-content-type') {
        // If streaming is more important than preserving the 'content-type' header
        preferBinary = !overrideMimeType;
      } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
        // Use binary if text streaming may corrupt data or the content-type header, or for speed
        preferBinary = true;
      } else {
        throw new Error('Invalid value for opts.mode')
      }
      self._mode = decideMode(preferBinary, useFetch);

      self.on('finish', function() {
        self._onFinish();
      });
    }

    util.inherits(ClientRequest, Writable);
    // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
    var unsafeHeaders = [
      'accept-charset',
      'accept-encoding',
      'access-control-request-headers',
      'access-control-request-method',
      'connection',
      'content-length',
      'cookie',
      'cookie2',
      'date',
      'dnt',
      'expect',
      'host',
      'keep-alive',
      'origin',
      'referer',
      'te',
      'trailer',
      'transfer-encoding',
      'upgrade',
      'user-agent',
      'via'
    ];
    ClientRequest.prototype.setHeader = function(name, value) {
      var self = this;
      var lowerName = name.toLowerCase();
        // This check is not necessary, but it prevents warnings from browsers about setting unsafe
        // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
        // http-browserify did it, so I will too.
      if (unsafeHeaders.indexOf(lowerName) !== -1)
        return

      self._headers[lowerName] = {
        name: name,
        value: value
      };
    };

    ClientRequest.prototype.getHeader = function(name) {
      var self = this;
      return self._headers[name.toLowerCase()].value
    };

    ClientRequest.prototype.removeHeader = function(name) {
      var self = this;
      delete self._headers[name.toLowerCase()];
    };

    ClientRequest.prototype._onFinish = function() {
      var self = this;

      if (self._destroyed)
        return
      var opts = self._opts;

      var headersObj = self._headers;
      var body;
      if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
        if (blobConstructor()) {
          body = new global$1.Blob(self._body.map(function(buffer) {
            return toArrayBuffer(buffer)
          }), {
            type: (headersObj['content-type'] || {}).value || ''
          });
        } else {
          // get utf8 string
          body = Buffer.concat(self._body).toString();
        }
      }

      if (self._mode === 'fetch') {
        var headers = Object.keys(headersObj).map(function(name) {
          return [headersObj[name].name, headersObj[name].value]
        });

        global$1.fetch(self._opts.url, {
          method: self._opts.method,
          headers: headers,
          body: body,
          mode: 'cors',
          credentials: opts.withCredentials ? 'include' : 'same-origin'
        }).then(function(response) {
          self._fetchResponse = response;
          self._connect();
        }, function(reason) {
          self.emit('error', reason);
        });
      } else {
        var xhr = self._xhr = new global$1.XMLHttpRequest();
        try {
          xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
          nextTick(function() {
            self.emit('error', err);
          });
          return
        }

        // Can't set responseType on really old browsers
        if ('responseType' in xhr)
          xhr.responseType = self._mode.split(':')[0];

        if ('withCredentials' in xhr)
          xhr.withCredentials = !!opts.withCredentials;

        if (self._mode === 'text' && 'overrideMimeType' in xhr)
          xhr.overrideMimeType('text/plain; charset=x-user-defined');

        Object.keys(headersObj).forEach(function(name) {
          xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
        });

        self._response = null;
        xhr.onreadystatechange = function() {
          switch (xhr.readyState) {
          case rStates.LOADING:
          case rStates.DONE:
            self._onXHRProgress();
            break
          }
        };
          // Necessary for streaming in Firefox, since xhr.response is ONLY defined
          // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === 'moz-chunked-arraybuffer') {
          xhr.onprogress = function() {
            self._onXHRProgress();
          };
        }

        xhr.onerror = function() {
          if (self._destroyed)
            return
          self.emit('error', new Error('XHR error'));
        };

        try {
          xhr.send(body);
        } catch (err) {
          nextTick(function() {
            self.emit('error', err);
          });
          return
        }
      }
    };

    /**
     * Checks if xhr.status is readable and non-zero, indicating no error.
     * Even though the spec says it should be available in readyState 3,
     * accessing it throws an exception in IE8
     */
    function statusValid(xhr) {
      try {
        var status = xhr.status;
        return (status !== null && status !== 0)
      } catch (e) {
        return false
      }
    }

    ClientRequest.prototype._onXHRProgress = function() {
      var self = this;

      if (!statusValid(self._xhr) || self._destroyed)
        return

      if (!self._response)
        self._connect();

      self._response._onXHRProgress();
    };

    ClientRequest.prototype._connect = function() {
      var self = this;

      if (self._destroyed)
        return

      self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
      self.emit('response', self._response);
    };

    ClientRequest.prototype._write = function(chunk, encoding, cb) {
      var self = this;

      self._body.push(chunk);
      cb();
    };

    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
      var self = this;
      self._destroyed = true;
      if (self._response)
        self._response._destroyed = true;
      if (self._xhr)
        self._xhr.abort();
        // Currently, there isn't a way to truly abort a fetch.
        // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
    };

    ClientRequest.prototype.end = function(data, encoding, cb) {
      var self = this;
      if (typeof data === 'function') {
        cb = data;
        data = undefined;
      }

      Writable.prototype.end.call(self, data, encoding, cb);
    };

    ClientRequest.prototype.flushHeaders = function() {};
    ClientRequest.prototype.setTimeout = function() {};
    ClientRequest.prototype.setNoDelay = function() {};
    ClientRequest.prototype.setSocketKeepAlive = function() {};

    function request(opts, cb) {
      if (typeof opts === 'string')
        opts = urlParse(opts);


      // Normally, the page is loaded from http or https, so not specifying a protocol
      // will result in a (valid) protocol-relative url. However, this won't work if
      // the protocol is something else, like 'file:'
      var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || '/';

      // Necessary for IPv6 addresses
      if (host && host.indexOf(':') !== -1)
        host = '[' + host + ']';

      // This may be a relative url. The browser should always be able to interpret it correctly.
      opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
      opts.method = (opts.method || 'GET').toUpperCase();
      opts.headers = opts.headers || {};

      // Also valid opts.auth, opts.mode

      var req = new ClientRequest(opts);
      if (cb)
        req.on('response', cb);
      return req
    }

    function get(opts, cb) {
      var req = request(opts, cb);
      req.end();
      return req
    }

    function Agent() {}
    Agent.defaultMaxSockets = 4;

    var METHODS = [
      'CHECKOUT',
      'CONNECT',
      'COPY',
      'DELETE',
      'GET',
      'HEAD',
      'LOCK',
      'M-SEARCH',
      'MERGE',
      'MKACTIVITY',
      'MKCOL',
      'MOVE',
      'NOTIFY',
      'OPTIONS',
      'PATCH',
      'POST',
      'PROPFIND',
      'PROPPATCH',
      'PURGE',
      'PUT',
      'REPORT',
      'SEARCH',
      'SUBSCRIBE',
      'TRACE',
      'UNLOCK',
      'UNSUBSCRIBE'
    ];
    var STATUS_CODES = {
      100: 'Continue',
      101: 'Switching Protocols',
      102: 'Processing', // RFC 2518, obsoleted by RFC 4918
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      203: 'Non-Authoritative Information',
      204: 'No Content',
      205: 'Reset Content',
      206: 'Partial Content',
      207: 'Multi-Status', // RFC 4918
      300: 'Multiple Choices',
      301: 'Moved Permanently',
      302: 'Moved Temporarily',
      303: 'See Other',
      304: 'Not Modified',
      305: 'Use Proxy',
      307: 'Temporary Redirect',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Payment Required',
      403: 'Forbidden',
      404: 'Not Found',
      405: 'Method Not Allowed',
      406: 'Not Acceptable',
      407: 'Proxy Authentication Required',
      408: 'Request Time-out',
      409: 'Conflict',
      410: 'Gone',
      411: 'Length Required',
      412: 'Precondition Failed',
      413: 'Request Entity Too Large',
      414: 'Request-URI Too Large',
      415: 'Unsupported Media Type',
      416: 'Requested Range Not Satisfiable',
      417: 'Expectation Failed',
      418: 'I\'m a teapot', // RFC 2324
      422: 'Unprocessable Entity', // RFC 4918
      423: 'Locked', // RFC 4918
      424: 'Failed Dependency', // RFC 4918
      425: 'Unordered Collection', // RFC 4918
      426: 'Upgrade Required', // RFC 2817
      428: 'Precondition Required', // RFC 6585
      429: 'Too Many Requests', // RFC 6585
      431: 'Request Header Fields Too Large', // RFC 6585
      500: 'Internal Server Error',
      501: 'Not Implemented',
      502: 'Bad Gateway',
      503: 'Service Unavailable',
      504: 'Gateway Time-out',
      505: 'HTTP Version Not Supported',
      506: 'Variant Also Negotiates', // RFC 2295
      507: 'Insufficient Storage', // RFC 4918
      509: 'Bandwidth Limit Exceeded',
      510: 'Not Extended', // RFC 2774
      511: 'Network Authentication Required' // RFC 6585
    };

    var http = {
      request,
      get,
      Agent,
      METHODS,
      STATUS_CODES
    };

    /*
    The MIT License (MIT)

    Copyright (c) 2016 CoderPuppy

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */
    var _endianness;
    function endianness() {
      if (typeof _endianness === 'undefined') {
        var a = new ArrayBuffer(2);
        var b = new Uint8Array(a);
        var c = new Uint16Array(a);
        b[0] = 1;
        b[1] = 2;
        if (c[0] === 258) {
          _endianness = 'BE';
        } else if (c[0] === 513){
          _endianness = 'LE';
        } else {
          throw new Error('unable to figure out endianess');
        }
      }
      return _endianness;
    }

    function hostname() {
      if (typeof global$1.location !== 'undefined') {
        return global$1.location.hostname
      } else return '';
    }

    function loadavg() {
      return [];
    }

    function uptime$1() {
      return 0;
    }

    function freemem() {
      return Number.MAX_VALUE;
    }

    function totalmem() {
      return Number.MAX_VALUE;
    }

    function cpus() {
      return [];
    }

    function type() {
      return 'Browser';
    }

    function release$1 () {
      if (typeof global$1.navigator !== 'undefined') {
        return global$1.navigator.appVersion;
      }
      return '';
    }

    function networkInterfaces(){}
    function getNetworkInterfaces(){}

    function tmpDir() {
      return '/tmp';
    }
    var tmpdir = tmpDir;

    var EOL = '\n';
    var os = {
      EOL: EOL,
      tmpdir: tmpdir,
      tmpDir: tmpDir,
      networkInterfaces:networkInterfaces,
      getNetworkInterfaces: getNetworkInterfaces,
      release: release$1,
      type: type,
      cpus: cpus,
      totalmem: totalmem,
      freemem: freemem,
      uptime: uptime$1,
      loadavg: loadavg,
      hostname: hostname,
      endianness: endianness,
    };

    var progressEvent = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProgressEvent = /** @class */ (function () {
        function ProgressEvent(type) {
            this.type = type;
            this.bubbles = false;
            this.cancelable = false;
            this.loaded = 0;
            this.lengthComputable = false;
            this.total = 0;
        }
        return ProgressEvent;
    }());
    exports.ProgressEvent = ProgressEvent;

    });

    var errors$4 = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });
    var SecurityError = /** @class */ (function (_super) {
        __extends(SecurityError, _super);
        function SecurityError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SecurityError;
    }(Error));
    exports.SecurityError = SecurityError;
    var InvalidStateError = /** @class */ (function (_super) {
        __extends(InvalidStateError, _super);
        function InvalidStateError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return InvalidStateError;
    }(Error));
    exports.InvalidStateError = InvalidStateError;
    var NetworkError = /** @class */ (function (_super) {
        __extends(NetworkError, _super);
        function NetworkError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NetworkError;
    }(Error));
    exports.NetworkError = NetworkError;
    var SyntaxError = /** @class */ (function (_super) {
        __extends(SyntaxError, _super);
        function SyntaxError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SyntaxError;
    }(Error));
    exports.SyntaxError = SyntaxError;

    });

    var xmlHttpRequestEventTarget = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var XMLHttpRequestEventTarget = /** @class */ (function () {
        function XMLHttpRequestEventTarget() {
            this.listeners = {};
        }
        XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
            eventType = eventType.toLowerCase();
            this.listeners[eventType] = this.listeners[eventType] || [];
            this.listeners[eventType].push(listener.handleEvent || listener);
        };
        XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
            eventType = eventType.toLowerCase();
            if (!this.listeners[eventType]) {
                return;
            }
            var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
            if (index < 0) {
                return;
            }
            this.listeners[eventType].splice(index, 1);
        };
        XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
            var eventType = event.type.toLowerCase();
            event.target = this; // TODO: set event.currentTarget?
            if (this.listeners[eventType]) {
                for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                    var listener_1 = _a[_i];
                    listener_1.call(this, event);
                }
            }
            var listener = this["on" + eventType];
            if (listener) {
                listener.call(this, event);
            }
            return true;
        };
        return XMLHttpRequestEventTarget;
    }());
    exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;

    });

    var xmlHttpRequestUpload = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });

    var XMLHttpRequestUpload = /** @class */ (function (_super) {
        __extends(XMLHttpRequestUpload, _super);
        function XMLHttpRequestUpload() {
            var _this = _super.call(this) || this;
            _this._contentType = null;
            _this._body = null;
            _this._reset();
            return _this;
        }
        XMLHttpRequestUpload.prototype._reset = function () {
            this._contentType = null;
            this._body = null;
        };
        XMLHttpRequestUpload.prototype._setData = function (data) {
            if (data == null) {
                return;
            }
            if (typeof data === 'string') {
                if (data.length !== 0) {
                    this._contentType = 'text/plain;charset=UTF-8';
                }
                this._body = new Buffer(data, 'utf-8');
            }
            else if (isBuffer(data)) {
                this._body = data;
            }
            else if (data instanceof ArrayBuffer) {
                var body = new Buffer(data.byteLength);
                var view = new Uint8Array(data);
                for (var i = 0; i < data.byteLength; i++) {
                    body[i] = view[i];
                }
                this._body = body;
            }
            else if (data.buffer && data.buffer instanceof ArrayBuffer) {
                var body = new Buffer(data.byteLength);
                var offset = data.byteOffset;
                var view = new Uint8Array(data.buffer);
                for (var i = 0; i < data.byteLength; i++) {
                    body[i] = view[i + offset];
                }
                this._body = body;
            }
            else {
                throw new Error("Unsupported send() data " + data);
            }
        };
        XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
            if (this._contentType && !loweredHeaders['content-type']) {
                headers['Content-Type'] = this._contentType;
            }
            if (this._body) {
                headers['Content-Length'] = this._body.length.toString();
            }
        };
        XMLHttpRequestUpload.prototype._startUpload = function (request) {
            if (this._body) {
                request.write(this._body);
            }
            request.end();
        };
        return XMLHttpRequestUpload;
    }(xmlHttpRequestEventTarget.XMLHttpRequestEventTarget));
    exports.XMLHttpRequestUpload = XMLHttpRequestUpload;

    });

    var cookiejar = createCommonjsModule(function (module, exports) {
    /* jshint node: true */
    (function () {

        function CookieAccessInfo(domain, path, secure, script) {
            if (this instanceof CookieAccessInfo) {
                this.domain = domain || undefined;
                this.path = path || "/";
                this.secure = !!secure;
                this.script = !!script;
                return this;
            }
            return new CookieAccessInfo(domain, path, secure, script);
        }
        CookieAccessInfo.All = Object.freeze(Object.create(null));
        exports.CookieAccessInfo = CookieAccessInfo;

        function Cookie(cookiestr, request_domain, request_path) {
            if (cookiestr instanceof Cookie) {
                return cookiestr;
            }
            if (this instanceof Cookie) {
                this.name = null;
                this.value = null;
                this.expiration_date = Infinity;
                this.path = String(request_path || "/");
                this.explicit_path = false;
                this.domain = request_domain || null;
                this.explicit_domain = false;
                this.secure = false; //how to define default?
                this.noscript = false; //httponly
                if (cookiestr) {
                    this.parse(cookiestr, request_domain, request_path);
                }
                return this;
            }
            return new Cookie(cookiestr, request_domain, request_path);
        }
        exports.Cookie = Cookie;

        Cookie.prototype.toString = function toString() {
            var str = [this.name + "=" + this.value];
            if (this.expiration_date !== Infinity) {
                str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
            }
            if (this.domain) {
                str.push("domain=" + this.domain);
            }
            if (this.path) {
                str.push("path=" + this.path);
            }
            if (this.secure) {
                str.push("secure");
            }
            if (this.noscript) {
                str.push("httponly");
            }
            return str.join("; ");
        };

        Cookie.prototype.toValueString = function toValueString() {
            return this.name + "=" + this.value;
        };

        var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
        Cookie.prototype.parse = function parse(str, request_domain, request_path) {
            if (this instanceof Cookie) {
                var parts = str.split(";").filter(function (value) {
                        return !!value;
                    });
                var i;

                var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
                if (!pair) {
                    console.warn("Invalid cookie header encountered. Header: '"+str+"'");
                    return;
                }

                var key = pair[1];
                var value = pair[2];
                if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
                    console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
                    return;
                }

                this.name = key;
                this.value = value;

                for (i = 1; i < parts.length; i += 1) {
                    pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                    key = pair[1].trim().toLowerCase();
                    value = pair[2];
                    switch (key) {
                    case "httponly":
                        this.noscript = true;
                        break;
                    case "expires":
                        this.expiration_date = value ?
                                Number(Date.parse(value)) :
                                Infinity;
                        break;
                    case "path":
                        this.path = value ?
                                value.trim() :
                                "";
                        this.explicit_path = true;
                        break;
                    case "domain":
                        this.domain = value ?
                                value.trim() :
                                "";
                        this.explicit_domain = !!this.domain;
                        break;
                    case "secure":
                        this.secure = true;
                        break;
                    }
                }

                if (!this.explicit_path) {
                   this.path = request_path || "/";
                }
                if (!this.explicit_domain) {
                   this.domain = request_domain;
                }

                return this;
            }
            return new Cookie().parse(str, request_domain, request_path);
        };

        Cookie.prototype.matches = function matches(access_info) {
            if (access_info === CookieAccessInfo.All) {
              return true;
            }
            if (this.noscript && access_info.script ||
                    this.secure && !access_info.secure ||
                    !this.collidesWith(access_info)) {
                return false;
            }
            return true;
        };

        Cookie.prototype.collidesWith = function collidesWith(access_info) {
            if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
                return false;
            }
            if (this.path && access_info.path.indexOf(this.path) !== 0) {
                return false;
            }
            if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
               return false;
            }
            var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
            var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
            if (cookie_domain === access_domain) {
                return true;
            }
            if (cookie_domain) {
                if (!this.explicit_domain) {
                    return false; // we already checked if the domains were exactly the same
                }
                var wildcard = access_domain.indexOf(cookie_domain);
                if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                    return false;
                }
                return true;
            }
            return true;
        };

        function CookieJar() {
            var cookies, cookies_list, collidable_cookie;
            if (this instanceof CookieJar) {
                cookies = Object.create(null); //name: [Cookie]

                this.setCookie = function setCookie(cookie, request_domain, request_path) {
                    var remove, i;
                    cookie = new Cookie(cookie, request_domain, request_path);
                    //Delete the cookie if the set is past the current time
                    remove = cookie.expiration_date <= Date.now();
                    if (cookies[cookie.name] !== undefined) {
                        cookies_list = cookies[cookie.name];
                        for (i = 0; i < cookies_list.length; i += 1) {
                            collidable_cookie = cookies_list[i];
                            if (collidable_cookie.collidesWith(cookie)) {
                                if (remove) {
                                    cookies_list.splice(i, 1);
                                    if (cookies_list.length === 0) {
                                        delete cookies[cookie.name];
                                    }
                                    return false;
                                }
                                cookies_list[i] = cookie;
                                return cookie;
                            }
                        }
                        if (remove) {
                            return false;
                        }
                        cookies_list.push(cookie);
                        return cookie;
                    }
                    if (remove) {
                        return false;
                    }
                    cookies[cookie.name] = [cookie];
                    return cookies[cookie.name];
                };
                //returns a cookie
                this.getCookie = function getCookie(cookie_name, access_info) {
                    var cookie, i;
                    cookies_list = cookies[cookie_name];
                    if (!cookies_list) {
                        return;
                    }
                    for (i = 0; i < cookies_list.length; i += 1) {
                        cookie = cookies_list[i];
                        if (cookie.expiration_date <= Date.now()) {
                            if (cookies_list.length === 0) {
                                delete cookies[cookie.name];
                            }
                            continue;
                        }

                        if (cookie.matches(access_info)) {
                            return cookie;
                        }
                    }
                };
                //returns a list of cookies
                this.getCookies = function getCookies(access_info) {
                    var matches = [], cookie_name, cookie;
                    for (cookie_name in cookies) {
                        cookie = this.getCookie(cookie_name, access_info);
                        if (cookie) {
                            matches.push(cookie);
                        }
                    }
                    matches.toString = function toString() {
                        return matches.join(":");
                    };
                    matches.toValueString = function toValueString() {
                        return matches.map(function (c) {
                            return c.toValueString();
                        }).join(';');
                    };
                    return matches;
                };

                return this;
            }
            return new CookieJar();
        }
        exports.CookieJar = CookieJar;

        //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
        CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
            cookies = Array.isArray(cookies) ?
                    cookies :
                    cookies.split(cookie_str_splitter);
            var successful = [],
                i,
                cookie;
            cookies = cookies.map(function(item){
                return new Cookie(item, request_domain, request_path);
            });
            for (i = 0; i < cookies.length; i += 1) {
                cookie = cookies[i];
                if (this.setCookie(cookie, request_domain, request_path)) {
                    successful.push(cookie);
                }
            }
            return successful;
        };
    }());
    });

    var xmlHttpRequest = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });









    var XMLHttpRequest = /** @class */ (function (_super) {
        __extends(XMLHttpRequest, _super);
        function XMLHttpRequest(options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this) || this;
            _this.UNSENT = XMLHttpRequest.UNSENT;
            _this.OPENED = XMLHttpRequest.OPENED;
            _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
            _this.LOADING = XMLHttpRequest.LOADING;
            _this.DONE = XMLHttpRequest.DONE;
            _this.onreadystatechange = null;
            _this.readyState = XMLHttpRequest.UNSENT;
            _this.response = null;
            _this.responseText = '';
            _this.responseType = '';
            _this.status = 0; // TODO: UNSENT?
            _this.statusText = '';
            _this.timeout = 0;
            _this.upload = new xmlHttpRequestUpload.XMLHttpRequestUpload();
            _this.responseUrl = '';
            _this.withCredentials = false;
            _this._method = null;
            _this._url = null;
            _this._sync = false;
            _this._headers = {};
            _this._loweredHeaders = {};
            _this._mimeOverride = null; // TODO: is type right?
            _this._request = null;
            _this._response = null;
            _this._responseParts = null;
            _this._responseHeaders = null;
            _this._aborting = null; // TODO: type?
            _this._error = null; // TODO: type?
            _this._loadedBytes = 0;
            _this._totalBytes = 0;
            _this._lengthComputable = false;
            _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
            _this._restrictedHeaders = {
                'accept-charset': true,
                'accept-encoding': true,
                'access-control-request-headers': true,
                'access-control-request-method': true,
                connection: true,
                'content-length': true,
                cookie: true,
                cookie2: true,
                date: true,
                dnt: true,
                expect: true,
                host: true,
                'keep-alive': true,
                origin: true,
                referer: true,
                te: true,
                trailer: true,
                'transfer-encoding': true,
                upgrade: true,
                'user-agent': true,
                via: true
            };
            _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
            _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
            _this._anonymous = options.anon || false;
            return _this;
        }
        XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
            if (async === void 0) { async = true; }
            method = method.toUpperCase();
            if (this._restrictedMethods[method]) {
                throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
            }
            var xhrUrl = this._parseUrl(url, user, password);
            if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) ;
            this._method = method;
            this._url = xhrUrl;
            this._sync = !async;
            this._headers = {};
            this._loweredHeaders = {};
            this._mimeOverride = null;
            this._setReadyState(XMLHttpRequest.OPENED);
            this._request = null;
            this._response = null;
            this.status = 0;
            this.statusText = '';
            this._responseParts = [];
            this._responseHeaders = null;
            this._loadedBytes = 0;
            this._totalBytes = 0;
            this._lengthComputable = false;
        };
        XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
            if (this.readyState !== XMLHttpRequest.OPENED) {
                throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
            }
            var loweredName = name.toLowerCase();
            if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
                console.warn("Refused to set unsafe header \"" + name + "\"");
                return;
            }
            value = value.toString();
            if (this._loweredHeaders[loweredName] != null) {
                name = this._loweredHeaders[loweredName];
                this._headers[name] = this._headers[name] + ", " + value;
            }
            else {
                this._loweredHeaders[loweredName] = name;
                this._headers[name] = value;
            }
        };
        XMLHttpRequest.prototype.send = function (data) {
            if (this.readyState !== XMLHttpRequest.OPENED) {
                throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
            }
            if (this._request) {
                throw new XMLHttpRequest.InvalidStateError('send() already called');
            }
            switch (this._url.protocol) {
                case 'file:':
                    return this._sendFile(data);
                case 'http:':
                case 'https:':
                    return this._sendHttp(data);
                default:
                    throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
            }
        };
        XMLHttpRequest.prototype.abort = function () {
            if (this._request == null) {
                return;
            }
            this._request.abort();
            this._setError();
            this._dispatchProgress('abort');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype.getResponseHeader = function (name) {
            if (this._responseHeaders == null || name == null) {
                return null;
            }
            var loweredName = name.toLowerCase();
            return this._responseHeaders.hasOwnProperty(loweredName)
                ? this._responseHeaders[name.toLowerCase()]
                : null;
        };
        XMLHttpRequest.prototype.getAllResponseHeaders = function () {
            var _this = this;
            if (this._responseHeaders == null) {
                return '';
            }
            return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
        };
        XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
            if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
                throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
            }
            this._mimeOverride = mimeType.toLowerCase();
        };
        XMLHttpRequest.prototype.nodejsSet = function (options) {
            this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
            this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
            if (options.hasOwnProperty('baseUrl')) {
                if (options.baseUrl != null) {
                    var parsedUrl = url.parse(options.baseUrl, false, true);
                    if (!parsedUrl.protocol) {
                        throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                    }
                }
                this.nodejsBaseUrl = options.baseUrl;
            }
        };
        XMLHttpRequest.nodejsSet = function (options) {
            XMLHttpRequest.prototype.nodejsSet(options);
        };
        XMLHttpRequest.prototype._setReadyState = function (readyState) {
            this.readyState = readyState;
            this.dispatchEvent(new progressEvent.ProgressEvent('readystatechange'));
        };
        XMLHttpRequest.prototype._sendFile = function (data) {
            // TODO
            throw new Error('Protocol file: not implemented');
        };
        XMLHttpRequest.prototype._sendHttp = function (data) {
            if (this._sync) {
                throw new Error('Synchronous XHR processing not implemented');
            }
            if (data && (this._method === 'GET' || this._method === 'HEAD')) {
                console.warn("Discarding entity body for " + this._method + " requests");
                data = null;
            }
            else {
                data = data || '';
            }
            this.upload._setData(data);
            this._finalizeHeaders();
            this._sendHxxpRequest();
        };
        XMLHttpRequest.prototype._sendHxxpRequest = function () {
            var _this = this;
            if (this.withCredentials) {
                var cookie = XMLHttpRequest.cookieJar
                    .getCookies(cookiejar.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
                this._headers.cookie = this._headers.cookie2 = cookie;
            }
            var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [http, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
            var requestMethod = hxxp.request.bind(hxxp);
            var request = requestMethod({
                hostname: this._url.hostname,
                port: +this._url.port,
                path: this._url.path,
                auth: this._url.auth,
                method: this._method,
                headers: this._headers,
                agent: agent
            });
            this._request = request;
            if (this.timeout) {
                request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
            }
            request.on('response', function (response) { return _this._onHttpResponse(request, response); });
            request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
            this.upload._startUpload(request);
            if (this._request === request) {
                this._dispatchProgress('loadstart');
            }
        };
        XMLHttpRequest.prototype._finalizeHeaders = function () {
            this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
            this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
        };
        XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
            var _this = this;
            if (this._request !== request) {
                return;
            }
            if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
                XMLHttpRequest.cookieJar
                    .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
            }
            if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
                this._url = this._parseUrl(response.headers.location);
                this._method = 'GET';
                if (this._loweredHeaders['content-type']) {
                    delete this._headers[this._loweredHeaders['content-type']];
                    delete this._loweredHeaders['content-type'];
                }
                if (this._headers['Content-Type'] != null) {
                    delete this._headers['Content-Type'];
                }
                delete this._headers['Content-Length'];
                this.upload._reset();
                this._finalizeHeaders();
                this._sendHxxpRequest();
                return;
            }
            this._response = response;
            this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
            this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
            this._response.on('close', function () { return _this._onHttpResponseClose(response); });
            this.responseUrl = this._url.href.split('#')[0];
            this.status = response.statusCode;
            this.statusText = http.STATUS_CODES[this.status];
            this._parseResponseHeaders(response);
            var lengthString = this._responseHeaders['content-length'] || '';
            this._totalBytes = +lengthString;
            this._lengthComputable = !!lengthString;
            this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
        };
        XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
            if (this._response !== response) {
                return;
            }
            this._responseParts.push(new Buffer(data));
            this._loadedBytes += data.length;
            if (this.readyState !== XMLHttpRequest.LOADING) {
                this._setReadyState(XMLHttpRequest.LOADING);
            }
            this._dispatchProgress('progress');
        };
        XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
            if (this._response !== response) {
                return;
            }
            this._parseResponse();
            this._request = null;
            this._response = null;
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('load');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
            if (this._response !== response) {
                return;
            }
            var request = this._request;
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('error');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._onHttpTimeout = function (request) {
            if (this._request !== request) {
                return;
            }
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('timeout');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
            if (this._request !== request) {
                return;
            }
            this._setError();
            request.abort();
            this._setReadyState(XMLHttpRequest.DONE);
            this._dispatchProgress('error');
            this._dispatchProgress('loadend');
        };
        XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
            var event = new XMLHttpRequest.ProgressEvent(eventType);
            event.lengthComputable = this._lengthComputable;
            event.loaded = this._loadedBytes;
            event.total = this._totalBytes;
            this.dispatchEvent(event);
        };
        XMLHttpRequest.prototype._setError = function () {
            this._request = null;
            this._response = null;
            this._responseHeaders = null;
            this._responseParts = null;
        };
        XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
            var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
            var xhrUrl = url.parse(absoluteUrl, false, true);
            xhrUrl.hash = null;
            var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
            if (xhrUser || xhrPassword || user || password) {
                xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
            }
            return xhrUrl;
        };
        XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
            this._responseHeaders = {};
            for (var name_1 in response.headers) {
                var loweredName = name_1.toLowerCase();
                if (this._privateHeaders[loweredName]) {
                    continue;
                }
                this._responseHeaders[loweredName] = response.headers[name_1];
            }
            if (this._mimeOverride != null) {
                this._responseHeaders['content-type'] = this._mimeOverride;
            }
        };
        XMLHttpRequest.prototype._parseResponse = function () {
            var buffer = Buffer.concat(this._responseParts);
            this._responseParts = null;
            switch (this.responseType) {
                case 'json':
                    this.responseText = null;
                    try {
                        this.response = JSON.parse(buffer.toString('utf-8'));
                    }
                    catch (_a) {
                        this.response = null;
                    }
                    return;
                case 'buffer':
                    this.responseText = null;
                    this.response = buffer;
                    return;
                case 'arraybuffer':
                    this.responseText = null;
                    var arrayBuffer = new ArrayBuffer(buffer.length);
                    var view = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < buffer.length; i++) {
                        view[i] = buffer[i];
                    }
                    this.response = arrayBuffer;
                    return;
                case 'text':
                default:
                    try {
                        this.responseText = buffer.toString(this._parseResponseEncoding());
                    }
                    catch (_b) {
                        this.responseText = buffer.toString('binary');
                    }
                    this.response = this.responseText;
            }
        };
        XMLHttpRequest.prototype._parseResponseEncoding = function () {
            return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
        };
        XMLHttpRequest.ProgressEvent = progressEvent.ProgressEvent;
        XMLHttpRequest.InvalidStateError = errors$4.InvalidStateError;
        XMLHttpRequest.NetworkError = errors$4.NetworkError;
        XMLHttpRequest.SecurityError = errors$4.SecurityError;
        XMLHttpRequest.SyntaxError = errors$4.SyntaxError;
        XMLHttpRequest.XMLHttpRequestUpload = xmlHttpRequestUpload.XMLHttpRequestUpload;
        XMLHttpRequest.UNSENT = 0;
        XMLHttpRequest.OPENED = 1;
        XMLHttpRequest.HEADERS_RECEIVED = 2;
        XMLHttpRequest.LOADING = 3;
        XMLHttpRequest.DONE = 4;
        XMLHttpRequest.cookieJar = cookiejar.CookieJar();
        return XMLHttpRequest;
    }(xmlHttpRequestEventTarget.XMLHttpRequestEventTarget));
    exports.XMLHttpRequest = XMLHttpRequest;
    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
    XMLHttpRequest.prototype.nodejsHttpsAgent = http.globalAgent;
    XMLHttpRequest.prototype.nodejsBaseUrl = null;

    });

    var dist$1 = createCommonjsModule(function (module, exports) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(xmlHttpRequest);

    exports.XMLHttpRequestEventTarget = xmlHttpRequestEventTarget.XMLHttpRequestEventTarget;

    });

    /*
        This file is part of web3.js.

        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /** @file httpprovider.js
     * @authors:
     *   Marek Kotewicz <marek@parity.io>
     *   Marian Oancea
     *   Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2015
     */
    var errors$5 = lib$3.errors;
    var XHR2 = dist$1.XMLHttpRequest; // jshint ignore: line


    /**
     * HttpProvider should be used to send rpc calls over http
     */
    var HttpProvider = function HttpProvider(host, options) {
        options = options || {};
        this.withCredentials = options.withCredentials || false;
        this.timeout = options.timeout || 0;
        this.headers = options.headers;
        this.agent = options.agent;
        this.connected = false;
        // keepAlive is true unless explicitly set to false
        const keepAlive = options.keepAlive !== false;
        this.host = host || 'http://localhost:8545';
        if (!this.agent) {
            if (this.host.substring(0, 5) === "https") {
                this.httpsAgent = new http.Agent({ keepAlive });
            }
            else {
                this.httpAgent = new http.Agent({ keepAlive });
            }
        }
    };
    HttpProvider.prototype._prepareRequest = function () {
        var request;
        // the current runtime is a browser
        if (typeof XMLHttpRequest !== 'undefined') {
            request = new XMLHttpRequest();
        }
        else {
            request = new XHR2();
            var agents = { httpsAgent: this.httpsAgent, httpAgent: this.httpAgent, baseUrl: this.baseUrl };
            if (this.agent) {
                agents.httpsAgent = this.agent.https;
                agents.httpAgent = this.agent.http;
                agents.baseUrl = this.agent.baseUrl;
            }
            request.nodejsSet(agents);
        }
        request.open('POST', this.host, true);
        request.setRequestHeader('Content-Type', 'application/json');
        request.timeout = this.timeout;
        request.withCredentials = this.withCredentials;
        if (this.headers) {
            this.headers.forEach(function (header) {
                request.setRequestHeader(header.name, header.value);
            });
        }
        return request;
    };
    /**
     * Should be used to make async request
     *
     * @method send
     * @param {Object} payload
     * @param {Function} callback triggered on end with (err, result)
     */
    HttpProvider.prototype.send = function (payload, callback) {
        var _this = this;
        var request = this._prepareRequest();
        request.onreadystatechange = function () {
            if (request.readyState === 4 && request.timeout !== 1) {
                var result = request.responseText;
                var error = null;
                try {
                    result = JSON.parse(result);
                }
                catch (e) {
                    error = errors$5.InvalidResponse(request.responseText);
                }
                _this.connected = true;
                callback(error, result);
            }
        };
        request.ontimeout = function () {
            _this.connected = false;
            callback(errors$5.ConnectionTimeout(this.timeout));
        };
        try {
            request.send(JSON.stringify(payload));
        }
        catch (error) {
            this.connected = false;
            callback(errors$5.InvalidConnection(this.host));
        }
    };
    HttpProvider.prototype.disconnect = function () {
        //NO OP
    };
    /**
     * Returns the desired boolean.
     *
     * @method supportsSubscriptions
     * @returns {boolean}
     */
    HttpProvider.prototype.supportsSubscriptions = function () {
        return false;
    };
    var lib$5 = HttpProvider;

    var oboeBrowser = createCommonjsModule(function (module, exports) {
    /*!
     * v2.1.4-104-gc868b3a
     * 
     */
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 7);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return partialComplete; });
    /* unused harmony export compose */
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return compose2; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return attr; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return lazyUnion; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return apply; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return varArgs; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return flip; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return lazyIntersection; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return noop; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return always; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return functor; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __webpack_require__(1);


    /**
     * Partially complete a function.
     *
     *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
     *
     *  add3(4) // gives 7
     *
     *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
     *
     *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
     *
     *  pirateGreeting("Guybrush Threepwood");
     *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
     */
    var partialComplete = varArgs(function (fn, args) {
      // this isn't the shortest way to write this but it does
      // avoid creating a new array each time to pass to fn.apply,
      // otherwise could just call boundArgs.concat(callArgs)

      var numBoundArgs = args.length;

      return varArgs(function (callArgs) {
        for (var i = 0; i < callArgs.length; i++) {
          args[numBoundArgs + i] = callArgs[i];
        }

        args.length = numBoundArgs + callArgs.length;

        return fn.apply(this, args)
      })
    });

    /**
    * Compose zero or more functions:
    *
    *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
    *
    * The last (inner-most) function may take more than one parameter:
    *
    *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
    */
    var compose = varArgs(function (fns) {
      var fnsList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["c" /* arrayAsList */])(fns);

      function next (params, curFn) {
        return [apply(params, curFn)]
      }

      return varArgs(function (startParams) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__lists__["f" /* foldR */])(next, startParams, fnsList)[0]
      })
    });

    /**
    * A more optimised version of compose that takes exactly two functions
    * @param f1
    * @param f2
    */
    function compose2 (f1, f2) {
      return function () {
        return f1.call(this, f2.apply(this, arguments))
      }
    }

    /**
    * Generic form for a function to get a property from an object
    *
    *    var o = {
    *       foo:'bar'
    *    }
    *
    *    var getFoo = attr('foo')
    *
    *    fetFoo(o) // returns 'bar'
    *
    * @param {String} key the property name
    */
    function attr (key) {
      return function (o) { return o[key] }
    }

    /**
    * Call a list of functions with the same args until one returns a
    * truthy result. Similar to the || operator.
    *
    * So:
    *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
    *
    * Is equivalent to:
    *      apply([p1, p2 ... pn], f1) ||
    *      apply([p1, p2 ... pn], f2) ||
    *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])
    *
    * @returns the first return value that is given that is truthy.
    */
    var lazyUnion = varArgs(function (fns) {
      return varArgs(function (params) {
        var maybeValue;

        for (var i = 0; i < attr('length')(fns); i++) {
          maybeValue = apply(params, fns[i]);

          if (maybeValue) {
            return maybeValue
          }
        }
      })
    });

    /**
    * This file declares various pieces of functional programming.
    *
    * This isn't a general purpose functional library, to keep things small it
    * has just the parts useful for Oboe.js.
    */

    /**
    * Call a single function with the given arguments array.
    * Basically, a functional-style version of the OO-style Function#apply for
    * when we don't care about the context ('this') of the call.
    *
    * The order of arguments allows partial completion of the arguments array
    */
    function apply (args, fn) {
      return fn.apply(undefined, args)
    }

    /**
    * Define variable argument functions but cut out all that tedious messing about
    * with the arguments object. Delivers the variable-length part of the arguments
    * list as an array.
    *
    * Eg:
    *
    * var myFunction = varArgs(
    *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
    *       console.log( variableNumberOfArguments );
    *    }
    * )
    *
    * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
    *
    * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
    *    console.log( variableNumberOfArguments );
    * })
    *
    * myFunction(1, 2, 3); // logs [1,2,3]
    *
    */
    function varArgs (fn) {
      var numberOfFixedArguments = fn.length - 1;
      var slice = Array.prototype.slice;

      if (numberOfFixedArguments === 0) {
        // an optimised case for when there are no fixed args:

        return function () {
          return fn.call(this, slice.call(arguments))
        }
      } else if (numberOfFixedArguments === 1) {
        // an optimised case for when there are is one fixed args:

        return function () {
          return fn.call(this, arguments[0], slice.call(arguments, 1))
        }
      }

      // general case

      // we know how many arguments fn will always take. Create a
      // fixed-size array to hold that many, to be re-used on
      // every call to the returned function
      var argsHolder = Array(fn.length);

      return function () {
        for (var i = 0; i < numberOfFixedArguments; i++) {
          argsHolder[i] = arguments[i];
        }

        argsHolder[numberOfFixedArguments] =
          slice.call(arguments, numberOfFixedArguments);

        return fn.apply(this, argsHolder)
      }
    }

    /**
    * Swap the order of parameters to a binary function
    *
    * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
    */
    function flip (fn) {
      return function (a, b) {
        return fn(b, a)
      }
    }

    /**
    * Create a function which is the intersection of two other functions.
    *
    * Like the && operator, if the first is truthy, the second is never called,
    * otherwise the return value from the second is returned.
    */
    function lazyIntersection (fn1, fn2) {
      return function (param) {
        return fn1(param) && fn2(param)
      }
    }

    /**
    * A function which does nothing
    */
    function noop () { }

    /**
    * A function which is always happy
    */
    function always () { return true }

    /**
    * Create a function which always returns the same
    * value
    *
    * var return3 = functor(3);
    *
    * return3() // gives 3
    * return3() // still gives 3
    * return3() // will always give 3
    */
    function functor (val) {
      return function () {
        return val
      }
    }




    /***/ }),
    /* 1 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return cons; });
    /* unused harmony export emptyList */
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return head; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return tail; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return arrayAsList; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return list; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return listAsArray; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return map; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return foldR; });
    /* unused harmony export foldR1 */
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return without; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return all; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return applyEach; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return reverseList; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return first; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __webpack_require__(0);


    /**
     * Like cons in Lisp
     */
    function cons (x, xs) {
      /* Internally lists are linked 2-element Javascript arrays.

          Ideally the return here would be Object.freeze([x,xs])
          so that bugs related to mutation are found fast.
          However, cons is right on the critical path for
          performance and this slows oboe-mark down by
          ~25%. Under theoretical future JS engines that freeze more
          efficiently (possibly even use immutability to
          run faster) this should be considered for
          restoration.
       */

      return [x, xs]
    }

    /**
     * The empty list
     */
    var emptyList = null;

    /**
     * Get the head of a list.
     *
     * Ie, head(cons(a,b)) = a
     */
    var head = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])(0);

    /**
     * Get the tail of a list.
     *
     * Ie, tail(cons(a,b)) = b
     */
    var tail = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])(1);

    /**
     * Converts an array to a list
     *
     *    asList([a,b,c])
     *
     * is equivalent to:
     *
     *    cons(a, cons(b, cons(c, emptyList)))
     **/
    function arrayAsList (inputArray) {
      return reverseList(
        inputArray.reduce(
          Object(__WEBPACK_IMPORTED_MODULE_0__functional__["e" /* flip */])(cons),
          emptyList
        )
      )
    }

    /**
     * A varargs version of arrayAsList. Works a bit like list
     * in LISP.
     *
     *    list(a,b,c)
     *
     * is equivalent to:
     *
     *    cons(a, cons(b, cons(c, emptyList)))
     */
    var list = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["k" /* varArgs */])(arrayAsList);

    /**
     * Convert a list back to a js native array
     */
    function listAsArray (list) {
      return foldR(function (arraySoFar, listItem) {
        arraySoFar.unshift(listItem);
        return arraySoFar
      }, [], list)
    }

    /**
     * Map a function over a list
     */
    function map (fn, list) {
      return list
        ? cons(fn(head(list)), map(fn, tail(list)))
        : emptyList
    }

    /**
     * foldR implementation. Reduce a list down to a single value.
     *
     * @pram {Function} fn     (rightEval, curVal) -> result
     */
    function foldR (fn, startValue, list) {
      return list
        ? fn(foldR(fn, startValue, tail(list)), head(list))
        : startValue
    }

    /**
     * Return a list like the one given but with the first instance equal
     * to item removed
     */
    function without (list, test, removedFn) {
      return withoutInner(list, removedFn || __WEBPACK_IMPORTED_MODULE_0__functional__["i" /* noop */])

      function withoutInner (subList, removedFn) {
        return subList
          ? (test(head(subList))
            ? (removedFn(head(subList)), tail(subList))
            : cons(head(subList), withoutInner(tail(subList), removedFn))
          )
          : emptyList
      }
    }

    /**
     * Returns true if the given function holds for every item in
     * the list, false otherwise
     */
    function all (fn, list) {
      return !list ||
        (fn(head(list)) && all(fn, tail(list)))
    }

    /**
     * Call every function in a list of functions with the same arguments
     *
     * This doesn't make any sense if we're doing pure functional because
     * it doesn't return anything. Hence, this is only really useful if the
     * functions being called have side-effects.
     */
    function applyEach (fnList, args) {
      if (fnList) {
        head(fnList).apply(null, args);

        applyEach(tail(fnList), args);
      }
    }

    /**
     * Reverse the order of a list
     */
    function reverseList (list) {
      // js re-implementation of 3rd solution from:
      //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
      function reverseInner (list, reversedAlready) {
        if (!list) {
          return reversedAlready
        }

        return reverseInner(tail(list), cons(head(list), reversedAlready))
      }

      return reverseInner(list, emptyList)
    }

    function first (test, list) {
      return list &&
        (test(head(list))
          ? head(list)
          : first(test, tail(list)))
    }




    /***/ }),
    /* 2 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isOfType; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return len; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isString; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defined; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return hasAllProperties; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __webpack_require__(1);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __webpack_require__(0);



    /**
     * This file defines some loosely associated syntactic sugar for
     * Javascript programming
     */

    /**
     * Returns true if the given candidate is of type T
     */
    function isOfType (T, maybeSomething) {
      return maybeSomething && maybeSomething.constructor === T
    }

    var len = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["c" /* attr */])('length');
    var isString = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(isOfType, String);

    /**
     * I don't like saying this:
     *
     *    foo !=== undefined
     *
     * because of the double-negative. I find this:
     *
     *    defined(foo)
     *
     * easier to read.
     */
    function defined (value) {
      return value !== undefined
    }

    /**
     * Returns true if object o has a key named like every property in
     * the properties array. Will give false if any are missing, or if o
     * is not an object.
     */
    function hasAllProperties (fieldList, o) {
      return (o instanceof Object) &&
        Object(__WEBPACK_IMPORTED_MODULE_0__lists__["a" /* all */])(function (field) {
          return (field in o)
        }, fieldList)
    }




    /***/ }),
    /* 3 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return NODE_OPENED; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return NODE_CLOSED; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return NODE_SWAP; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return NODE_DROP; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FAIL_EVENT; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return ROOT_NODE_FOUND; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return ROOT_PATH_FOUND; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return HTTP_START; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return STREAM_DATA; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return STREAM_END; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ABORTING; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return SAX_KEY; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return SAX_VALUE_OPEN; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return SAX_VALUE_CLOSE; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return errorReport; });
    /**
     * This file declares some constants to use as names for event types.
     */

    // the events which are never exported are kept as
    // the smallest possible representation, in numbers:
    var _S = 1;

    // fired whenever a new node starts in the JSON stream:
    var NODE_OPENED = _S++;

    // fired whenever a node closes in the JSON stream:
    var NODE_CLOSED = _S++;

    // called if a .node callback returns a value -
    var NODE_SWAP = _S++;
    var NODE_DROP = _S++;

    var FAIL_EVENT = 'fail';

    var ROOT_NODE_FOUND = _S++;
    var ROOT_PATH_FOUND = _S++;

    var HTTP_START = 'start';
    var STREAM_DATA = 'data';
    var STREAM_END = 'end';
    var ABORTING = _S++;

    // SAX events butchered from Clarinet
    var SAX_KEY = _S++;
    var SAX_VALUE_OPEN = _S++;
    var SAX_VALUE_CLOSE = _S++;

    function errorReport (statusCode, body, error) {
      try {
        var jsonBody = JSON.parse(body);
      } catch (e) { }

      return {
        statusCode: statusCode,
        body: body,
        jsonBody: jsonBody,
        thrown: error
      }
    }




    /***/ }),
    /* 4 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return namedNode; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return keyOf; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return nodeOf; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __webpack_require__(0);


    /**
     * Get a new key->node mapping
     *
     * @param {String|Number} key
     * @param {Object|Array|String|Number|null} node a value found in the json
     */
    function namedNode (key, node) {
      return {key: key, node: node}
    }

    /** get the key of a namedNode */
    var keyOf = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])('key');

    /** get the node from a namedNode */
    var nodeOf = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])('node');




    /***/ }),
    /* 5 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return oboe; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __webpack_require__(1);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __webpack_require__(0);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(2);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaults__ = __webpack_require__(8);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__wire__ = __webpack_require__(9);






    // export public API
    function oboe (arg1) {
      // We use duck-typing to detect if the parameter given is a stream, with the
      // below list of parameters.
      // Unpipe and unshift would normally be present on a stream but this breaks
      // compatibility with Request streams.
      // See https://github.com/jimhigson/oboe.js/issues/65

      var nodeStreamMethodNames = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["h" /* list */])('resume', 'pause', 'pipe');
      var isStream = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(
        __WEBPACK_IMPORTED_MODULE_2__util__["b" /* hasAllProperties */],
        nodeStreamMethodNames
      );

      if (arg1) {
        if (isStream(arg1) || Object(__WEBPACK_IMPORTED_MODULE_2__util__["d" /* isString */])(arg1)) {
          //  simple version for GETs. Signature is:
          //    oboe( url )
          //  or, under node:
          //    oboe( readableStream )
          return Object(__WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* applyDefaults */])(
            __WEBPACK_IMPORTED_MODULE_4__wire__["a" /* wire */],
            arg1 // url
          )
        } else {
          // method signature is:
          //    oboe({method:m, url:u, body:b, headers:{...}})

          return Object(__WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* applyDefaults */])(
            __WEBPACK_IMPORTED_MODULE_4__wire__["a" /* wire */],
            arg1.url,
            arg1.method,
            arg1.body,
            arg1.headers,
            arg1.withCredentials,
            arg1.cached
          )
        }
      } else {
        // wire up a no-AJAX, no-stream Oboe. Will have to have content
        // fed in externally and using .emit.
        return Object(__WEBPACK_IMPORTED_MODULE_4__wire__["a" /* wire */])()
      }
    }

    /* oboe.drop is a special value. If a node callback returns this value the
       parsed node is deleted from the JSON
     */
    oboe.drop = function () {
      return oboe.drop
    };




    /***/ }),
    /* 6 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return incrementalContentBuilder; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ROOT_PATH; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __webpack_require__(3);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascent__ = __webpack_require__(4);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(2);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lists__ = __webpack_require__(1);





    /**
     * This file provides various listeners which can be used to build up
     * a changing ascent based on the callbacks provided by Clarinet. It listens
     * to the low-level events from Clarinet and emits higher-level ones.
     *
     * The building up is stateless so to track a JSON file
     * ascentManager.js is required to store the ascent state
     * between calls.
     */

    /**
     * A special value to use in the path list to represent the path 'to' a root
     * object (which doesn't really have any path). This prevents the need for
     * special-casing detection of the root object and allows it to be treated
     * like any other object. We might think of this as being similar to the
     * 'unnamed root' domain ".", eg if I go to
     * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates
     * the unnamed root of the DNS.
     *
     * This is kept as an object to take advantage that in Javascript's OO objects
     * are guaranteed to be distinct, therefore no other object can possibly clash
     * with this one. Strings, numbers etc provide no such guarantee.
     **/
    var ROOT_PATH = {};

    /**
     * Create a new set of handlers for clarinet's events, bound to the emit
     * function given.
     */
    function incrementalContentBuilder (oboeBus) {
      var emitNodeOpened = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["f" /* NODE_OPENED */]).emit;
      var emitNodeClosed = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["d" /* NODE_CLOSED */]).emit;
      var emitRootOpened = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["i" /* ROOT_PATH_FOUND */]).emit;
      var emitRootClosed = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["h" /* ROOT_NODE_FOUND */]).emit;

      function arrayIndicesAreKeys (possiblyInconsistentAscent, newDeepestNode) {
        /* for values in arrays we aren't pre-warned of the coming paths
             (Clarinet gives no call to onkey like it does for values in objects)
             so if we are in an array we need to create this path ourselves. The
             key will be len(parentNode) because array keys are always sequential
             numbers. */

        var parentNode = Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["c" /* nodeOf */])(Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(possiblyInconsistentAscent));

        return Object(__WEBPACK_IMPORTED_MODULE_2__util__["c" /* isOfType */])(Array, parentNode)
          ? keyFound(possiblyInconsistentAscent,
            Object(__WEBPACK_IMPORTED_MODULE_2__util__["e" /* len */])(parentNode),
            newDeepestNode
          )
          // nothing needed, return unchanged
          : possiblyInconsistentAscent
      }

      function nodeOpened (ascent, newDeepestNode) {
        if (!ascent) {
          // we discovered the root node,
          emitRootOpened(newDeepestNode);

          return keyFound(ascent, ROOT_PATH, newDeepestNode)
        }

        // we discovered a non-root node

        var arrayConsistentAscent = arrayIndicesAreKeys(ascent, newDeepestNode);
        var ancestorBranches = Object(__WEBPACK_IMPORTED_MODULE_3__lists__["l" /* tail */])(arrayConsistentAscent);
        var previouslyUnmappedName = Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["a" /* keyOf */])(Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(arrayConsistentAscent));

        appendBuiltContent(
          ancestorBranches,
          previouslyUnmappedName,
          newDeepestNode
        );

        return Object(__WEBPACK_IMPORTED_MODULE_3__lists__["d" /* cons */])(
          Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["b" /* namedNode */])(previouslyUnmappedName, newDeepestNode),
          ancestorBranches
        )
      }

      /**
        * Add a new value to the object we are building up to represent the
        * parsed JSON
        */
      function appendBuiltContent (ancestorBranches, key, node) {
        Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["c" /* nodeOf */])(Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(ancestorBranches))[key] = node;
      }

      /**
        * For when we find a new key in the json.
        *
        * @param {String|Number|Object} newDeepestName the key. If we are in an
        *    array will be a number, otherwise a string. May take the special
        *    value ROOT_PATH if the root node has just been found
        *
        * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode]
        *    usually this won't be known so can be undefined. Can't use null
        *    to represent unknown because null is a valid value in JSON
        **/
      function keyFound (ascent, newDeepestName, maybeNewDeepestNode) {
        if (ascent) { // if not root
          // If we have the key but (unless adding to an array) no known value
          // yet. Put that key in the output but against no defined value:
          appendBuiltContent(ascent, newDeepestName, maybeNewDeepestNode);
        }

        var ascentWithNewPath = Object(__WEBPACK_IMPORTED_MODULE_3__lists__["d" /* cons */])(
          Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["b" /* namedNode */])(newDeepestName,
            maybeNewDeepestNode),
          ascent
        );

        emitNodeOpened(ascentWithNewPath);

        return ascentWithNewPath
      }

      /**
        * For when the current node ends.
        */
      function nodeClosed (ascent) {
        emitNodeClosed(ascent);

        return Object(__WEBPACK_IMPORTED_MODULE_3__lists__["l" /* tail */])(ascent) ||
          // If there are no nodes left in the ascent the root node
          // just closed. Emit a special event for this:
          emitRootClosed(Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["c" /* nodeOf */])(Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(ascent)))
      }

      var contentBuilderHandlers = {};
      contentBuilderHandlers[__WEBPACK_IMPORTED_MODULE_0__events__["l" /* SAX_VALUE_OPEN */]] = nodeOpened;
      contentBuilderHandlers[__WEBPACK_IMPORTED_MODULE_0__events__["k" /* SAX_VALUE_CLOSE */]] = nodeClosed;
      contentBuilderHandlers[__WEBPACK_IMPORTED_MODULE_0__events__["j" /* SAX_KEY */]] = keyFound;
      return contentBuilderHandlers
    }




    /***/ }),
    /* 7 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__publicApi__ = __webpack_require__(5);


    /* harmony default export */ __webpack_exports__["default"] = (__WEBPACK_IMPORTED_MODULE_0__publicApi__["a" /* oboe */]);


    /***/ }),
    /* 8 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return applyDefaults; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(2);


    function applyDefaults (passthrough, url, httpMethodName, body, headers, withCredentials, cached) {
      headers = headers
        // Shallow-clone the headers array. This allows it to be
        // modified without side effects to the caller. We don't
        // want to change objects that the user passes in.
        ? JSON.parse(JSON.stringify(headers))
        : {};

      if (body) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* isString */])(body)) {
          // If the body is not a string, stringify it. This allows objects to
          // be given which will be sent as JSON.
          body = JSON.stringify(body);

          // Default Content-Type to JSON unless given otherwise.
          headers['Content-Type'] = headers['Content-Type'] || 'application/json';
        }
        headers['Content-Length'] = headers['Content-Length'] || body.length;
      } else {
        body = null;
      }

      // support cache busting like jQuery.ajax({cache:false})
      function modifiedUrl (baseUrl, cached) {
        if (cached === false) {
          if (baseUrl.indexOf('?') === -1) {
            baseUrl += '?';
          } else {
            baseUrl += '&';
          }

          baseUrl += '_=' + new Date().getTime();
        }
        return baseUrl
      }

      return passthrough(httpMethodName || 'GET', modifiedUrl(url, cached), body, headers, withCredentials || false)
    }




    /***/ }),
    /* 9 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return wire; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pubSub__ = __webpack_require__(10);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascentManager__ = __webpack_require__(12);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__incrementalContentBuilder__ = __webpack_require__(6);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__patternAdapter__ = __webpack_require__(13);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__jsonPath__ = __webpack_require__(14);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__instanceApi__ = __webpack_require__(16);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__libs_clarinet__ = __webpack_require__(17);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__streamingHttp_node__ = __webpack_require__(18);










    /**
     * This file sits just behind the API which is used to attain a new
     * Oboe instance. It creates the new components that are required
     * and introduces them to each other.
     */

    function wire (httpMethodName, contentSource, body, headers, withCredentials) {
      var oboeBus = Object(__WEBPACK_IMPORTED_MODULE_0__pubSub__["a" /* pubSub */])();

      // Wire the input stream in if we are given a content source.
      // This will usually be the case. If not, the instance created
      // will have to be passed content from an external source.

      if (contentSource) {
        Object(__WEBPACK_IMPORTED_MODULE_7__streamingHttp_node__["b" /* streamingHttp */])(oboeBus,
          Object(__WEBPACK_IMPORTED_MODULE_7__streamingHttp_node__["a" /* httpTransport */])(),
          httpMethodName,
          contentSource,
          body,
          headers,
          withCredentials
        );
      }

      Object(__WEBPACK_IMPORTED_MODULE_6__libs_clarinet__["a" /* clarinet */])(oboeBus);

      Object(__WEBPACK_IMPORTED_MODULE_1__ascentManager__["a" /* ascentManager */])(oboeBus, Object(__WEBPACK_IMPORTED_MODULE_2__incrementalContentBuilder__["b" /* incrementalContentBuilder */])(oboeBus));

      Object(__WEBPACK_IMPORTED_MODULE_3__patternAdapter__["a" /* patternAdapter */])(oboeBus, __WEBPACK_IMPORTED_MODULE_4__jsonPath__["a" /* jsonPathCompiler */]);

      return Object(__WEBPACK_IMPORTED_MODULE_5__instanceApi__["a" /* instanceApi */])(oboeBus, contentSource)
    }




    /***/ }),
    /* 10 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return pubSub; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__singleEventPubSub__ = __webpack_require__(11);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __webpack_require__(0);



    /**
     * pubSub is a curried interface for listening to and emitting
     * events.
     *
     * If we get a bus:
     *
     *    var bus = pubSub();
     *
     * We can listen to event 'foo' like:
     *
     *    bus('foo').on(myCallback)
     *
     * And emit event foo like:
     *
     *    bus('foo').emit()
     *
     * or, with a parameter:
     *
     *    bus('foo').emit('bar')
     *
     * All functions can be cached and don't need to be
     * bound. Ie:
     *
     *    var fooEmitter = bus('foo').emit
     *    fooEmitter('bar');  // emit an event
     *    fooEmitter('baz');  // emit another
     *
     * There's also an uncurried[1] shortcut for .emit and .on:
     *
     *    bus.on('foo', callback)
     *    bus.emit('foo', 'bar')
     *
     * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
     */
    function pubSub () {
      var singles = {};
      var newListener = newSingle('newListener');
      var removeListener = newSingle('removeListener');

      function newSingle (eventName) {
        singles[eventName] = Object(__WEBPACK_IMPORTED_MODULE_0__singleEventPubSub__["a" /* singleEventPubSub */])(
          eventName,
          newListener,
          removeListener
        );
        return singles[eventName]
      }

      /** pubSub instances are functions */
      function pubSubInstance (eventName) {
        return singles[eventName] || newSingle(eventName)
      }

      // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
      ['emit', 'on', 'un'].forEach(function (methodName) {
        pubSubInstance[methodName] = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["k" /* varArgs */])(function (eventName, parameters) {
          Object(__WEBPACK_IMPORTED_MODULE_1__functional__["b" /* apply */])(parameters, pubSubInstance(eventName)[methodName]);
        });
      });

      return pubSubInstance
    }




    /***/ }),
    /* 11 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return singleEventPubSub; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __webpack_require__(1);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(2);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functional__ = __webpack_require__(0);




    /**
     * A pub/sub which is responsible for a single event type. A
     * multi-event type event bus is created by pubSub by collecting
     * several of these.
     *
     * @param {String} eventType
     *    the name of the events managed by this singleEventPubSub
     * @param {singleEventPubSub} [newListener]
     *    place to notify of new listeners
     * @param {singleEventPubSub} [removeListener]
     *    place to notify of when listeners are removed
     */
    function singleEventPubSub (eventType, newListener, removeListener) {
      /** we are optimised for emitting events over firing them.
       *  As well as the tuple list which stores event ids and
       *  listeners there is a list with just the listeners which
       *  can be iterated more quickly when we are emitting
       */
      var listenerTupleList,
        listenerList;

      function hasId (id) {
        return function (tuple) {
          return tuple.id === id
        }
      }

      return {

        /**
         * @param {Function} listener
         * @param {*} listenerId
         *    an id that this listener can later by removed by.
         *    Can be of any type, to be compared to other ids using ==
         */
        on: function (listener, listenerId) {
          var tuple = {
            listener: listener,
            id: listenerId || listener // when no id is given use the
            // listener function as the id
          };

          if (newListener) {
            newListener.emit(eventType, listener, tuple.id);
          }

          listenerTupleList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["d" /* cons */])(tuple, listenerTupleList);
          listenerList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["d" /* cons */])(listener, listenerList);

          return this // chaining
        },

        emit: function () {
          Object(__WEBPACK_IMPORTED_MODULE_0__lists__["b" /* applyEach */])(listenerList, arguments);
        },

        un: function (listenerId) {
          var removed;

          listenerTupleList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["m" /* without */])(
            listenerTupleList,
            hasId(listenerId),
            function (tuple) {
              removed = tuple;
            }
          );

          if (removed) {
            listenerList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["m" /* without */])(listenerList, function (listener) {
              return listener === removed.listener
            });

            if (removeListener) {
              removeListener.emit(eventType, removed.listener, removed.id);
            }
          }
        },

        listeners: function () {
          // differs from Node EventEmitter: returns list, not array
          return listenerList
        },

        hasListener: function (listenerId) {
          var test = listenerId ? hasId(listenerId) : __WEBPACK_IMPORTED_MODULE_2__functional__["a" /* always */];

          return Object(__WEBPACK_IMPORTED_MODULE_1__util__["a" /* defined */])(Object(__WEBPACK_IMPORTED_MODULE_0__lists__["e" /* first */])(test, listenerTupleList))
        }
      }
    }




    /***/ }),
    /* 12 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ascentManager; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascent__ = __webpack_require__(4);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __webpack_require__(3);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lists__ = __webpack_require__(1);



    /**
     * A bridge used to assign stateless functions to listen to clarinet.
     *
     * As well as the parameter from clarinet, each callback will also be passed
     * the result of the last callback.
     *
     * This may also be used to clear all listeners by assigning zero handlers:
     *
     *    ascentManager( clarinet, {} )
     */
    function ascentManager (oboeBus, handlers) {

      var listenerId = {};
      var ascent;

      function stateAfter (handler) {
        return function (param) {
          ascent = handler(ascent, param);
        }
      }

      for (var eventName in handlers) {
        oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
      }

      oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["g" /* NODE_SWAP */]).on(function (newNode) {
        var oldHead = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ascent);
        var key = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["a" /* keyOf */])(oldHead);
        var ancestors = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["l" /* tail */])(ascent);
        var parentNode;

        if (ancestors) {
          parentNode = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["c" /* nodeOf */])(Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ancestors));
          parentNode[key] = newNode;
        }
      });

      oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["e" /* NODE_DROP */]).on(function () {
        var oldHead = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ascent);
        var key = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["a" /* keyOf */])(oldHead);
        var ancestors = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["l" /* tail */])(ascent);
        var parentNode;

        if (ancestors) {
          parentNode = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["c" /* nodeOf */])(Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ancestors));

          delete parentNode[key];
        }
      });

      oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* ABORTING */]).on(function () {
        for (var eventName in handlers) {
          oboeBus(eventName).un(listenerId);
        }
      });
    }




    /***/ }),
    /* 13 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return patternAdapter; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __webpack_require__(3);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lists__ = __webpack_require__(1);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ascent__ = __webpack_require__(4);




    /**
     *  The pattern adaptor listens for newListener and removeListener
     *  events. When patterns are added or removed it compiles the JSONPath
     *  and wires them up.
     *
     *  When nodes and paths are found it emits the fully-qualified match
     *  events with parameters ready to ship to the outside world
     */

    function patternAdapter (oboeBus, jsonPathCompiler) {
      var predicateEventMap = {
        node: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["d" /* NODE_CLOSED */]),
        path: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["f" /* NODE_OPENED */])
      };

      function emitMatchingNode (emitMatch, node, ascent) {
        /*
             We're now calling to the outside world where Lisp-style
             lists will not be familiar. Convert to standard arrays.

             Also, reverse the order because it is more common to
             list paths "root to leaf" than "leaf to root"  */
        var descent = Object(__WEBPACK_IMPORTED_MODULE_1__lists__["k" /* reverseList */])(ascent);

        emitMatch(
          node,

          // To make a path, strip off the last item which is the special
          // ROOT_PATH token for the 'path' to the root node
          Object(__WEBPACK_IMPORTED_MODULE_1__lists__["i" /* listAsArray */])(Object(__WEBPACK_IMPORTED_MODULE_1__lists__["l" /* tail */])(Object(__WEBPACK_IMPORTED_MODULE_1__lists__["j" /* map */])(__WEBPACK_IMPORTED_MODULE_2__ascent__["a" /* keyOf */], descent))), // path
          Object(__WEBPACK_IMPORTED_MODULE_1__lists__["i" /* listAsArray */])(Object(__WEBPACK_IMPORTED_MODULE_1__lists__["j" /* map */])(__WEBPACK_IMPORTED_MODULE_2__ascent__["c" /* nodeOf */], descent)) // ancestors
        );
      }

      /*
        * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if
        * matching the specified pattern, propagate to pattern-match events such as
        * oboeBus('node:!')
        *
        *
        *
        * @param {Function} predicateEvent
        *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
        * @param {Function} compiledJsonPath
        */
      function addUnderlyingListener (fullEventName, predicateEvent, compiledJsonPath) {
        var emitMatch = oboeBus(fullEventName).emit;

        predicateEvent.on(function (ascent) {
          var maybeMatchingMapping = compiledJsonPath(ascent);

          /* Possible values for maybeMatchingMapping are now:

              false:
              we did not match

              an object/array/string/number/null:
              we matched and have the node that matched.
              Because nulls are valid json values this can be null.

              undefined:
              we matched but don't have the matching node yet.
              ie, we know there is an upcoming node that matches but we
              can't say anything else about it.
              */
          if (maybeMatchingMapping !== false) {
            emitMatchingNode(
              emitMatch,
              Object(__WEBPACK_IMPORTED_MODULE_2__ascent__["c" /* nodeOf */])(maybeMatchingMapping),
              ascent
            );
          }
        }, fullEventName);

        oboeBus('removeListener').on(function (removedEventName) {
          // if the fully qualified match event listener is later removed, clean up
          // by removing the underlying listener if it was the last using that pattern:

          if (removedEventName === fullEventName) {
            if (!oboeBus(removedEventName).listeners()) {
              predicateEvent.un(fullEventName);
            }
          }
        });
      }

      oboeBus('newListener').on(function (fullEventName) {
        var match = /(node|path):(.*)/.exec(fullEventName);

        if (match) {
          var predicateEvent = predicateEventMap[match[1]];

          if (!predicateEvent.hasListener(fullEventName)) {
            addUnderlyingListener(
              fullEventName,
              predicateEvent,
              jsonPathCompiler(match[2])
            );
          }
        }
      });
    }




    /***/ }),
    /* 14 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return jsonPathCompiler; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __webpack_require__(0);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lists__ = __webpack_require__(1);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ascent__ = __webpack_require__(4);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util__ = __webpack_require__(2);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__incrementalContentBuilder__ = __webpack_require__(6);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__jsonPathSyntax__ = __webpack_require__(15);







    /**
     * The jsonPath evaluator compiler used for Oboe.js.
     *
     * One function is exposed. This function takes a String JSONPath spec and
     * returns a function to test candidate ascents for matches.
     *
     *  String jsonPath -> (List ascent) -> Boolean|Object
     *
     * This file is coded in a pure functional style. That is, no function has
     * side effects, every function evaluates to the same value for the same
     * arguments and no variables are reassigned.
     */
    // the call to jsonPathSyntax injects the token syntaxes that are needed
    // inside the compiler
    var jsonPathCompiler = Object(__WEBPACK_IMPORTED_MODULE_5__jsonPathSyntax__["a" /* jsonPathSyntax */])(function (pathNodeSyntax,
      doubleDotSyntax,
      dotSyntax,
      bangSyntax,
      emptySyntax) {
      var CAPTURING_INDEX = 1;
      var NAME_INDEX = 2;
      var FIELD_LIST_INDEX = 3;

      var headKey = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(__WEBPACK_IMPORTED_MODULE_2__ascent__["a" /* keyOf */], __WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */]);
      var headNode = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(__WEBPACK_IMPORTED_MODULE_2__ascent__["c" /* nodeOf */], __WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */]);

      /**
        * Create an evaluator function for a named path node, expressed in the
        * JSONPath like:
        *    foo
        *    ["bar"]
        *    [2]
        */
      function nameClause (previousExpr, detection) {
        var name = detection[NAME_INDEX];

        var matchesName = (!name || name === '*')
          ? __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]
          : function (ascent) { return String(headKey(ascent)) === name };

        return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(matchesName, previousExpr)
      }

      /**
        * Create an evaluator function for a a duck-typed node, expressed like:
        *
        *    {spin, taste, colour}
        *    .particle{spin, taste, colour}
        *    *{spin, taste, colour}
        */
      function duckTypeClause (previousExpr, detection) {
        var fieldListStr = detection[FIELD_LIST_INDEX];

        if (!fieldListStr) { return previousExpr } // don't wrap at all, return given expr as-is

        var hasAllrequiredFields = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["j" /* partialComplete */])(
          __WEBPACK_IMPORTED_MODULE_3__util__["b" /* hasAllProperties */],
          Object(__WEBPACK_IMPORTED_MODULE_1__lists__["c" /* arrayAsList */])(fieldListStr.split(/\W+/))
        );

        var isMatch = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(
          hasAllrequiredFields,
          headNode
        );

        return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(isMatch, previousExpr)
      }

      /**
        * Expression for $, returns the evaluator function
        */
      function capture (previousExpr, detection) {
        // extract meaning from the detection
        var capturing = !!detection[CAPTURING_INDEX];

        if (!capturing) { return previousExpr } // don't wrap at all, return given expr as-is

        return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(previousExpr, __WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */])
      }

      /**
        * Create an evaluator function that moves onto the next item on the
        * lists. This function is the place where the logic to move up a
        * level in the ascent exists.
        *
        * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
        */
      function skip1 (previousExpr) {
        if (previousExpr === __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]) {
          /* If there is no previous expression this consume command
                is at the start of the jsonPath.
                Since JSONPath specifies what we'd like to find but not
                necessarily everything leading down to it, when running
                out of JSONPath to check against we default to true */
          return __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]
        }

        /** return true if the ascent we have contains only the JSON root,
           *  false otherwise
           */
        function notAtRoot (ascent) {
          return headKey(ascent) !== __WEBPACK_IMPORTED_MODULE_4__incrementalContentBuilder__["a" /* ROOT_PATH */]
        }

        return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(
          /* If we're already at the root but there are more
                      expressions to satisfy, can't consume any more. No match.

                      This check is why none of the other exprs have to be able
                      to handle empty lists; skip1 is the only evaluator that
                      moves onto the next token and it refuses to do so once it
                      reaches the last item in the list. */
          notAtRoot,

          /* We are not at the root of the ascent yet.
                      Move to the next level of the ascent by handing only
                      the tail to the previous expression */
          Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(previousExpr, __WEBPACK_IMPORTED_MODULE_1__lists__["l" /* tail */])
        )
      }

      /**
        * Create an evaluator function for the .. (double dot) token. Consumes
        * zero or more levels of the ascent, the fewest that are required to find
        * a match when given to previousExpr.
        */
      function skipMany (previousExpr) {
        if (previousExpr === __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]) {
          /* If there is no previous expression this consume command
                is at the start of the jsonPath.
                Since JSONPath specifies what we'd like to find but not
                necessarily everything leading down to it, when running
                out of JSONPath to check against we default to true */
          return __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]
        }

        // In JSONPath .. is equivalent to !.. so if .. reaches the root
        // the match has succeeded. Ie, we might write ..foo or !..foo
        // and both should match identically.
        var terminalCaseWhenArrivingAtRoot = rootExpr();
        var terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr;
        var recursiveCase = skip1(function (ascent) {
          return cases(ascent)
        });

        var cases = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["h" /* lazyUnion */])(
          terminalCaseWhenArrivingAtRoot
          , terminalCaseWhenPreviousExpressionIsSatisfied
          , recursiveCase
        );

        return cases
      }

      /**
        * Generate an evaluator for ! - matches only the root element of the json
        * and ignores any previous expressions since nothing may precede !.
        */
      function rootExpr () {
        return function (ascent) {
          return headKey(ascent) === __WEBPACK_IMPORTED_MODULE_4__incrementalContentBuilder__["a" /* ROOT_PATH */]
        }
      }

      /**
        * Generate a statement wrapper to sit around the outermost
        * clause evaluator.
        *
        * Handles the case where the capturing is implicit because the JSONPath
        * did not contain a '$' by returning the last node.
        */
      function statementExpr (lastClause) {
        return function (ascent) {
          // kick off the evaluation by passing through to the last clause
          var exprMatch = lastClause(ascent);

          return exprMatch === true ? Object(__WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */])(ascent) : exprMatch
        }
      }

      /**
        * For when a token has been found in the JSONPath input.
        * Compiles the parser for that token and returns in combination with the
        * parser already generated.
        *
        * @param {Function} exprs  a list of the clause evaluator generators for
        *                          the token that was found
        * @param {Function} parserGeneratedSoFar the parser already found
        * @param {Array} detection the match given by the regex engine when
        *                          the feature was found
        */
      function expressionsReader (exprs, parserGeneratedSoFar, detection) {
        // if exprs is zero-length foldR will pass back the
        // parserGeneratedSoFar as-is so we don't need to treat
        // this as a special case

        return Object(__WEBPACK_IMPORTED_MODULE_1__lists__["f" /* foldR */])(
          function (parserGeneratedSoFar, expr) {
            return expr(parserGeneratedSoFar, detection)
          },
          parserGeneratedSoFar,
          exprs
        )
      }

      /**
        *  If jsonPath matches the given detector function, creates a function which
        *  evaluates against every clause in the clauseEvaluatorGenerators. The
        *  created function is propagated to the onSuccess function, along with
        *  the remaining unparsed JSONPath substring.
        *
        *  The intended use is to create a clauseMatcher by filling in
        *  the first two arguments, thus providing a function that knows
        *  some syntax to match and what kind of generator to create if it
        *  finds it. The parameter list once completed is:
        *
        *    (jsonPath, parserGeneratedSoFar, onSuccess)
        *
        *  onSuccess may be compileJsonPathToFunction, to recursively continue
        *  parsing after finding a match or returnFoundParser to stop here.
        */
      function generateClauseReaderIfTokenFound (

        tokenDetector, clauseEvaluatorGenerators,

        jsonPath, parserGeneratedSoFar, onSuccess) {
        var detected = tokenDetector(jsonPath);

        if (detected) {
          var compiledParser = expressionsReader(
            clauseEvaluatorGenerators,
            parserGeneratedSoFar,
            detected
          );

          var remainingUnparsedJsonPath = jsonPath.substr(Object(__WEBPACK_IMPORTED_MODULE_3__util__["e" /* len */])(detected[0]));

          return onSuccess(remainingUnparsedJsonPath, compiledParser)
        }
      }

      /**
        * Partially completes generateClauseReaderIfTokenFound above.
        */
      function clauseMatcher (tokenDetector, exprs) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["j" /* partialComplete */])(
          generateClauseReaderIfTokenFound,
          tokenDetector,
          exprs
        )
      }

      /**
        * clauseForJsonPath is a function which attempts to match against
        * several clause matchers in order until one matches. If non match the
        * jsonPath expression is invalid and an error is thrown.
        *
        * The parameter list is the same as a single clauseMatcher:
        *
        *    (jsonPath, parserGeneratedSoFar, onSuccess)
        */
      var clauseForJsonPath = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["h" /* lazyUnion */])(

        clauseMatcher(pathNodeSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(capture,
          duckTypeClause,
          nameClause,
          skip1))

        , clauseMatcher(doubleDotSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(skipMany))

        // dot is a separator only (like whitespace in other languages) but
        // rather than make it a special case, use an empty list of
        // expressions when this token is found
        , clauseMatcher(dotSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])())

        , clauseMatcher(bangSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(capture,
          rootExpr))

        , clauseMatcher(emptySyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(statementExpr))

        , function (jsonPath) {
          throw Error('"' + jsonPath + '" could not be tokenised')
        }
      );

      /**
        * One of two possible values for the onSuccess argument of
        * generateClauseReaderIfTokenFound.
        *
        * When this function is used, generateClauseReaderIfTokenFound simply
        * returns the compiledParser that it made, regardless of if there is
        * any remaining jsonPath to be compiled.
        */
      function returnFoundParser (_remainingJsonPath, compiledParser) {
        return compiledParser
      }

      /**
        * Recursively compile a JSONPath expression.
        *
        * This function serves as one of two possible values for the onSuccess
        * argument of generateClauseReaderIfTokenFound, meaning continue to
        * recursively compile. Otherwise, returnFoundParser is given and
        * compilation terminates.
        */
      function compileJsonPathToFunction (uncompiledJsonPath,
        parserGeneratedSoFar) {
        /**
           * On finding a match, if there is remaining text to be compiled
           * we want to either continue parsing using a recursive call to
           * compileJsonPathToFunction. Otherwise, we want to stop and return
           * the parser that we have found so far.
           */
        var onFind = uncompiledJsonPath
          ? compileJsonPathToFunction
          : returnFoundParser;

        return clauseForJsonPath(
          uncompiledJsonPath,
          parserGeneratedSoFar,
          onFind
        )
      }

      /**
        * This is the function that we expose to the rest of the library.
        */
      return function (jsonPath) {
        try {
          // Kick off the recursive parsing of the jsonPath
          return compileJsonPathToFunction(jsonPath, __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */])
        } catch (e) {
          throw Error('Could not compile "' + jsonPath +
            '" because ' + e.message
          )
        }
      }
    });




    /***/ }),
    /* 15 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return jsonPathSyntax; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __webpack_require__(0);


    var jsonPathSyntax = (function () {
      /**
      * Export a regular expression as a simple function by exposing just
      * the Regex#exec. This allows regex tests to be used under the same
      * interface as differently implemented tests, or for a user of the
      * tests to not concern themselves with their implementation as regular
      * expressions.
      *
      * This could also be expressed point-free as:
      *   Function.prototype.bind.bind(RegExp.prototype.exec),
      *
      * But that's far too confusing! (and not even smaller once minified
      * and gzipped)
      */
      var regexDescriptor = function regexDescriptor (regex) {
        return regex.exec.bind(regex)
      };

      /**
      * Join several regular expressions and express as a function.
      * This allows the token patterns to reuse component regular expressions
      * instead of being expressed in full using huge and confusing regular
      * expressions.
      */
      var jsonPathClause = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["k" /* varArgs */])(function (componentRegexes) {
        // The regular expressions all start with ^ because we
        // only want to find matches at the start of the
        // JSONPath fragment we are inspecting
        componentRegexes.unshift(/^/);

        return regexDescriptor(
          RegExp(
            componentRegexes.map(Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])('source')).join('')
          )
        )
      });

      var possiblyCapturing = /(\$?)/;
      var namedNode = /([\w-_]+|\*)/;
      var namePlaceholder = /()/;
      var nodeInArrayNotation = /\["([^"]+)"\]/;
      var numberedNodeInArrayNotation = /\[(\d+|\*)\]/;
      var fieldList = /{([\w ]*?)}/;
      var optionalFieldList = /(?:{([\w ]*?)})?/;

      //   foo or *
      var jsonPathNamedNodeInObjectNotation = jsonPathClause(
        possiblyCapturing,
        namedNode,
        optionalFieldList
      );

      //   ["foo"]
      var jsonPathNamedNodeInArrayNotation = jsonPathClause(
        possiblyCapturing,
        nodeInArrayNotation,
        optionalFieldList
      );

      //   [2] or [*]
      var jsonPathNumberedNodeInArrayNotation = jsonPathClause(
        possiblyCapturing,
        numberedNodeInArrayNotation,
        optionalFieldList
      );

      //   {a b c}
      var jsonPathPureDuckTyping = jsonPathClause(
        possiblyCapturing,
        namePlaceholder,
        fieldList
      );

      //   ..
      var jsonPathDoubleDot = jsonPathClause(/\.\./);

      //   .
      var jsonPathDot = jsonPathClause(/\./);

      //   !
      var jsonPathBang = jsonPathClause(
        possiblyCapturing,
        /!/
      );

      //   nada!
      var emptyString = jsonPathClause(/$/);

      /* We export only a single function. When called, this function injects
          into another function the descriptors from above.
        */
      return function (fn) {
        return fn(
          Object(__WEBPACK_IMPORTED_MODULE_0__functional__["h" /* lazyUnion */])(
            jsonPathNamedNodeInObjectNotation
            , jsonPathNamedNodeInArrayNotation
            , jsonPathNumberedNodeInArrayNotation
            , jsonPathPureDuckTyping
          )
          , jsonPathDoubleDot
          , jsonPathDot
          , jsonPathBang
          , emptyString
        )
      }
    }());




    /***/ }),
    /* 16 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return instanceApi; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __webpack_require__(3);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __webpack_require__(0);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(2);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__publicApi__ = __webpack_require__(5);





    /**
     * The instance API is the thing that is returned when oboe() is called.
     * it allows:
     *
     *    - listeners for various events to be added and removed
     *    - the http response header/headers to be read
     */
    function instanceApi (oboeBus, contentSource) {
      var oboeApi;
      var fullyQualifiedNamePattern = /^(node|path):./;
      var rootNodeFinishedEvent = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["h" /* ROOT_NODE_FOUND */]);
      var emitNodeDrop = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["e" /* NODE_DROP */]).emit;
      var emitNodeSwap = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["g" /* NODE_SWAP */]).emit;

      /**
           * Add any kind of listener that the instance api exposes
           */
      var addListener = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["k" /* varArgs */])(function (eventId, parameters) {
        if (oboeApi[eventId]) {
          // for events added as .on(event, callback), if there is a
          // .event() equivalent with special behaviour , pass through
          // to that:
          Object(__WEBPACK_IMPORTED_MODULE_1__functional__["b" /* apply */])(parameters, oboeApi[eventId]);
        } else {
          // we have a standard Node.js EventEmitter 2-argument call.
          // The first parameter is the listener.
          var event = oboeBus(eventId);
          var listener = parameters[0];

          if (fullyQualifiedNamePattern.test(eventId)) {
            // allow fully-qualified node/path listeners
            // to be added
            addForgettableCallback(event, wrapCallbackToSwapNodeIfSomethingReturned(listener));
          } else {
            // the event has no special handling, pass through
            // directly onto the event bus:
            event.on(listener);
          }
        }

        return oboeApi // chaining
      });

      /**
           * Remove any kind of listener that the instance api exposes
           */
      var removeListener = function (eventId, p2, p3) {
        if (eventId === 'done') {
          rootNodeFinishedEvent.un(p2);
        } else if (eventId === 'node' || eventId === 'path') {
          // allow removal of node and path
          oboeBus.un(eventId + ':' + p2, p3);
        } else {
          // we have a standard Node.js EventEmitter 2-argument call.
          // The second parameter is the listener. This may be a call
          // to remove a fully-qualified node/path listener but requires
          // no special handling
          var listener = p2;

          oboeBus(eventId).un(listener);
        }

        return oboeApi // chaining
      };

      /**
       * Add a callback, wrapped in a try/catch so as to not break the
       * execution of Oboe if an exception is thrown (fail events are
       * fired instead)
       *
       * The callback is used as the listener id so that it can later be
       * removed using .un(callback)
       */
      function addProtectedCallback (eventName, callback) {
        oboeBus(eventName).on(protectedCallback(callback), callback);
        return oboeApi // chaining
      }

      /**
       * Add a callback where, if .forget() is called during the callback's
       * execution, the callback will be de-registered
       */
      function addForgettableCallback (event, callback, listenerId) {
        // listenerId is optional and if not given, the original
        // callback will be used
        listenerId = listenerId || callback;

        var safeCallback = protectedCallback(callback);

        event.on(function () {
          var discard = false;

          oboeApi.forget = function () {
            discard = true;
          };

          Object(__WEBPACK_IMPORTED_MODULE_1__functional__["b" /* apply */])(arguments, safeCallback);

          delete oboeApi.forget;

          if (discard) {
            event.un(listenerId);
          }
        }, listenerId);

        return oboeApi // chaining
      }

      /**
       *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
       *  throw the error in another event loop
       */
      function protectedCallback (callback) {
        return function () {
          try {
            return callback.apply(oboeApi, arguments)
          } catch (e) {
            setTimeout(function () {
              throw new Error(e.message)
            });
          }
        }
      }

      /**
       * Return the fully qualified event for when a pattern matches
       * either a node or a path
       *
       * @param type {String} either 'node' or 'path'
       */
      function fullyQualifiedPatternMatchEvent (type, pattern) {
        return oboeBus(type + ':' + pattern)
      }

      function wrapCallbackToSwapNodeIfSomethingReturned (callback) {
        return function () {
          var returnValueFromCallback = callback.apply(this, arguments);

          if (Object(__WEBPACK_IMPORTED_MODULE_2__util__["a" /* defined */])(returnValueFromCallback)) {
            if (returnValueFromCallback === __WEBPACK_IMPORTED_MODULE_3__publicApi__["a" /* oboe */].drop) {
              emitNodeDrop();
            } else {
              emitNodeSwap(returnValueFromCallback);
            }
          }
        }
      }

      function addSingleNodeOrPathListener (eventId, pattern, callback) {
        var effectiveCallback;

        if (eventId === 'node') {
          effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
        } else {
          effectiveCallback = callback;
        }

        addForgettableCallback(
          fullyQualifiedPatternMatchEvent(eventId, pattern),
          effectiveCallback,
          callback
        );
      }

      /**
       * Add several listeners at a time, from a map
       */
      function addMultipleNodeOrPathListeners (eventId, listenerMap) {
        for (var pattern in listenerMap) {
          addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
        }
      }

      /**
       * implementation behind .onPath() and .onNode()
       */
      function addNodeOrPathListenerApi (eventId, jsonPathOrListenerMap, callback) {
        if (Object(__WEBPACK_IMPORTED_MODULE_2__util__["d" /* isString */])(jsonPathOrListenerMap)) {
          addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);
        } else {
          addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
        }

        return oboeApi // chaining
      }

      // some interface methods are only filled in after we receive
      // values and are noops before that:
      oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["i" /* ROOT_PATH_FOUND */]).on(function (rootNode) {
        oboeApi.root = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["f" /* functor */])(rootNode);
      });

      /**
       * When content starts make the headers readable through the
       * instance API
       */
      oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["c" /* HTTP_START */]).on(function (_statusCode, headers) {
        oboeApi.header = function (name) {
          return name ? headers[name]
            : headers
        };
      });

      /**
       * Construct and return the public API of the Oboe instance to be
       * returned to the calling application
       */
      oboeApi = {
        on: addListener,
        addListener: addListener,
        removeListener: removeListener,
        emit: oboeBus.emit,

        node: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addNodeOrPathListenerApi, 'node'),
        path: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addNodeOrPathListenerApi, 'path'),

        done: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addForgettableCallback, rootNodeFinishedEvent),
        start: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addProtectedCallback, __WEBPACK_IMPORTED_MODULE_0__events__["c" /* HTTP_START */]),

        // fail doesn't use protectedCallback because
        // could lead to non-terminating loops
        fail: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["b" /* FAIL_EVENT */]).on,

        // public api calling abort fires the ABORTING event
        abort: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["a" /* ABORTING */]).emit,

        // initially return nothing for header and root
        header: __WEBPACK_IMPORTED_MODULE_1__functional__["i" /* noop */],
        root: __WEBPACK_IMPORTED_MODULE_1__functional__["i" /* noop */],

        source: contentSource
      };

      return oboeApi
    }




    /***/ }),
    /* 17 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return clarinet; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __webpack_require__(3);


    /*
       This is a slightly hacked-up browser only version of clarinet

          *  some features removed to help keep browser Oboe under
             the 5k micro-library limit
          *  plug directly into event bus

       For the original go here:
          https://github.com/dscape/clarinet

       We receive the events:
          STREAM_DATA
          STREAM_END

       We emit the events:
          SAX_KEY
          SAX_VALUE_OPEN
          SAX_VALUE_CLOSE
          FAIL_EVENT
     */

    function clarinet (eventBus) {

      // shortcut some events on the bus
      var emitSaxKey = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["j" /* SAX_KEY */]).emit;
      var emitValueOpen = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["l" /* SAX_VALUE_OPEN */]).emit;
      var emitValueClose = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["k" /* SAX_VALUE_CLOSE */]).emit;
      var emitFail = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["b" /* FAIL_EVENT */]).emit;

      var MAX_BUFFER_LENGTH = 64 * 1024;
      var stringTokenPattern = /[\\"\n]/g;
      var _n = 0;

      // states
      var BEGIN = _n++;
      var VALUE = _n++; // general stuff
      var OPEN_OBJECT = _n++; // {
      var CLOSE_OBJECT = _n++; // }
      var OPEN_ARRAY = _n++; // [
      var CLOSE_ARRAY = _n++; // ]
      var STRING = _n++; // ""
      var OPEN_KEY = _n++; // , "a"
      var CLOSE_KEY = _n++; // :
      var TRUE = _n++; // r
      var TRUE2 = _n++; // u
      var TRUE3 = _n++; // e
      var FALSE = _n++; // a
      var FALSE2 = _n++; // l
      var FALSE3 = _n++; // s
      var FALSE4 = _n++; // e
      var NULL = _n++; // u
      var NULL2 = _n++; // l
      var NULL3 = _n++; // l
      var NUMBER_DECIMAL_POINT = _n++; // .
      var NUMBER_DIGIT = _n; // [0-9]

      // setup initial parser values
      var bufferCheckPosition = MAX_BUFFER_LENGTH;
      var latestError;
      var c;
      var p;
      var textNode;
      var numberNode = '';
      var slashed = false;
      var closed = false;
      var state = BEGIN;
      var stack = [];
      var unicodeS = null;
      var unicodeI = 0;
      var depth = 0;
      var position = 0;
      var column = 0; // mostly for error reporting
      var line = 1;

      function checkBufferLength () {
        var maxActual = 0;

        if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
          emitError('Max buffer length exceeded: textNode');
          maxActual = Math.max(maxActual, textNode.length);
        }
        if (numberNode.length > MAX_BUFFER_LENGTH) {
          emitError('Max buffer length exceeded: numberNode');
          maxActual = Math.max(maxActual, numberNode.length);
        }

        bufferCheckPosition = (MAX_BUFFER_LENGTH - maxActual) +
          position;
      }

      eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["m" /* STREAM_DATA */]).on(handleData);

      /* At the end of the http content close the clarinet
        This will provide an error if the total content provided was not
        valid json, ie if not all arrays, objects and Strings closed properly */
      eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["n" /* STREAM_END */]).on(handleStreamEnd);

      function emitError (errorString) {
        if (textNode !== undefined) {
          emitValueOpen(textNode);
          emitValueClose();
          textNode = undefined;
        }

        latestError = Error(errorString + '\nLn: ' + line +
          '\nCol: ' + column +
          '\nChr: ' + c);

        emitFail(Object(__WEBPACK_IMPORTED_MODULE_0__events__["o" /* errorReport */])(undefined, undefined, latestError));
      }

      function handleStreamEnd () {
        if (state === BEGIN) {
          // Handle the case where the stream closes without ever receiving
          // any input. This isn't an error - response bodies can be blank,
          // particularly for 204 http responses

          // Because of how Oboe is currently implemented, we parse a
          // completely empty stream as containing an empty object.
          // This is because Oboe's done event is only fired when the
          // root object of the JSON stream closes.

          // This should be decoupled and attached instead to the input stream
          // from the http (or whatever) resource ending.
          // If this decoupling could happen the SAX parser could simply emit
          // zero events on a completely empty input.
          emitValueOpen({});
          emitValueClose();

          closed = true;
          return
        }

        if (state !== VALUE || depth !== 0) { emitError('Unexpected end'); }

        if (textNode !== undefined) {
          emitValueOpen(textNode);
          emitValueClose();
          textNode = undefined;
        }

        closed = true;
      }

      function whitespace (c) {
        return c === '\r' || c === '\n' || c === ' ' || c === '\t'
      }

      function handleData (chunk) {
        // this used to throw the error but inside Oboe we will have already
        // gotten the error when it was emitted. The important thing is to
        // not continue with the parse.
        if (latestError) { return }

        if (closed) {
          return emitError('Cannot write after close')
        }

        var i = 0;
        c = chunk[0];

        while (c) {
          if (i > 0) {
            p = c;
          }
          c = chunk[i++];
          if (!c) break

          position++;
          if (c === '\n') {
            line++;
            column = 0;
          } else column++;
          switch (state) {
            case BEGIN:
              if (c === '{') state = OPEN_OBJECT;
              else if (c === '[') state = OPEN_ARRAY;
              else if (!whitespace(c)) { return emitError('Non-whitespace before {[.') }
              continue

            case OPEN_KEY:
            case OPEN_OBJECT:
              if (whitespace(c)) continue
              if (state === OPEN_KEY) stack.push(CLOSE_KEY);
              else {
                if (c === '}') {
                  emitValueOpen({});
                  emitValueClose();
                  state = stack.pop() || VALUE;
                  continue
                } else stack.push(CLOSE_OBJECT);
              }
              if (c === '"') { state = STRING; } else { return emitError('Malformed object key should start with " ') }
              continue

            case CLOSE_KEY:
            case CLOSE_OBJECT:
              if (whitespace(c)) continue

              if (c === ':') {
                if (state === CLOSE_OBJECT) {
                  stack.push(CLOSE_OBJECT);

                  if (textNode !== undefined) {
                    // was previously (in upstream Clarinet) one event
                    //  - object open came with the text of the first
                    emitValueOpen({});
                    emitSaxKey(textNode);
                    textNode = undefined;
                  }
                  depth++;
                } else {
                  if (textNode !== undefined) {
                    emitSaxKey(textNode);
                    textNode = undefined;
                  }
                }
                state = VALUE;
              } else if (c === '}') {
                if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
                }
                emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
              } else if (c === ',') {
                if (state === CLOSE_OBJECT) { stack.push(CLOSE_OBJECT); }
                if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
                }
                state = OPEN_KEY;
              } else { return emitError('Bad object') }
              continue

            case OPEN_ARRAY: // after an array there always a value
            case VALUE:
              if (whitespace(c)) continue
              if (state === OPEN_ARRAY) {
                emitValueOpen([]);
                depth++;
                state = VALUE;
                if (c === ']') {
                  emitValueClose();
                  depth--;
                  state = stack.pop() || VALUE;
                  continue
                } else {
                  stack.push(CLOSE_ARRAY);
                }
              }
              if (c === '"') state = STRING;
              else if (c === '{') state = OPEN_OBJECT;
              else if (c === '[') state = OPEN_ARRAY;
              else if (c === 't') state = TRUE;
              else if (c === 'f') state = FALSE;
              else if (c === 'n') state = NULL;
              else if (c === '-') { // keep and continue
                numberNode += c;
              } else if (c === '0') {
                numberNode += c;
                state = NUMBER_DIGIT;
              } else if ('123456789'.indexOf(c) !== -1) {
                numberNode += c;
                state = NUMBER_DIGIT;
              } else { return emitError('Bad value') }
              continue

            case CLOSE_ARRAY:
              if (c === ',') {
                stack.push(CLOSE_ARRAY);
                if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
                }
                state = VALUE;
              } else if (c === ']') {
                if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
                }
                emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
              } else if (whitespace(c)) { continue } else { return emitError('Bad array') }
              continue

            case STRING:
              if (textNode === undefined) {
                textNode = '';
              }

              // thanks thejh, this is an about 50% performance improvement.
              var starti = i - 1;

              // eslint-disable-next-line no-labels
              STRING_BIGLOOP: while (true) {
                // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
                while (unicodeI > 0) {
                  unicodeS += c;
                  c = chunk.charAt(i++);
                  if (unicodeI === 4) {
                    // TODO this might be slow? well, probably not used too often anyway
                    textNode += String.fromCharCode(parseInt(unicodeS, 16));
                    unicodeI = 0;
                    starti = i - 1;
                  } else {
                    unicodeI++;
                  }
                  // we can just break here: no stuff we skipped that still has to be sliced out or so
                  // eslint-disable-next-line no-labels
                  if (!c) break STRING_BIGLOOP
                }
                if (c === '"' && !slashed) {
                  state = stack.pop() || VALUE;
                  textNode += chunk.substring(starti, i - 1);
                  break
                }
                if (c === '\\' && !slashed) {
                  slashed = true;
                  textNode += chunk.substring(starti, i - 1);
                  c = chunk.charAt(i++);
                  if (!c) break
                }
                if (slashed) {
                  slashed = false;
                  if (c === 'n') { textNode += '\n'; } else if (c === 'r') { textNode += '\r'; } else if (c === 't') { textNode += '\t'; } else if (c === 'f') { textNode += '\f'; } else if (c === 'b') { textNode += '\b'; } else if (c === 'u') {
                    // \uxxxx. meh!
                    unicodeI = 1;
                    unicodeS = '';
                  } else {
                    textNode += c;
                  }
                  c = chunk.charAt(i++);
                  starti = i - 1;
                  if (!c) break
                  else continue
                }

                stringTokenPattern.lastIndex = i;
                var reResult = stringTokenPattern.exec(chunk);
                if (!reResult) {
                  i = chunk.length + 1;
                  textNode += chunk.substring(starti, i - 1);
                  break
                }
                i = reResult.index + 1;
                c = chunk.charAt(reResult.index);
                if (!c) {
                  textNode += chunk.substring(starti, i - 1);
                  break
                }
              }
              continue

            case TRUE:
              if (!c) continue // strange buffers
              if (c === 'r') state = TRUE2;
              else { return emitError('Invalid true started with t' + c) }
              continue

            case TRUE2:
              if (!c) continue
              if (c === 'u') state = TRUE3;
              else { return emitError('Invalid true started with tr' + c) }
              continue

            case TRUE3:
              if (!c) continue
              if (c === 'e') {
                emitValueOpen(true);
                emitValueClose();
                state = stack.pop() || VALUE;
              } else { return emitError('Invalid true started with tru' + c) }
              continue

            case FALSE:
              if (!c) continue
              if (c === 'a') state = FALSE2;
              else { return emitError('Invalid false started with f' + c) }
              continue

            case FALSE2:
              if (!c) continue
              if (c === 'l') state = FALSE3;
              else { return emitError('Invalid false started with fa' + c) }
              continue

            case FALSE3:
              if (!c) continue
              if (c === 's') state = FALSE4;
              else { return emitError('Invalid false started with fal' + c) }
              continue

            case FALSE4:
              if (!c) continue
              if (c === 'e') {
                emitValueOpen(false);
                emitValueClose();
                state = stack.pop() || VALUE;
              } else { return emitError('Invalid false started with fals' + c) }
              continue

            case NULL:
              if (!c) continue
              if (c === 'u') state = NULL2;
              else { return emitError('Invalid null started with n' + c) }
              continue

            case NULL2:
              if (!c) continue
              if (c === 'l') state = NULL3;
              else { return emitError('Invalid null started with nu' + c) }
              continue

            case NULL3:
              if (!c) continue
              if (c === 'l') {
                emitValueOpen(null);
                emitValueClose();
                state = stack.pop() || VALUE;
              } else { return emitError('Invalid null started with nul' + c) }
              continue

            case NUMBER_DECIMAL_POINT:
              if (c === '.') {
                numberNode += c;
                state = NUMBER_DIGIT;
              } else { return emitError('Leading zero not followed by .') }
              continue

            case NUMBER_DIGIT:
              if ('0123456789'.indexOf(c) !== -1) numberNode += c;
              else if (c === '.') {
                if (numberNode.indexOf('.') !== -1) { return emitError('Invalid number has two dots') }
                numberNode += c;
              } else if (c === 'e' || c === 'E') {
                if (numberNode.indexOf('e') !== -1 ||
                  numberNode.indexOf('E') !== -1) { return emitError('Invalid number has two exponential') }
                numberNode += c;
              } else if (c === '+' || c === '-') {
                if (!(p === 'e' || p === 'E')) { return emitError('Invalid symbol in number') }
                numberNode += c;
              } else {
                if (numberNode) {
                  emitValueOpen(parseFloat(numberNode));
                  emitValueClose();
                  numberNode = '';
                }
                i--; // go back one
                state = stack.pop() || VALUE;
              }
              continue

            default:
              return emitError('Unknown state: ' + state)
          }
        }
        if (position >= bufferCheckPosition) { checkBufferLength(); }
      }
    }




    /***/ }),
    /* 18 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return httpTransport; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return streamingHttp; });
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__detectCrossOrigin_browser__ = __webpack_require__(19);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __webpack_require__(3);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(2);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__parseResponseHeaders_browser__ = __webpack_require__(20);
    /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__functional__ = __webpack_require__(0);






    function httpTransport () {
      return new XMLHttpRequest()
    }

    /**
     * A wrapper around the browser XmlHttpRequest object that raises an
     * event whenever a new part of the response is available.
     *
     * In older browsers progressive reading is impossible so all the
     * content is given in a single call. For newer ones several events
     * should be raised, allowing progressive interpretation of the response.
     *
     * @param {Function} oboeBus an event bus local to this Oboe instance
     * @param {XMLHttpRequest} xhr the xhr to use as the transport. Under normal
     *          operation, will have been created using httpTransport() above
     *          but for tests a stub can be provided instead.
     * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
     * @param {String} url the url to make a request to
     * @param {String|Null} data some content to be sent with the request.
     *                      Only valid if method is POST or PUT.
     * @param {Object} [headers] the http request headers to send
     * @param {boolean} withCredentials the XHR withCredentials property will be
     *    set to this value
     */
    function streamingHttp (oboeBus, xhr, method, url, data, headers, withCredentials) {

      var emitStreamData = oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["m" /* STREAM_DATA */]).emit;
      var emitFail = oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["b" /* FAIL_EVENT */]).emit;
      var numberOfCharsAlreadyGivenToCallback = 0;
      var stillToSendStartEvent = true;

      // When an ABORTING message is put on the event bus abort
      // the ajax request
      oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* ABORTING */]).on(function () {
        // if we keep the onreadystatechange while aborting the XHR gives
        // a callback like a successful call so first remove this listener
        // by assigning null:
        xhr.onreadystatechange = null;

        xhr.abort();
      });

      /**
        * Handle input from the underlying xhr: either a state change,
        * the progress event or the request being complete.
        */
      function handleProgress () {
        if (String(xhr.status)[0] === '2') {
          var textSoFar = xhr.responseText;
          var newText = (' ' + textSoFar.substr(numberOfCharsAlreadyGivenToCallback)).substr(1);

          /* Raise the event for new text.

           On older browsers, the new text is the whole response.
           On newer/better ones, the fragment part that we got since
           last progress. */

          if (newText) {
            emitStreamData(newText);
          }

          numberOfCharsAlreadyGivenToCallback = Object(__WEBPACK_IMPORTED_MODULE_2__util__["e" /* len */])(textSoFar);
        }
      }

      if ('onprogress' in xhr) { // detect browser support for progressive delivery
        xhr.onprogress = handleProgress;
      }

      function sendStartIfNotAlready (xhr) {
        // Internet Explorer is very unreliable as to when xhr.status etc can
        // be read so has to be protected with try/catch and tried again on
        // the next readyState if it fails
        try {
          stillToSendStartEvent && oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["c" /* HTTP_START */]).emit(
            xhr.status,
            Object(__WEBPACK_IMPORTED_MODULE_3__parseResponseHeaders_browser__["a" /* parseResponseHeaders */])(xhr.getAllResponseHeaders()));
          stillToSendStartEvent = false;
        } catch (e) { /* do nothing, will try again on next readyState */ }
      }

      xhr.onreadystatechange = function () {
        switch (xhr.readyState) {
          case 2: // HEADERS_RECEIVED
          case 3: // LOADING
            return sendStartIfNotAlready(xhr)

          case 4: // DONE
            sendStartIfNotAlready(xhr); // if xhr.status hasn't been available yet, it must be NOW, huh IE?

            // is this a 2xx http code?
            var successful = String(xhr.status)[0] === '2';

            if (successful) {
              // In Chrome 29 (not 28) no onprogress is emitted when a response
              // is complete before the onload. We need to always do handleInput
              // in case we get the load but have not had a final progress event.
              // This looks like a bug and may change in future but let's take
              // the safest approach and assume we might not have received a
              // progress event for each part of the response
              handleProgress();

              oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["n" /* STREAM_END */]).emit();
            } else {
              emitFail(Object(__WEBPACK_IMPORTED_MODULE_1__events__["o" /* errorReport */])(
                xhr.status,
                xhr.responseText
              ));
            }
        }
      };

      try {
        xhr.open(method, url, true);

        for (var headerName in headers) {
          xhr.setRequestHeader(headerName, headers[headerName]);
        }

        if (!Object(__WEBPACK_IMPORTED_MODULE_0__detectCrossOrigin_browser__["a" /* isCrossOrigin */])(window.location, Object(__WEBPACK_IMPORTED_MODULE_0__detectCrossOrigin_browser__["b" /* parseUrlOrigin */])(url))) {
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }

        xhr.withCredentials = withCredentials;

        xhr.send(data);
      } catch (e) {
        // To keep a consistent interface with Node, we can't emit an event here.
        // Node's streaming http adaptor receives the error as an asynchronous
        // event rather than as an exception. If we emitted now, the Oboe user
        // has had no chance to add a .fail listener so there is no way
        // the event could be useful. For both these reasons defer the
        // firing to the next JS frame.
        window.setTimeout(
          Object(__WEBPACK_IMPORTED_MODULE_4__functional__["j" /* partialComplete */])(emitFail, Object(__WEBPACK_IMPORTED_MODULE_1__events__["o" /* errorReport */])(undefined, undefined, e))
          , 0
        );
      }
    }




    /***/ }),
    /* 19 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isCrossOrigin; });
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parseUrlOrigin; });
    /**
     * Detect if a given URL is cross-origin in the scope of the
     * current page.
     *
     * Browser only (since cross-origin has no meaning in Node.js)
     *
     * @param {Object} pageLocation - as in window.location
     * @param {Object} ajaxHost - an object like window.location describing the
     *    origin of the url that we want to ajax in
     */
    function isCrossOrigin (pageLocation, ajaxHost) {
      /*
        * NB: defaultPort only knows http and https.
        * Returns undefined otherwise.
        */
      function defaultPort (protocol) {
        return { 'http:': 80, 'https:': 443 }[protocol]
      }

      function portOf (location) {
        // pageLocation should always have a protocol. ajaxHost if no port or
        // protocol is specified, should use the port of the containing page

        return String(location.port || defaultPort(location.protocol || pageLocation.protocol))
      }

      // if ajaxHost doesn't give a domain, port is the same as pageLocation
      // it can't give a protocol but not a domain
      // it can't give a port but not a domain

      return !!((ajaxHost.protocol && (ajaxHost.protocol !== pageLocation.protocol)) ||
        (ajaxHost.host && (ajaxHost.host !== pageLocation.host)) ||
        (ajaxHost.host && (portOf(ajaxHost) !== portOf(pageLocation)))
      )
    }

    /* turn any url into an object like window.location */
    function parseUrlOrigin (url) {
      // url could be domain-relative
      // url could give a domain

      // cross origin means:
      //    same domain
      //    same port
      //    some protocol
      // so, same everything up to the first (single) slash
      // if such is given
      //
      // can ignore everything after that

      var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/;

      // if no match, use an empty array so that
      // subexpressions 1,2,3 are all undefined
      // and will ultimately return all empty
      // strings as the parse result:
      var urlHostMatch = URL_HOST_PATTERN.exec(url) || [];

      return {
        protocol: urlHostMatch[1] || '',
        host: urlHostMatch[2] || '',
        port: urlHostMatch[3] || ''
      }
    }




    /***/ }),
    /* 20 */
    /***/ (function(module, __webpack_exports__, __webpack_require__) {
    /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return parseResponseHeaders; });
    // based on gist https://gist.github.com/monsur/706839

    /**
     * XmlHttpRequest's getAllResponseHeaders() method returns a string of response
     * headers according to the format described here:
     * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method
     * This method parses that string into a user-friendly key/value pair object.
     */
    function parseResponseHeaders (headerStr) {
      var headers = {};

      headerStr && headerStr.split('\u000d\u000a')
        .forEach(function (headerPair) {
          // Can't use split() here because it does the wrong thing
          // if the header value has the string ": " in it.
          var index = headerPair.indexOf('\u003a\u0020');

          headers[headerPair.substring(0, index)] =
            headerPair.substring(index + 2);
        });

      return headers
    }




    /***/ })
    /******/ ])["default"];
    });
    });

    var errors$6 = lib$3.errors;

    var IpcProvider = function IpcProvider(path, net) {
        var _this = this;
        this.responseCallbacks = {};
        this.notificationCallbacks = [];
        this.path = path;
        this.connected = false;
        this.connection = net.connect({ path: this.path });
        this.addDefaultEvents();
        // LISTEN FOR CONNECTION RESPONSES
        var callback = function (result) {
            /*jshint maxcomplexity: 6 */
            var id = null;
            // get the id which matches the returned id
            if (underscore.isArray(result)) {
                result.forEach(function (load) {
                    if (_this.responseCallbacks[load.id])
                        id = load.id;
                });
            }
            else {
                id = result.id;
            }
            // notification
            if (!id && result.method.indexOf('_subscription') !== -1) {
                _this.notificationCallbacks.forEach(function (callback) {
                    if (underscore.isFunction(callback))
                        callback(result);
                });
                // fire the callback
            }
            else if (_this.responseCallbacks[id]) {
                _this.responseCallbacks[id](null, result);
                delete _this.responseCallbacks[id];
            }
        };
        // use oboe.js for Sockets
        if (net.constructor.name === 'Socket') {
            oboeBrowser(this.connection)
                .done(callback);
        }
        else {
            this.connection.on('data', function (data) {
                _this._parseResponse(data.toString()).forEach(callback);
            });
        }
    };
    /**
    Will add the error and end event to timeout existing calls

    @method addDefaultEvents
    */
    IpcProvider.prototype.addDefaultEvents = function () {
        var _this = this;
        this.connection.on('connect', function () {
            _this.connected = true;
        });
        this.connection.on('close', function () {
            _this.connected = false;
        });
        this.connection.on('error', function () {
            _this._timeout();
        });
        this.connection.on('end', function () {
            _this._timeout();
        });
        this.connection.on('timeout', function () {
            _this._timeout();
        });
    };
    /**
     Will parse the response and make an array out of it.

     NOTE, this exists for backwards compatibility reasons.

     @method _parseResponse
     @param {String} data
     */
    IpcProvider.prototype._parseResponse = function (data) {
        var _this = this, returnValues = [];
        // DE-CHUNKER
        var dechunkedData = data
            .replace(/\}[\n\r]?\{/g, '}|--|{') // }{
            .replace(/\}\][\n\r]?\[\{/g, '}]|--|[{') // }][{
            .replace(/\}[\n\r]?\[\{/g, '}|--|[{') // }[{
            .replace(/\}\][\n\r]?\{/g, '}]|--|{') // }]{
            .split('|--|');
        dechunkedData.forEach(function (data) {
            // prepend the last chunk
            if (_this.lastChunk)
                data = _this.lastChunk + data;
            var result = null;
            try {
                result = JSON.parse(data);
            }
            catch (e) {
                _this.lastChunk = data;
                // start timeout to cancel all requests
                clearTimeout(_this.lastChunkTimeout);
                _this.lastChunkTimeout = setTimeout(function () {
                    _this._timeout();
                    throw errors$6.InvalidResponse(data);
                }, 1000 * 15);
                return;
            }
            // cancel timeout and set chunk to null
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunk = null;
            if (result)
                returnValues.push(result);
        });
        return returnValues;
    };
    /**
    Get the adds a callback to the responseCallbacks object,
    which will be called if a response matching the response Id will arrive.

    @method _addResponseCallback
    */
    IpcProvider.prototype._addResponseCallback = function (payload, callback) {
        var id = payload.id || payload[0].id;
        var method = payload.method || payload[0].method;
        this.responseCallbacks[id] = callback;
        this.responseCallbacks[id].method = method;
    };
    /**
    Timeout all requests when the end/error event is fired

    @method _timeout
    */
    IpcProvider.prototype._timeout = function () {
        for (var key in this.responseCallbacks) {
            if (this.responseCallbacks.hasOwnProperty(key)) {
                this.responseCallbacks[key](errors$6.InvalidConnection('on IPC'));
                delete this.responseCallbacks[key];
            }
        }
    };
    /**
     Try to reconnect

     @method reconnect
     */
    IpcProvider.prototype.reconnect = function () {
        this.connection.connect({ path: this.path });
    };
    IpcProvider.prototype.send = function (payload, callback) {
        // try reconnect, when connection is gone
        if (!this.connection.writable)
            this.connection.connect({ path: this.path });
        this.connection.write(JSON.stringify(payload));
        this._addResponseCallback(payload, callback);
    };
    /**
    Subscribes to provider events.provider

    @method on
    @param {String} type    'notification', 'connect', 'error', 'end' or 'data'
    @param {Function} callback   the callback to call
    */
    IpcProvider.prototype.on = function (type, callback) {
        if (typeof callback !== 'function')
            throw new Error('The second parameter callback must be a function.');
        switch (type) {
            case 'data':
                this.notificationCallbacks.push(callback);
                break;
            // adds error, end, timeout, connect
            default:
                this.connection.on(type, callback);
                break;
        }
    };
    /**
     Subscribes to provider events.provider

     @method on
     @param {String} type    'connect', 'error', 'end' or 'data'
     @param {Function} callback   the callback to call
     */
    IpcProvider.prototype.once = function (type, callback) {
        if (typeof callback !== 'function')
            throw new Error('The second parameter callback must be a function.');
        this.connection.once(type, callback);
    };
    /**
    Removes event listener

    @method removeListener
    @param {String} type    'data', 'connect', 'error', 'end' or 'data'
    @param {Function} callback   the callback to call
    */
    IpcProvider.prototype.removeListener = function (type, callback) {
        var _this = this;
        switch (type) {
            case 'data':
                this.notificationCallbacks.forEach(function (cb, index) {
                    if (cb === callback)
                        _this.notificationCallbacks.splice(index, 1);
                });
                break;
            default:
                this.connection.removeListener(type, callback);
                break;
        }
    };
    /**
    Removes all event listeners

    @method removeAllListeners
    @param {String} type    'data', 'connect', 'error', 'end' or 'data'
    */
    IpcProvider.prototype.removeAllListeners = function (type) {
        switch (type) {
            case 'data':
                this.notificationCallbacks = [];
                break;
            default:
                this.connection.removeAllListeners(type);
                break;
        }
    };
    /**
    Resets the providers, clears all callbacks

    @method reset
    */
    IpcProvider.prototype.reset = function () {
        this._timeout();
        this.notificationCallbacks = [];
        this.connection.removeAllListeners('error');
        this.connection.removeAllListeners('end');
        this.connection.removeAllListeners('timeout');
        this.addDefaultEvents();
    };
    /**
     * Returns the desired boolean.
     *
     * @method supportsSubscriptions
     * @returns {boolean}
     */
    IpcProvider.prototype.supportsSubscriptions = function () {
        return true;
    };
    var lib$6 = IpcProvider;

    const { callbackify } = util;

    var errors$7 = lib$3.errors;



    /**
     * It's responsible for passing messages to providers
     * It's also responsible for polling the ethereum node for incoming messages
     * Default poll timeout is 1 second
     * Singleton
     *
     * @param {string|Object}provider
     * @param {Net.Socket} net
     *
     * @constructor
     */
    var RequestManager = function RequestManager(provider, net) {
        this.provider = null;
        this.providers = RequestManager.providers;
        this.setProvider(provider, net);
        this.subscriptions = new Map();
    };
    RequestManager.givenProvider = givenProvider_1;
    RequestManager.providers = {
        WebsocketProvider: lib$4,
        HttpProvider: lib$5,
        IpcProvider: lib$6
    };
    /**
     * Should be used to set provider of request manager
     *
     * @method setProvider
     *
     * @param {Object} provider
     * @param {net.Socket} net
     *
     * @returns void
     */
    RequestManager.prototype.setProvider = function (provider, net) {
        var _this = this;
        // autodetect provider
        if (provider && typeof provider === 'string' && this.providers) {
            // HTTP
            if (/^http(s)?:\/\//i.test(provider)) {
                provider = new this.providers.HttpProvider(provider);
                // WS
            }
            else if (/^ws(s)?:\/\//i.test(provider)) {
                provider = new this.providers.WebsocketProvider(provider);
                // IPC
            }
            else if (provider && typeof net === 'object' && typeof net.connect === 'function') {
                provider = new this.providers.IpcProvider(provider, net);
            }
            else if (provider) {
                throw new Error('Can\'t autodetect provider for "' + provider + '"');
            }
        }
        // reset the old one before changing, if still connected
        if (this.provider && this.provider.connected)
            this.clearSubscriptions();
        this.provider = provider || null;
        // listen to incoming notifications
        if (this.provider && this.provider.on) {
            this.provider.on('data', function data(result, deprecatedResult) {
                result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler
                // if result is a subscription, call callback for that subscription
                if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {
                    _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);
                }
            });
            // resubscribe if the provider has reconnected
            this.provider.on('connect', function connect() {
                _this.subscriptions.forEach(function (subscription) {
                    subscription.subscription.resubscribe();
                });
            });
            // notify all subscriptions about the error condition
            this.provider.on('error', function error(error) {
                _this.subscriptions.forEach(function (subscription) {
                    subscription.callback(error);
                });
            });
            // notify all subscriptions about bad close conditions
            this.provider.on('close', function close(event) {
                if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {
                    _this.subscriptions.forEach(function (subscription) {
                        subscription.callback(errors$7.ConnectionCloseError(event));
                        _this.subscriptions.delete(subscription.subscription.id);
                    });
                    if (_this.provider && _this.provider.emit) {
                        _this.provider.emit('error', errors$7.ConnectionCloseError(event));
                    }
                }
                if (_this.provider && _this.provider.emit) {
                    _this.provider.emit('end', event);
                }
            });
            // TODO add end, timeout??
        }
    };
    /**
     * Asynchronously send request to provider.
     * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).
     * If `request` is not available, falls back to `sendAsync` and `send` respectively.
     * @method send
     * @param {Object} data
     * @param {Function} callback
     */
    RequestManager.prototype.send = function (data, callback) {
        callback = callback || function () { };
        if (!this.provider) {
            return callback(errors$7.InvalidProvider());
        }
        const { method, params } = data;
        const jsonrpcPayload = jsonrpc.toPayload(method, params);
        const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);
        if (this.provider.request) {
            const callbackRequest = callbackify(this.provider.request);
            const requestArgs = { method, params };
            callbackRequest(requestArgs, callback);
        }
        else if (this.provider.sendAsync) {
            this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);
        }
        else if (this.provider.send) {
            this.provider.send(jsonrpcPayload, jsonrpcResultCallback);
        }
        else {
            throw new Error('Provider does not have a request or send method to use.');
        }
    };
    /**
     * Asynchronously send batch request.
     * Only works if provider supports batch methods through `sendAsync` or `send`.
     * @method sendBatch
     * @param {Array} data - array of payload objects
     * @param {Function} callback
     */
    RequestManager.prototype.sendBatch = function (data, callback) {
        if (!this.provider) {
            return callback(errors$7.InvalidProvider());
        }
        var payload = jsonrpc.toBatchPayload(data);
        this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {
            if (err) {
                return callback(err);
            }
            if (!underscore.isArray(results)) {
                return callback(errors$7.InvalidResponse(results));
            }
            callback(null, results);
        });
    };
    /**
     * Waits for notifications
     *
     * @method addSubscription
     * @param {Subscription} subscription         the subscription
     * @param {String} type         the subscription namespace (eth, personal, etc)
     * @param {Function} callback   the callback to call for incoming notifications
     */
    RequestManager.prototype.addSubscription = function (subscription, callback) {
        if (this.provider.on) {
            this.subscriptions.set(subscription.id, {
                callback: callback,
                subscription: subscription
            });
        }
        else {
            throw new Error('The provider doesn\'t support subscriptions: ' + this.provider.constructor.name);
        }
    };
    /**
     * Waits for notifications
     *
     * @method removeSubscription
     * @param {String} id           the subscription id
     * @param {Function} callback   fired once the subscription is removed
     */
    RequestManager.prototype.removeSubscription = function (id, callback) {
        if (this.subscriptions.has(id)) {
            var type = this.subscriptions.get(id).subscription.options.type;
            // remove subscription first to avoid reentry
            this.subscriptions.delete(id);
            // then, try to actually unsubscribe
            this.send({
                method: type + '_unsubscribe',
                params: [id]
            }, callback);
            return;
        }
        if (typeof callback === 'function') {
            // call the callback if the subscription was already removed
            callback(null);
        }
    };
    /**
     * Should be called to reset the subscriptions
     *
     * @method reset
     *
     * @returns {boolean}
     */
    RequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {
        try {
            var _this = this;
            // uninstall all subscriptions
            if (this.subscriptions.size > 0) {
                this.subscriptions.forEach(function (value, id) {
                    if (!keepIsSyncing || value.name !== 'syncing')
                        _this.removeSubscription(id);
                });
            }
            //  reset notification callbacks etc.
            if (this.provider.reset)
                this.provider.reset();
            return true;
        }
        catch (e) {
            throw new Error(`Error while clearing subscriptions: ${e}`);
        }
    };
    /**
     * Evaluates WS close event
     *
     * @method _isCleanClose
     *
     * @param {CloseEvent | boolean} event WS close event or exception flag
     *
     * @returns {boolean}
     */
    RequestManager.prototype._isCleanCloseEvent = function (event) {
        return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);
    };
    /**
     * Detects Ipc close error. The node.net module emits ('close', isException)
     *
     * @method _isIpcCloseError
     *
     * @param {CloseEvent | boolean} event WS close event or exception flag
     *
     * @returns {boolean}
     */
    RequestManager.prototype._isIpcCloseError = function (event) {
        return typeof event === 'boolean' && event;
    };
    /**
     * The jsonrpc result callback for RequestManager.send
     *
     * @method _jsonrpcResultCallback
     *
     * @param {Function} callback the callback to use
     * @param {Object} payload the jsonrpc payload
     *
     * @returns {Function} return callback of form (err, result)
     *
     */
    RequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {
        return function (err, result) {
            if (result && result.id && payload.id !== result.id) {
                return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));
            }
            if (err) {
                return callback(err);
            }
            if (result && result.error) {
                return callback(errors$7.ErrorResponse(result));
            }
            if (!jsonrpc.isValidResponse(result)) {
                return callback(errors$7.InvalidResponse(result));
            }
            callback(null, result.result);
        };
    };
    var lib$7 = {
        Manager: RequestManager,
        BatchManager: batch
    };

    /**
     * This function generates a defer promise and adds eventEmitter functionality to it
     *
     * @method eventifiedPromise
     */
    var PromiEvent = function PromiEvent(justPromise) {
        var resolve, reject, eventEmitter = new Promise(function () {
            resolve = arguments[0];
            reject = arguments[1];
        });
        if (justPromise) {
            return {
                resolve: resolve,
                reject: reject,
                eventEmitter: eventEmitter
            };
        }
        // get eventEmitter
        var emitter = new eventemitter3();
        // add eventEmitter to the promise
        eventEmitter._events = emitter._events;
        eventEmitter.emit = emitter.emit;
        eventEmitter.on = emitter.on;
        eventEmitter.once = emitter.once;
        eventEmitter.off = emitter.off;
        eventEmitter.listeners = emitter.listeners;
        eventEmitter.addListener = emitter.addListener;
        eventEmitter.removeListener = emitter.removeListener;
        eventEmitter.removeAllListeners = emitter.removeAllListeners;
        return {
            resolve: resolve,
            reject: reject,
            eventEmitter: eventEmitter
        };
    };
    PromiEvent.resolve = function (value) {
        var promise = PromiEvent(true);
        promise.resolve(value);
        return promise.eventEmitter;
    };
    var lib$8 = PromiEvent;

    var errors$8 = lib$3.errors;

    var formatters$1 = lib$3.formatters;
    function Subscription(options) {
        eventemitter3.call(this);
        this.id = null;
        this.callback = underscore.identity;
        this.arguments = null;
        this.lastBlock = null; // "from" block tracker for backfilling events on reconnection
        this.options = {
            subscription: options.subscription,
            type: options.type,
            requestManager: options.requestManager
        };
    }
    // INHERIT
    Subscription.prototype = Object.create(eventemitter3.prototype);
    Subscription.prototype.constructor = Subscription;
    /**
     * Should be used to extract callback from array of arguments. Modifies input param
     *
     * @method extractCallback
     * @param {Array} arguments
     * @return {Function|Null} callback, if exists
     */
    Subscription.prototype._extractCallback = function (args) {
        if (underscore.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
        }
    };
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @method validateArgs
     * @param {Array} arguments
     * @throws {Error} if it is not
     */
    Subscription.prototype._validateArgs = function (args) {
        var subscription = this.options.subscription;
        if (!subscription)
            subscription = {};
        if (!subscription.params)
            subscription.params = 0;
        if (args.length !== subscription.params) {
            throw errors$8.InvalidNumberOfParams(args.length, subscription.params, subscription.subscriptionName);
        }
    };
    /**
     * Should be called to format input args of method
     *
     * @method formatInput
     * @param {Array}
     * @return {Array}
     */
    Subscription.prototype._formatInput = function (args) {
        var subscription = this.options.subscription;
        if (!subscription) {
            return args;
        }
        if (!subscription.inputFormatter) {
            return args;
        }
        var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {
            return formatter ? formatter(args[index]) : args[index];
        });
        return formattedArgs;
    };
    /**
     * Should be called to format output(result) of method
     *
     * @method formatOutput
     * @param result {Object}
     * @return {Object}
     */
    Subscription.prototype._formatOutput = function (result) {
        var subscription = this.options.subscription;
        return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;
    };
    /**
     * Should create payload from given input args
     *
     * @method toPayload
     * @param {Array} args
     * @return {Object}
     */
    Subscription.prototype._toPayload = function (args) {
        var params = [];
        this.callback = this._extractCallback(args) || underscore.identity;
        if (!this.subscriptionMethod) {
            this.subscriptionMethod = args.shift();
            // replace subscription with given name
            if (this.options.subscription.subscriptionName) {
                this.subscriptionMethod = this.options.subscription.subscriptionName;
            }
        }
        if (!this.arguments) {
            this.arguments = this._formatInput(args);
            this._validateArgs(this.arguments);
            args = []; // make empty after validation
        }
        // re-add subscriptionName
        params.push(this.subscriptionMethod);
        params = params.concat(this.arguments);
        if (args.length) {
            throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');
        }
        return {
            method: this.options.type + '_subscribe',
            params: params
        };
    };
    /**
     * Unsubscribes and clears callbacks
     *
     * @method unsubscribe
     * @return {Object}
     */
    Subscription.prototype.unsubscribe = function (callback) {
        this.options.requestManager.removeSubscription(this.id, callback);
        this.id = null;
        this.lastBlock = null;
        this.removeAllListeners();
    };
    /**
     * Subscribes and watches for changes
     *
     * @method subscribe
     * @param {String} subscription the subscription
     * @param {Object} options the options object with address topics and fromBlock
     * @return {Object}
     */
    Subscription.prototype.subscribe = function () {
        var _this = this;
        var args = Array.prototype.slice.call(arguments);
        var payload = this._toPayload(args);
        if (!payload) {
            return this;
        }
        // throw error, if provider is not set
        if (!this.options.requestManager.provider) {
            setTimeout(function () {
                var err1 = new Error('No provider set.');
                _this.callback(err1, null, _this);
                _this.emit('error', err1);
            }, 0);
            return this;
        }
        // throw error, if provider doesnt support subscriptions
        if (!this.options.requestManager.provider.on) {
            setTimeout(function () {
                var err2 = new Error('The current provider doesn\'t support subscriptions: ' +
                    _this.options.requestManager.provider.constructor.name);
                _this.callback(err2, null, _this);
                _this.emit('error', err2);
            }, 0);
            return this;
        }
        // Re-subscription only: continue fetching from the last block we received.
        // a dropped connection may have resulted in gaps in the logs...
        if (this.lastBlock && underscore.isObject(this.options.params)) {
            payload.params[1] = this.options.params;
            payload.params[1].fromBlock = formatters$1.inputBlockNumberFormatter(this.lastBlock + 1);
        }
        // if id is there unsubscribe first
        if (this.id) {
            this.unsubscribe();
        }
        // store the params in the options object
        this.options.params = payload.params[1];
        // get past logs, if fromBlock is available
        if (payload.params[0] === 'logs' && underscore.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {
            // send the subscription request
            // copy the params to avoid race-condition with deletion below this block
            var blockParams = Object.assign({}, payload.params[1]);
            this.options.requestManager.send({
                method: 'eth_getLogs',
                params: [blockParams]
            }, function (err, logs) {
                if (!err) {
                    logs.forEach(function (log) {
                        var output = _this._formatOutput(log);
                        _this.callback(null, output, _this);
                        _this.emit('data', output);
                    });
                    // TODO subscribe here? after the past logs?
                }
                else {
                    setTimeout(function () {
                        _this.callback(err, null, _this);
                        _this.emit('error', err);
                    }, 0);
                }
            });
        }
        // create subscription
        // TODO move to separate function? so that past logs can go first?
        if (typeof payload.params[1] === 'object')
            delete payload.params[1].fromBlock;
        this.options.requestManager.send(payload, function (err, result) {
            if (!err && result) {
                _this.id = result;
                _this.method = payload.params[0];
                _this.emit('connected', result);
                // call callback on notifications
                _this.options.requestManager.addSubscription(_this, function (error, result) {
                    if (!error) {
                        if (!underscore.isArray(result)) {
                            result = [result];
                        }
                        result.forEach(function (resultItem) {
                            var output = _this._formatOutput(resultItem);
                            // Track current block (for gaps introduced by dropped connections)
                            _this.lastBlock = underscore.isObject(output) ? output.blockNumber : null;
                            if (underscore.isFunction(_this.options.subscription.subscriptionHandler)) {
                                return _this.options.subscription.subscriptionHandler.call(_this, output);
                            }
                            else {
                                _this.emit('data', output);
                            }
                            // call the callback, last so that unsubscribe there won't affect the emit above
                            _this.callback(null, output, _this);
                        });
                    }
                    else {
                        _this.callback(error, false, _this);
                        _this.emit('error', error);
                    }
                });
            }
            else {
                setTimeout(function () {
                    _this.callback(err, false, _this);
                    _this.emit('error', err);
                }, 0);
            }
        });
        // return an object to cancel the subscription
        return this;
    };
    /**
     * Resubscribe
     *
     * @method resubscribe
     *
     * @returns {void}
     */
    Subscription.prototype.resubscribe = function () {
        this.options.requestManager.removeSubscription(this.id); // unsubscribe
        this.id = null;
        this.subscribe(this.callback);
    };
    var subscription = Subscription;

    var Subscriptions = function Subscriptions(options) {
        this.name = options.name;
        this.type = options.type;
        this.subscriptions = options.subscriptions || {};
        this.requestManager = null;
    };
    Subscriptions.prototype.setRequestManager = function (rm) {
        this.requestManager = rm;
    };
    Subscriptions.prototype.attachToObject = function (obj) {
        var func = this.buildCall();
        var name = this.name.split('.');
        if (name.length > 1) {
            obj[name[0]] = obj[name[0]] || {};
            obj[name[0]][name[1]] = func;
        }
        else {
            obj[name[0]] = func;
        }
    };
    Subscriptions.prototype.buildCall = function () {
        var _this = this;
        return function () {
            if (!_this.subscriptions[arguments[0]]) {
                console.warn('Subscription ' + JSON.stringify(arguments[0]) + ' doesn\'t exist. Subscribing anyway.');
            }
            var subscription$1 = new subscription({
                subscription: _this.subscriptions[arguments[0]] || {},
                requestManager: _this.requestManager,
                type: _this.type
            });
            return subscription$1.subscribe.apply(subscription$1, arguments);
        };
    };
    var lib$9 = {
        subscriptions: Subscriptions,
        subscription: subscription
    };

    const version$4 = "logger/5.0.6";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficien funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    })(ErrorCode || (ErrorCode = {}));
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                try {
                    messageDetails.push(key + "=" + JSON.stringify(params[key]));
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$4);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    const version$5 = "bytes/5.0.5";

    const logger = new Logger(version$5);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (value.length == null) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (v < 0 || v >= 256 || (v % 1)) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0x0" + hex.substring(2);
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger.throwArgumentError("invalid arrayify value", "value", value);
    }
    function concat(items) {
        const objects = items.map(item => arrayify(item));
        const length = objects.reduce((accum, item) => (accum + item.length), 0);
        const result = new Uint8Array(length);
        objects.reduce((offset, object) => {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    function stripZeros(value) {
        let result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        let start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger.throwArgumentError("value out of range", "value", arguments[0]);
        }
        const result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    const HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid hexlify value");
            let hex = "";
            while (value) {
                hex = HexCharacters[value & 0x0f] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes(value)) {
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
                let v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger.throwArgumentError("invalid hexlify value", "value", value);
    }
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            logger.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    function splitSignature(signature) {
        const result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0
        };
        if (isBytesLike(signature)) {
            const bytes = arrayify(signature);
            if (bytes.length !== 65) {
                logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature);
            }
            // Get the r, s and v
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                const vs = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs);
                // Set or check the recid
                const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs[0] &= 0x7f;
                const s = hexlify(vs);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else if (result.recoveryParam !== (1 - (result.v % 2))) {
                    logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                }
            }
            if (result.r == null || !isHexString(result.r)) {
                logger.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
                logger.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            const vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            const _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString(result._vs)) {
                    logger.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        return result;
    }

    const version$6 = "bignumber/5.0.8";

    const logger$1 = new Logger(version$6);
    const _constructorGuard = {};
    const MAX_SAFE = 0x1fffffffffffff;
    function isBigNumberish(value) {
        return (value != null) && (BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            isHexString(value) ||
            (typeof (value) === "bigint") ||
            isBytes(value));
    }
    class BigNumber {
        constructor(constructorGuard, hex) {
            logger$1.checkNew(new.target, BigNumber);
            if (constructorGuard !== _constructorGuard) {
                logger$1.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        fromTwos(value) {
            return toBigNumber(toBN$1(this).fromTwos(value));
        }
        toTwos(value) {
            return toBigNumber(toBN$1(this).toTwos(value));
        }
        abs() {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        }
        add(other) {
            return toBigNumber(toBN$1(this).add(toBN$1(other)));
        }
        sub(other) {
            return toBigNumber(toBN$1(this).sub(toBN$1(other)));
        }
        div(other) {
            const o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault("division by zero", "div");
            }
            return toBigNumber(toBN$1(this).div(toBN$1(other)));
        }
        mul(other) {
            return toBigNumber(toBN$1(this).mul(toBN$1(other)));
        }
        mod(other) {
            const value = toBN$1(other);
            if (value.isNeg()) {
                throwFault("cannot modulo negative values", "mod");
            }
            return toBigNumber(toBN$1(this).umod(value));
        }
        pow(other) {
            const value = toBN$1(other);
            if (value.isNeg()) {
                throwFault("cannot raise to negative values", "pow");
            }
            return toBigNumber(toBN$1(this).pow(value));
        }
        and(other) {
            const value = toBN$1(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("cannot 'and' negative values", "and");
            }
            return toBigNumber(toBN$1(this).and(value));
        }
        or(other) {
            const value = toBN$1(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("cannot 'or' negative values", "or");
            }
            return toBigNumber(toBN$1(this).or(value));
        }
        xor(other) {
            const value = toBN$1(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("cannot 'xor' negative values", "xor");
            }
            return toBigNumber(toBN$1(this).xor(value));
        }
        mask(value) {
            if (this.isNegative() || value < 0) {
                throwFault("cannot mask negative values", "mask");
            }
            return toBigNumber(toBN$1(this).maskn(value));
        }
        shl(value) {
            if (this.isNegative() || value < 0) {
                throwFault("cannot shift negative values", "shl");
            }
            return toBigNumber(toBN$1(this).shln(value));
        }
        shr(value) {
            if (this.isNegative() || value < 0) {
                throwFault("cannot shift negative values", "shr");
            }
            return toBigNumber(toBN$1(this).shrn(value));
        }
        eq(other) {
            return toBN$1(this).eq(toBN$1(other));
        }
        lt(other) {
            return toBN$1(this).lt(toBN$1(other));
        }
        lte(other) {
            return toBN$1(this).lte(toBN$1(other));
        }
        gt(other) {
            return toBN$1(this).gt(toBN$1(other));
        }
        gte(other) {
            return toBN$1(this).gte(toBN$1(other));
        }
        isNegative() {
            return (this._hex[0] === "-");
        }
        isZero() {
            return toBN$1(this).isZero();
        }
        toNumber() {
            try {
                return toBN$1(this).toNumber();
            }
            catch (error) {
                throwFault("overflow", "toNumber", this.toString());
            }
            return null;
        }
        toString() {
            // Lots of people expect this, which we do not support, so check
            if (arguments.length !== 0) {
                logger$1.throwError("bigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
            }
            return toBN$1(this).toString(10);
        }
        toHexString() {
            return this._hex;
        }
        toJSON(key) {
            return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard, toHex$2(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard, toHex$2(new bn$2.BN(value)));
                }
                return logger$1.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            const anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if (isBytes(anyValue)) {
                return BigNumber.from(hexlify(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes piority)
                if (anyValue.toHexString) {
                    const hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    let hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger$1.throwArgumentError("invalid BigNumber value", "value", value);
        }
        static isBigNumber(value) {
            return !!(value && value._isBigNumber);
        }
    }
    // Normalize the hex string
    function toHex$2(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex$2(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have mulitple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger$1.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex$2(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex$2(value));
    }
    function toBN$1(value) {
        const hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new bn$2.BN("-" + hex.substring(3), 16));
        }
        return new bn$2.BN(hex.substring(2), 16);
    }
    function throwFault(fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger$1.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
    }

    const logger$2 = new Logger(version$6);
    const _constructorGuard$1 = {};
    const Zero = BigNumber.from(0);
    const NegativeOne = BigNumber.from(-1);
    function throwFault$1(message, fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value !== undefined) {
            params.value = value;
        }
        return logger$2.throwError(message, Logger.errors.NUMERIC_FAULT, params);
    }
    // Constant to pull zeros from for multipliers
    let zeros = "0";
    while (zeros.length < 256) {
        zeros += zeros;
    }
    // Returns a string "1" followed by decimal "0"s
    function getMultiplier(decimals) {
        if (typeof (decimals) !== "number") {
            try {
                decimals = BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
        }
        if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
        }
        return logger$2.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        // Make sure wei is a big number (convert as necessary)
        value = BigNumber.from(value);
        const negative = value.lt(Zero);
        if (negative) {
            value = value.mul(NegativeOne);
        }
        let fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
        }
        // Strip training 0
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        const whole = value.div(multiplier).toString();
        value = whole + "." + fraction;
        if (negative) {
            value = "-" + value;
        }
        return value;
    }
    function parseFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        if (typeof (value) !== "string" || !value.match(/^-?[0-9.,]+$/)) {
            logger$2.throwArgumentError("invalid decimal value", "value", value);
        }
        if (multiplier.length - 1 === 0) {
            return BigNumber.from(value);
        }
        // Is it negative?
        const negative = (value.substring(0, 1) === "-");
        if (negative) {
            value = value.substring(1);
        }
        if (value === ".") {
            logger$2.throwArgumentError("missing value", "value", value);
        }
        // Split it into a whole and fractional part
        const comps = value.split(".");
        if (comps.length > 2) {
            logger$2.throwArgumentError("too many decimal points", "value", value);
        }
        let whole = comps[0], fraction = comps[1];
        if (!whole) {
            whole = "0";
        }
        if (!fraction) {
            fraction = "0";
        }
        // Prevent underflow
        if (fraction.length > multiplier.length - 1) {
            throwFault$1("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        // Fully pad the string with zeros to get to wei
        while (fraction.length < multiplier.length - 1) {
            fraction += "0";
        }
        const wholeValue = BigNumber.from(whole);
        const fractionValue = BigNumber.from(fraction);
        let wei = (wholeValue.mul(multiplier)).add(fractionValue);
        if (negative) {
            wei = wei.mul(NegativeOne);
        }
        return wei;
    }
    class FixedFormat {
        constructor(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard$1) {
                logger$2.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
        }
        static from(value) {
            if (value instanceof FixedFormat) {
                return value;
            }
            let signed = true;
            let width = 128;
            let decimals = 18;
            if (typeof (value) === "string") {
                if (value === "fixed") ;
                else if (value === "ufixed") {
                    signed = false;
                }
                else if (value != null) {
                    const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    if (!match) {
                        logger$2.throwArgumentError("invalid fixed format", "format", value);
                    }
                    signed = (match[1] !== "u");
                    width = parseInt(match[2]);
                    decimals = parseInt(match[3]);
                }
            }
            else if (value) {
                const check = (key, type, defaultValue) => {
                    if (value[key] == null) {
                        return defaultValue;
                    }
                    if (typeof (value[key]) !== type) {
                        logger$2.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                    }
                    return value[key];
                };
                signed = check("signed", "boolean", signed);
                width = check("width", "number", width);
                decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
                logger$2.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
                logger$2.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat(_constructorGuard$1, signed, width, decimals);
        }
    }
    class FixedNumber {
        constructor(constructorGuard, hex, value, format) {
            logger$2.checkNew(new.target, FixedNumber);
            if (constructorGuard !== _constructorGuard$1) {
                logger$2.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
        }
        _checkFormat(other) {
            if (this.format.name !== other.format.name) {
                logger$2.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
        }
        addUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
        }
        subUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
        }
        mulUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        }
        divUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        }
        floor() {
            let comps = this.toString().split(".");
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
                result = result.subUnsafe(ONE);
            }
            return result;
        }
        ceiling() {
            let comps = this.toString().split(".");
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
                result = result.addUnsafe(ONE);
            }
            return result;
        }
        // @TODO: Support other rounding algorithms
        round(decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // If we are already in range, we're done
            let comps = this.toString().split(".");
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                logger$2.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
                return this;
            }
            const factor = FixedNumber.from("1" + zeros.substring(0, decimals));
            return this.mulUnsafe(factor).addUnsafe(BUMP).floor().divUnsafe(factor);
        }
        isZero() {
            return (this._value === "0.0");
        }
        isNegative() {
            return (this._value[0] === "-");
        }
        toString() { return this._value; }
        toHexString(width) {
            if (width == null) {
                return this._hex;
            }
            if (width % 8) {
                logger$2.throwArgumentError("invalid byte width", "width", width);
            }
            const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return hexZeroPad(hex, width / 8);
        }
        toUnsafeFloat() { return parseFloat(this.toString()); }
        toFormat(format) {
            return FixedNumber.fromString(this._value, format);
        }
        static fromValue(value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !isBigNumberish(decimals)) {
                format = decimals;
                decimals = null;
            }
            if (decimals == null) {
                decimals = 0;
            }
            if (format == null) {
                format = "fixed";
            }
            return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        }
        static fromString(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            const numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero)) {
                throwFault$1("unsigned value cannot be negative", "overflow", "value", value);
            }
            let hex = null;
            if (fixedFormat.signed) {
                hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
                hex = numeric.toHexString();
                hex = hexZeroPad(hex, fixedFormat.width / 8);
            }
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$1, hex, decimal, fixedFormat);
        }
        static fromBytes(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            if (arrayify(value).length > fixedFormat.width / 8) {
                throw new Error("overflow");
            }
            let numeric = BigNumber.from(value);
            if (fixedFormat.signed) {
                numeric = numeric.fromTwos(fixedFormat.width);
            }
            const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$1, hex, decimal, fixedFormat);
        }
        static from(value, format) {
            if (typeof (value) === "string") {
                return FixedNumber.fromString(value, format);
            }
            if (isBytes(value)) {
                return FixedNumber.fromBytes(value, format);
            }
            try {
                return FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
                // Allow NUMERIC_FAULT to bubble up
                if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                    throw error;
                }
            }
            return logger$2.throwArgumentError("invalid FixedNumber value", "value", value);
        }
        static isFixedNumber(value) {
            return !!(value && value._isFixedNumber);
        }
    }
    const ONE = FixedNumber.from(1);
    const BUMP = FixedNumber.from("0.5");

    var sha3$2 = createCommonjsModule(function (module) {
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.5.7
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2016
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {

      var root = typeof window === 'object' ? window : {};
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
                0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
                2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
                2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
                2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(bits, padding, type);
        }
        return method;
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createShakeOutputMethod(bits, padding, type);
        }
        return method;
      };

      var algorithms = [
        {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
        {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
        {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits  = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name +'_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        var notString = typeof message !== 'string';
        if (notString && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
        var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.finalize = function () {
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                   HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                   HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                   HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          if (extraBytes > 0) {
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          }
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          if (extraBytes > 0) {
            array[offset] = block & 0xFF;
          }
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
            b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
            b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
            b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (var i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    function keccak256(data) {
        return '0x' + sha3$2.keccak_256(arrayify(data));
    }

    const version$7 = "rlp/5.0.4";

    const logger$3 = new Logger(version$7);
    function arrayifyInteger(value) {
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        if (!isBytesLike(object)) {
            logger$3.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        const data = Array.prototype.slice.call(arrayify(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode$1(object) {
        return hexlify(_encode(object));
    }
    function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger$3.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            logger$3.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger$3.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$3.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
                logger$3.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger$3.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$3.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
                logger$3.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: hexlify(data[offset]) };
    }
    function decode(data) {
        const bytes = arrayify(data);
        const decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger$3.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }

    const version$8 = "address/5.0.5";

    const logger$4 = new Logger(version$8);
    function getChecksumAddress(address) {
        if (!isHexString(address, 20)) {
            logger$4.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = arrayify(keccak256(expanded));
        for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    const MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    const ibanLookup = {};
    for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    function getAddress(address) {
        let result = null;
        if (typeof (address) !== "string") {
            logger$4.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger$4.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger$4.throwArgumentError("bad icap checksum", "address", address);
            }
            result = (new bn$2.BN(address.substring(4), 36)).toString(16);
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger$4.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }

    const NegativeOne$1 = BigNumber.from(-1);
    const Zero$1 = BigNumber.from(0);
    const One = BigNumber.from(1);
    const Two = BigNumber.from(2);
    const WeiPerEther = BigNumber.from("1000000000000000000");
    const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

    const version$9 = "properties/5.0.4";

    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$5 = new Logger(version$9);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (let i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger$5.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach((key) => {
            if (!properties[key]) {
                logger$5.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            const keys = Object.keys(object);
            for (let i = 0; i < keys.length; i++) {
                if (!_isFrozen(object[keys[i]])) {
                    return false;
                }
            }
            return true;
        }
        return logger$5.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map((item) => deepCopy(item)));
        }
        if (typeof (object) === "object") {
            const result = {};
            for (const key in object) {
                const value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger$5.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    class Description {
        constructor(info) {
            for (const key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
    }

    var _from$2 = "elliptic@^6.5.2";
    var _id$2 = "elliptic@6.5.3";
    var _inBundle$2 = false;
    var _integrity$2 = "sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==";
    var _location$2 = "/elliptic";
    var _phantomChildren$2 = {
    };
    var _requested$2 = {
    	type: "range",
    	registry: true,
    	raw: "elliptic@^6.5.2",
    	name: "elliptic",
    	escapedName: "elliptic",
    	rawSpec: "^6.5.2",
    	saveSpec: null,
    	fetchSpec: "^6.5.2"
    };
    var _requiredBy$2 = [
    	"/@ethersproject/signing-key",
    	"/@trufflesuite/eth-json-rpc-middleware/ethereumjs-util",
    	"/@trufflesuite/eth-sig-util/ethereumjs-util",
    	"/@trufflesuite/web3-provider-engine/ethereumjs-util",
    	"/browserify-sign",
    	"/create-ecdh",
    	"/eth-lib",
    	"/ethereumjs-account/ethereumjs-util",
    	"/ethereumjs-block/ethereumjs-util",
    	"/ethereumjs-tx/ethereumjs-util",
    	"/ethereumjs-util",
    	"/ethereumjs-vm/ethereumjs-block/ethereumjs-util",
    	"/merkle-patricia-tree/ethereumjs-util",
    	"/secp256k1",
    	"/web3-eth-accounts/eth-lib",
    	"/web3-utils/eth-lib"
    ];
    var _resolved$2 = "https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz";
    var _shasum$2 = "cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6";
    var _spec$2 = "elliptic@^6.5.2";
    var _where$2 = "C:\\Users\\donno\\Documents\\GitHub\\interactive-nfts\\node_modules\\ethereumjs-util";
    var author$2 = {
    	name: "Fedor Indutny",
    	email: "fedor@indutny.com"
    };
    var bugs$2 = {
    	url: "https://github.com/indutny/elliptic/issues"
    };
    var bundleDependencies$2 = false;
    var dependencies$2 = {
    	"bn.js": "^4.4.0",
    	brorand: "^1.0.1",
    	"hash.js": "^1.0.0",
    	"hmac-drbg": "^1.0.0",
    	inherits: "^2.0.1",
    	"minimalistic-assert": "^1.0.0",
    	"minimalistic-crypto-utils": "^1.0.0"
    };
    var deprecated$2 = false;
    var description$2 = "EC cryptography";
    var devDependencies$2 = {
    	brfs: "^1.4.3",
    	coveralls: "^3.0.8",
    	grunt: "^1.0.4",
    	"grunt-browserify": "^5.0.0",
    	"grunt-cli": "^1.2.0",
    	"grunt-contrib-connect": "^1.0.0",
    	"grunt-contrib-copy": "^1.0.0",
    	"grunt-contrib-uglify": "^1.0.1",
    	"grunt-mocha-istanbul": "^3.0.1",
    	"grunt-saucelabs": "^9.0.1",
    	istanbul: "^0.4.2",
    	jscs: "^3.0.7",
    	jshint: "^2.10.3",
    	mocha: "^6.2.2"
    };
    var files = [
    	"lib"
    ];
    var homepage$2 = "https://github.com/indutny/elliptic";
    var keywords$2 = [
    	"EC",
    	"Elliptic",
    	"curve",
    	"Cryptography"
    ];
    var license$2 = "MIT";
    var main$2 = "lib/elliptic.js";
    var name$3 = "elliptic";
    var repository$2 = {
    	type: "git",
    	url: "git+ssh://git@github.com/indutny/elliptic.git"
    };
    var scripts$2 = {
    	jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    	jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    	lint: "npm run jscs && npm run jshint",
    	test: "npm run lint && npm run unit",
    	unit: "istanbul test _mocha --reporter=spec test/index.js",
    	version: "grunt dist && git add dist/"
    };
    var version$a = "6.5.3";
    var _package$4 = {
    	_from: _from$2,
    	_id: _id$2,
    	_inBundle: _inBundle$2,
    	_integrity: _integrity$2,
    	_location: _location$2,
    	_phantomChildren: _phantomChildren$2,
    	_requested: _requested$2,
    	_requiredBy: _requiredBy$2,
    	_resolved: _resolved$2,
    	_shasum: _shasum$2,
    	_spec: _spec$2,
    	_where: _where$2,
    	author: author$2,
    	bugs: bugs$2,
    	bundleDependencies: bundleDependencies$2,
    	dependencies: dependencies$2,
    	deprecated: deprecated$2,
    	description: description$2,
    	devDependencies: devDependencies$2,
    	files: files,
    	homepage: homepage$2,
    	keywords: keywords$2,
    	license: license$2,
    	main: main$2,
    	name: name$3,
    	repository: repository$2,
    	scripts: scripts$2,
    	version: version$a
    };

    var _package$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _from: _from$2,
        _id: _id$2,
        _inBundle: _inBundle$2,
        _integrity: _integrity$2,
        _location: _location$2,
        _phantomChildren: _phantomChildren$2,
        _requested: _requested$2,
        _requiredBy: _requiredBy$2,
        _resolved: _resolved$2,
        _shasum: _shasum$2,
        _spec: _spec$2,
        _where: _where$2,
        author: author$2,
        bugs: bugs$2,
        bundleDependencies: bundleDependencies$2,
        dependencies: dependencies$2,
        deprecated: deprecated$2,
        description: description$2,
        devDependencies: devDependencies$2,
        files: files,
        homepage: homepage$2,
        keywords: keywords$2,
        license: license$2,
        main: main$2,
        name: name$3,
        repository: repository$2,
        scripts: scripts$2,
        version: version$a,
        'default': _package$4
    });

    var minimalisticAssert = assert;

    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils_1 = createCommonjsModule(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1$1 = createCommonjsModule(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert;
    utils.toArray = utils_1.toArray;
    utils.zero2 = utils_1.zero2;
    utils.toHex = utils_1.toHex;
    utils.encode = utils_1.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          var m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          var m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
               this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                         bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn$2(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });

    var r;

    var brorand = function rand(len) {
      if (!r)
        r = new Rand(null);

      return r.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    var Rand_1 = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);

      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };

    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };

      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto$1 = require$$0;
        if (typeof crypto$1.randomBytes !== 'function')
          throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto$1.randomBytes(n);
        };
      } catch (e) {
      }
    }
    brorand.Rand = Rand_1;

    var getNAF = utils_1$1.getNAF;
    var getJSF = utils_1$1.getJSF;
    var assert$1 = utils_1$1.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new bn$2(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn$2.red(conf.prime) : bn$2.mont(this.p);

      // Useful for many curves
      this.zero = new bn$2(0).toRed(this.red);
      this.one = new bn$2(1).toRed(this.red);
      this.two = new bn$2(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn$2(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base$1 = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--)
          nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
          var nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var k = 0; i >= 0 && naf[i] === 0; i--)
          k++;
        if (i >= 0)
          k++;
        acc = acc.dblp(k);

        if (i < 0)
          break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                           points,
                                                           coeffs,
                                                           len,
                                                           jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b] /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (var i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (var j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (var j = 0; j < len; j++) {
          var z = tmp[j];
          var p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (var i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$1(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
                              bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits_browser$1 = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var assert$2 = utils_1$1.assert;

    function ShortCurve(conf) {
      base$1.call(this, 'short', conf);

      this.a = new bn$2(conf.a, 16).toRed(this.red);
      this.b = new bn$2(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser$1(ShortCurve, base$1);
    var short_1 = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn$2(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn$2(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn$2(vec.a, 16),
            b: new bn$2(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn$2.mont(num);
      var tinv = new bn$2(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn$2(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn$2(1);
      var y1 = new bn$2(0);
      var x2 = new bn$2(0);
      var y2 = new bn$2(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn$2(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

    function Point(curve, x, y, isRed) {
      base$1.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn$2(x, 16);
        this.y = new bn$2(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser$1(Point, base$1.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      } ];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new bn$2(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      base$1.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn$2(0);
      } else {
        this.x = new bn$2(x, 16);
        this.y = new bn$2(y, 16);
        this.z = new bn$2(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser$1(JPoint, base$1.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new bn$2(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    function MontCurve(conf) {
      base$1.call(this, 'mont', conf);

      this.a = new bn$2(conf.a, 16).toRed(this.red);
      this.b = new bn$2(conf.b, 16).toRed(this.red);
      this.i4 = new bn$2(4).toRed(this.red).redInvm();
      this.two = new bn$2(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits_browser$1(MontCurve, base$1);
    var mont = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point$1(curve, x, z) {
      base$1.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new bn$2(x, 16);
        this.z = new bn$2(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits_browser$1(Point$1, base$1.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils_1$1.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point$1(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point$1.fromJSON(this, obj);
    };

    Point$1.prototype.precompute = function precompute() {
      // No-op
    };

    Point$1.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point$1.fromJSON = function fromJSON(curve, obj) {
      return new Point$1(curve, obj[0], obj[1] || curve.one);
    };

    Point$1.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point$1.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point$1.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point$1.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point$1.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point$1.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };

    var assert$3 = utils_1$1.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      base$1.call(this, 'edwards', conf);

      this.a = new bn$2(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new bn$2(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new bn$2(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert$3(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits_browser$1(EdwardsCurve, base$1);
    var edwards = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn$2(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new bn$2(y, 16);
      if (!y.red)
        y = y.toRed(this.red);

      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point$2(curve, x, y, z, t) {
      base$1.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new bn$2(x, 16);
        this.y = new bn$2(y, 16);
        this.z = z ? new bn$2(z, 16) : this.curve.one;
        this.t = t && new bn$2(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits_browser$1(Point$2, base$1.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point$2.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point$2(this, x, y, z, t);
    };

    Point$2.fromJSON = function fromJSON(curve, obj) {
      return new Point$2(curve, obj[0], obj[1], obj[2]);
    };

    Point$2.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point$2.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };

    Point$2.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point$2.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      if (this.curve.twisted) {
        // E = a * C
        var e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          var h = this.z.redSqr();
          // J = F - 2 * H
          var j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        var e = c.redAdd(d);
        // H = (c * Z1)^2
        var h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        var j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point$2.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };

    Point$2.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point$2.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point$2.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;

      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };

    Point$2.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };

    Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };

    Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };

    Point$2.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point$2.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
                              this.y,
                              this.z,
                              this.t && this.t.redNeg());
    };

    Point$2.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point$2.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point$2.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };

    Point$2.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    // Compatibility with BaseCurve
    Point$2.prototype.toP = Point$2.prototype.normalize;
    Point$2.prototype.mixedAdd = Point$2.prototype.add;

    var curve_1 = createCommonjsModule(function (module, exports) {

    var curve = exports;

    curve.base = base$1;
    curve.short = short_1;
    curve.mont = mont;
    curve.edwards = edwards;
    });

    var inherits_1 = inherits_browser$1;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    var toArray_1 = toArray;

    function toHex$3(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    var toHex_1 = toHex$3;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    var htonl_1 = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    var toHex32_1 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    var zero2_1 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    var zero8_1 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      minimalisticAssert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    var join32_1 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    var split32_1 = split32;

    function rotr32(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    var rotr32_1 = rotr32;

    function rotl32(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    var rotl32_1 = rotl32;

    function sum32(a, b) {
      return (a + b) >>> 0;
    }
    var sum32_1 = sum32;

    function sum32_3(a, b, c) {
      return (a + b + c) >>> 0;
    }
    var sum32_3_1 = sum32_3;

    function sum32_4(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    var sum32_4_1 = sum32_4;

    function sum32_5(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    var sum32_5_1 = sum32_5;

    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    var sum64_1 = sum64;

    function sum64_hi(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    var sum64_hi_1 = sum64_hi;

    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    var sum64_lo_1 = sum64_lo;

    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    var sum64_4_hi_1 = sum64_4_hi;

    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    var sum64_4_lo_1 = sum64_4_lo;

    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    var sum64_5_hi_1 = sum64_5_hi;

    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    var sum64_5_lo_1 = sum64_5_lo;

    function rotr64_hi(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    var rotr64_hi_1 = rotr64_hi;

    function rotr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var rotr64_lo_1 = rotr64_lo;

    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    var shr64_hi_1 = shr64_hi;

    function shr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var shr64_lo_1 = shr64_lo;

    var utils$2 = {
    	inherits: inherits_1,
    	toArray: toArray_1,
    	toHex: toHex_1,
    	htonl: htonl_1,
    	toHex32: toHex32_1,
    	zero2: zero2_1,
    	zero8: zero8_1,
    	join32: join32_1,
    	split32: split32_1,
    	rotr32: rotr32_1,
    	rotl32: rotl32_1,
    	sum32: sum32_1,
    	sum32_3: sum32_3_1,
    	sum32_4: sum32_4_1,
    	sum32_5: sum32_5_1,
    	sum64: sum64_1,
    	sum64_hi: sum64_hi_1,
    	sum64_lo: sum64_lo_1,
    	sum64_4_hi: sum64_4_hi_1,
    	sum64_4_lo: sum64_4_lo_1,
    	sum64_5_hi: sum64_5_hi_1,
    	sum64_5_lo: sum64_5_lo_1,
    	rotr64_hi: rotr64_hi_1,
    	rotr64_lo: rotr64_lo_1,
    	shr64_hi: shr64_hi_1,
    	shr64_lo: shr64_lo_1
    };

    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    var BlockHash_1 = BlockHash;

    BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$2.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$2.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      minimalisticAssert(this.pending === null);

      return this._digest(enc);
    };

    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var common = {
    	BlockHash: BlockHash_1
    };

    var rotr32$1 = utils$2.rotr32;

    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    var ft_1_1 = ft_1;

    function ch32(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    var ch32_1 = ch32;

    function maj32(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    var maj32_1 = maj32;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    var p32_1 = p32;

    function s0_256(x) {
      return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
    }
    var s0_256_1 = s0_256;

    function s1_256(x) {
      return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
    }
    var s1_256_1 = s1_256;

    function g0_256(x) {
      return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);
    }
    var g0_256_1 = g0_256;

    function g1_256(x) {
      return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);
    }
    var g1_256_1 = g1_256;

    var common$1 = {
    	ft_1: ft_1_1,
    	ch32: ch32_1,
    	maj32: maj32_1,
    	p32: p32_1,
    	s0_256: s0_256_1,
    	s1_256: s1_256_1,
    	g0_256: g0_256_1,
    	g1_256: g1_256_1
    };

    var rotl32$1 = utils$2.rotl32;
    var sum32$1 = utils$2.sum32;
    var sum32_5$1 = utils$2.sum32_5;
    var ft_1$1 = common$1.ft_1;
    var BlockHash$1 = common.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$1.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$2.inherits(SHA1, BlockHash$1);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'big');
      else
        return utils$2.split32(this.h, 'big');
    };

    var sum32$2 = utils$2.sum32;
    var sum32_4$1 = utils$2.sum32_4;
    var sum32_5$2 = utils$2.sum32_5;
    var ch32$1 = common$1.ch32;
    var maj32$1 = common$1.maj32;
    var s0_256$1 = common$1.s0_256;
    var s1_256$1 = common$1.s1_256;
    var g0_256$1 = common$1.g0_256;
    var g1_256$1 = common$1.g1_256;

    var BlockHash$2 = common.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$2.inherits(SHA256, BlockHash$2);
    var _256 = SHA256;

    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      minimalisticAssert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
        var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$2(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$2(T1, T2);
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
      this.h[5] = sum32$2(this.h[5], f);
      this.h[6] = sum32$2(this.h[6], g);
      this.h[7] = sum32$2(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'big');
      else
        return utils$2.split32(this.h, 'big');
    };

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      _256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$2.inherits(SHA224, _256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$2.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$2.split32(this.h.slice(0, 7), 'big');
    };

    var rotr64_hi$1 = utils$2.rotr64_hi;
    var rotr64_lo$1 = utils$2.rotr64_lo;
    var shr64_hi$1 = utils$2.shr64_hi;
    var shr64_lo$1 = utils$2.shr64_lo;
    var sum64$1 = utils$2.sum64;
    var sum64_hi$1 = utils$2.sum64_hi;
    var sum64_lo$1 = utils$2.sum64_lo;
    var sum64_4_hi$1 = utils$2.sum64_4_hi;
    var sum64_4_lo$1 = utils$2.sum64_4_lo;
    var sum64_5_hi$1 = utils$2.sum64_5_hi;
    var sum64_5_lo$1 = utils$2.sum64_5_lo;

    var BlockHash$3 = common.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();

      BlockHash$3.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$2.inherits(SHA512, BlockHash$3);
    var _512 = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi$1(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo$1(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      minimalisticAssert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi$1(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo$1(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
        el = sum64_lo$1(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64$1(this.h, 0, ah, al);
      sum64$1(this.h, 2, bh, bl);
      sum64$1(this.h, 4, ch, cl);
      sum64$1(this.h, 6, dh, dl);
      sum64$1(this.h, 8, eh, el);
      sum64$1(this.h, 10, fh, fl);
      sum64$1(this.h, 12, gh, gl);
      sum64$1(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'big');
      else
        return utils$2.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi$1(xh, xl, 28);
      var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo$1(xh, xl, 28);
      var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi$1(xh, xl, 14);
      var c1_hi = rotr64_hi$1(xh, xl, 18);
      var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo$1(xh, xl, 14);
      var c1_lo = rotr64_lo$1(xh, xl, 18);
      var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi$1(xh, xl, 1);
      var c1_hi = rotr64_hi$1(xh, xl, 8);
      var c2_hi = shr64_hi$1(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo$1(xh, xl, 1);
      var c1_lo = rotr64_lo$1(xh, xl, 8);
      var c2_lo = shr64_lo$1(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi$1(xh, xl, 19);
      var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61
      var c2_hi = shr64_hi$1(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo$1(xh, xl, 19);
      var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61
      var c2_lo = shr64_lo$1(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      _512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$2.inherits(SHA384, _512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$2.split32(this.h.slice(0, 12), 'big');
    };

    var sha1 = _1;
    var sha224 = _224;
    var sha256 = _256;
    var sha384 = _384;
    var sha512 = _512;

    var sha = {
    	sha1: sha1,
    	sha224: sha224,
    	sha256: sha256,
    	sha384: sha384,
    	sha512: sha512
    };

    var rotl32$2 = utils$2.rotl32;
    var sum32$3 = utils$2.sum32;
    var sum32_3$1 = utils$2.sum32_3;
    var sum32_4$2 = utils$2.sum32_4;
    var BlockHash$4 = common.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash$4.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$2.inherits(RIPEMD160, BlockHash$4);
    var ripemd160 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32$3(
          rotl32$2(
            sum32_4$2(A, f$1(j, B, C, D), msg[r$1[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32$2(C, 10);
        C = B;
        B = T;
        T = sum32$3(
          rotl32$2(
            sum32_4$2(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32$2(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3$1(this.h[1], C, Dh);
      this.h[1] = sum32_3$1(this.h[2], D, Eh);
      this.h[2] = sum32_3$1(this.h[3], E, Ah);
      this.h[3] = sum32_3$1(this.h[4], A, Bh);
      this.h[4] = sum32_3$1(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'little');
      else
        return utils$2.split32(this.h, 'little');
    };

    function f$1(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r$1 = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var ripemd = {
    	ripemd160: ripemd160
    };

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$2.toArray(key, enc));
    }
    var hmac = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      minimalisticAssert(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    var hash_1 = createCommonjsModule(function (module, exports) {
    var hash = exports;

    hash.utils = utils$2;
    hash.common = common;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    });

    var secp256k1 = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
          ]
        ]
      }
    };

    var curves_1 = createCommonjsModule(function (module, exports) {

    var curves = exports;





    var assert = utils_1$1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve
          });
          return curve;
        }
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
      ]
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
      ]
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
      ]
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash_1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
      ]
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash_1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650'
      ]
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '9'
      ]
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658'
      ]
    });

    var pre;
    try {
      pre = secp256k1;
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash_1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15'
        }
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre
      ]
    });
    });

    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash_1.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1.toArray(entropy, entropyEnc);
      add = utils_1.toArray(add, addEnc);

      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1.encode(res, enc);
    };

    var assert$4 = utils_1$1.assert;

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn$2(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$4(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$4(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };

    var assert$5 = utils_1$1.assert;

    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$5(options.r && options.s, 'Signature without r or s');
      this.r = new bn$2(options.r, 16);
      this.s = new bn$2(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature = Signature;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn$2(r);
      this.s = new bn$2(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };

    var assert$6 = utils_1$1.assert;




    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$6(curves_1.hasOwnProperty(options), 'Unknown curve ' + options);

        options = curves_1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || brorand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn$2(2));
      do {
        var priv = new bn$2(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      } while (true);
    };

    EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn$2(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn$2(1));

      for (var iter = 0; true; iter++) {
        var k = options.k ?
            options.k(iter) :
            new bn$2(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature$1, key, enc) {
      msg = this._truncateToN(new bn$2(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature$1 = new signature(signature$1, 'hex');

      // Perform primitive values validation
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);

      if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      var p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$6((3 & j) === j, 'The recovery param is more than two bits');
      signature$1 = new signature(signature$1, enc);

      var n = this.n;
      var e = new bn$2(msg);
      var r = signature$1.r;
      var s = signature$1.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var assert$7 = utils_1$1.assert;
    var parseBytes = utils_1$1.parseBytes;
    var cachedProperty = utils_1$1.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair$1(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }

    KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair$1)
        return pub;
      return new KeyPair$1(eddsa, { pub: pub });
    };

    KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair$1)
        return secret;
      return new KeyPair$1(eddsa, { secret: secret });
    };

    KeyPair$1.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty(KeyPair$1, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty(KeyPair$1, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty(KeyPair$1, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty(KeyPair$1, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair$1.prototype.sign = function sign(message) {
      assert$7(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair$1.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair$1.prototype.getSecret = function getSecret(enc) {
      assert$7(this._secret, 'KeyPair is public only');
      return utils_1$1.encode(this.secret(), enc);
    };

    KeyPair$1.prototype.getPublic = function getPublic(enc) {
      return utils_1$1.encode(this.pubBytes(), enc);
    };

    var key$1 = KeyPair$1;

    var assert$8 = utils_1$1.assert;
    var cachedProperty$1 = utils_1$1.cachedProperty;
    var parseBytes$1 = utils_1$1.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature$1(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object')
        sig = parseBytes$1(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }

      assert$8(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof bn$2)
        this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty$1(Signature$1, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty$1(Signature$1, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature$1.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature$1.prototype.toHex = function toHex() {
      return utils_1$1.encode(this.toBytes(), 'hex').toUpperCase();
    };

    var signature$1 = Signature$1;

    var assert$9 = utils_1$1.assert;
    var parseBytes$2 = utils_1$1.parseBytes;



    function EDDSA(curve) {
      assert$9(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA))
        return new EDDSA(curve);

      var curve = curves_1[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash_1.sha512;
    }

    var eddsa = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes$2(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                   .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes$2(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils_1$1.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return key$1.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return key$1.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof signature$1)
        return sig;
      return new signature$1(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils_1$1.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils_1$1.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils_1$1.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };

    var require$$0$2 = getCjsExportFromNamespace(_package$5);

    var elliptic_1 = createCommonjsModule(function (module, exports) {

    var elliptic = exports;

    elliptic.version = require$$0$2.version;
    elliptic.utils = utils_1$1;
    elliptic.rand = brorand;
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;

    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = eddsa;
    });

    const version$b = "signing-key/5.0.5";

    const logger$6 = new Logger(version$b);
    let _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new elliptic_1.ec("secp256k1");
        }
        return _curve;
    }
    class SigningKey {
        constructor(privateKey) {
            defineReadOnly(this, "curve", "secp256k1");
            defineReadOnly(this, "privateKey", hexlify(privateKey));
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            defineReadOnly(this, "_isSigningKey", true);
        }
        _addPoint(other) {
            const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
            const p1 = getCurve().keyFromPublic(arrayify(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const signature = keyPair.sign(arrayify(digest), { canonical: true });
            return splitSignature({
                recoveryParam: signature.recoveryParam,
                r: hexZeroPad("0x" + signature.r.toString(16), 32),
                s: hexZeroPad("0x" + signature.s.toString(16), 32),
            });
        }
        computeSharedSecret(otherKey) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
            return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        }
        static isSigningKey(value) {
            return !!(value && value._isSigningKey);
        }
    }
    function recoverPublicKey(digest, signature) {
        const sig = splitSignature(signature);
        const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
        return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    function computePublicKey(key, compressed) {
        const bytes = arrayify(key);
        if (bytes.length === 32) {
            const signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger$6.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }

    const version$c = "transactions/5.0.6";

    const logger$7 = new Logger(version$c);
    ///////////////////////////////
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return getAddress(value);
    }
    function handleNumber(value) {
        if (value === "0x") {
            return Zero$1;
        }
        return BigNumber.from(value);
    }
    const transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
    ];
    const allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true
    };
    function computeAddress(key) {
        const publicKey = computePublicKey(key);
        return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
    }
    function recoverAddress(digest, signature) {
        return computeAddress(recoverPublicKey(arrayify(digest), signature));
    }
    function serialize(transaction, signature) {
        checkProperties(transaction, allowedTransactionKeys);
        const raw = [];
        transactionFields.forEach(function (fieldInfo) {
            let value = transaction[fieldInfo.name] || ([]);
            const options = {};
            if (fieldInfo.numeric) {
                options.hexPad = "left";
            }
            value = arrayify(hexlify(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                logger$7.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
                value = stripZeros(value);
                if (value.length > fieldInfo.maxLength) {
                    logger$7.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                }
            }
            raw.push(hexlify(value));
        });
        let chainId = 0;
        if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
                logger$7.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
        }
        else if (signature && !isBytesLike(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
            raw.push(hexlify(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
        }
        // Requesting an unsigned transation
        if (!signature) {
            return encode$1(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        const sig = splitSignature(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        let v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
                logger$7.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
        }
        else if (sig.v !== v) {
            logger$7.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push(hexlify(v));
        raw.push(stripZeros(arrayify(sig.r)));
        raw.push(stripZeros(arrayify(sig.s)));
        return encode$1(raw);
    }
    function parse$2(rawTransaction) {
        const transaction = decode(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
            logger$7.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        const tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
            return tx;
        }
        try {
            tx.v = BigNumber.from(transaction[6]).toNumber();
        }
        catch (error) {
            console.log(error);
            return tx;
        }
        tx.r = hexZeroPad(transaction[7], 32);
        tx.s = hexZeroPad(transaction[8], 32);
        if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
        }
        else {
            // Signed Tranasaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
                tx.chainId = 0;
            }
            let recoveryParam = tx.v - 27;
            const raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
                raw.push(hexlify(tx.chainId));
                raw.push("0x");
                raw.push("0x");
                recoveryParam -= tx.chainId * 2 + 8;
            }
            const digest = keccak256(encode$1(raw));
            try {
                tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) {
                console.log(error);
            }
            tx.hash = keccak256(rawTransaction);
        }
        return tx;
    }

    var lib_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        computeAddress: computeAddress,
        recoverAddress: recoverAddress,
        serialize: serialize,
        parse: parse$2
    });

    var errors$9 = lib$3.errors;
    var formatters$2 = lib$3.formatters;


    var Subscriptions$1 = lib$9.subscriptions;

    var Method = function Method(options) {
        if (!options.call || !options.name) {
            throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
        }
        this.name = options.name;
        this.call = options.call;
        this.params = options.params || 0;
        this.inputFormatter = options.inputFormatter;
        this.outputFormatter = options.outputFormatter;
        this.transformPayload = options.transformPayload;
        this.extraFormatters = options.extraFormatters;
        this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string
        this.requestManager = options.requestManager;
        // reference to eth.accounts
        this.accounts = options.accounts;
        this.defaultBlock = options.defaultBlock || 'latest';
        this.defaultAccount = options.defaultAccount || null;
        this.transactionBlockTimeout = options.transactionBlockTimeout || 50;
        this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;
        this.transactionPollingTimeout = options.transactionPollingTimeout || 750;
        this.defaultCommon = options.defaultCommon;
        this.defaultChain = options.defaultChain;
        this.defaultHardfork = options.defaultHardfork;
        this.handleRevert = options.handleRevert;
    };
    Method.prototype.setRequestManager = function (requestManager, accounts) {
        this.requestManager = requestManager;
        // reference to eth.accounts
        if (accounts) {
            this.accounts = accounts;
        }
    };
    Method.prototype.createFunction = function (requestManager, accounts) {
        var func = this.buildCall();
        func.call = this.call;
        this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);
        return func;
    };
    Method.prototype.attachToObject = function (obj) {
        var func = this.buildCall();
        func.call = this.call;
        var name = this.name.split('.');
        if (name.length > 1) {
            obj[name[0]] = obj[name[0]] || {};
            obj[name[0]][name[1]] = func;
        }
        else {
            obj[name[0]] = func;
        }
    };
    /**
     * Should be used to determine name of the jsonrpc method based on arguments
     *
     * @method getCall
     * @param {Array} arguments
     * @return {String} name of jsonrpc method
     */
    Method.prototype.getCall = function (args) {
        return underscore.isFunction(this.call) ? this.call(args) : this.call;
    };
    /**
     * Should be used to extract callback from array of arguments. Modifies input param
     *
     * @method extractCallback
     * @param {Array} arguments
     * @return {Function|Null} callback, if exists
     */
    Method.prototype.extractCallback = function (args) {
        if (underscore.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
        }
    };
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @method validateArgs
     * @param {Array} arguments
     * @throws {Error} if it is not
     */
    Method.prototype.validateArgs = function (args) {
        if (args.length !== this.params) {
            throw errors$9.InvalidNumberOfParams(args.length, this.params, this.name);
        }
    };
    /**
     * Should be called to format input args of method
     *
     * @method formatInput
     * @param {Array}
     * @return {Array}
     */
    Method.prototype.formatInput = function (args) {
        var _this = this;
        if (!this.inputFormatter) {
            return args;
        }
        return this.inputFormatter.map(function (formatter, index) {
            // bind this for defaultBlock, and defaultAccount
            return formatter ? formatter.call(_this, args[index]) : args[index];
        });
    };
    /**
     * Should be called to format output(result) of method
     *
     * @method formatOutput
     * @param {Object}
     * @return {Object}
     */
    Method.prototype.formatOutput = function (result) {
        var _this = this;
        if (underscore.isArray(result)) {
            return result.map(function (res) {
                return _this.outputFormatter && res ? _this.outputFormatter(res) : res;
            });
        }
        else {
            return this.outputFormatter && result ? this.outputFormatter(result) : result;
        }
    };
    /**
     * Should create payload from given input args
     *
     * @method toPayload
     * @param {Array} args
     * @return {Object}
     */
    Method.prototype.toPayload = function (args) {
        var call = this.getCall(args);
        var callback = this.extractCallback(args);
        var params = this.formatInput(args);
        this.validateArgs(params);
        var payload = {
            method: call,
            params: params,
            callback: callback
        };
        if (this.transformPayload) {
            payload = this.transformPayload(payload);
        }
        return payload;
    };
    Method.prototype._confirmTransaction = function (defer, result, payload) {
        var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, lastBlock = null, receiptJSON = '', gasProvided = (underscore.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null, isContractDeployment = underscore.isObject(payload.params[0]) &&
            payload.params[0].data &&
            payload.params[0].from &&
            !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;
        // add custom send Methods
        var _ethereumCalls = [
            new Method({
                name: 'getBlockByNumber',
                call: 'eth_getBlockByNumber',
                params: 2,
                inputFormatter: [formatters$2.inputBlockNumberFormatter, function (val) {
                        return !!val;
                    }],
                outputFormatter: formatters$2.outputBlockFormatter
            }),
            new Method({
                name: 'getTransactionReceipt',
                call: 'eth_getTransactionReceipt',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatters$2.outputTransactionReceiptFormatter
            }),
            new Method({
                name: 'getCode',
                call: 'eth_getCode',
                params: 2,
                inputFormatter: [formatters$2.inputAddressFormatter, formatters$2.inputDefaultBlockNumberFormatter]
            }),
            new Method({
                name: 'getTransactionByHash',
                call: 'eth_getTransactionByHash',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatters$2.outputTransactionFormatter
            }),
            new Subscriptions$1({
                name: 'subscribe',
                type: 'eth',
                subscriptions: {
                    'newBlockHeaders': {
                        subscriptionName: 'newHeads',
                        params: 0,
                        outputFormatter: formatters$2.outputBlockFormatter
                    }
                }
            })
        ];
        // attach methods to this._ethereumCall
        var _ethereumCall = {};
        underscore.each(_ethereumCalls, function (mthd) {
            mthd.attachToObject(_ethereumCall);
            mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()
        });
        // fire "receipt" and confirmation events and resolve after
        var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {
            if (!err) {
                // create fake unsubscribe
                if (!sub) {
                    sub = {
                        unsubscribe: function () {
                            clearInterval(intervalId);
                        }
                    };
                }
                // if we have a valid receipt we don't need to send a request
                return (existingReceipt ? lib$8.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))
                    // catch error from requesting receipt
                    .catch(function (err) {
                    sub.unsubscribe();
                    promiseResolved = true;
                    lib$1._fireError({
                        message: 'Failed to check for transaction receipt:',
                        data: err
                    }, defer.eventEmitter, defer.reject);
                })
                    // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false
                    .then(async function (receipt) {
                    if (!receipt || !receipt.blockHash) {
                        throw new Error('Receipt missing or blockHash null');
                    }
                    // apply extra formatters
                    if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
                        receipt = method.extraFormatters.receiptFormatter(receipt);
                    }
                    // check if confirmation listener exists
                    if (defer.eventEmitter.listeners('confirmation').length > 0) {
                        var block;
                        // If there was an immediately retrieved receipt, it's already
                        // been confirmed by the direct call to checkConfirmation needed
                        // for parity instant-seal
                        if (existingReceipt === undefined || confirmationCount !== 0) {
                            // Get latest block to emit with confirmation
                            var latestBlock = await _ethereumCall.getBlockByNumber('latest');
                            var latestBlockHash = latestBlock ? latestBlock.hash : null;
                            if (isPolling) { // Check if actually a new block is existing on polling
                                if (lastBlock) {
                                    block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);
                                    if (block) {
                                        lastBlock = block;
                                        defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);
                                    }
                                }
                                else {
                                    block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);
                                    lastBlock = block;
                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);
                                }
                            }
                            else {
                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);
                            }
                        }
                        if ((isPolling && block) || !isPolling) {
                            confirmationCount++;
                        }
                        canUnsubscribe = false;
                        if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0
                            sub.unsubscribe();
                            defer.eventEmitter.removeAllListeners();
                        }
                    }
                    return receipt;
                })
                    // CHECK for CONTRACT DEPLOYMENT
                    .then(async function (receipt) {
                    if (isContractDeployment && !promiseResolved) {
                        if (!receipt.contractAddress) {
                            if (canUnsubscribe) {
                                sub.unsubscribe();
                                promiseResolved = true;
                            }
                            lib$1._fireError(errors$9.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                            return;
                        }
                        var code;
                        try {
                            code = await _ethereumCall.getCode(receipt.contractAddress);
                        }
                        catch (err) {
                            // ignore;
                        }
                        if (!code) {
                            return;
                        }
                        // If deployment is status.true and there was a real
                        // bytecode string, assume it was successful.
                        var deploymentSuccess = receipt.status === true && hasBytecode;
                        if (deploymentSuccess || code.length > 2) {
                            defer.eventEmitter.emit('receipt', receipt);
                            // if contract, return instance instead of receipt
                            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                                defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                            }
                            else {
                                defer.resolve(receipt);
                            }
                            // need to remove listeners, as they aren't removed automatically when succesfull
                            if (canUnsubscribe) {
                                defer.eventEmitter.removeAllListeners();
                            }
                        }
                        else {
                            lib$1._fireError(errors$9.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                        }
                        if (canUnsubscribe) {
                            sub.unsubscribe();
                        }
                        promiseResolved = true;
                    }
                    return receipt;
                })
                    // CHECK for normal tx check for receipt only
                    .then(async function (receipt) {
                    if (!isContractDeployment && !promiseResolved) {
                        if (!receipt.outOfGas &&
                            (!gasProvided || gasProvided !== receipt.gasUsed) &&
                            (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {
                            defer.eventEmitter.emit('receipt', receipt);
                            defer.resolve(receipt);
                            // need to remove listeners, as they aren't removed automatically when succesfull
                            if (canUnsubscribe) {
                                defer.eventEmitter.removeAllListeners();
                            }
                        }
                        else {
                            receiptJSON = JSON.stringify(receipt, null, 2);
                            if (receipt.status === false || receipt.status === '0x0') {
                                try {
                                    var revertMessage = null;
                                    if (method.handleRevert &&
                                        (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {
                                        var txReplayOptions = payload.params[0];
                                        // If send was raw, fetch the transaction and reconstitute the
                                        // original params so they can be replayed with `eth_call`
                                        if (method.call === 'eth_sendRawTransaction') {
                                            var rawTransactionHex = payload.params[0];
                                            var parsedTx = lib_esm.parse(rawTransactionHex);
                                            txReplayOptions = formatters$2.inputTransactionFormatter({
                                                data: parsedTx.data,
                                                to: parsedTx.to,
                                                from: parsedTx.from,
                                                gas: parsedTx.gasLimit.toHexString(),
                                                gasPrice: parsedTx.gasPrice.toHexString(),
                                                value: parsedTx.value.toHexString()
                                            });
                                        }
                                        // Get revert reason string with eth_call
                                        revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);
                                        if (revertMessage) { // Only throw a revert error if a revert reason is existing
                                            lib$1._fireError(errors$9.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);
                                        }
                                        else {
                                            throw false; // Throw false and let the try/catch statement handle the error correctly after
                                        }
                                    }
                                    else {
                                        throw false; // Throw false and let the try/catch statement handle the error correctly after
                                    }
                                }
                                catch (error) {
                                    // Throw an normal revert error if no revert reason is given or the detection of it is disabled
                                    lib$1._fireError(errors$9.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                                }
                            }
                            else {
                                // Throw OOG if status is not existing and provided gas and used gas are equal
                                lib$1._fireError(errors$9.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                            }
                        }
                        if (canUnsubscribe) {
                            sub.unsubscribe();
                        }
                        promiseResolved = true;
                    }
                })
                    // time out the transaction if not mined after 50 blocks
                    .catch(function () {
                    timeoutCount++;
                    // check to see if we are http polling
                    if (!!isPolling) {
                        // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second
                        if (timeoutCount - 1 >= method.transactionPollingTimeout) {
                            sub.unsubscribe();
                            promiseResolved = true;
                            lib$1._fireError(errors$9.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                        }
                    }
                    else {
                        if (timeoutCount - 1 >= method.transactionBlockTimeout) {
                            sub.unsubscribe();
                            promiseResolved = true;
                            lib$1._fireError(errors$9.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                        }
                    }
                });
            }
            else {
                sub.unsubscribe();
                promiseResolved = true;
                lib$1._fireError({
                    message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',
                    data: err
                }, defer.eventEmitter, defer.reject);
            }
        };
        // start watching for confirmation depending on the support features of the provider
        var startWatching = function (existingReceipt) {
            const startInterval = () => {
                intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);
            };
            if (!this.requestManager.provider.on) {
                startInterval();
            }
            else {
                _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {
                    if (err || !blockHeader) {
                        // fall back to polling
                        startInterval();
                    }
                    else {
                        checkConfirmation(existingReceipt, false, err, blockHeader, sub);
                    }
                });
            }
        }.bind(this);
        // first check if we already have a confirmed transaction
        _ethereumCall.getTransactionReceipt(result)
            .then(function (receipt) {
            if (receipt && receipt.blockHash) {
                if (defer.eventEmitter.listeners('confirmation').length > 0) {
                    // We must keep on watching for new Blocks, if a confirmation listener is present
                    startWatching(receipt);
                }
                checkConfirmation(receipt, false);
            }
            else if (!promiseResolved) {
                startWatching();
            }
        })
            .catch(function () {
            if (!promiseResolved)
                startWatching();
        });
    };
    var getWallet = function (from, accounts) {
        var wallet = null;
        // is index given
        if (underscore.isNumber(from)) {
            wallet = accounts.wallet[from];
            // is account given
        }
        else if (underscore.isObject(from) && from.address && from.privateKey) {
            wallet = from;
            // search in wallet for address
        }
        else {
            wallet = accounts.wallet[from.toLowerCase()];
        }
        return wallet;
    };
    Method.prototype.buildCall = function () {
        var method = this, isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'
        isCall = (method.call === 'eth_call');
        // actual send function
        var send = function () {
            var defer = lib$8(!isSendTx), payload = method.toPayload(Array.prototype.slice.call(arguments));
            // CALLBACK function
            var sendTxCallback = function (err, result) {
                if (method.handleRevert && isCall && method.abiCoder) {
                    var reasonData;
                    // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response
                    // Geth >= 1.9.15 attaches the reason data to an error object.
                    // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)
                    if (!err && method.isRevertReasonString(result)) {
                        reasonData = result.substring(10);
                    }
                    else if (err && err.data) {
                        reasonData = err.data.substring(10);
                    }
                    if (reasonData) {
                        var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);
                        var signature = 'Error(String)';
                        lib$1._fireError(errors$9.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {
                            reason: reason,
                            signature: signature
                        });
                        return;
                    }
                }
                try {
                    result = method.formatOutput(result);
                }
                catch (e) {
                    err = e;
                }
                if (result instanceof Error) {
                    err = result;
                }
                if (!err) {
                    if (payload.callback) {
                        payload.callback(null, result);
                    }
                }
                else {
                    if (err.error) {
                        err = err.error;
                    }
                    return lib$1._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
                }
                // return PROMISE
                if (!isSendTx) {
                    if (!err) {
                        defer.resolve(result);
                    }
                    // return PROMIEVENT
                }
                else {
                    defer.eventEmitter.emit('transactionHash', result);
                    method._confirmTransaction(defer, result, payload);
                }
            };
            // SENDS the SIGNED SIGNATURE
            var sendSignedTx = function (sign) {
                var signedPayload = underscore.extend({}, payload, {
                    method: 'eth_sendRawTransaction',
                    params: [sign.rawTransaction]
                });
                method.requestManager.send(signedPayload, sendTxCallback);
            };
            var sendRequest = function (payload, method) {
                if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {
                    var wallet;
                    // ETH_SENDTRANSACTION
                    if (payload.method === 'eth_sendTransaction') {
                        var tx = payload.params[0];
                        wallet = getWallet((underscore.isObject(tx)) ? tx.from : null, method.accounts);
                        // If wallet was found, sign tx, and send using sendRawTransaction
                        if (wallet && wallet.privateKey) {
                            var txOptions = underscore.omit(tx, 'from');
                            if (method.defaultChain && !txOptions.chain) {
                                txOptions.chain = method.defaultChain;
                            }
                            if (method.defaultHardfork && !txOptions.hardfork) {
                                txOptions.hardfork = method.defaultHardfork;
                            }
                            if (method.defaultCommon && !txOptions.common) {
                                txOptions.common = method.defaultCommon;
                            }
                            return method.accounts.signTransaction(txOptions, wallet.privateKey)
                                .then(sendSignedTx)
                                .catch(function (err) {
                                if (underscore.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {
                                    defer.eventEmitter.emit('error', err);
                                    defer.eventEmitter.removeAllListeners();
                                    defer.eventEmitter.catch(function () {
                                    });
                                }
                                defer.reject(err);
                            });
                        }
                        // ETH_SIGN
                    }
                    else if (payload.method === 'eth_sign') {
                        var data = payload.params[1];
                        wallet = getWallet(payload.params[0], method.accounts);
                        // If wallet was found, sign tx, and send using sendRawTransaction
                        if (wallet && wallet.privateKey) {
                            var sign = method.accounts.sign(data, wallet.privateKey);
                            if (payload.callback) {
                                payload.callback(null, sign.signature);
                            }
                            defer.resolve(sign.signature);
                            return;
                        }
                    }
                }
                return method.requestManager.send(payload, sendTxCallback);
            };
            // Send the actual transaction
            if (isSendTx && underscore.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {
                var getGasPrice = (new Method({
                    name: 'getGasPrice',
                    call: 'eth_gasPrice',
                    params: 0
                })).createFunction(method.requestManager);
                getGasPrice(function (err, gasPrice) {
                    if (gasPrice) {
                        payload.params[0].gasPrice = gasPrice;
                    }
                    if (isSendTx) {
                        setTimeout(() => {
                            defer.eventEmitter.emit('sending', payload);
                        }, 0);
                    }
                    sendRequest(payload, method);
                });
            }
            else {
                if (isSendTx) {
                    setTimeout(() => {
                        defer.eventEmitter.emit('sending', payload);
                    }, 0);
                }
                sendRequest(payload, method);
            }
            if (isSendTx) {
                setTimeout(() => {
                    defer.eventEmitter.emit('sent', payload);
                }, 0);
            }
            return defer.eventEmitter;
        };
        // necessary to attach things to the method
        send.method = method;
        // necessary for batch requests
        send.request = this.request.bind(this);
        return send;
    };
    /**
     * Returns the revert reason string if existing or otherwise false.
     *
     * @method getRevertReason
     *
     * @param {Object} txOptions
     * @param {Number} blockNumber
     *
     * @returns {Promise<Boolean|String>}
     */
    Method.prototype.getRevertReason = function (txOptions, blockNumber) {
        var self = this;
        return new Promise(function (resolve, reject) {
            (new Method({
                name: 'call',
                call: 'eth_call',
                params: 2,
                abiCoder: self.abiCoder,
                handleRevert: true
            }))
                .createFunction(self.requestManager)(txOptions, lib$1.numberToHex(blockNumber))
                .then(function () {
                resolve(false);
            })
                .catch(function (error) {
                if (error.reason) {
                    resolve({
                        reason: error.reason,
                        signature: error.signature
                    });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    /**
     * Checks if the given hex string is a revert message from the EVM
     *
     * @method isRevertReasonString
     *
     * @param {String} data - Hex string prefixed with 0x
     *
     * @returns {Boolean}
     */
    Method.prototype.isRevertReasonString = function (data) {
        return underscore.isString(data) && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';
    };
    /**
     * Should be called to create the pure JSONRPC request which can be used in a batch request
     *
     * @method request
     * @return {Object} jsonrpc request
     */
    Method.prototype.request = function () {
        var payload = this.toPayload(Array.prototype.slice.call(arguments));
        payload.format = this.formatOutput.bind(this);
        return payload;
    };
    var lib$a = Method;

    var formatters$3 = lib$3.formatters;


    var extend = function (pckg) {
        /* jshint maxcomplexity:5 */
        var ex = function (extension) {
            var extendedObject;
            if (extension.property) {
                if (!pckg[extension.property]) {
                    pckg[extension.property] = {};
                }
                extendedObject = pckg[extension.property];
            }
            else {
                extendedObject = pckg;
            }
            if (extension.methods) {
                extension.methods.forEach(function (method) {
                    if (!(method instanceof lib$a)) {
                        method = new lib$a(method);
                    }
                    method.attachToObject(extendedObject);
                    method.setRequestManager(pckg._requestManager);
                });
            }
            return pckg;
        };
        ex.formatters = formatters$3;
        ex.utils = lib$1;
        ex.Method = lib$a;
        return ex;
    };
    var extend_1 = extend;

    /*
        This file is part of web3.js.

        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * @file index.js
     * @author Fabian Vogelsteller <fabian@ethereum.org>
     * @date 2017
     */


    const packageInit = (pkg, args) => {
        args = Array.prototype.slice.call(args);
        if (!pkg) {
            throw new Error('You need to instantiate using the "new" keyword.');
        }
        // make property of pkg._provider, which can properly set providers
        Object.defineProperty(pkg, 'currentProvider', {
            get: () => {
                return pkg._provider;
            },
            set: (value) => {
                return pkg.setProvider(value);
            },
            enumerable: true,
            configurable: true
        });
        // inherit from parent package or create a new RequestManager
        if (args[0] && args[0]._requestManager) {
            pkg._requestManager = args[0]._requestManager;
        }
        else {
            pkg._requestManager = new lib$7.Manager(args[0], args[1]);
        }
        // add givenProvider
        pkg.givenProvider = lib$7.Manager.givenProvider;
        pkg.providers = lib$7.Manager.providers;
        pkg._provider = pkg._requestManager.provider;
        // add SETPROVIDER function (don't overwrite if already existing)
        if (!pkg.setProvider) {
            pkg.setProvider = (provider, net) => {
                pkg._requestManager.setProvider(provider, net);
                pkg._provider = pkg._requestManager.provider;
                return true;
            };
        }
        pkg.setRequestManager = (manager) => {
            pkg._requestManager = manager;
            pkg._provider = manager.provider;
        };
        // attach batch request creation
        pkg.BatchRequest = lib$7.BatchManager.bind(null, pkg._requestManager);
        // attach extend function
        pkg.extend = extend_1(pkg);
    };
    const addProviders = (pkg) => {
        pkg.givenProvider = lib$7.Manager.givenProvider;
        pkg.providers = lib$7.Manager.providers;
    };
    var lib$b = {
        packageInit,
        addProviders
    };

    var Net = function () {
        var _this = this;
        // sets _requestmanager
        lib$b.packageInit(this, arguments);
        [
            new lib$a({
                name: 'getId',
                call: 'net_version',
                params: 0,
                outputFormatter: parseInt
            }),
            new lib$a({
                name: 'isListening',
                call: 'net_listening',
                params: 0
            }),
            new lib$a({
                name: 'getPeerCount',
                call: 'net_peerCount',
                params: 0,
                outputFormatter: lib$1.hexToNumber
            })
        ].forEach(function (method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager);
        });
    };
    lib$b.addProviders(Net);
    var lib$c = Net;

    /*
        This file is part of web3.js.
        web3.js is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        web3.js is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
        You should have received a copy of the GNU Lesser General Public License
        along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
    */
    /**
     * Source: https://docs.ens.domains/ens-deployments
     *
     * @type {{addresses: {main: string, rinkeby: string, goerli: string, ropsten: string}}}
     */
    var config$2 = {
        addresses: {
            main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            ropsten: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            rinkeby: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        // These ids obtained at ensdomains docs:
        // https://docs.ens.domains/contract-developer-guide/writing-a-resolver
        interfaceIds: {
            addr: "0x3b3b57de",
            setAddr: "0x3b3b57de",
            pubkey: "0xc8690233",
            setPubkey: "0xc8690233",
            contenthash: "0xbc1c58d1",
            setContenthash: "0xbc1c58d1",
            content: "0xd8389dc5",
            setContent: "0xd8389dc5"
        }
    };
    var config_1 = config$2;

    const version$d = "abi/5.0.0-beta.153";

    const logger$8 = new Logger(version$d);
    const _constructorGuard$2 = {};
    let ModifiersBytes = { calldata: true, memory: true, storage: true };
    let ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
                return true;
            }
        }
        else if (type === "address") {
            if (name === "payable") {
                return true;
            }
        }
        else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
                return true;
            }
        }
        if (ModifiersBytes[name] || name === "payable") {
            logger$8.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
    }
    // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    function parseParamType(param, allowIndexed) {
        let originalParam = param;
        function throwError(i) {
            logger$8.throwArgumentError(`unexpected character at position ${i}`, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
            let node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
                node.indexed = false;
            }
            return node;
        }
        let parent = { type: "", name: "", state: { allowType: true } };
        let node = parent;
        for (let i = 0; i < param.length; i++) {
            let c = param[i];
            switch (c) {
                case "(":
                    if (node.state.allowType && node.type === "") {
                        node.type = "tuple";
                    }
                    else if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [newNode(node)];
                    node = node.components[0];
                    break;
                case ")":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ",":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let sibling = newNode(node.parent);
                    //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case " ":
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== "") {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== "") {
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                if (node.indexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            else if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case "[":
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case "]":
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            logger$8.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
            if (!allowIndexed) {
                throwError(originalParam.length - 7);
            }
            if (node.indexed) {
                throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
        }
        else if (checkModifier(node.type, node.name)) {
            node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    function populate(object, params) {
        for (let key in params) {
            defineReadOnly(object, key, params[key]);
        }
    }
    const FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readble with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json"
    });
    const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    class ParamType {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$8.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                });
            }
            populate(this, params);
            let match = this.type.match(paramTypeArray);
            if (match) {
                populate(this, {
                    arrayLength: parseInt(match[2] || "-1"),
                    arrayChildren: ParamType.fromObject({
                        type: match[1],
                        components: this.components
                    }),
                    baseType: "array"
                });
            }
            else {
                populate(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: ((this.components != null) ? "tuple" : this.type)
                });
            }
            this._isParamType = true;
            Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, addres bar) indexed baz"
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$8.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                let result = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name: (this.name || undefined)
                };
                if (typeof (this.indexed) === "boolean") {
                    result.indexed = this.indexed;
                }
                if (this.components) {
                    result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
                }
                return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.baseType === "array") {
                result += this.arrayChildren.format(format);
                result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
                if (this.baseType === "tuple") {
                    if (format !== FormatTypes.sighash) {
                        result += this.type;
                    }
                    result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== FormatTypes.sighash) {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === FormatTypes.full && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        }
        static from(value, allowIndexed) {
            if (typeof (value) === "string") {
                return ParamType.fromString(value, allowIndexed);
            }
            return ParamType.fromObject(value);
        }
        static fromObject(value) {
            if (ParamType.isParamType(value)) {
                return value;
            }
            return new ParamType(_constructorGuard$2, {
                name: (value.name || null),
                type: verifyType(value.type),
                indexed: ((value.indexed == null) ? null : !!value.indexed),
                components: (value.components ? value.components.map(ParamType.fromObject) : null)
            });
        }
        static fromString(value, allowIndexed) {
            function ParamTypify(node) {
                return ParamType.fromObject({
                    name: node.name,
                    type: node.type,
                    indexed: node.indexed,
                    components: node.components
                });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
            return !!(value != null && value._isParamType);
        }
    }
    function parseParams(value, allowIndex) {
        return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
    }
    class Fragment {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$8.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
        }
        static from(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            if (typeof (value) === "string") {
                return Fragment.fromString(value);
            }
            return Fragment.fromObject(value);
        }
        static fromObject(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            switch (value.type) {
                case "function":
                    return FunctionFragment.fromObject(value);
                case "event":
                    return EventFragment.fromObject(value);
                case "constructor":
                    return ConstructorFragment.fromObject(value);
                case "fallback":
                case "receive":
                    // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                    return null;
            }
            return logger$8.throwArgumentError("invalid fragment object", "value", value);
        }
        static fromString(value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
                return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
                return FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
                return ConstructorFragment.fromString(value.trim());
            }
            return logger$8.throwArgumentError("unsupported fragment", "value", value);
        }
        static isFragment(value) {
            return !!(value && value._isFragment);
        }
    }
    class EventFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$8.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "event ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.anonymous) {
                    result += "anonymous ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
        }
        static fromObject(value) {
            if (EventFragment.isEventFragment(value)) {
                return value;
            }
            if (value.type !== "event") {
                logger$8.throwArgumentError("invalid event object", "value", value);
            }
            const params = {
                name: verifyIdentifier(value.name),
                anonymous: value.anonymous,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                type: "event"
            };
            return new EventFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let match = value.match(regexParen);
            if (!match) {
                logger$8.throwArgumentError("invalid event string", "value", value);
            }
            let anonymous = false;
            match[3].split(" ").forEach((modifier) => {
                switch (modifier.trim()) {
                    case "anonymous":
                        anonymous = true;
                        break;
                    case "":
                        break;
                    default:
                        logger$8.warn("unknown modifier: " + modifier);
                }
            });
            return EventFragment.fromObject({
                name: match[1].trim(),
                anonymous: anonymous,
                inputs: parseParams(match[2], true),
                type: "event"
            });
        }
        static isEventFragment(value) {
            return (value && value._isFragment && value.type === "event");
        }
    }
    function parseGas(value, params) {
        params.gas = null;
        let comps = value.split("@");
        if (comps.length !== 1) {
            if (comps.length > 2) {
                logger$8.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                logger$8.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = BigNumber.from(comps[1]);
            return comps[0];
        }
        return value;
    }
    function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
                case "constant":
                    params.constant = true;
                    break;
                case "payable":
                    params.payable = true;
                    params.stateMutability = "payable";
                    break;
                case "pure":
                    params.constant = true;
                    params.stateMutability = "pure";
                    break;
                case "view":
                    params.constant = true;
                    params.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + modifier);
            }
        });
    }
    function verifyState(value) {
        let result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
        };
        if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
                if ((!!value.constant) !== result.constant) {
                    logger$8.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
                if ((!!value.payable) !== result.payable) {
                    logger$8.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                }
            }
        }
        else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
                logger$8.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
                result.stateMutability = "view";
            }
            else {
                result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
                logger$8.throwArgumentError("cannot have constant payable function", "value", value);
            }
        }
        else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
        }
        else if (value.type !== "constructor") {
            logger$8.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
    }
    class ConstructorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$8.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payble: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            if (format === FormatTypes.sighash) {
                logger$8.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
            }
            let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ConstructorFragment.fromString(value);
            }
            return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ConstructorFragment.isConstructorFragment(value)) {
                return value;
            }
            if (value.type !== "constructor") {
                logger$8.throwArgumentError("invalid constructor object", "value", value);
            }
            let state = verifyState(value);
            if (state.constant) {
                logger$8.throwArgumentError("constructor cannot be constant", "value", value);
            }
            const params = {
                name: null,
                type: value.type,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new ConstructorFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "constructor" };
            value = parseGas(value, params);
            let parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
                logger$8.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
            return (value && value._isFragment && value.type === "constructor");
        }
    }
    class FunctionFragment extends ConstructorFragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$8.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payble: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                    ouputs: this.outputs.map((output) => JSON.parse(output.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "function ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.stateMutability) {
                    if (this.stateMutability !== "nonpayable") {
                        result += (this.stateMutability + " ");
                    }
                }
                else if (this.constant) {
                    result += "view ";
                }
                if (this.outputs && this.outputs.length) {
                    result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
                }
                if (this.gas != null) {
                    result += "@" + this.gas.toString() + " ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return FunctionFragment.fromString(value);
            }
            return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
            if (FunctionFragment.isFunctionFragment(value)) {
                return value;
            }
            if (value.type !== "function") {
                logger$8.throwArgumentError("invalid function object", "value", value);
            }
            let state = verifyState(value);
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                constant: state.constant,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new FunctionFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "function" };
            value = parseGas(value, params);
            let comps = value.split(" returns ");
            if (comps.length > 2) {
                logger$8.throwArgumentError("invalid function string", "value", value);
            }
            let parens = comps[0].match(regexParen);
            if (!parens) {
                logger$8.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
                let returns = comps[1].match(regexParen);
                if (returns[1].trim() != "" || returns[3].trim() != "") {
                    logger$8.throwArgumentError("unexpected tokens", "value", value);
                }
                params.outputs = parseParams(returns[2], false);
            }
            else {
                params.outputs = [];
            }
            return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
            return (value && value._isFragment && value.type === "function");
        }
    }
    //export class ErrorFragment extends Fragment {
    //}
    //export class StructFragment extends Fragment {
    //}
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
    }
    const regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
    function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
            logger$8.throwArgumentError(`invalid identifier "${value}"`, "value", value);
        }
        return value;
    }
    const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
        value = value.trim();
        let result = [];
        let accum = "";
        let depth = 0;
        for (let offset = 0; offset < value.length; offset++) {
            let c = value[offset];
            if (c === "," && depth === 0) {
                result.push(accum);
                accum = "";
            }
            else {
                accum += c;
                if (c === "(") {
                    depth++;
                }
                else if (c === ")") {
                    depth--;
                    if (depth === -1) {
                        logger$8.throwArgumentError("unbalanced parenthesis", "value", value);
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }

    const logger$9 = new Logger(version$d);
    function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (let key in object) {
                const childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    class Coder {
        constructor(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        _throwError(message, value) {
            logger$9.throwArgumentError(message, this.localName, value);
        }
    }
    class Writer {
        constructor(wordSize) {
            defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = arrayify([]);
            this._padding = new Uint8Array(wordSize);
        }
        get data() { return hexlify(this._data); }
        get length() { return this._data.length; }
        _writeData(data) {
            this._data = concat([this._data, data]);
            return data.length;
        }
        // Arrayish items; padded on the right to wordSize
        writeBytes(value) {
            let bytes = arrayify(value);
            if (bytes.length % this.wordSize) {
                bytes = concat([bytes, this._padding.slice(bytes.length % this.wordSize)]);
            }
            return this._writeData(bytes);
        }
        _getValue(value) {
            let bytes = arrayify(BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger$9.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        }
        // BigNumberish items; padded on the left to wordSize
        writeValue(value) {
            return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
            let offset = this.length;
            this.writeValue(0);
            return (value) => {
                this._data.set(this._getValue(value), offset);
            };
        }
    }
    class Reader {
        constructor(data, wordSize, coerceFunc) {
            defineReadOnly(this, "_data", arrayify(data));
            defineReadOnly(this, "wordSize", wordSize || 32);
            defineReadOnly(this, "_coerceFunc", coerceFunc);
            this._offset = 0;
        }
        get data() { return hexlify(this._data); }
        get consumed() { return this._offset; }
        // The default Coerce function
        static coerce(name, value) {
            let match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        }
        coerce(name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        }
        _peekBytes(offset, length) {
            let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                logger$9.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this._data.length,
                    offset: this._offset + alignedLength
                });
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc);
        }
        readBytes(length) {
            let bytes = this._peekBytes(0, length);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        }
        readValue() {
            return BigNumber.from(this.readBytes(this.wordSize));
        }
    }

    class AddressCoder extends Coder {
        constructor(localName) {
            super("address", "address", localName, false);
        }
        encode(writer, value) {
            try {
                getAddress(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
        }
    }

    // Clones the functionality of an existing Coder, but without a localName
    class AnonymousCoder extends Coder {
        constructor(coder) {
            super(coder.name, coder.type, undefined, coder.dynamic);
            this.coder = coder;
        }
        encode(writer, value) {
            return this.coder.encode(writer, value);
        }
        decode(reader) {
            return this.coder.decode(reader);
        }
    }

    const logger$a = new Logger(version$d);
    function pack(writer, coders, values) {
        if (Array.isArray(values)) ;
        else if (values && typeof (values) === "object") {
            let arrayValues = [];
            coders.forEach(function (coder) {
                arrayValues.push(values[coder.localName]);
            });
            values = arrayValues;
        }
        else {
            logger$a.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== values.length) {
            logger$a.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        let staticWriter = new Writer(writer.wordSize);
        let dynamicWriter = new Writer(writer.wordSize);
        let updateFuncs = [];
        coders.forEach((coder, index) => {
            let value = values[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                let dynamicOffset = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                let updateFunc = staticWriter.writeUpdatableValue();
                updateFuncs.push((baseOffset) => {
                    updateFunc(baseOffset + dynamicOffset);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => { func(staticWriter.length); });
        let length = writer.writeBytes(staticWriter.data);
        length += writer.writeBytes(dynamicWriter.data);
        return length;
    }
    function unpack(reader, coders) {
        let values = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        // The amount of dynamic data read; to consume later to synchronize
        let dynamicLength = 0;
        coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
                let offset = reader.readValue();
                let offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
                dynamicLength += offsetReader.consumed;
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // @TODO: get rid of this an see if it still works?
        // Consume the dynamic components in the main reader
        reader.readBytes(dynamicLength);
        // Add any named parameters (i.e. tuples)
        coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            const value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    get: () => { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    get: () => { throw value; }
                });
            }
        }
        return Object.freeze(values);
    }
    class ArrayCoder extends Coder {
        constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            this.coder = coder;
            this.length = length;
        }
        encode(writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger$a.checkArgumentCount(count, value.length, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack(writer, coders, value);
        }
        decode(reader) {
            let count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
                coders.push(new AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        }
    }

    class BooleanCoder extends Coder {
        constructor(localName) {
            super("bool", "bool", localName, false);
        }
        encode(writer, value) {
            return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        }
    }

    class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
            super(type, type, localName, true);
        }
        encode(writer, value) {
            value = arrayify(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        }
        decode(reader) {
            return reader.readBytes(reader.readValue().toNumber());
        }
    }
    class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("bytes", localName);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(super.decode(reader)));
        }
    }

    // @TODO: Merge this with bytes
    class FixedBytesCoder extends Coder {
        constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            this.size = size;
        }
        encode(writer, value) {
            let data = arrayify(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
        }
    }

    class NullCoder extends Coder {
        constructor(localName) {
            super("null", "", localName, false);
        }
        encode(writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        }
        decode(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        }
    }

    class NumberCoder extends Coder {
        constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            this.size = size;
            this.signed = signed;
        }
        encode(writer, value) {
            let v = BigNumber.from(value);
            // Check bounds are safe for encoding
            let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
            if (this.signed) {
                let bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne$1))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        }
        decode(reader) {
            let value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        }
    }

    const version$e = "strings/5.0.5";

    const logger$b = new Logger(version$e);
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    var Utf8ErrorReason;
    (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong reperesentation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return logger$b.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes);
    }
    // Common error handing strategies
    const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
            onError = Utf8ErrorFuncs.error;
        }
        bytes = arrayify(bytes);
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                }
                else {
                    i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
                let nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                    res = null;
                    break;
                }
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid contimuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
        if (form != UnicodeNormalizationForm.current) {
            logger$b.checkNormalize();
            str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                const c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error("invalid utf-8 string");
                }
                // Surrogate Pair
                const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return arrayify(result);
    }
    function _toUtf8String(codePoints) {
        return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }

    function bytes2(data) {
        if ((data.length % 4) !== 0) {
            throw new Error("bad data");
        }
        let result = [];
        for (let i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
        }
        return result;
    }
    function createTable(data, func) {
        if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
        }
        let lo = 0;
        let result = {};
        data.split(",").forEach((pair) => {
            let comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
        });
        return result;
    }
    function createRangeTable(data) {
        let hi = 0;
        return data.split(",").map((v) => {
            let comps = v.split("-");
            if (comps.length === 1) {
                comps[1] = "0";
            }
            else if (comps[1] === "") {
                comps[1] = "1";
            }
            let lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
        });
    }
    const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

    class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("string", localName);
        }
        encode(writer, value) {
            return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
            return toUtf8String(super.decode(reader));
        }
    }

    class TupleCoder extends Coder {
        constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            this.coders = coders;
        }
        encode(writer, value) {
            return pack(writer, this.coders, value);
        }
        decode(reader) {
            return reader.coerce(this.name, unpack(reader, this.coders));
        }
    }

    const logger$c = new Logger(version$d);
    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    class AbiCoder {
        constructor(coerceFunc) {
            logger$c.checkNew(new.target, AbiCoder);
            defineReadOnly(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
            switch (param.baseType) {
                case "address":
                    return new AddressCoder(param.name);
                case "bool":
                    return new BooleanCoder(param.name);
                case "string":
                    return new StringCoder(param.name);
                case "bytes":
                    return new BytesCoder(param.name);
                case "array":
                    return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new TupleCoder((param.components || []).map((component) => {
                        return this._getCoder(component);
                    }), param.name);
                case "":
                    return new NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
                let size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger$c.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                let size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger$c.throwArgumentError("invalid bytes length", "param", param);
                }
                return new FixedBytesCoder(size, param.name);
            }
            return logger$c.throwArgumentError("invalid type", "type", param.type);
        }
        _getWordSize() { return 32; }
        _getReader(data) {
            return new Reader(data, this._getWordSize(), this.coerceFunc);
        }
        _getWriter() {
            return new Writer(this._getWordSize());
        }
        encode(types, values) {
            if (types.length !== values.length) {
                logger$c.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = (new TupleCoder(coders, "_"));
            const writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        }
        decode(types, data) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.decode(this._getReader(arrayify(data)));
        }
    }
    const defaultAbiCoder = new AbiCoder();

    const version$f = "hash/5.0.5";

    const logger$d = new Logger(version$f);
    function id(text) {
        return keccak256(toUtf8Bytes(text));
    }

    const logger$e = new Logger(version$d);
    class LogDescription extends Description {
    }
    class TransactionDescription extends Description {
    }
    class Indexed extends Description {
        static isIndexed(value) {
            return !!(value && value._isIndexed);
        }
    }
    function wrapAccessError(property, error) {
        const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
        wrap.error = error;
        return wrap;
    }
    function checkNames(fragment, type, params) {
        params.reduce((accum, param) => {
            if (param.name) {
                if (accum[param.name]) {
                    logger$e.throwArgumentError(`duplicate ${type} parameter ${JSON.stringify(param.name)} in ${fragment.format("full")}`, "fragment", fragment);
                }
                accum[param.name] = true;
            }
            return accum;
        }, {});
    }
    class Interface {
        constructor(fragments) {
            logger$e.checkNew(new.target, Interface);
            let abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            defineReadOnly(this, "fragments", abi.map((fragment) => {
                return Fragment.from(fragment);
            }).filter((fragment) => (fragment != null)));
            defineReadOnly(this, "_abiCoder", getStatic((new.target), "getAbiCoder")());
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "errors", {});
            defineReadOnly(this, "events", {});
            defineReadOnly(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach((fragment) => {
                let bucket = null;
                switch (fragment.type) {
                    case "constructor":
                        if (this.deploy) {
                            logger$e.warn("duplicate definition - constructor");
                            return;
                        }
                        checkNames(fragment, "input", fragment.inputs);
                        defineReadOnly(this, "deploy", fragment);
                        return;
                    case "function":
                        checkNames(fragment, "input", fragment.inputs);
                        checkNames(fragment, "output", fragment.outputs);
                        bucket = this.functions;
                        break;
                    case "event":
                        checkNames(fragment, "input", fragment.inputs);
                        bucket = this.events;
                        break;
                    default:
                        return;
                }
                let signature = fragment.format();
                if (bucket[signature]) {
                    logger$e.warn("duplicate definition - " + signature);
                    return;
                }
                bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                defineReadOnly(this, "deploy", ConstructorFragment.from({
                    payable: false,
                    type: "constructor"
                }));
            }
            defineReadOnly(this, "_isInterface", true);
        }
        format(format) {
            if (!format) {
                format = FormatTypes.full;
            }
            if (format === FormatTypes.sighash) {
                logger$e.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            const abi = this.fragments.map((fragment) => fragment.format(format));
            // We need to re-bundle the JSON fragments a bit
            if (format === FormatTypes.json) {
                return JSON.stringify(abi.map((j) => JSON.parse(j)));
            }
            return abi;
        }
        // Sub-classes can override these to handle other blockchains
        static getAbiCoder() {
            return defaultAbiCoder;
        }
        static getAddress(address) {
            return getAddress(address);
        }
        static getSighash(functionFragment) {
            return hexDataSlice(id(functionFragment.format()), 0, 4);
        }
        static getEventTopic(eventFragment) {
            return id(eventFragment.format());
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getFunction(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                for (const name in this.functions) {
                    if (nameOrSignatureOrSighash === this.getSighash(name)) {
                        return this.functions[name];
                    }
                }
                logger$e.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$e.throwArgumentError("no matching function", "name", name);
                }
                else if (matching.length > 1) {
                    logger$e.throwArgumentError("multiple matching functions", "name", name);
                }
                return this.functions[matching[0]];
            }
            // Normlize the signature and lookup the function
            const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$e.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Find an event definition by any means necessary (unless it is ambiguous)
        getEvent(nameOrSignatureOrTopic) {
            if (isHexString(nameOrSignatureOrTopic)) {
                const topichash = nameOrSignatureOrTopic.toLowerCase();
                for (const name in this.events) {
                    if (topichash === this.getEventTopic(name)) {
                        return this.events[name];
                    }
                }
                logger$e.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                const name = nameOrSignatureOrTopic.trim();
                const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$e.throwArgumentError("no matching event", "name", name);
                }
                else if (matching.length > 1) {
                    logger$e.throwArgumentError("multiple matching events", "name", name);
                }
                return this.events[matching[0]];
            }
            // Normlize the signature and lookup the function
            const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
                logger$e.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
        }
        // Get the sighash (the bytes4 selector) used by Solidity to identify a function
        getSighash(functionFragment) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return getStatic(this.constructor, "getSighash")(functionFragment);
        }
        // Get the topic (the bytes32 hash) used by Solidity to identify an event
        getEventTopic(eventFragment) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            return getStatic(this.constructor, "getEventTopic")(eventFragment);
        }
        _decodeParams(params, data) {
            return this._abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
            return this._abiCoder.encode(params, values);
        }
        encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        }
        // Decode the data for a function call (e.g. tx.data)
        decodeFunctionData(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                logger$e.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        }
        // Encode the data for a function call (e.g. tx.data)
        encodeFunctionData(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(concat([
                this.getSighash(functionFragment),
                this._encodeParams(functionFragment.inputs, values || [])
            ]));
        }
        // Decode the result from a function call (e.g. from eth_call)
        decodeFunctionResult(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            let bytes = arrayify(data);
            let reason = null;
            let errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(functionFragment.outputs, bytes);
                    }
                    catch (error) { }
                    break;
                case 4:
                    if (hexlify(bytes.slice(0, 4)) === "0x08c379a0") {
                        errorSignature = "Error(string)";
                        reason = this._abiCoder.decode(["string"], bytes.slice(4))[0];
                    }
                    break;
            }
            return logger$e.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, {
                method: functionFragment.format(),
                errorSignature: errorSignature,
                errorArgs: [reason],
                reason: reason
            });
        }
        // Encode the result for a function call (e.g. for eth_call)
        encodeFunctionResult(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
        }
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
                logger$e.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: values
                });
            }
            let topics = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            const encodeTopic = (param, value) => {
                if (param.type === "string") {
                    return id(value);
                }
                else if (param.type === "bytes") {
                    return keccak256(hexlify(value));
                }
                // Check addresses are valid
                if (param.type === "address") {
                    this._abiCoder.encode(["address"], [value]);
                }
                return hexZeroPad(hexlify(value), 32);
            };
            values.forEach((value, index) => {
                let param = eventFragment.inputs[index];
                if (!param.indexed) {
                    if (value != null) {
                        logger$e.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    }
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger$e.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        }
        encodeEventLog(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
                logger$e.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach((param, index) => {
                const value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push(id(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push(keccak256(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TOOD
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(this._abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this._abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
                let topicHash = this.getEventTopic(eventFragment);
                if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                    logger$e.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                }
                topics = topics.slice(1);
            }
            let indexed = [];
            let nonIndexed = [];
            let dynamic = [];
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;
            let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);
            let result = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (resultIndexed == null) {
                        result[index] = new Indexed({ _isIndexed: true, hash: null });
                    }
                    else if (dynamic[index]) {
                        result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                    }
                    else {
                        try {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            result[index] = error;
                        }
                    }
                }
                else {
                    try {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
                // Add the keyword argument if named and safe
                if (param.name && result[param.name] == null) {
                    const value = result[index];
                    // Make error named values throw on access
                    if (value instanceof Error) {
                        Object.defineProperty(result, param.name, {
                            get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                        });
                    }
                    else {
                        result[param.name] = value;
                    }
                }
            });
            // Make all error indexed values throw on access
            for (let i = 0; i < result.length; i++) {
                const value = result[i];
                if (value instanceof Error) {
                    Object.defineProperty(result, i, {
                        get: () => { throw wrapAccessError(`index ${i}`, value); }
                    });
                }
            }
            return Object.freeze(result);
        }
        // Given a transaction, find the matching function fragment (if any) and
        // determine all its properties and call parameters
        parseTransaction(tx) {
            let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new TransactionDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                functionFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
                value: BigNumber.from(tx.value || "0"),
            });
        }
        // Given an event log, find the matching event fragment (if any) and
        // determine all its properties and values
        parseLog(log) {
            let fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe jsut a fragment?
            return new LogDescription({
                eventFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                topic: this.getEventTopic(fragment),
                args: this.decodeEventLog(fragment, log.data, log.topics)
            });
        }
        /*
        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
            if (Interface.isInterface(value)) {
                return value;
            }
            if (typeof(value) === "string") {
                return new Interface(JSON.parse(value));
            }
            return new Interface(value);
        }
        */
        static isInterface(value) {
            return !!(value && value._isInterface);
        }
    }

    var lib_esm$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ConstructorFragment: ConstructorFragment,
        EventFragment: EventFragment,
        Fragment: Fragment,
        FunctionFragment: FunctionFragment,
        ParamType: ParamType,
        FormatTypes: FormatTypes,
        AbiCoder: AbiCoder,
        defaultAbiCoder: defaultAbiCoder,
        Interface: Interface,
        Indexed: Indexed,
        checkResultErrors: checkResultErrors,
        LogDescription: LogDescription,
        TransactionDescription: TransactionDescription
    });

    /*
     This file is part of web3.js.

     web3.js is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     web3.js is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
     */
    /**
     * @file index.js
     * @author Marek Kotewicz <marek@parity.io>
     * @author Fabian Vogelsteller <fabian@frozeman.de>
     * @date 2018
     */
    var Buffer$2 = buffer.Buffer;


    var EthersAbiCoder = lib_esm$1.AbiCoder;
    var ParamType$1 = lib_esm$1.ParamType;
    var ethersAbiCoder = new EthersAbiCoder(function (type, value) {
        if (type.match(/^u?int/) && !underscore.isArray(value) && (!underscore.isObject(value) || value.constructor.name !== 'BN')) {
            return value.toString();
        }
        return value;
    });
    // result method
    function Result() {
    }
    /**
     * ABICoder prototype should be used to encode/decode solidity params of any type
     */
    var ABICoder = function () {
    };
    /**
     * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
     *
     * @method encodeFunctionSignature
     * @param {String|Object} functionName
     * @return {String} encoded function name
     */
    ABICoder.prototype.encodeFunctionSignature = function (functionName) {
        if (underscore.isObject(functionName)) {
            functionName = lib$1._jsonInterfaceMethodToString(functionName);
        }
        return lib$1.sha3(functionName).slice(0, 10);
    };
    /**
     * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
     *
     * @method encodeEventSignature
     * @param {String|Object} functionName
     * @return {String} encoded function name
     */
    ABICoder.prototype.encodeEventSignature = function (functionName) {
        if (underscore.isObject(functionName)) {
            functionName = lib$1._jsonInterfaceMethodToString(functionName);
        }
        return lib$1.sha3(functionName);
    };
    /**
     * Should be used to encode plain param
     *
     * @method encodeParameter
     *
     * @param {String|Object} type
     * @param {any} param
     *
     * @return {String} encoded plain param
     */
    ABICoder.prototype.encodeParameter = function (type, param) {
        return this.encodeParameters([type], [param]);
    };
    /**
     * Should be used to encode list of params
     *
     * @method encodeParameters
     *
     * @param {Array<String|Object>} types
     * @param {Array<any>} params
     *
     * @return {String} encoded list of params
     */
    ABICoder.prototype.encodeParameters = function (types, params) {
        var self = this;
        types = self.mapTypes(types);
        params = params.map(function (param, index) {
            let type = types[index];
            if (typeof type === 'object' && type.type) {
                // We may get a named type of shape {name, type}
                type = type.type;
            }
            param = self.formatParam(type, param);
            // Format params for tuples
            if (typeof type === 'string' && type.includes('tuple')) {
                const coder = ethersAbiCoder._getCoder(ParamType$1.from(type));
                const modifyParams = (coder, param) => {
                    if (coder.name === 'array') {
                        return param.map(p => modifyParams(ethersAbiCoder._getCoder(ParamType$1.from(coder.type.replace('[]', ''))), p));
                    }
                    coder.coders.forEach((c, i) => {
                        if (c.name === 'tuple') {
                            modifyParams(c, param[i]);
                        }
                        else {
                            param[i] = self.formatParam(c.name, param[i]);
                        }
                    });
                };
                modifyParams(coder, param);
            }
            return param;
        });
        return ethersAbiCoder.encode(types, params);
    };
    /**
     * Map types if simplified format is used
     *
     * @method mapTypes
     * @param {Array} types
     * @return {Array}
     */
    ABICoder.prototype.mapTypes = function (types) {
        var self = this;
        var mappedTypes = [];
        types.forEach(function (type) {
            // Remap `function` type params to bytes24 since Ethers does not
            // recognize former type. Solidity docs say `Function` is a bytes24
            // encoding the contract address followed by the function selector hash.
            if (typeof type === 'object' && type.type === 'function') {
                type.type = "bytes24";
            }
            if (self.isSimplifiedStructFormat(type)) {
                var structName = Object.keys(type)[0];
                mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {
                    components: self.mapStructToCoderFormat(type[structName])
                }));
                return;
            }
            mappedTypes.push(type);
        });
        return mappedTypes;
    };
    /**
     * Check if type is simplified struct format
     *
     * @method isSimplifiedStructFormat
     * @param {string | Object} type
     * @returns {boolean}
     */
    ABICoder.prototype.isSimplifiedStructFormat = function (type) {
        return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';
    };
    /**
     * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
     *
     * @method mapStructNameAndType
     * @param {string} structName
     * @return {{type: string, name: *}}
     */
    ABICoder.prototype.mapStructNameAndType = function (structName) {
        var type = 'tuple';
        if (structName.indexOf('[]') > -1) {
            type = 'tuple[]';
            structName = structName.slice(0, -2);
        }
        return { type: type, name: structName };
    };
    /**
     * Maps the simplified format in to the expected format of the ABICoder
     *
     * @method mapStructToCoderFormat
     * @param {Object} struct
     * @return {Array}
     */
    ABICoder.prototype.mapStructToCoderFormat = function (struct) {
        var self = this;
        var components = [];
        Object.keys(struct).forEach(function (key) {
            if (typeof struct[key] === 'object') {
                components.push(Object.assign(self.mapStructNameAndType(key), {
                    components: self.mapStructToCoderFormat(struct[key])
                }));
                return;
            }
            components.push({
                name: key,
                type: struct[key]
            });
        });
        return components;
    };
    /**
     * Handle some formatting of params for backwards compatability with Ethers V4
     *
     * @method formatParam
     * @param {String} - type
     * @param {any} - param
     * @return {any} - The formatted param
     */
    ABICoder.prototype.formatParam = function (type, param) {
        const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
        const paramTypeBytesArray = new RegExp(/^bytes([0-9]*)\[\]$/);
        const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
        const paramTypeNumberArray = new RegExp(/^(u?int)([0-9]*)\[\]$/);
        // Format BN to string
        if (lib$1.isBN(param) || lib$1.isBigNumber(param)) {
            return param.toString(10);
        }
        if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {
            return param.map(p => this.formatParam(type.replace('[]', ''), p));
        }
        // Format correct width for u?int[0-9]*
        let match = type.match(paramTypeNumber);
        if (match) {
            let size = parseInt(match[2] || "256");
            if (size / 8 < param.length) {
                // pad to correct bit width
                param = lib$1.leftPad(param, size);
            }
        }
        // Format correct length for bytes[0-9]+
        match = type.match(paramTypeBytes);
        if (match) {
            if (Buffer$2.isBuffer(param)) {
                param = lib$1.toHex(param);
            }
            // format to correct length
            let size = parseInt(match[1]);
            if (size) {
                let maxSize = size * 2;
                if (param.substring(0, 2) === '0x') {
                    maxSize += 2;
                }
                if (param.length < maxSize) {
                    // pad to correct length
                    param = lib$1.rightPad(param, size * 2);
                }
            }
            // format odd-length bytes to even-length
            if (param.length % 2 === 1) {
                param = '0x0' + param.substring(2);
            }
        }
        return param;
    };
    /**
     * Encodes a function call from its json interface and parameters.
     *
     * @method encodeFunctionCall
     * @param {Array} jsonInterface
     * @param {Array} params
     * @return {String} The encoded ABI for this function call
     */
    ABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {
        return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');
    };
    /**
     * Should be used to decode bytes to plain param
     *
     * @method decodeParameter
     * @param {String} type
     * @param {String} bytes
     * @return {Object} plain param
     */
    ABICoder.prototype.decodeParameter = function (type, bytes) {
        return this.decodeParameters([type], bytes)[0];
    };
    /**
     * Should be used to decode list of params
     *
     * @method decodeParameter
     * @param {Array} outputs
     * @param {String} bytes
     * @return {Array} array of plain params
     */
    ABICoder.prototype.decodeParameters = function (outputs, bytes) {
        if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {
            throw new Error('Returned values aren\'t valid, did it run Out of Gas? ' +
                'You might also see this error if you are not using the ' +
                'correct ABI for the contract you are retrieving data from, ' +
                'requesting data from a block number that does not exist, ' +
                'or querying a node which is not fully synced.');
        }
        var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''));
        var returnValue = new Result();
        returnValue.__length__ = 0;
        outputs.forEach(function (output, i) {
            var decodedValue = res[returnValue.__length__];
            decodedValue = (decodedValue === '0x') ? null : decodedValue;
            returnValue[i] = decodedValue;
            if (underscore.isObject(output) && output.name) {
                returnValue[output.name] = decodedValue;
            }
            returnValue.__length__++;
        });
        return returnValue;
    };
    /**
     * Decodes events non- and indexed parameters.
     *
     * @method decodeLog
     * @param {Object} inputs
     * @param {String} data
     * @param {Array} topics
     * @return {Array} array of plain params
     */
    ABICoder.prototype.decodeLog = function (inputs, data, topics) {
        var _this = this;
        topics = underscore.isArray(topics) ? topics : [topics];
        data = data || '';
        var notIndexedInputs = [];
        var indexedParams = [];
        var topicCount = 0;
        // TODO check for anonymous logs?
        inputs.forEach(function (input, i) {
            if (input.indexed) {
                indexedParams[i] = (['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {
                    return input.type.indexOf(staticType) !== -1;
                })) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];
                topicCount++;
            }
            else {
                notIndexedInputs[i] = input;
            }
        });
        var nonIndexedData = data;
        var notIndexedParams = (nonIndexedData) ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];
        var returnValue = new Result();
        returnValue.__length__ = 0;
        inputs.forEach(function (res, i) {
            returnValue[i] = (res.type === 'string') ? '' : null;
            if (typeof notIndexedParams[i] !== 'undefined') {
                returnValue[i] = notIndexedParams[i];
            }
            if (typeof indexedParams[i] !== 'undefined') {
                returnValue[i] = indexedParams[i];
            }
            if (res.name) {
                returnValue[res.name] = returnValue[i];
            }
            returnValue.__length__++;
        });
        return returnValue;
    };
    var coder = new ABICoder();
    var lib$d = coder;

    var Subscription$1 = lib$9.subscription;
    var formatters$4 = lib$3.formatters;
    var errors$a = lib$3.errors;


    /**
     * Should be called to create new contract instance
     *
     * @method Contract
     * @constructor
     * @param {Array} jsonInterface
     * @param {String} address
     * @param {Object} options
     */
    var Contract = function Contract(jsonInterface, address, options) {
        var _this = this, args = Array.prototype.slice.call(arguments);
        if (!(this instanceof Contract)) {
            throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');
        }
        this.setProvider = function () {
            lib$b.packageInit(_this, arguments);
            _this.clearSubscriptions = _this._requestManager.clearSubscriptions;
        };
        // sets _requestmanager
        lib$b.packageInit(this, [this.constructor]);
        this.clearSubscriptions = this._requestManager.clearSubscriptions;
        if (!jsonInterface || !(Array.isArray(jsonInterface))) {
            throw errors$a.ContractMissingABIError();
        }
        // create the options object
        this.options = {};
        var lastArg = args[args.length - 1];
        if (underscore.isObject(lastArg) && !underscore.isArray(lastArg)) {
            options = lastArg;
            this.options = underscore.extend(this.options, this._getOrSetDefaultOptions(options));
            if (underscore.isObject(address)) {
                address = null;
            }
        }
        // set address
        Object.defineProperty(this.options, 'address', {
            set: function (value) {
                if (value) {
                    _this._address = lib$1.toChecksumAddress(formatters$4.inputAddressFormatter(value));
                }
            },
            get: function () {
                return _this._address;
            },
            enumerable: true
        });
        // add method and event signatures, when the jsonInterface gets set
        Object.defineProperty(this.options, 'jsonInterface', {
            set: function (value) {
                _this.methods = {};
                _this.events = {};
                _this._jsonInterface = value.map(function (method) {
                    var func, funcName;
                    // make constant and payable backwards compatible
                    method.constant = (method.stateMutability === "view" || method.stateMutability === "pure" || method.constant);
                    method.payable = (method.stateMutability === "payable" || method.payable);
                    if (method.name) {
                        funcName = lib$1._jsonInterfaceMethodToString(method);
                    }
                    // function
                    if (method.type === 'function') {
                        method.signature = lib$d.encodeFunctionSignature(funcName);
                        func = _this._createTxObject.bind({
                            method: method,
                            parent: _this
                        });
                        // add method only if not one already exists
                        if (!_this.methods[method.name]) {
                            _this.methods[method.name] = func;
                        }
                        else {
                            var cascadeFunc = _this._createTxObject.bind({
                                method: method,
                                parent: _this,
                                nextMethod: _this.methods[method.name]
                            });
                            _this.methods[method.name] = cascadeFunc;
                        }
                        // definitely add the method based on its signature
                        _this.methods[method.signature] = func;
                        // add method by name
                        _this.methods[funcName] = func;
                        // event
                    }
                    else if (method.type === 'event') {
                        method.signature = lib$d.encodeEventSignature(funcName);
                        var event = _this._on.bind(_this, method.signature);
                        // add method only if not already exists
                        if (!_this.events[method.name] || _this.events[method.name].name === 'bound ')
                            _this.events[method.name] = event;
                        // definitely add the method based on its signature
                        _this.events[method.signature] = event;
                        // add event by name
                        _this.events[funcName] = event;
                    }
                    return method;
                });
                // add allEvents
                _this.events.allEvents = _this._on.bind(_this, 'allevents');
                return _this._jsonInterface;
            },
            get: function () {
                return _this._jsonInterface;
            },
            enumerable: true
        });
        // get default account from the Class
        var defaultAccount = this.constructor.defaultAccount;
        var defaultBlock = this.constructor.defaultBlock || 'latest';
        Object.defineProperty(this, 'handleRevert', {
            get: function () {
                if (_this.options.handleRevert === false || _this.options.handleRevert === true) {
                    return _this.options.handleRevert;
                }
                return this.constructor.handleRevert;
            },
            set: function (val) {
                _this.options.handleRevert = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultCommon', {
            get: function () {
                return _this.options.common || this.constructor.defaultCommon;
            },
            set: function (val) {
                _this.options.common = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultHardfork', {
            get: function () {
                return _this.options.hardfork || this.constructor.defaultHardfork;
            },
            set: function (val) {
                _this.options.hardfork = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultChain', {
            get: function () {
                return _this.options.chain || this.constructor.defaultChain;
            },
            set: function (val) {
                _this.options.chain = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'transactionPollingTimeout', {
            get: function () {
                if (_this.options.transactionPollingTimeout === 0) {
                    return _this.options.transactionPollingTimeout;
                }
                return _this.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;
            },
            set: function (val) {
                _this.options.transactionPollingTimeout = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'transactionConfirmationBlocks', {
            get: function () {
                if (_this.options.transactionConfirmationBlocks === 0) {
                    return _this.options.transactionConfirmationBlocks;
                }
                return _this.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;
            },
            set: function (val) {
                _this.options.transactionConfirmationBlocks = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'transactionBlockTimeout', {
            get: function () {
                if (_this.options.transactionBlockTimeout === 0) {
                    return _this.options.transactionBlockTimeout;
                }
                return _this.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;
            },
            set: function (val) {
                _this.options.transactionBlockTimeout = val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultAccount', {
            get: function () {
                return defaultAccount;
            },
            set: function (val) {
                if (val) {
                    defaultAccount = lib$1.toChecksumAddress(formatters$4.inputAddressFormatter(val));
                }
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultBlock', {
            get: function () {
                return defaultBlock;
            },
            set: function (val) {
                defaultBlock = val;
                return val;
            },
            enumerable: true
        });
        // properties
        this.methods = {};
        this.events = {};
        this._address = null;
        this._jsonInterface = [];
        // set getter/setter properties
        this.options.address = address;
        this.options.jsonInterface = jsonInterface;
    };
    /**
     * Sets the new provider, creates a new requestManager, registers the "data" listener on the provider and sets the
     * accounts module for the Contract class.
     *
     * @method setProvider
     *
     * @param {string|provider} provider
     * @param {Accounts} accounts
     *
     * @returns void
     */
    Contract.setProvider = function (provider, accounts) {
        // Contract.currentProvider = provider;
        lib$b.packageInit(this, [provider]);
        this._ethAccounts = accounts;
    };
    /**
     * Get the callback and modify the array if necessary
     *
     * @method _getCallback
     * @param {Array} args
     * @return {Function} the callback
     */
    Contract.prototype._getCallback = function getCallback(args) {
        if (args && underscore.isFunction(args[args.length - 1])) {
            return args.pop(); // modify the args array!
        }
    };
    /**
     * Checks that no listener with name "newListener" or "removeListener" is added.
     *
     * @method _checkListener
     * @param {String} type
     * @param {String} event
     * @return {Object} the contract instance
     */
    Contract.prototype._checkListener = function (type, event) {
        if (event === type) {
            throw errors$a.ContractReservedEventError(type);
        }
    };
    /**
     * Use default values, if options are not available
     *
     * @method _getOrSetDefaultOptions
     * @param {Object} options the options gived by the user
     * @return {Object} the options with gaps filled by defaults
     */
    Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {
        var gasPrice = options.gasPrice ? String(options.gasPrice) : null;
        var from = options.from ? lib$1.toChecksumAddress(formatters$4.inputAddressFormatter(options.from)) : null;
        options.data = options.data || this.options.data;
        options.from = from || this.options.from;
        options.gasPrice = gasPrice || this.options.gasPrice;
        options.gas = options.gas || options.gasLimit || this.options.gas;
        // TODO replace with only gasLimit?
        delete options.gasLimit;
        return options;
    };
    /**
     * Should be used to encode indexed params and options to one final object
     *
     * @method _encodeEventABI
     * @param {Object} event
     * @param {Object} options
     * @return {Object} everything combined together and encoded
     */
    Contract.prototype._encodeEventABI = function (event, options) {
        options = options || {};
        var filter = options.filter || {}, result = {};
        ['fromBlock', 'toBlock'].filter(function (f) {
            return options[f] !== undefined;
        }).forEach(function (f) {
            result[f] = formatters$4.inputBlockNumberFormatter(options[f]);
        });
        // use given topics
        if (underscore.isArray(options.topics)) {
            result.topics = options.topics;
            // create topics based on filter
        }
        else {
            result.topics = [];
            // add event signature
            if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
                result.topics.push(event.signature);
            }
            // add event topics (indexed arguments)
            if (event.name !== 'ALLEVENTS') {
                var indexedTopics = event.inputs.filter(function (i) {
                    return i.indexed === true;
                }).map(function (i) {
                    var value = filter[i.name];
                    if (!value) {
                        return null;
                    }
                    // TODO: https://github.com/ethereum/web3.js/issues/344
                    // TODO: deal properly with components
                    if (underscore.isArray(value)) {
                        return value.map(function (v) {
                            return lib$d.encodeParameter(i.type, v);
                        });
                    }
                    return lib$d.encodeParameter(i.type, value);
                });
                result.topics = result.topics.concat(indexedTopics);
            }
            if (!result.topics.length)
                delete result.topics;
        }
        if (this.options.address) {
            result.address = this.options.address.toLowerCase();
        }
        return result;
    };
    /**
     * Should be used to decode indexed params and options
     *
     * @method _decodeEventABI
     * @param {Object} data
     * @return {Object} result object with decoded indexed && not indexed params
     */
    Contract.prototype._decodeEventABI = function (data) {
        var event = this;
        data.data = data.data || '';
        data.topics = data.topics || [];
        var result = formatters$4.outputLogFormatter(data);
        // if allEvents get the right event
        if (event.name === 'ALLEVENTS') {
            event = event.jsonInterface.find(function (intf) {
                return (intf.signature === data.topics[0]);
            }) || { anonymous: true };
        }
        // create empty inputs if none are present (e.g. anonymous events on allEvents)
        event.inputs = event.inputs || [];
        // Handle case where an event signature shadows the current ABI with non-identical
        // arg indexing. If # of topics doesn't match, event is anon.
        if (!event.anonymous) {
            let indexedInputs = 0;
            event.inputs.forEach(input => input.indexed ? indexedInputs++ : null);
            if (indexedInputs > 0 && (data.topics.length !== indexedInputs + 1)) {
                event = {
                    anonymous: true,
                    inputs: []
                };
            }
        }
        var argTopics = event.anonymous ? data.topics : data.topics.slice(1);
        result.returnValues = lib$d.decodeLog(event.inputs, data.data, argTopics);
        delete result.returnValues.__length__;
        // add name
        result.event = event.name;
        // add signature
        result.signature = (event.anonymous || !data.topics[0]) ? null : data.topics[0];
        // move the data and topics to "raw"
        result.raw = {
            data: result.data,
            topics: result.topics
        };
        delete result.data;
        delete result.topics;
        return result;
    };
    /**
     * Encodes an ABI for a method, including signature or the method.
     * Or when constructor encodes only the constructor parameters.
     *
     * @method _encodeMethodABI
     * @param {Mixed} args the arguments to encode
     * @param {String} the encoded ABI
     */
    Contract.prototype._encodeMethodABI = function _encodeMethodABI() {
        var methodSignature = this._method.signature, args = this.arguments || [];
        var signature = false, paramsABI = this._parent.options.jsonInterface.filter(function (json) {
            return ((methodSignature === 'constructor' && json.type === methodSignature) ||
                ((json.signature === methodSignature || json.signature === methodSignature.replace('0x', '') || json.name === methodSignature) && json.type === 'function'));
        }).map(function (json) {
            var inputLength = (underscore.isArray(json.inputs)) ? json.inputs.length : 0;
            if (inputLength !== args.length) {
                throw new Error('The number of arguments is not matching the methods required number. You need to pass ' + inputLength + ' arguments.');
            }
            if (json.type === 'function') {
                signature = json.signature;
            }
            return underscore.isArray(json.inputs) ? json.inputs : [];
        }).map(function (inputs) {
            return lib$d.encodeParameters(inputs, args).replace('0x', '');
        })[0] || '';
        // return constructor
        if (methodSignature === 'constructor') {
            if (!this._deployData)
                throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');
            if (!this._deployData.startsWith('0x')) {
                this._deployData = '0x' + this._deployData;
            }
            return this._deployData + paramsABI;
        }
        // return method
        var returnValue = (signature) ? signature + paramsABI : paramsABI;
        if (!returnValue) {
            throw new Error('Couldn\'t find a matching contract method named "' + this._method.name + '".');
        }
        return returnValue;
    };
    /**
     * Decode method return values
     *
     * @method _decodeMethodReturn
     * @param {Array} outputs
     * @param {String} returnValues
     * @return {Object} decoded output return values
     */
    Contract.prototype._decodeMethodReturn = function (outputs, returnValues) {
        if (!returnValues) {
            return null;
        }
        returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
        var result = lib$d.decodeParameters(outputs, returnValues);
        if (result.__length__ === 1) {
            return result[0];
        }
        delete result.__length__;
        return result;
    };
    /**
     * Deploys a contract and fire events based on its state: transactionHash, receipt
     *
     * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
     *
     * @method deploy
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} EventEmitter possible events are "error", "transactionHash" and "receipt"
     */
    Contract.prototype.deploy = function (options, callback) {
        options = options || {};
        options.arguments = options.arguments || [];
        options = this._getOrSetDefaultOptions(options);
        // throw error, if no "data" is specified
        if (!options.data) {
            if (typeof callback === 'function') {
                return callback(errors$a.ContractMissingDeployDataError());
            }
            throw errors$a.ContractMissingDeployDataError();
        }
        var constructor = underscore.find(this.options.jsonInterface, function (method) {
            return (method.type === 'constructor');
        }) || {};
        constructor.signature = 'constructor';
        return this._createTxObject.apply({
            method: constructor,
            parent: this,
            deployData: options.data,
            _ethAccounts: this.constructor._ethAccounts
        }, options.arguments);
    };
    /**
     * Gets the event signature and outputFormatters
     *
     * @method _generateEventOptions
     * @param {Object} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the event options object
     */
    Contract.prototype._generateEventOptions = function () {
        var args = Array.prototype.slice.call(arguments);
        // get the callback
        var callback = this._getCallback(args);
        // get the options
        var options = (underscore.isObject(args[args.length - 1])) ? args.pop() : {};
        var eventName = (underscore.isString(args[0])) ? args[0] : 'allevents';
        var event = (eventName.toLowerCase() === 'allevents') ? {
            name: 'ALLEVENTS',
            jsonInterface: this.options.jsonInterface
        } : this.options.jsonInterface.find(function (json) {
            return (json.type === 'event' && (json.name === eventName || json.signature === '0x' + eventName.replace('0x', '')));
        });
        if (!event) {
            throw errors$a.ContractEventDoesNotExistError(eventName);
        }
        if (!lib$1.isAddress(this.options.address)) {
            throw errors$a.ContractNoAddressDefinedError();
        }
        return {
            params: this._encodeEventABI(event, options),
            event: event,
            callback: callback
        };
    };
    /**
     * Adds event listeners and creates a subscription, and remove it once its fired.
     *
     * @method clone
     * @return {Object} the event subscription
     */
    Contract.prototype.clone = function () {
        return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
    };
    /**
     * Adds event listeners and creates a subscription, and remove it once its fired.
     *
     * @method once
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the event subscription
     */
    Contract.prototype.once = function (event, options, callback) {
        var args = Array.prototype.slice.call(arguments);
        // get the callback
        callback = this._getCallback(args);
        if (!callback) {
            throw errors$a.ContractOnceRequiresCallbackError();
        }
        // don't allow fromBlock
        if (options)
            delete options.fromBlock;
        // don't return as once shouldn't provide "on"
        this._on(event, options, function (err, res, sub) {
            sub.unsubscribe();
            if (underscore.isFunction(callback)) {
                callback(err, res, sub);
            }
        });
        return undefined;
    };
    /**
     * Adds event listeners and creates a subscription.
     *
     * @method _on
     *
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     *
     * @return {Object} the event subscription
     */
    Contract.prototype._on = function () {
        var subOptions = this._generateEventOptions.apply(this, arguments);
        if (subOptions.params && subOptions.params.toBlock) {
            delete subOptions.params.toBlock;
            console.warn('Invalid option: toBlock. Use getPastEvents for specific range.');
        }
        // prevent the event "newListener" and "removeListener" from being overwritten
        this._checkListener('newListener', subOptions.event.name);
        this._checkListener('removeListener', subOptions.event.name);
        // TODO check if listener already exists? and reuse subscription if options are the same.
        // create new subscription
        var subscription = new Subscription$1({
            subscription: {
                params: 1,
                inputFormatter: [formatters$4.inputLogFormatter],
                outputFormatter: this._decodeEventABI.bind(subOptions.event),
                // DUBLICATE, also in web3-eth
                subscriptionHandler: function (output) {
                    if (output.removed) {
                        this.emit('changed', output);
                    }
                    else {
                        this.emit('data', output);
                    }
                    if (underscore.isFunction(this.callback)) {
                        this.callback(null, output, this);
                    }
                }
            },
            type: 'eth',
            requestManager: this._requestManager
        });
        subscription.subscribe('logs', subOptions.params, subOptions.callback || function () { });
        return subscription;
    };
    /**
     * Get past events from contracts
     *
     * @method getPastEvents
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the promievent
     */
    Contract.prototype.getPastEvents = function () {
        var subOptions = this._generateEventOptions.apply(this, arguments);
        var getPastLogs = new lib$a({
            name: 'getPastLogs',
            call: 'eth_getLogs',
            params: 1,
            inputFormatter: [formatters$4.inputLogFormatter],
            outputFormatter: this._decodeEventABI.bind(subOptions.event)
        });
        getPastLogs.setRequestManager(this._requestManager);
        var call = getPastLogs.buildCall();
        getPastLogs = null;
        return call(subOptions.params, subOptions.callback);
    };
    /**
     * returns the an object with call, send, estimate functions
     *
     * @method _createTxObject
     * @returns {Object} an object with functions to call the methods
     */
    Contract.prototype._createTxObject = function _createTxObject() {
        var args = Array.prototype.slice.call(arguments);
        var txObject = {};
        if (this.method.type === 'function') {
            txObject.call = this.parent._executeMethod.bind(txObject, 'call');
            txObject.call.request = this.parent._executeMethod.bind(txObject, 'call', true); // to make batch requests
        }
        txObject.send = this.parent._executeMethod.bind(txObject, 'send');
        txObject.send.request = this.parent._executeMethod.bind(txObject, 'send', true); // to make batch requests
        txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);
        txObject.estimateGas = this.parent._executeMethod.bind(txObject, 'estimate');
        if (args && this.method.inputs && args.length !== this.method.inputs.length) {
            if (this.nextMethod) {
                return this.nextMethod.apply(null, args);
            }
            throw errors$a.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);
        }
        txObject.arguments = args || [];
        txObject._method = this.method;
        txObject._parent = this.parent;
        txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;
        if (this.deployData) {
            txObject._deployData = this.deployData;
        }
        return txObject;
    };
    /**
     * Generates the options for the execute call
     *
     * @method _processExecuteArguments
     * @param {Array} args
     * @param {Promise} defer
     */
    Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {
        var processedArgs = {};
        processedArgs.type = args.shift();
        // get the callback
        processedArgs.callback = this._parent._getCallback(args);
        // get block number to use for call
        if (processedArgs.type === 'call' && args[args.length - 1] !== true && (underscore.isString(args[args.length - 1]) || isFinite(args[args.length - 1])))
            processedArgs.defaultBlock = args.pop();
        // get the options
        processedArgs.options = (underscore.isObject(args[args.length - 1])) ? args.pop() : {};
        // get the generateRequest argument for batch requests
        processedArgs.generateRequest = (args[args.length - 1] === true) ? args.pop() : false;
        processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);
        processedArgs.options.data = this.encodeABI();
        // add contract address
        if (!this._deployData && !lib$1.isAddress(this._parent.options.address))
            throw errors$a.ContractNoAddressDefinedError();
        if (!this._deployData)
            processedArgs.options.to = this._parent.options.address;
        // return error, if no "data" is specified
        if (!processedArgs.options.data)
            return lib$1._fireError(new Error('Couldn\'t find a matching contract method, or the number of parameters is wrong.'), defer.eventEmitter, defer.reject, processedArgs.callback);
        return processedArgs;
    };
    /**
     * Executes a call, transact or estimateGas on a contract function
     *
     * @method _executeMethod
     * @param {String} type the type this execute function should execute
     * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it
     */
    Contract.prototype._executeMethod = function _executeMethod() {
        var _this = this, args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer), defer = lib$8((args.type !== 'send')), ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;
        // simple return request for batch requests
        if (args.generateRequest) {
            var payload = {
                params: [formatters$4.inputCallFormatter.call(this._parent, args.options)],
                callback: args.callback
            };
            if (args.type === 'call') {
                payload.params.push(formatters$4.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));
                payload.method = 'eth_call';
                payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);
            }
            else {
                payload.method = 'eth_sendTransaction';
            }
            return payload;
        }
        switch (args.type) {
            case 'estimate':
                var estimateGas = (new lib$a({
                    name: 'estimateGas',
                    call: 'eth_estimateGas',
                    params: 1,
                    inputFormatter: [formatters$4.inputCallFormatter],
                    outputFormatter: lib$1.hexToNumber,
                    requestManager: _this._parent._requestManager,
                    accounts: ethAccounts,
                    defaultAccount: _this._parent.defaultAccount,
                    defaultBlock: _this._parent.defaultBlock
                })).createFunction();
                return estimateGas(args.options, args.callback);
            case 'call':
                // TODO check errors: missing "from" should give error on deploy and send, call ?
                var call = (new lib$a({
                    name: 'call',
                    call: 'eth_call',
                    params: 2,
                    inputFormatter: [formatters$4.inputCallFormatter, formatters$4.inputDefaultBlockNumberFormatter],
                    // add output formatter for decoding
                    outputFormatter: function (result) {
                        return _this._parent._decodeMethodReturn(_this._method.outputs, result);
                    },
                    requestManager: _this._parent._requestManager,
                    accounts: ethAccounts,
                    defaultAccount: _this._parent.defaultAccount,
                    defaultBlock: _this._parent.defaultBlock,
                    handleRevert: _this._parent.handleRevert,
                    abiCoder: lib$d
                })).createFunction();
                return call(args.options, args.defaultBlock, args.callback);
            case 'send':
                // return error, if no "from" is specified
                if (!lib$1.isAddress(args.options.from)) {
                    return lib$1._fireError(errors$a.ContractNoFromAddressDefinedError(), defer.eventEmitter, defer.reject, args.callback);
                }
                if (underscore.isBoolean(this._method.payable) && !this._method.payable && args.options.value && args.options.value > 0) {
                    return lib$1._fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject, args.callback);
                }
                // make sure receipt logs are decoded
                var extraFormatters = {
                    receiptFormatter: function (receipt) {
                        if (underscore.isArray(receipt.logs)) {
                            // decode logs
                            var events = underscore.map(receipt.logs, function (log) {
                                return _this._parent._decodeEventABI.call({
                                    name: 'ALLEVENTS',
                                    jsonInterface: _this._parent.options.jsonInterface
                                }, log);
                            });
                            // make log names keys
                            receipt.events = {};
                            var count = 0;
                            events.forEach(function (ev) {
                                if (ev.event) {
                                    // if > 1 of the same event, don't overwrite any existing events
                                    if (receipt.events[ev.event]) {
                                        if (Array.isArray(receipt.events[ev.event])) {
                                            receipt.events[ev.event].push(ev);
                                        }
                                        else {
                                            receipt.events[ev.event] = [receipt.events[ev.event], ev];
                                        }
                                    }
                                    else {
                                        receipt.events[ev.event] = ev;
                                    }
                                }
                                else {
                                    receipt.events[count] = ev;
                                    count++;
                                }
                            });
                            delete receipt.logs;
                        }
                        return receipt;
                    },
                    contractDeployFormatter: function (receipt) {
                        var newContract = _this._parent.clone();
                        newContract.options.address = receipt.contractAddress;
                        return newContract;
                    }
                };
                var sendTransaction = (new lib$a({
                    name: 'sendTransaction',
                    call: 'eth_sendTransaction',
                    params: 1,
                    inputFormatter: [formatters$4.inputTransactionFormatter],
                    requestManager: _this._parent._requestManager,
                    accounts: _this.constructor._ethAccounts || _this._ethAccounts,
                    defaultAccount: _this._parent.defaultAccount,
                    defaultBlock: _this._parent.defaultBlock,
                    transactionBlockTimeout: _this._parent.transactionBlockTimeout,
                    transactionConfirmationBlocks: _this._parent.transactionConfirmationBlocks,
                    transactionPollingTimeout: _this._parent.transactionPollingTimeout,
                    defaultCommon: _this._parent.defaultCommon,
                    defaultChain: _this._parent.defaultChain,
                    defaultHardfork: _this._parent.defaultHardfork,
                    handleRevert: _this._parent.handleRevert,
                    extraFormatters: extraFormatters,
                    abiCoder: lib$d
                })).createFunction();
                return sendTransaction(args.options, args.callback);
            default:
                throw new Error('Method "' + args.type + '" not implemented.');
        }
    };
    var lib$e = Contract;

    var sha3$3 = createCommonjsModule(function (module) {
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.5.7
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2016
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {

      var root = typeof window === 'object' ? window : {};
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
                0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
                2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
                2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
                2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(bits, padding, type);
        }
        return method;
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createShakeOutputMethod(bits, padding, type);
        }
        return method;
      };

      var algorithms = [
        {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
        {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
        {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits  = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name +'_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        var notString = typeof message !== 'string';
        if (notString && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
        var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.finalize = function () {
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                   HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                   HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                   HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          if (extraBytes > 0) {
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          }
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          if (extraBytes > 0) {
            array[offset] = block & 0xFF;
          }
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
            b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
            b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
            b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (var i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    /** Highest positive signed 32-bit float value */
    const maxInt$1 = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    const base$2 = 36;
    const tMin$1 = 1;
    const tMax$1 = 26;
    const skew$1 = 38;
    const damp$1 = 700;
    const initialBias$1 = 72;
    const initialN$1 = 128; // 0x80
    const delimiter$1 = '-'; // '\x2D'

    /** Regular expressions */
    const regexPunycode = /^xn--/;
    const regexNonASCII$1 = /[^\0-\x7E]/; // non-ASCII chars
    const regexSeparators$1 = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    const errors$b = {
    	'overflow': 'Overflow: input needs wider integers to process',
    	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    	'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    const baseMinusTMin$1 = base$2 - tMin$1;
    const floor$1 = Math.floor;
    const stringFromCharCode$1 = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error$1(type) {
    	throw new RangeError(errors$b[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map$2(array, fn) {
    	const result = [];
    	let length = array.length;
    	while (length--) {
    		result[length] = fn(array[length]);
    	}
    	return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain$1(string, fn) {
    	const parts = string.split('@');
    	let result = '';
    	if (parts.length > 1) {
    		// In email addresses, only the domain name should be punycoded. Leave
    		// the local part (i.e. everything up to `@`) intact.
    		result = parts[0] + '@';
    		string = parts[1];
    	}
    	// Avoid `split(regex)` for IE8 compatibility. See #17.
    	string = string.replace(regexSeparators$1, '\x2E');
    	const labels = string.split('.');
    	const encoded = map$2(labels, fn).join('.');
    	return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode$1(string) {
    	const output = [];
    	let counter = 0;
    	const length = string.length;
    	while (counter < length) {
    		const value = string.charCodeAt(counter++);
    		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    			// It's a high surrogate, and there is a next character.
    			const extra = string.charCodeAt(counter++);
    			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
    				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    			} else {
    				// It's an unmatched surrogate; only append this code unit, in case the
    				// next code unit is the high surrogate of a surrogate pair.
    				output.push(value);
    				counter--;
    			}
    		} else {
    			output.push(value);
    		}
    	}
    	return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    const ucs2encode = array => String.fromCodePoint(...array);

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    const basicToDigit = function(codePoint) {
    	if (codePoint - 0x30 < 0x0A) {
    		return codePoint - 0x16;
    	}
    	if (codePoint - 0x41 < 0x1A) {
    		return codePoint - 0x41;
    	}
    	if (codePoint - 0x61 < 0x1A) {
    		return codePoint - 0x61;
    	}
    	return base$2;
    };

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    const digitToBasic$1 = function(digit, flag) {
    	//  0..25 map to ASCII a..z or A..Z
    	// 26..35 map to ASCII 0..9
    	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    const adapt$1 = function(delta, numPoints, firstTime) {
    	let k = 0;
    	delta = firstTime ? floor$1(delta / damp$1) : delta >> 1;
    	delta += floor$1(delta / numPoints);
    	for (/* no initialization */; delta > baseMinusTMin$1 * tMax$1 >> 1; k += base$2) {
    		delta = floor$1(delta / baseMinusTMin$1);
    	}
    	return floor$1(k + (baseMinusTMin$1 + 1) * delta / (delta + skew$1));
    };

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    const decode$1 = function(input) {
    	// Don't use UCS-2.
    	const output = [];
    	const inputLength = input.length;
    	let i = 0;
    	let n = initialN$1;
    	let bias = initialBias$1;

    	// Handle the basic code points: let `basic` be the number of input code
    	// points before the last delimiter, or `0` if there is none, then copy
    	// the first basic code points to the output.

    	let basic = input.lastIndexOf(delimiter$1);
    	if (basic < 0) {
    		basic = 0;
    	}

    	for (let j = 0; j < basic; ++j) {
    		// if it's not a basic code point
    		if (input.charCodeAt(j) >= 0x80) {
    			error$1('not-basic');
    		}
    		output.push(input.charCodeAt(j));
    	}

    	// Main decoding loop: start just after the last delimiter if any basic code
    	// points were copied; start at the beginning otherwise.

    	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

    		// `index` is the index of the next character to be consumed.
    		// Decode a generalized variable-length integer into `delta`,
    		// which gets added to `i`. The overflow checking is easier
    		// if we increase `i` as we go, then subtract off its starting
    		// value at the end to obtain `delta`.
    		let oldi = i;
    		for (let w = 1, k = base$2; /* no condition */; k += base$2) {

    			if (index >= inputLength) {
    				error$1('invalid-input');
    			}

    			const digit = basicToDigit(input.charCodeAt(index++));

    			if (digit >= base$2 || digit > floor$1((maxInt$1 - i) / w)) {
    				error$1('overflow');
    			}

    			i += digit * w;
    			const t = k <= bias ? tMin$1 : (k >= bias + tMax$1 ? tMax$1 : k - bias);

    			if (digit < t) {
    				break;
    			}

    			const baseMinusT = base$2 - t;
    			if (w > floor$1(maxInt$1 / baseMinusT)) {
    				error$1('overflow');
    			}

    			w *= baseMinusT;

    		}

    		const out = output.length + 1;
    		bias = adapt$1(i - oldi, out, oldi == 0);

    		// `i` was supposed to wrap around from `out` to `0`,
    		// incrementing `n` each time, so we'll fix that now:
    		if (floor$1(i / out) > maxInt$1 - n) {
    			error$1('overflow');
    		}

    		n += floor$1(i / out);
    		i %= out;

    		// Insert `n` at position `i` of the output.
    		output.splice(i++, 0, n);

    	}

    	return String.fromCodePoint(...output);
    };

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    const encode$2 = function(input) {
    	const output = [];

    	// Convert the input in UCS-2 to an array of Unicode code points.
    	input = ucs2decode$1(input);

    	// Cache the length.
    	let inputLength = input.length;

    	// Initialize the state.
    	let n = initialN$1;
    	let delta = 0;
    	let bias = initialBias$1;

    	// Handle the basic code points.
    	for (const currentValue of input) {
    		if (currentValue < 0x80) {
    			output.push(stringFromCharCode$1(currentValue));
    		}
    	}

    	let basicLength = output.length;
    	let handledCPCount = basicLength;

    	// `handledCPCount` is the number of code points that have been handled;
    	// `basicLength` is the number of basic code points.

    	// Finish the basic string with a delimiter unless it's empty.
    	if (basicLength) {
    		output.push(delimiter$1);
    	}

    	// Main encoding loop:
    	while (handledCPCount < inputLength) {

    		// All non-basic code points < n have been handled already. Find the next
    		// larger one:
    		let m = maxInt$1;
    		for (const currentValue of input) {
    			if (currentValue >= n && currentValue < m) {
    				m = currentValue;
    			}
    		}

    		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    		// but guard against overflow.
    		const handledCPCountPlusOne = handledCPCount + 1;
    		if (m - n > floor$1((maxInt$1 - delta) / handledCPCountPlusOne)) {
    			error$1('overflow');
    		}

    		delta += (m - n) * handledCPCountPlusOne;
    		n = m;

    		for (const currentValue of input) {
    			if (currentValue < n && ++delta > maxInt$1) {
    				error$1('overflow');
    			}
    			if (currentValue == n) {
    				// Represent delta as a generalized variable-length integer.
    				let q = delta;
    				for (let k = base$2; /* no condition */; k += base$2) {
    					const t = k <= bias ? tMin$1 : (k >= bias + tMax$1 ? tMax$1 : k - bias);
    					if (q < t) {
    						break;
    					}
    					const qMinusT = q - t;
    					const baseMinusT = base$2 - t;
    					output.push(
    						stringFromCharCode$1(digitToBasic$1(t + qMinusT % baseMinusT, 0))
    					);
    					q = floor$1(qMinusT / baseMinusT);
    				}

    				output.push(stringFromCharCode$1(digitToBasic$1(q, 0)));
    				bias = adapt$1(delta, handledCPCountPlusOne, handledCPCount == basicLength);
    				delta = 0;
    				++handledCPCount;
    			}
    		}

    		++delta;
    		++n;

    	}
    	return output.join('');
    };

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    const toUnicode = function(input) {
    	return mapDomain$1(input, function(string) {
    		return regexPunycode.test(string)
    			? decode$1(string.slice(4).toLowerCase())
    			: string;
    	});
    };

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    const toASCII$1 = function(input) {
    	return mapDomain$1(input, function(string) {
    		return regexNonASCII$1.test(string)
    			? 'xn--' + encode$2(string)
    			: string;
    	});
    };

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    const punycode = {
    	/**
    	 * A string representing the current Punycode.js version number.
    	 * @memberOf punycode
    	 * @type String
    	 */
    	'version': '2.1.0',
    	/**
    	 * An object of methods to convert from JavaScript's internal character
    	 * representation (UCS-2) to Unicode code points, and back.
    	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
    	 * @memberOf punycode
    	 * @type Object
    	 */
    	'ucs2': {
    		'decode': ucs2decode$1,
    		'encode': ucs2encode
    	},
    	'decode': decode$1,
    	'encode': encode$2,
    	'toASCII': toASCII$1,
    	'toUnicode': toUnicode
    };

    var punycode_1 = punycode;

    var idnaMap = createCommonjsModule(function (module, exports) {
    /* This file is generated from the Unicode IDNA table, using
       the build-unicode-tables.py script. Please edit that
       script instead of this file. */

    /* istanbul ignore next */
    (function (root, factory) {
      {
        module.exports = factory();
      }
    }(commonjsGlobal, function () {
    var blocks = [
      new Uint32Array([2157250,2157314,2157378,2157442,2157506,2157570,2157634,0,2157698,2157762,2157826,2157890,2157954,0,2158018,0]),
      new Uint32Array([2179041,6291456,2179073,6291456,2179105,6291456,2179137,6291456,2179169,6291456,2179201,6291456,2179233,6291456,2179265,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([0,2113729,2197345,2197377,2113825,2197409,2197441,2113921,2197473,2114017,2197505,2197537,2197569,2197601,2197633,2197665]),
      new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672,23068672,0,0,0,0,23068672]),
      new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064]),
      new Uint32Array([2196001,2196033,2196065,2196097,2196129,2196161,2196193,2196225,2196257,2196289,2196321,2196353,2196385,2196417,2196449,2196481]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,0,0,0,0,0]),
      new Uint32Array([2097281,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([2177025,6291456,2177057,6291456,2177089,6291456,2177121,6291456,2177153,6291456,2177185,6291456,2177217,6291456,2177249,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456]),
      new Uint32Array([2134435,2134531,2134627,2134723,2134723,2134819,2134819,2134915,2134915,2135011,2105987,2135107,2135203,2135299,2131587,2135395]),
      new Uint32Array([0,0,0,0,0,0,0,6291456,2168673,2169249,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354,2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354]),
      new Uint32Array([2125219,2125315,2152834,2152898,2125411,2152962,2153026,2125506,2125507,2125603,2153090,2153154,2153218,2153282,2153346,2105348]),
      new Uint32Array([2203393,6291456,2203425,6291456,2203457,6291456,2203489,6291456,6291456,6291456,6291456,2203521,6291456,2181281,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,6291456,2145538,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,6291456]),
      new Uint32Array([2139426,2160834,2160898,2160962,2134242,2161026,2161090,2161154,2161218,2161282,2161346,2161410,2138658,2161474,2161538,2134722]),
      new Uint32Array([2119939,2124930,2125026,2106658,2125218,2128962,2129058,2129154,2129250,2129346,2129442,2108866,2108770,2150466,2150530,2150594]),
      new Uint32Array([2201601,6291456,2201633,6291456,2201665,6291456,2201697,6291456,2201729,6291456,2201761,6291456,2201793,6291456,2201825,6291456]),
      new Uint32Array([2193537,2193569,2193601,2193633,2193665,2193697,2193729,2193761,2193793,2193825,2193857,2193889,2193921,2193953,2193985,2194017]),
      new Uint32Array([6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2190561,6291456,2190593,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2190625,6291456,2190657,6291456,23068672]),
      new Uint32Array([2215905,2215937,2215969,2216001,2216033,2216065,2216097,2216129,2216161,2216193,2216225,2216257,2105441,2216289,2216321,2216353]),
      new Uint32Array([23068672,18884130,23068672,23068672,23068672,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2191233,2191265,2191297,2191329,2191361,2191393,2191425,2117377,2191457,2191489,2191521,2191553,2191585,2191617,2191649,2117953]),
      new Uint32Array([2132227,2132323,2132419,2132419,2132515,2132515,2132611,2132707,2132707,2132803,2132899,2132899,2132995,2132995,2133091,2133187]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,0,0]),
      new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10609889,10610785,10609921,10610817,2222241]),
      new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
      new Uint32Array([2219969,2157121,2157441,2157505,2157889,2157953,2220001,2158465,2158529,10575617,2156994,2157058,2129923,2130019,2157122,2157186]),
      new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2185249,6291456,2185281,6291456,2185313,6291456,2185345,6291456,2185377,6291456,2185409,6291456,2185441,6291456,2185473,6291456]),
      new Uint32Array([0,0,0,0,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,6291456,0]),
      new Uint32Array([2183361,6291456,2183393,6291456,2183425,6291456,2183457,6291456,2183489,6291456,2183521,6291456,2183553,6291456,2183585,6291456]),
      new Uint32Array([2192161,2192193,2192225,2192257,2192289,2192321,2192353,2192385,2192417,2192449,2192481,2192513,2192545,2192577,2192609,2192641]),
      new Uint32Array([2212001,2212033,2212065,2212097,2212129,2212161,2212193,2212225,2212257,2212289,2212321,2212353,2212385,2212417,2212449,2207265]),
      new Uint32Array([2249825,2249857,2249889,2249921,2249954,2250018,2250082,2250145,2250177,2250209,2250241,2250274,2250337,2250370,2250433,2250465]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147905,2147969,2148033,2148097,2148161,2148225,2148289,2148353]),
      new Uint32Array([10485857,6291456,2197217,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2180353,2180385,2144033,2180417,2180449,2180481,2180513,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10610209,10610465,10610241,10610753,10609857]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
      new Uint32Array([2223842,2223906,2223970,2224034,2224098,2224162,2224226,2224290,2224354,2224418,2224482,2224546,2224610,2224674,2224738,2224802]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([23068672,23068672,23068672,18923650,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,18923714,23068672,23068672]),
      new Uint32Array([2126179,2125538,2126275,2126371,2126467,2125634,2126563,2105603,2105604,2125346,2126659,2126755,2126851,2098179,2098181,2098182]),
      new Uint32Array([2227426,2227490,2227554,2227618,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2192353,2240642,2240642,2240705,2240737,2240737,2240769,2240802,2240866,2240929,2240961,2240993,2241025,2241057,2241089,2241121]),
      new Uint32Array([6291456,2170881,2170913,2170945,6291456,2170977,6291456,2171009,2171041,6291456,6291456,6291456,2171073,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2132226,2132514,2163586,2132610,2160386,2133090,2133186,2160450,2160514,2160578,2133570,2106178,2160642,2133858,2160706,2160770]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10532162,10532226,10532290,10532354,10532418,10532482,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
      new Uint32Array([2098209,2108353,2108193,2108481,2170241,2111713,2105473,2105569,2105601,2112289,2112481,2098305,2108321,0,0,0]),
      new Uint32Array([2209121,2209153,2209185,2209217,2209249,2209281,2209313,2209345,2209377,2209409,2209441,2209473,2207265,2209505,2209537,2209569]),
      new Uint32Array([2189025,6291456,2189057,6291456,2189089,6291456,2189121,6291456,2189153,6291456,2189185,6291456,2189217,6291456,2189249,6291456]),
      new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2165764,2140004]),
      new Uint32Array([2215105,6291456,2215137,6291456,6291456,2215169,2215201,6291456,6291456,6291456,2215233,2215265,2215297,2215329,2215361,2215393]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,23068672,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([10505091,10505187,10505283,10505379,10505475,10505571,10505667,10505763,10505859,10505955,10506051,10506147,10506243,10506339,10506435,10506531]),
      new Uint32Array([2229730,2229794,2229858,2229922,2229986,2230050,2230114,2230178,2230242,2230306,2230370,2230434,2230498,2230562,2230626,2230690]),
      new Uint32Array([2105505,2098241,2108353,2108417,2105825,0,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
      new Uint32Array([6291456,6291456,6291456,6291456,10502115,10502178,10502211,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
      new Uint32Array([2190305,6291456,2190337,6291456,2190369,6291456,2190401,6291456,2190433,6291456,2190465,6291456,2190497,6291456,2190529,6291456]),
      new Uint32Array([2173793,2173985,2174017,6291456,2173761,2173697,6291456,2174689,6291456,2174017,2174721,6291456,6291456,2174753,2174785,2174817]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609,2100033]),
      new Uint32Array([2132898,2163842,2163906,2133282,2132034,2131938,2137410,2132802,2132706,2164866,2133282,2160578,2165186,2165186,6291456,6291456]),
      new Uint32Array([10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059,10501155,10501251,10501347,10501443]),
      new Uint32Array([2163458,2130978,2131074,2131266,2131362,2163522,2160130,2132066,2131010,2131106,2106018,2131618,2131298,2132034,2131938,2137410]),
      new Uint32Array([2212961,2116993,2212993,2213025,2213057,2213089,2213121,2213153,2213185,2213217,2213249,2209633,2213281,2213313,2213345,2213377]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2113729,2113825,2113921,2114017,2114113,2114209,2114305,2114401,2114497,2114593,2114689,2114785,2114881,2114977,2115073,2115169]),
      new Uint32Array([2238177,2238209,2238241,2238273,2238305,2238337,2238337,2217537,2238369,2238401,2238433,2238465,2215649,2238497,2238529,2238561]),
      new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
      new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0]),
      new Uint32Array([6291456,0,6291456,2145026,0,6291456,2145090,0,6291456,6291456,0,0,23068672,0,23068672,23068672]),
      new Uint32Array([2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129,2100289]),
      new Uint32Array([6291456,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0]),
      new Uint32Array([2187681,2187713,2187745,2187777,2187809,2187841,2187873,2187905,2187937,2187969,2188001,2188033,2188065,2188097,2188129,2188161]),
      new Uint32Array([0,10554498,10554562,10554626,10554690,10554754,10554818,10554882,10554946,10555010,10555074,6291456,6291456,0,0,0]),
      new Uint32Array([2235170,2235234,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0]),
      new Uint32Array([2181153,6291456,2188897,6291456,6291456,2188929,6291456,6291456,6291456,6291456,6291456,6291456,2111905,2100865,2188961,2188993]),
      new Uint32Array([2100833,2100897,0,0,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,2112289]),
      new Uint32Array([6291456,2172833,6291456,2172865,2172897,2172929,2172961,6291456,2172993,6291456,2173025,6291456,2173057,6291456,2173089,6291456]),
      new Uint32Array([6291456,0,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,2190721]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456]),
      new Uint32Array([2184993,6291456,2185025,6291456,2185057,6291456,2185089,6291456,2185121,6291456,2185153,6291456,2185185,6291456,2185217,6291456]),
      new Uint32Array([2115265,2115361,2115457,2115553,2115649,2115745,2115841,2115937,2116033,2116129,2116225,2116321,2150658,2150722,2200225,6291456]),
      new Uint32Array([2168321,6291456,2168353,6291456,2168385,6291456,2168417,6291456,2168449,6291456,2168481,6291456,2168513,6291456,2168545,6291456]),
      new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,0,6291456,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,2186625,0,0,6291456,6291456,2186657,2186689,2186721,2173505,0,10496067,10496163,10496259]),
      new Uint32Array([2178785,6291456,2178817,6291456,2178849,6291456,2178881,6291456,2178913,6291456,2178945,6291456,2178977,6291456,2179009,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
      new Uint32Array([2097152,0,0,0,2097152,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,2197857,2197889,2197921,2197953,2197985,2198017,0,0,2198049,2198081,2198113,2198145,2198177,2198209]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2098209,2167297,2111137,6291456]),
      new Uint32Array([2171393,6291456,2171425,6291456,2171457,6291456,2171489,6291456,2171521,6291456,2171553,6291456,2171585,6291456,2171617,6291456]),
      new Uint32Array([2206753,2206785,2195457,2206817,2206849,2206881,2206913,2197153,2197153,2206945,2117857,2206977,2207009,2207041,2207073,2207105]),
      new Uint32Array([0,0,0,0,0,0,0,23068672,0,0,0,0,2144834,2144898,0,2144962]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672]),
      new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,0,2105505,2098241]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,2202049,6291456,2202081,6291456,2202113,6291456,2202145,6291456,2202177,6291456,2202209,6291456,2202241,6291456]),
      new Uint32Array([10501155,10501251,10501347,10501443,10501539,10501635,10501731,10501827,10501923,10502019,2141731,2105505,2098177,2155586,2166530,0]),
      new Uint32Array([2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441]),
      new Uint32Array([2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330,2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([10502307,10502403,10502499,10502595,10502691,10502787,10502883,10502979,10503075,10503171,10503267,10503363,10503459,10503555,10503651,10503747]),
      new Uint32Array([2179937,2179969,2180001,2180033,2156545,2180065,2156577,2180097,2180129,2180161,2180193,2180225,2180257,2180289,2156737,2180321]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,0,0,6291456,0,0,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
      new Uint32Array([2227682,2227746,2227810,2227874,2227938,2228002,2228066,2228130,2228194,2228258,2228322,2228386,2228450,2228514,2228578,2228642]),
      new Uint32Array([2105601,2169121,2108193,2170049,2181025,2181057,2112481,2108321,2108289,2181089,2170497,2100865,2181121,2173601,2173633,2173665]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180641,6291456,6291456,6291456]),
      new Uint32Array([0,6291456,6291456,6291456,0,6291456,0,6291456,0,0,6291456,6291456,0,6291456,6291456,6291456]),
      new Uint32Array([2178273,6291456,2178305,6291456,2178337,6291456,2178369,6291456,2178401,6291456,2178433,6291456,2178465,6291456,2178497,6291456]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
      new Uint32Array([2237377,2237409,2236225,2237441,2237473,2217441,2215521,2215553,2217473,2237505,2237537,2209697,2237569,2215585,2237601,2237633]),
      new Uint32Array([2221985,2165601,2165601,2165665,2165665,2222017,2222017,2165729,2165729,2158913,2158913,2158913,2158913,2097281,2097281,2105921]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2149634,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2176897,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2176929,6291456,2176961,6291456,2176993,6291456]),
      new Uint32Array([2172641,6291456,2172673,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2172705,2172737,6291456,2172769,2172801,6291456]),
      new Uint32Array([2099173,2104196,2121667,2099395,2121763,2152258,2152322,2098946,2152386,2121859,2121955,2099333,2122051,2104324,2099493,2122147]),
      new Uint32Array([6291456,6291456,6291456,2145794,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2145858,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,0,0,6291456,0]),
      new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,0,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2239074,2239138,2239201,2239233,2239265,2239297,2239329,2239361,0,2239393,2239425,2239425,2239458,2239521,2239553,2209569]),
      new Uint32Array([14680064,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,6291456,23068672]),
      new Uint32Array([2108321,2108289,2113153,2098209,2180897,2180929,2180961,2111137,2098241,2108353,2170241,2170273,2180993,2105825,6291456,2105473]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146114,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([2105921,2105921,2105921,2222049,2222049,2130977,2130977,2130977,2130977,2160065,2160065,2160065,2160065,2097729,2097729,2097729]),
      new Uint32Array([2218145,2214785,2207937,2218177,2218209,2192993,2210113,2212769,2218241,2218273,2216129,2218305,2216161,2218337,2218369,2218401]),
      new Uint32Array([0,0,0,2156546,2156610,2156674,2156738,2156802,0,0,0,0,0,2156866,23068672,2156930]),
      new Uint32Array([23068672,23068672,23068672,0,0,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
      new Uint32Array([2213409,2213441,2213473,2213505,2213537,2213569,2213601,2213633,2213665,2195681,2213697,2213729,2213761,2213793,2213825,2213857]),
      new Uint32Array([2100033,2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2201857,6291456,2201889,6291456,2201921,6291456,2201953,6291456,2201985,6291456,2202017,6291456,2176193,2176257,23068672,23068672]),
      new Uint32Array([6291456,6291456,23068672,23068672,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2188193,2188225,2188257,2188289,2188321,2188353,2188385,2188417,2188449,2188481,2188513,2188545,2188577,2188609,2188641,0]),
      new Uint32Array([10554529,2221089,0,10502113,10562017,10537921,10538049,2221121,2221153,0,0,0,0,0,0,0]),
      new Uint32Array([2213889,2213921,2213953,2213985,2214017,2214049,2214081,2194177,2214113,2214145,2214177,2214209,2214241,2214273,2214305,2214337]),
      new Uint32Array([2166978,2167042,2099169,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180545,6291456,6291456,6291456]),
      new Uint32Array([10518915,10519011,10519107,10519203,2162242,2162306,2159554,2162370,2159362,2159618,2105922,2162434,2159746,2162498,2159810,2159874]),
      new Uint32Array([2161730,2161794,2135586,2161858,2161922,2137186,2131810,2160290,2135170,2161986,2137954,2162050,2162114,2162178,10518723,10518819]),
      new Uint32Array([10506627,10506723,10506819,10506915,10507011,10507107,10507203,10507299,10507395,10507491,10507587,10507683,10507779,10507875,10507971,10508067]),
      new Uint32Array([6291456,23068672,23068672,23068672,0,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
      new Uint32Array([2175873,2175905,2175937,2175969,2176001,2176033,2176065,2176097,2176129,2176161,2176193,2176225,2176257,2176289,2176321,2176353]),
      new Uint32Array([2140006,2140198,2140390,2140582,2140774,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,23068672,23068672,23068672]),
      new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241]),
      new Uint32Array([0,23068672,0,0,0,0,0,0,0,2145154,2145218,2145282,6291456,0,2145346,0]),
      new Uint32Array([0,0,0,0,10531458,10495395,2148545,2143201,2173473,2148865,2173505,0,2173537,0,2173569,2149121]),
      new Uint32Array([10537282,10495683,2148738,2148802,2148866,0,6291456,2148930,2186593,2173473,2148737,2148865,2148802,10495779,10495875,10495971]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2215425,2215457,2215489,2215521,2215553,2215585,2215617,2215649,2215681,2215713,2215745,2215777,2192033,2215809,2215841,2215873]),
      new Uint32Array([2242049,2242081,2242113,2242145,2242177,2242209,2242241,2242273,2215937,2242305,2242338,2242401,2242433,2242465,2242497,2216001]),
      new Uint32Array([10554529,2221089,0,0,10562017,10502113,10538049,10537921,2221185,10489601,10489697,10609889,10609921,2141729,2141793,10610273]),
      new Uint32Array([2141923,2142019,2142115,2142211,2142307,2142403,2142499,2142595,2142691,0,0,0,0,0,0,0]),
      new Uint32Array([0,2221185,2221217,10609857,10609857,10489601,10489697,10609889,10609921,2141729,2141793,2221345,2221377,2221409,2221441,2187105]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18923970,23068672,23068672,23068672,0,6291456,6291456]),
      new Uint32Array([2183105,6291456,2183137,6291456,2183169,6291456,2183201,6291456,2183233,6291456,2183265,6291456,2183297,6291456,2183329,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([2134434,2134818,2097666,2097186,2097474,2097698,2105986,2131586,2132450,2131874,2131778,2135970,2135778,2161602,2136162,2161666]),
      new Uint32Array([2236865,2236897,2236930,2236993,2237025,2235681,2237058,2237121,2237153,2237185,2237217,2217281,2237250,2191233,2237313,2237345]),
      new Uint32Array([2190049,6291456,2190081,6291456,2190113,6291456,2190145,6291456,2190177,6291456,2190209,6291456,2190241,6291456,2190273,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2101922,2102050,2102178,2102306,10498755,10498851,10498947,10499043,10499139,10499235,10499331,10499427,10499523,10489604,10489732,10489860]),
      new Uint32Array([2166914,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2181601,2170561,2181633,2181665,2170753,2181697,2172897,2170881,2181729,2170913,2172929,2113441,2181761,2181793,2171009,2173761]),
      new Uint32Array([0,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([2248001,2248033,2248066,2248130,2248193,2248226,2248289,2248322,2248385,2248417,2216673,2248450,2248514,2248577,2248610,2248673]),
      new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([2169729,6291456,2169761,6291456,2169793,6291456,2169825,6291456,2169857,2169889,6291456,2169921,6291456,2143329,6291456,2098305]),
      new Uint32Array([2162178,2163202,2163266,2135170,2136226,2161986,2137954,2159426,2159490,2163330,2159554,2163394,2159682,2139522,2136450,2159746]),
      new Uint32Array([2173953,2173985,0,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2174209,2174241,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,4271169,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2174273]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,2190785,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2189793,6291456,2189825,6291456,2189857,6291456,2189889,6291456,2189921,6291456,2189953,6291456,2189985,6291456,2190017,6291456]),
      new Uint32Array([2105601,2112289,2108193,2112481,2112577,0,2098305,2108321,2108289,2100865,2113153,2108481,2113345,0,2098209,2111137]),
      new Uint32Array([2172129,6291456,2172161,6291456,2172193,6291456,2172225,6291456,2172257,6291456,2172289,6291456,2172321,6291456,2172353,6291456]),
      new Uint32Array([2214753,6291456,2214785,6291456,6291456,2214817,2214849,2214881,2214913,2214945,2214977,2215009,2215041,2215073,2194401,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([0,0,0,0,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([10610305,10610337,10575617,2221761,10610401,10610433,10502177,0,10610465,10610497,10610529,10610561,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,0,0,0,0,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2187105,2187137,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2199393,2199425,2199457,2199489,2199521,2199553,2199585,2199617,2199649,2199681,2199713,2199745,2199777,2199809,2199841,0]),
      new Uint32Array([2217249,2217281,2217313,2217345,2217377,2217409,2217441,2217473,2215617,2217505,2217537,2217569,2214753,2217601,2217633,2217665]),
      new Uint32Array([2170273,2170305,6291456,2170337,2170369,6291456,2170401,2170433,2170465,6291456,6291456,6291456,2170497,2170529,6291456,2170561]),
      new Uint32Array([2188673,6291456,2188705,2188737,2188769,6291456,6291456,2188801,6291456,2188833,6291456,2188865,6291456,2180929,2181505,2180897]),
      new Uint32Array([10489988,10490116,10490244,10490372,10490500,10490628,10490756,10490884,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147393,2147457,2147521,2147585,2147649,2147713,2147777,2147841]),
      new Uint32Array([23068672,23068672,0,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2241153,2241185,2241217,2215809,2241250,2241313,2241345,2241377,2217921,2241377,2241409,2215873,2241441,2241473,2241505,2241537]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2220417,2220417,2220449,2220449,2220481,2220481,2220513,2220513,2220545,2220545,2220577,2220577,2220609,2220609,2220641,2220641]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2144002,0,6291456,6291456,0,0,6291456,6291456,6291456]),
      new Uint32Array([2167105,2167137,2167169,2167201,2167233,2167265,2167297,2167329,2167361,2167393,2167425,2167457,2167489,2167521,2167553,2167585]),
      new Uint32Array([10575521,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
      new Uint32Array([2234146,2234210,2234274,2234338,2234402,2234466,2234530,2234594,2234658,2234722,2234786,2234850,2234914,2234978,2235042,2235106]),
      new Uint32Array([0,0,0,0,0,0,0,2180577,0,0,0,0,0,2180609,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456]),
      new Uint32Array([2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2242529,2242561,2242593,2242625,2242657,2242689,2242721,2242753,2207937,2218177,2242785,2242817,2242849,2242882,2242945,2242977]),
      new Uint32Array([2118049,2105345,2118241,2105441,2118433,2118529,2118625,2118721,2118817,2200257,2200289,2191809,2200321,2200353,2200385,2200417]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([2185505,6291456,2185537,6291456,2185569,6291456,2185601,6291456,2185633,6291456,2185665,6291456,2185697,6291456,2185729,6291456]),
      new Uint32Array([2231970,2232034,2232098,2232162,2232226,2232290,2232354,2232418,2232482,2232546,2232610,2232674,2232738,2232802,2232866,2232930]),
      new Uint32Array([2218625,2246402,2246466,2246530,2246594,2246657,2246689,2246689,2218657,2219681,2246721,2246753,2246785,2246818,2246881,2208481]),
      new Uint32Array([2197025,2197057,2197089,2197121,2197153,2197185,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2219137,2216961,2219169,2219201,2219233,2219265,2219297,2217025,2215041,2219329,2217057,2219361,2217089,2219393,2197153,2219426]),
      new Uint32Array([23068672,23068672,23068672,0,0,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713]),
      new Uint32Array([2243522,2243585,2243617,2243649,2243681,2210113,2243713,2243746,2243810,2243874,2243937,2243970,2244033,2244065,2244097,2244129]),
      new Uint32Array([2178017,6291456,2178049,6291456,2178081,6291456,2178113,6291456,2178145,6291456,2178177,6291456,2178209,6291456,2178241,6291456]),
      new Uint32Array([10553858,2165314,10518722,6291456,10518818,0,10518914,2130690,10519010,2130786,10519106,2130882,10519202,2165378,10554050,2165506]),
      new Uint32Array([0,0,2135491,2135587,2135683,2135779,2135875,2135971,2135971,2136067,2136163,2136259,2136355,2136355,2136451,2136547]),
      new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2220033,2220033,2220065,2220065,2220065,2220065,2220097,2220097,2220097,2220097,2220129,2220129,2220129,2220129,2220161,2220161]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2100897,2100898,2100899,2150018,2100865,2100866,2100867,2100868,2150082,2108481,2109858,2109859,2105569,2105505,2098241,2105601]),
      new Uint32Array([2097217,2097505,2097505,2097505,2097505,2165570,2165570,2165634,2165634,2165698,2165698,2097858,2097858,0,0,2097152]),
      new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([10503843,10503939,10504035,10504131,10504227,10504323,10504419,10504515,10504611,10504707,10504803,10504899,10504995,10491140,10491268,0]),
      new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,2235297,2220769,2235329,2235361]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2222401,2222433,2222465,10531394,2222497,2222529,2222561,0,2222593,2222625,2222657,2222689,2222721,2222753,2222785,0]),
      new Uint32Array([2184481,6291456,2184513,6291456,2184545,6291456,2184577,6291456,2184609,6291456,2184641,6291456,2184673,6291456,2184705,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2105570,2156034,2126947,2156098,2153666,2127043,2127139,2156162,0,2127235,2156226,2156290,2156354,2156418,2127331,2127427]),
      new Uint32Array([2215905,2207041,2153185,2241569,2241601,2241633,2241665,2241697,2241730,2241793,2241825,2241857,2241889,2241921,2241954,2242017]),
      new Uint32Array([2203777,6291456,2203809,6291456,2203841,6291456,2203873,6291456,2203905,6291456,2173121,2180993,2181249,2203937,2181313,0]),
      new Uint32Array([2168577,6291456,2168609,6291456,2168641,6291456,2168673,6291456,2168705,6291456,2168737,6291456,2168769,6291456,2168801,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,0,0]),
      new Uint32Array([2210113,2195521,2210145,2210177,2210209,2210241,2210273,2210305,2210337,2210369,2210401,2210433,2210465,2210497,2210529,2210561]),
      new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([2228706,2228770,2228834,2228898,2228962,2229026,2229090,2229154,2229218,2229282,2229346,2229410,2229474,2229538,2229602,2229666]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,18874368,18874368,18874368,0,0]),
      new Uint32Array([2133089,2133281,2133281,2133281,2133281,2160577,2160577,2160577,2160577,2097441,2097441,2097441,2097441,2133857,2133857,2133857]),
      new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089]),
      new Uint32Array([2178529,6291456,2178561,6291456,2178593,6291456,2178625,6291456,2178657,6291456,2178689,6291456,2178721,6291456,2178753,6291456]),
      new Uint32Array([2221025,2221025,2221057,2221057,2159329,2159329,2159329,2159329,2097217,2097217,2158914,2158914,2158978,2158978,2159042,2159042]),
      new Uint32Array([2208161,2208193,2208225,2208257,2194433,2208289,2208321,2208353,2208385,2208417,2208449,2208481,2208513,2208545,2208577,2208609]),
      new Uint32Array([2169217,6291456,2169249,6291456,2169281,6291456,2169313,6291456,2169345,6291456,2169377,6291456,2169409,6291456,2169441,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([2133187,2133283,2133283,2133379,2133475,2133571,2133667,2133667,2133763,2133859,2133955,2134051,2134147,2134147,2134243,2134339]),
      new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,0]),
      new Uint32Array([2193089,2193121,2193153,2193185,2117665,2117569,2193217,2193249,2193281,2193313,2193345,2193377,2193409,2193441,2193473,2193505]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2184225,6291456,2184257,6291456,2184289,6291456,2184321,6291456,2184353,6291456,2184385,6291456,2184417,6291456,2184449,6291456]),
      new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2100833,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2200801,2200833,2200865,0]),
      new Uint32Array([23068672,23068672,23068672,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
      new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2181153,2105505,2181185,2167617,2180993]),
      new Uint32Array([2160002,2160066,2160130,2160194,2160258,2132066,2131010,2131106,2106018,2131618,2160322,2131298,2132034,2131938,2137410,2132226]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,6291456]),
      new Uint32Array([2183617,6291456,2183649,6291456,2183681,6291456,2183713,6291456,2183745,6291456,2183777,6291456,2183809,6291456,2183841,6291456]),
      new Uint32Array([0,6291456,6291456,0,6291456,0,0,6291456,6291456,0,6291456,0,0,6291456,0,0]),
      new Uint32Array([2250977,2251009,2251041,2251073,2195009,2251106,2251169,2251201,2251233,2251265,2251297,2251330,2251394,2251457,2251489,2251521]),
      new Uint32Array([2205729,2205761,2205793,2205825,2205857,2205889,2205921,2205953,2205985,2206017,2206049,2206081,2206113,2206145,2206177,2206209]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2143170,2168993,6291456,2169025,6291456,2169057,6291456,2169089,6291456,2143234,2169121,6291456,2169153,6291456,2169185,6291456]),
      new Uint32Array([23068672,23068672,2190689,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2248706,2248769,2248801,2248833,2248865,2248897,2248929,2248962,2249026,2249090,2249154,2240705,2249217,2249249,2249281,2249313]),
      new Uint32Array([10485857,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10495394,6291456,2098209,6291456,6291456,2097152,6291456,10531394]),
      new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
      new Uint32Array([6291456,2186977,6291456,6291456,6291456,6291456,6291456,10537858,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2209601,2209633,2209665,2209697,2209729,2209761,2209793,2209825,2209857,2209889,2209921,2209953,2209985,2210017,2210049,2210081]),
      new Uint32Array([10501539,10501635,10501731,10501827,10501923,10502019,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
      new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2194561,2194593,2194625,2119777,2119873,2194657,2194689,2194721,2194753,2194785,2194817,2194849,2194881,2194913,2194945,2194977]),
      new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569]),
      new Uint32Array([2222818,2222882,2222946,2223010,2223074,2223138,2223202,2223266,2223330,2223394,2223458,2223522,2223586,2223650,2223714,2223778]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672]),
      new Uint32Array([0,2179553,2179585,2179617,2179649,2144001,2179681,2179713,2179745,2179777,2179809,2156705,2179841,2156833,2179873,2179905]),
      new Uint32Array([6291456,23068672,6291456,2145602,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,6291456,0,0]),
      new Uint32Array([2196513,2196545,2196577,2196609,2196641,2196673,2196705,2196737,2196769,2196801,2196833,2196865,2196897,2196929,2196961,2196993]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2177281,6291456,2177313,6291456,2177345,6291456,2177377,6291456,2177409,6291456,2177441,6291456,2177473,6291456,2177505,6291456]),
      new Uint32Array([2187137,2221473,2221505,2221537,2221569,6291456,6291456,10610209,10610241,10537986,10537986,10537986,10537986,10609857,10609857,10609857]),
      new Uint32Array([2243009,2243041,2216033,2243074,2243137,2243169,2243201,2219617,2243233,2243265,2243297,2243329,2243362,2243425,2243457,2243489]),
      new Uint32Array([10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,2097152,4194304,4194304,0,0]),
      new Uint32Array([2143042,6291456,2143106,2143106,2168833,6291456,2168865,6291456,6291456,2168897,6291456,2168929,6291456,2168961,6291456,2143170]),
      new Uint32Array([6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2204193,2204225,2204257,2204289,2204321,2204353,2204385,2204417,2204449,2204481,2204513,2204545,2204577,2204609,2204641,2204673]),
      new Uint32Array([2202753,6291456,2202785,6291456,2202817,6291456,2202849,6291456,2202881,6291456,2202913,6291456,2202945,6291456,2202977,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321]),
      new Uint32Array([2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842,2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842]),
      new Uint32Array([2253313,2253346,2253409,2253441,2253473,2253505,2253537,2253569,2253601,2253634,2219393,2253697,2253729,2253761,2253793,2253825]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([2162562,2162626,2131362,2162690,2159938,2160002,2162754,2162818,2160130,2162882,2160194,2160258,2160834,2160898,2161026,2161090]),
      new Uint32Array([2175361,2175393,2175425,2175457,2175489,2175521,2175553,2175585,2175617,2175649,2175681,2175713,2175745,2175777,2175809,2175841]),
      new Uint32Array([2253858,2253921,2253954,2254018,2254082,2196737,2254145,2196865,2254177,2254209,2254241,2254273,2197025,2254306,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2202113,2204129,2188705,2204161]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953]),
      new Uint32Array([2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209]),
      new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,0,2108417,0,2111713,2100897,2111905]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0]),
      new Uint32Array([2175425,2175489,2175809,2175905,2175937,2175937,2176193,2176417,2180865,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,2143298,2143298,2143298,2143362,2143362,2143362,2143426,2143426,2143426,2171105,6291456,2171137]),
      new Uint32Array([2120162,2120258,2151618,2151682,2151746,2151810,2151874,2151938,2152002,2120035,2120131,2120227,2152066,2120323,2152130,2120419]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2195361,2142433,2236065,2236097,2236129,2236161,2118241,2117473,2236193,2236225,2236257,2236289,0,0,0,0]),
      new Uint32Array([2189281,6291456,2189313,6291456,2189345,6291456,2189377,6291456,2189409,6291456,2189441,6291456,2189473,6291456,2189505,6291456]),
      new Uint32Array([6291456,6291456,2145922,6291456,6291456,6291456,6291456,2145986,6291456,6291456,6291456,6291456,2146050,6291456,6291456,6291456]),
      new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10502113,10562017,10610401,10502177,10610433,10538049]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,2186401,0,2186433,0,2186465,0,2186497]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,23068672,23068672]),
      new Uint32Array([0,0,2198241,2198273,2198305,2198337,2198369,2198401,0,0,2198433,2198465,2198497,0,0,0]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,0,23068672,23068672,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
      new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,2133281,2097505,2105889,0,2097697,2135777,2097633,2097441]),
      new Uint32Array([2197889,2197921,2197953,2197985,2198017,2198049,2198081,2198113,2198145,2198177,2198209,2198241,2198273,2198305,2198337,2198369]),
      new Uint32Array([2132514,2132610,2160386,2133090,2133186,2160450,2160514,2133282,2160578,2133570,2106178,2160642,2133858,2160706,2160770,2134146]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,23068672,6291456,23068672,23068672,6291456,23068672,0,0,0,0,0,0,0,0]),
      new Uint32Array([2184737,6291456,2184769,6291456,2184801,6291456,2184833,6291456,2184865,6291456,2184897,6291456,2184929,6291456,2184961,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,0,0]),
      new Uint32Array([6291456,6291456,6291456,2186753,6291456,6291456,6291456,6291456,2186785,2186817,2186849,2173569,2186881,10496355,10495395,10575521]),
      new Uint32Array([0,0,2097729,0,0,0,0,2106017,0,2097505,0,2097185,0,2135777,2097633,2097441]),
      new Uint32Array([2189537,6291456,2189569,6291456,2189601,6291456,2189633,6291456,2189665,6291456,2189697,6291456,2189729,6291456,2189761,6291456]),
      new Uint32Array([2202497,6291456,2202529,6291456,2202561,6291456,2202593,6291456,2202625,6291456,2202657,6291456,2202689,6291456,2202721,6291456]),
      new Uint32Array([2245217,2218369,2245249,2245282,2245345,2245377,2245410,2245474,2245537,2245569,2245601,2245633,2245665,2245665,2245697,2245729]),
      new Uint32Array([6291456,0,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,23068672,6291456,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
      new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2097281,2105921,2097729,2106081,2097377,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
      new Uint32Array([2176641,6291456,2176673,6291456,2176705,6291456,2176737,6291456,2176769,6291456,2176801,6291456,2176833,6291456,2176865,6291456]),
      new Uint32Array([2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2174369,2174369,0,0,2100833,2100737]),
      new Uint32Array([2116513,2190817,2190849,2190881,2190913,2190945,2116609,2190977,2191009,2191041,2191073,2117185,2191105,2191137,2191169,2191201]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
      new Uint32Array([2167617,2167649,2167681,2167713,2167745,2167777,2167809,6291456,2167841,2167873,2167905,2167937,2167969,2168001,2168033,4240130]),
      new Uint32Array([2165122,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122,2134562,2132162,2132834,2136866]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2186209,2186241,2186273,2186305,2186337,2186369,0,0]),
      new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([0,0,23068672,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
      new Uint32Array([0,10537921,10610689,10610273,10610497,10610529,10610305,10610721,10489601,10489697,10610337,10575617,10554529,2221761,2197217,10496577]),
      new Uint32Array([2105473,2105569,2105601,2112289,0,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
      new Uint32Array([2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481]),
      new Uint32Array([2125346,2153410,2153474,2127394,2153538,2153602,2153666,2153730,2105507,2105476,2153794,2153858,2153922,2153986,2154050,2105794]),
      new Uint32Array([2200449,2119681,2200481,2153313,2199873,2199905,2199937,2200513,2200545,2200577,2200609,2119105,2119201,2119297,2119393,2119489]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2175777,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2222273,2197217,2221473,2221505,2221089,2222305,2200865,2099681,2104481,2222337,2099905,2120737,2222369,2103713,2100225,2098785]),
      new Uint32Array([2201377,6291456,2201409,6291456,2201441,6291456,2201473,6291456,2201505,6291456,2201537,6291456,2201569,6291456,6291456,23068672]),
      new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
      new Uint32Array([2200897,6291456,2200929,6291456,2200961,6291456,2200993,6291456,2201025,6291456,2180865,6291456,2201057,6291456,2201089,6291456]),
      new Uint32Array([0,0,0,0,0,23068672,23068672,0,6291456,6291456,6291456,0,0,0,0,0]),
      new Uint32Array([2161154,2161410,2138658,2161474,2161538,2097666,2097186,2097474,2162946,2132450,2163010,2163074,2136162,2163138,2161666,2161730]),
      new Uint32Array([2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953]),
      new Uint32Array([0,0,0,0,0,0,23068672,23068672,0,0,0,0,2145410,2145474,0,6291456]),
      new Uint32Array([2244161,2216065,2212769,2244193,2244225,2244257,2244290,2244353,2244385,2244417,2244449,2218273,2244481,2244514,2244577,2244609]),
      new Uint32Array([2125730,2125699,2125795,2125891,2125987,2154114,2154178,2154242,2154306,2154370,2154434,2154498,2126082,2126178,2126274,2126083]),
      new Uint32Array([2237665,2237697,2237697,2237697,2237730,2237793,2237825,2237857,2237890,2237953,2237985,2238017,2238049,2238081,2238113,2238145]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150146,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
      new Uint32Array([2214369,2238593,2238625,2238657,2238689,2238721,2238753,2238785,2238817,2238850,2238913,2238945,2238977,2235457,2239009,2239041]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([2252066,2252130,2252193,2252225,2252257,2252290,2252353,2252385,2252417,2252449,2252481,2252513,2252545,2252578,2252641,2252673]),
      new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,2197857]),
      new Uint32Array([2224866,2224930,2224994,2225058,2225122,2225186,2225250,2225314,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2219490,2219554,2219617,2219649,2219681,2219714,2219778,2219842,2219905,2219937,0,0,0,0,0,0]),
      new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
      new Uint32Array([2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
      new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665]),
      new Uint32Array([2220161,2220161,2220193,2220193,2220193,2220193,2220225,2220225,2220225,2220225,2220257,2220257,2220257,2220257,2220289,2220289]),
      new Uint32Array([2192673,2192705,2192737,2192769,2192801,2192833,2192865,2118049,2192897,2117473,2117761,2192929,2192961,2192993,2193025,2193057]),
      new Uint32Array([2179297,6291456,2179329,6291456,2179361,6291456,2179393,6291456,2179425,6291456,2179457,6291456,2179489,6291456,2179521,6291456]),
      new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2235745,2235777,2193633,2235809,2235841,2235873,2235905,2235937,2235969,2116513,2116705,2236001,2200513,2199905,2200545,2236033]),
      new Uint32Array([2113153,2108481,2113345,2113441,2232993,2233025,0,0,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761]),
      new Uint32Array([2170593,6291456,2170625,6291456,2170657,6291456,2170689,2170721,6291456,2170753,6291456,6291456,2170785,6291456,2170817,2170849]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2166786,2166850,0,0,0,0]),
      new Uint32Array([23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,0]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2134562,2132162,2132834,2136866,2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058]),
      new Uint32Array([6291456,6291456,2098337,2101441,10531458,2153473,6291456,6291456,10531522,2100737,2108193,6291456,2106499,2106595,2106691,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2233122,2233186,2233250,2233314,2233378,2233442,2233506,2233570,2233634,2233698,2233762,2233826,2233890,2233954,2234018,2234082]),
      new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2205217,2205249,2205281,2205313,2205345,2205377,2205409,2205441,2205473,2205505,2205537,2205569,2205601,2205633,2205665,2205697]),
      new Uint32Array([6291456,0,6291456,0,0,0,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
      new Uint32Array([2173601,2173761,2174081,2173569,2174241,2174113,2173953,6291456,2174305,6291456,2174337,6291456,2174369,6291456,2174401,6291456]),
      new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([2152450,2152514,2099653,2104452,2099813,2122243,2099973,2152578,2122339,2122435,2122531,2122627,2122723,2104580,2122819,2152642]),
      new Uint32Array([2236385,2236417,2236449,2236482,2236545,2215425,2236577,2236609,2236641,2236673,2215457,2236705,2236737,2236770,2215489,2236833]),
      new Uint32Array([2163394,2159746,2163458,2131362,2163522,2160130,2163778,2132226,2163842,2132898,2163906,2161410,2138658,2097666,2136162,2163650]),
      new Uint32Array([2218721,2246913,2246946,2216385,2247010,2247074,2215009,2247137,2247169,2216481,2247201,2247233,2247266,2247330,2247330,0]),
      new Uint32Array([2129730,2129762,2129858,2129731,2129827,2156482,2156482,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0,0,0,0,6291456,0,0]),
      new Uint32Array([2203969,2204001,2181377,2204033,2204065,6291456,2204097,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([2169473,6291456,2169505,6291456,2169537,6291456,2169569,6291456,2169601,6291456,2169633,6291456,2169665,6291456,2169697,6291456]),
      new Uint32Array([2141542,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2220801,2220801,2220801,2220801,2220833,2220833,2220865,2220865,2220865,2220865,2220897,2220897,2220897,2220897,2139873,2139873]),
      new Uint32Array([0,0,0,0,0,23068672,23068672,0,0,0,0,0,0,0,6291456,0]),
      new Uint32Array([2214849,2218433,2218465,2218497,2218529,2218561,2214881,2218593,2218625,2218657,2218689,2218721,2218753,2216545,2218785,2218817]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,6291456]),
      new Uint32Array([2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058,2165122,2132802,2132706,2164866]),
      new Uint32Array([2207649,2207681,2207713,2207745,2207777,2207809,2207841,2207873,2207905,2207937,2207969,2208001,2208033,2208065,2208097,2208129]),
      new Uint32Array([2123683,2105092,2152706,2123779,2105220,2152770,2100453,2098755,2123906,2124002,2124098,2124194,2124290,2124386,2124482,2124578]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,0,0,0,0,0,0,0,10485857]),
      new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([10508163,10508259,10508355,10508451,2200129,2200161,2192737,2200193,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2203553,6291456,2203585,6291456,6291456,6291456,2203617,6291456,2203649,6291456,2203681,6291456,2203713,6291456,2203745,6291456]),
      new Uint32Array([18884449,18884065,23068672,18884417,18884034,18921185,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18874368]),
      new Uint32Array([2247393,2247426,2247489,2247521,2247553,2247586,2247649,2247681,2247713,2247745,2247777,2247810,2247873,2247905,2247937,2247969]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
      new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,2160577,2133857,2235297,0,2235329,0]),
      new Uint32Array([2182593,6291456,2182625,6291456,2182657,6291456,2182689,6291456,2182721,6291456,2182753,6291456,2182785,6291456,2182817,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102402,2102403,6291456,2110050]),
      new Uint32Array([2149890,2108323,2149954,6291456,2113441,6291456,2149057,6291456,2113441,6291456,2105473,2167265,2111137,2105505,6291456,2108353]),
      new Uint32Array([2219105,2219137,2195233,2251554,2251617,2251649,2251681,2251713,2251746,2251810,2251873,2251905,2251937,2251970,2252033,2219169]),
      new Uint32Array([2203009,6291456,2203041,6291456,2203073,6291456,2203105,6291456,2203137,6291456,2203169,6291456,2203201,6291456,2203233,6291456]),
      new Uint32Array([2128195,2128291,2128387,2128483,2128579,2128675,2128771,2128867,2128963,2129059,2129155,2129251,2129347,2129443,2129539,2129635]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2140964,2141156,2140966,2141158,2141350]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2225378,2225442,2225506,2225570,2225634,2225698,2225762,2225826,2225890,2225954,2226018,2226082,2226146,2226210,2226274,2226338]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417]),
      new Uint32Array([2108353,2108417,0,2105601,2108193,2157121,2157313,2157377,2157441,2100897,6291456,2108419,2173953,2173633,2173633,2173953]),
      new Uint32Array([2111713,2173121,2111905,2098177,2173153,2173185,2173217,2113153,2113345,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2190753]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,2197249,6291456,2117377,2197281,2197313,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,6291456,6291456,6291456]),
      new Uint32Array([2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
      new Uint32Array([0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,23068672]),
      new Uint32Array([2173281,6291456,2173313,6291456,2173345,6291456,2173377,6291456,0,0,10532546,6291456,6291456,6291456,10562017,2173441]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
      new Uint32Array([23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2159426,2159490,2159554,2159362,2159618,2159682,2139522,2136450,2159746,2159810,2159874,2130978,2131074,2131266,2131362,2159938]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2203233,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2203265,6291456,2203297,6291456,2203329,2203361,6291456]),
      new Uint32Array([6291456,6291456,2148418,2148482,2148546,0,6291456,2148610,2186529,2186561,2148417,2148545,2148482,10495778,2143969,10495778]),
      new Uint32Array([2134146,2139426,2160962,2134242,2161218,2161282,2161346,2161410,2138658,2134722,2134434,2134818,2097666,2097346,2097698,2105986]),
      new Uint32Array([2198881,2198913,2198945,2198977,2199009,2199041,2199073,2199105,2199137,2199169,2199201,2199233,2199265,2199297,2199329,2199361]),
      new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([10610561,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
      new Uint32Array([2183873,6291456,2183905,6291456,2183937,6291456,2183969,6291456,2184001,6291456,2184033,6291456,2184065,6291456,2184097,6291456]),
      new Uint32Array([2244642,2244706,2244769,2244801,2218305,2244833,2244865,2244897,2244929,2244961,2244993,2245026,2245089,2245122,2245185,0]),
      new Uint32Array([6291456,6291456,2116513,2116609,2116705,2116801,2199873,2199905,2199937,2199969,2190913,2200001,2200033,2200065,2200097,2191009]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2180673,2180705,2180737,2180769,2180801,2180833,0,0]),
      new Uint32Array([2098081,2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150402]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,2145666,2145730,6291456,6291456]),
      new Uint32Array([2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665]),
      new Uint32Array([2187073,6291456,6291456,6291456,6291456,2098241,2098241,2108353,2100897,2111905,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102404,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2100612,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10485857]),
      new Uint32Array([2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
      new Uint32Array([2217697,2217729,2217761,2217793,2217825,2217857,2217889,2217921,2217953,2215873,2217985,2215905,2218017,2218049,2218081,2218113]),
      new Uint32Array([2211233,2218849,2216673,2218881,2218913,2218945,2218977,2219009,2216833,2219041,2215137,2219073,2216865,2209505,2219105,2216897]),
      new Uint32Array([2240097,2240129,2240161,2240193,2240225,2240257,2240289,2240321,2240353,2240386,2240449,2240481,2240513,2240545,2207905,2240578]),
      new Uint32Array([6291456,6291456,2202273,6291456,2202305,6291456,2202337,6291456,2202369,6291456,2202401,6291456,2202433,6291456,2202465,6291456]),
      new Uint32Array([0,23068672,23068672,18923394,23068672,18923458,18923522,18884099,18923586,18884195,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2201121,6291456,2201153,6291456,2201185,6291456,2201217,6291456,2201249,6291456,2201281,6291456,2201313,6291456,2201345,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
      new Uint32Array([2211041,2211073,2211105,2211137,2211169,2211201,2211233,2211265,2211297,2211329,2211361,2211393,2211425,2211457,2211489,2211521]),
      new Uint32Array([2181825,6291456,2181857,6291456,2181889,6291456,2181921,6291456,2181953,6291456,2181985,6291456,2182017,6291456,2182049,6291456]),
      new Uint32Array([2162337,2097633,2097633,2097633,2097633,2132705,2132705,2132705,2132705,2097153,2097153,2097153,2097153,2133089,2133089,2133089]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,2148545,6291456,2173473,6291456,2148865,6291456,2173505,6291456,2173537,6291456,2173569,6291456,2149121,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,0,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2207137,2207169,2207201,2207233,2207265,2207297,2207329,2207361,2207393,2207425,2207457,2207489,2207521,2207553,2207585,2207617]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,23068672,23068672,0,0,0,0,0,0]),
      new Uint32Array([2198401,2198433,2198465,2198497,0,2198529,2198561,2198593,2198625,2198657,2198689,2198721,2198753,2198785,2198817,2198849]),
      new Uint32Array([2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
      new Uint32Array([2216385,2118721,2216417,2216449,2216481,2216513,2216545,2211233,2216577,2216609,2216641,2216673,2216705,2216737,2216737,2216769]),
      new Uint32Array([2216801,2216833,2216865,2216897,2216929,2216961,2216993,2215169,2217025,2217057,2217089,2217121,2217154,2217217,0,0]),
      new Uint32Array([2210593,2191809,2210625,2210657,2210689,2210721,2210753,2210785,2210817,2210849,2191297,2210881,2210913,2210945,2210977,2211009]),
      new Uint32Array([0,0,2105825,0,0,2111905,2105473,0,0,2112289,2108193,2112481,2112577,0,2098305,2108321]),
      new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,2097153,2134241,0,2132705,0,0,2131297,0,2133089,0,2133857,0,2220769,0,2235361]),
      new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,6291456,6291456,14680064]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([2171873,6291456,2171905,6291456,2171937,6291456,2171969,6291456,2172001,6291456,2172033,6291456,2172065,6291456,2172097,6291456]),
      new Uint32Array([2220929,2220929,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2133857,2134145,2134145,2134145,2134145,2134241,2134241,2134241,2134241,2105889,2105889,2105889,2105889,2097185,2097185,2097185]),
      new Uint32Array([2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,10499619,10499715,10499811,10499907]),
      new Uint32Array([0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,23068672,23068672]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2144322,2144386,2144450,2144514,2144578,2144642,2144706,2144770]),
      new Uint32Array([23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456]),
      new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0,0,2111905,2105473,2105569]),
      new Uint32Array([2236321,2236353,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2152194,2121283,2103684,2103812,2097986,2098533,2097990,2098693,2098595,2098853,2099013,2103940,2121379,2121475,2121571,2104068]),
      new Uint32Array([2206241,2206273,2206305,2206337,2206369,2206401,2206433,2206465,2206497,2206529,2206561,2206593,2206625,2206657,2206689,2206721]),
      new Uint32Array([6291456,6291456,6291456,6291456,16777216,16777216,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,10538818,10538882,6291456,6291456,2150338]),
      new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2214369,2214401,2214433,2214465,2214497,2214529,2214561,2214593,2194977,2214625,2195073,2214657,2214689,2214721,6291456,6291456]),
      new Uint32Array([2097152,2097152,2097152,2097152,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2182081,6291456,2182113,6291456,2182145,6291456,2182177,6291456,2182209,6291456,2182241,6291456,2182273,6291456,2182305,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146881,2146945,2147009,2147073,2147137,2147201,2147265,2147329]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672]),
      new Uint32Array([0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2122915,2123011,2123107,2104708,2123203,2123299,2123395,2100133,2104836,2100290,2100293,2104962,2104964,2098052,2123491,2123587]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
      new Uint32Array([6291456,2171169,6291456,2171201,6291456,2171233,6291456,2171265,6291456,2171297,6291456,2171329,6291456,6291456,2171361,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,2148994,2149058,2149122,0,6291456,2149186,2186945,2173537,2148993,2149121,2149058,10531458,10496066,0]),
      new Uint32Array([2195009,2195041,2195073,2195105,2195137,2195169,2195201,2195233,2195265,2195297,2195329,2195361,2195393,2195425,2195457,2195489]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,0,0,6291456,6291456]),
      new Uint32Array([2182849,6291456,2182881,6291456,2182913,6291456,2182945,6291456,2182977,6291456,2183009,6291456,2183041,6291456,2183073,6291456]),
      new Uint32Array([2211553,2210081,2211585,2211617,2211649,2211681,2211713,2211745,2211777,2211809,2209569,2211841,2211873,2211905,2211937,2211969]),
      new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2166594,2127298,2166658,2142978,2141827,2166722]),
      new Uint32Array([2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2185761,2185793,2185825,2185857,2185889,2185921,0,0]),
      new Uint32Array([6291456,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456]),
      new Uint32Array([0,0,0,2220961,2220961,2220961,2220961,2144193,2144193,2159201,2159201,2159265,2159265,2144194,2220993,2220993]),
      new Uint32Array([2192641,2235393,2235425,2152257,2116609,2235457,2235489,2200065,2235521,2235553,2235585,2212449,2235617,2235649,2235681,2235713]),
      new Uint32Array([2194049,2194081,2194113,2194145,2194177,2194209,2194241,2194273,2194305,2194337,2194369,2194401,2194433,2194465,2194497,2194529]),
      new Uint32Array([2196673,2208641,2208673,2208705,2208737,2208769,2208801,2208833,2208865,2208897,2208929,2208961,2208993,2209025,2209057,2209089]),
      new Uint32Array([2191681,2191713,2191745,2191777,2153281,2191809,2191841,2191873,2191905,2191937,2191969,2192001,2192033,2192065,2192097,2192129]),
      new Uint32Array([2230946,2231010,2231074,2231138,2231202,2231266,2231330,2231394,2231458,2231522,2231586,2231650,2231714,2231778,2231842,2231906]),
      new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2185953,2185985,2186017,2186049,2186081,2186113,2186145,2186177]),
      new Uint32Array([2139811,2139907,2097284,2105860,2105988,2106116,2106244,2097444,2097604,2097155,10485778,10486344,2106372,6291456,0,0]),
      new Uint32Array([2110051,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2172385,6291456,2172417,6291456,2172449,6291456,2172481,6291456,2172513,6291456,2172545,6291456,2172577,6291456,2172609,6291456]),
      new Uint32Array([0,0,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2249345,2249377,2249409,2249441,2249473,2249505,2249537,2249570,2210209,2249633,2249665,2249697,2249729,2249761,2249793,2216769]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456]),
      new Uint32Array([2187169,2187201,2187233,2187265,2187297,2187329,2187361,2187393,2187425,2187457,2187489,2187521,2187553,2187585,2187617,2187649]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([0,0,0,6291456,6291456,0,0,0,6291456,6291456,6291456,0,0,0,6291456,6291456]),
      new Uint32Array([2182337,6291456,2182369,6291456,2182401,6291456,2182433,6291456,2182465,6291456,2182497,6291456,2182529,6291456,2182561,6291456]),
      new Uint32Array([2138179,2138275,2138371,2138467,2134243,2134435,2138563,2138659,2138755,2138851,2138947,2139043,2138947,2138755,2139139,2139235]),
      new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([0,0,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2250498,2250562,2250625,2250657,2208321,2250689,2250721,2250753,2250785,2250817,2250849,2218945,2250881,2250913,2250945,0]),
      new Uint32Array([2170369,2105569,2098305,2108481,2173249,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
      new Uint32Array([2100897,2111905,2105473,2105569,2105601,0,2108193,0,0,0,2098305,2108321,2108289,2100865,2113153,2108481]),
      new Uint32Array([2100897,2100897,2105569,2105569,6291456,2112289,2149826,6291456,6291456,2112481,2112577,2098177,2098177,2098177,6291456,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456,6291456]),
      new Uint32Array([6291456,2169953,2169985,6291456,2170017,6291456,2170049,2170081,6291456,2170113,2170145,2170177,6291456,6291456,2170209,2170241]),
      new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2220641,2220641,2220673,2220673,2220673,2220673,2220705,2220705,2220705,2220705,2220737,2220737,2220737,2220737,2220769,2220769]),
      new Uint32Array([2127650,2127746,2127842,2127938,2128034,2128130,2128226,2128322,2128418,2127523,2127619,2127715,2127811,2127907,2128003,2128099]),
      new Uint32Array([2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177]),
      new Uint32Array([0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([2204705,2204737,2204769,2204801,2204833,2204865,2204897,2204929,2204961,2204993,2205025,2205057,2205089,2205121,2205153,2205185]),
      new Uint32Array([2176385,6291456,2176417,6291456,2176449,6291456,2176481,6291456,2176513,6291456,2176545,6291456,2176577,6291456,2176609,6291456]),
      new Uint32Array([2195521,2195553,2195585,2195617,2195649,2195681,2117857,2195713,2195745,2195777,2195809,2195841,2195873,2195905,2195937,2195969]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456]),
      new Uint32Array([2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113]),
      new Uint32Array([2131586,2132450,2135970,2135778,2161602,2136162,2163650,2161794,2135586,2163714,2137186,2131810,2160290,2135170,2097506,2159554]),
      new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,0,0,0,0]),
      new Uint32Array([2116513,2116609,2116705,2116801,2116897,2116993,2117089,2117185,2117281,2117377,2117473,2117569,2117665,2117761,2117857,2117953]),
      new Uint32Array([2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100802,2101154,2101282,2101410,2101538,2101666,2101794]),
      new Uint32Array([2100289,2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2098977,2150241,2150305]),
      new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,2109955,6291456,6291456,0,0,0,0]),
      new Uint32Array([18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,0,0]),
      new Uint32Array([2130979,2131075,2131075,2131171,2131267,2131363,2131459,2131555,2131651,2131651,2131747,2131843,2131939,2132035,2132131,2132227]),
      new Uint32Array([0,2177793,6291456,2177825,6291456,2177857,6291456,2177889,6291456,2177921,6291456,2177953,6291456,2177985,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
      new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2113345,0,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
      new Uint32Array([2136643,2136739,2136835,2136931,2137027,2137123,2137219,2137315,2137411,2137507,2137603,2137699,2137795,2137891,2137987,2138083]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
      new Uint32Array([2174433,6291456,2174465,6291456,2174497,6291456,2174529,6291456,2174561,6291456,2174593,6291456,2174625,6291456,2174657,6291456]),
      new Uint32Array([0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
      new Uint32Array([10496547,10496643,2105505,2149698,6291456,10496739,10496835,2170273,6291456,2149762,2105825,2111713,2111713,2111713,2111713,2168673]),
      new Uint32Array([6291456,2143490,2143490,2143490,2171649,6291456,2171681,2171713,2171745,6291456,2171777,6291456,2171809,6291456,2171841,6291456]),
      new Uint32Array([2159106,2159106,2159170,2159170,2159234,2159234,2159298,2159298,2159298,2159362,2159362,2159362,2106401,2106401,2106401,2106401]),
      new Uint32Array([2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137]),
      new Uint32Array([2108417,2181217,2181249,2181281,2170433,2170401,2181313,2181345,2181377,2181409,2181441,2181473,2181505,2181537,2170529,2181569]),
      new Uint32Array([2218433,2245761,2245793,2245825,2245857,2245890,2245953,2245986,2209665,2246050,2246113,2246146,2246210,2246274,2246337,2246369]),
      new Uint32Array([2230754,2230818,2230882,0,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2184129,6291456,2184161,6291456,2184193,6291456,6291456,6291456,6291456,6291456,2146818,2183361,6291456,6291456,2142978,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2135170,2097506,2130691,2130787,2130883,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122]),
      new Uint32Array([2108515,2108611,2100740,2108707,2108803,2108899,2108995,2109091,2109187,2109283,2109379,2109475,2109571,2109667,2109763,2100738]),
      new Uint32Array([2102788,2102916,2103044,2120515,2103172,2120611,2120707,2098373,2103300,2120803,2120899,2120995,2103428,2103556,2121091,2121187]),
      new Uint32Array([2158082,2158146,0,2158210,2158274,0,2158338,2158402,2158466,2129922,2158530,2158594,2158658,2158722,2158786,2158850]),
      new Uint32Array([10499619,10499715,10499811,10499907,10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059]),
      new Uint32Array([2239585,2239618,2239681,2239713,0,2191969,2239745,2239777,2192033,2239809,2239841,2239874,2239937,2239970,2240033,2240065]),
      new Uint32Array([2252705,2252738,2252801,2252833,2252865,2252897,2252930,2252994,2253057,2253089,2253121,2253154,2253217,2253250,2219361,2219361]),
      new Uint32Array([2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,10538050,10538114,10538178,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([2226402,2226466,2226530,2226594,2226658,2226722,2226786,2226850,2226914,2226978,2227042,2227106,2227170,2227234,2227298,2227362]),
      new Uint32Array([23068672,6291456,6291456,6291456,6291456,2144066,2144130,2144194,2144258,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,23068672,23068672]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
      new Uint32Array([2124674,2124770,2123875,2123971,2124067,2124163,2124259,2124355,2124451,2124547,2124643,2124739,2124835,2124931,2125027,2125123]),
      new Uint32Array([2168065,6291456,2168097,6291456,2168129,6291456,2168161,6291456,2168193,6291456,2168225,6291456,2168257,6291456,2168289,6291456]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0]),
      new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,2100610,2100611,6291456,2107842,2107843,6291456,6291456,6291456,6291456,10537922,6291456,10537986,6291456]),
      new Uint32Array([2174849,2174881,2174913,2174945,2174977,2175009,2175041,2175073,2175105,2175137,2175169,2175201,2175233,2175265,2175297,2175329]),
      new Uint32Array([2154562,2154626,2154690,2154754,2141858,2154818,2154882,2127298,2154946,2127298,2155010,2155074,2155138,2155202,2155266,2155202]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0]),
      new Uint32Array([2200641,2150786,2150850,2150914,2150978,2151042,2106562,2151106,2150562,2151170,2151234,2151298,2151362,2151426,2151490,2151554]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456]),
      new Uint32Array([2220289,2220289,2220321,2220321,2220321,2220321,2220353,2220353,2220353,2220353,2220385,2220385,2220385,2220385,2220417,2220417]),
      new Uint32Array([2155330,2155394,0,2155458,2155522,2155586,2105732,0,2155650,2155714,2155778,2125314,2155842,2155906,2126274,2155970]),
      new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
      new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0]),
      new Uint32Array([2097729,2106017,2106017,2106017,2106017,2131297,2131297,2131297,2131297,2106081,2106081,2162049,2162049,2105953,2105953,2162337]),
      new Uint32Array([2097185,2097697,2097697,2097697,2097697,2135777,2135777,2135777,2135777,2097377,2097377,2097377,2097377,2097601,2097601,2097217]),
      new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
      new Uint32Array([2139331,2139427,2139523,2139043,2133571,2132611,2139619,2139715,0,0,0,0,0,0,0,0]),
      new Uint32Array([2174113,2174145,2100897,2098177,2108289,2100865,2173601,2173633,2173985,2174113,2174145,6291456,6291456,6291456,6291456,6291456]),
      new Uint32Array([6291456,6291456,23068672,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456]),
      new Uint32Array([23068672,23068672,18923778,23068672,23068672,23068672,23068672,18923842,23068672,23068672,23068672,23068672,18923906,23068672,23068672,23068672]),
      new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,0,2133857,0,0,0,0]),
      new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2177537,6291456,2177569,6291456,2177601,6291456,2177633,6291456,2177665,6291456,2177697,6291456,2177729,6291456,2177761,6291456]),
      new Uint32Array([2212481,2212513,2212545,2212577,2197121,2212609,2212641,2212673,2212705,2212737,2212769,2212801,2212833,2212865,2212897,2212929]),
      new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,0,0,0,0,0,0,0,0]),
      new Uint32Array([2098241,2108353,2170209,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,6291456,2108193,2172417,2112481,2098177]),
      new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    ];
    var blockIdxes = new Uint16Array([616,616,565,147,161,411,330,2,131,131,328,454,241,408,86,86,696,113,285,350,325,301,473,214,639,232,447,64,369,598,124,672,567,223,621,154,107,86,86,86,86,86,86,505,86,68,634,86,218,218,218,218,486,218,218,513,188,608,216,86,217,463,668,85,700,360,184,86,86,86,647,402,153,10,346,718,662,260,145,298,117,1,443,342,138,54,563,86,240,572,218,70,387,86,118,460,641,602,86,86,306,218,86,692,86,86,86,86,86,162,707,86,458,26,86,218,638,86,86,86,86,86,65,449,86,86,306,183,86,58,391,667,86,157,131,131,131,131,86,433,131,406,31,218,247,86,86,693,218,581,351,86,438,295,69,462,45,126,173,650,14,295,69,97,168,187,641,78,523,390,69,108,287,664,173,219,83,295,69,108,431,426,173,694,412,115,628,52,257,398,641,118,501,121,69,579,151,423,173,620,464,121,69,382,151,476,173,27,53,121,86,594,578,226,173,86,632,130,86,96,228,268,641,622,563,86,86,21,148,650,131,131,321,43,144,343,381,531,131,131,178,20,86,399,156,375,164,541,30,60,715,198,92,118,131,131,86,86,306,407,86,280,457,196,488,358,131,131,244,86,86,143,86,86,86,86,86,667,563,86,86,86,86,86,86,86,86,86,86,86,86,86,336,363,86,86,336,86,86,380,678,67,86,86,86,678,86,86,86,512,86,307,86,708,86,86,86,86,86,528,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,563,307,86,86,86,86,86,104,450,337,86,720,86,32,450,397,86,86,86,587,218,558,708,708,293,708,86,86,86,86,86,694,205,86,8,86,86,86,86,549,86,667,697,697,679,86,458,460,86,86,650,86,708,543,86,86,86,245,86,86,86,140,218,127,708,708,458,197,131,131,131,131,500,86,86,483,251,86,306,510,515,86,722,86,86,86,65,201,86,86,483,580,470,86,86,86,368,131,131,131,694,114,110,555,86,86,123,721,163,142,713,418,86,317,675,209,218,218,218,371,545,592,629,490,603,199,46,320,525,680,310,279,388,111,42,252,593,607,235,617,410,377,50,548,135,356,17,520,189,116,392,600,349,332,482,699,690,535,119,106,451,71,152,667,131,218,218,265,671,637,492,504,533,683,269,269,658,86,86,86,86,86,86,86,86,86,491,619,86,86,6,86,86,86,86,86,86,86,86,86,86,86,229,86,86,86,86,86,86,86,86,86,86,86,86,667,86,86,171,131,118,131,656,206,234,571,89,334,670,246,311,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,534,86,86,86,86,86,86,82,86,86,86,86,86,430,86,86,86,86,86,86,86,86,86,599,86,324,86,470,69,640,264,131,626,101,174,86,86,667,233,105,73,374,394,221,204,84,28,326,86,86,471,86,86,86,109,573,86,171,200,200,200,200,218,218,86,86,86,86,460,131,131,131,86,506,86,86,86,86,86,220,404,34,614,47,442,305,25,612,338,601,648,7,344,255,131,131,51,86,312,507,563,86,86,86,86,588,86,86,86,86,86,530,511,86,458,3,435,384,556,522,230,527,86,118,86,86,717,86,137,273,79,181,484,23,93,112,655,249,417,703,370,87,98,313,684,585,155,465,596,481,695,18,416,428,61,701,706,282,643,495,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,86,86,86,171,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,650,131,422,542,420,263,24,172,86,86,86,86,86,566,86,86,132,540,395,353,494,519,19,485,284,472,131,131,131,16,714,86,211,708,86,86,86,694,698,86,86,483,704,708,218,272,86,86,120,86,159,478,86,307,247,86,86,663,597,459,627,667,86,86,277,455,39,302,86,250,86,86,86,271,99,452,306,281,329,400,200,86,86,362,549,352,646,461,323,586,86,86,4,708,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,717,86,518,86,86,650,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,125,554,480,300,613,72,333,288,561,544,604,48,719,91,169,176,590,224,76,191,29,559,560,231,537,166,477,538,256,437,131,131,469,167,40,0,685,266,441,705,239,642,475,568,640,610,299,673,517,318,385,22,202,180,179,359,424,215,90,66,521,653,467,682,453,409,479,88,131,661,35,303,15,262,666,630,712,131,131,618,659,175,218,195,347,193,227,261,150,165,709,546,294,569,710,270,413,376,524,55,242,38,419,529,170,657,3,304,122,379,278,131,651,86,67,576,458,458,131,131,86,86,86,86,86,86,86,118,309,86,86,547,86,86,86,86,667,650,664,131,131,86,86,56,131,131,131,131,131,131,131,131,86,307,86,86,86,664,238,650,86,86,717,86,118,86,86,315,86,59,86,86,574,549,131,131,340,57,436,86,86,86,86,86,86,458,708,499,691,62,86,650,86,86,694,86,86,86,319,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,86,549,694,131,131,131,131,131,131,131,131,131,77,86,86,139,86,502,86,86,86,667,595,131,131,131,86,12,86,13,86,609,131,131,131,131,86,86,86,625,86,669,86,86,182,129,86,5,694,104,86,86,86,86,131,131,86,86,386,171,86,86,86,345,86,324,86,589,86,213,36,131,131,131,131,131,86,86,86,86,104,131,131,131,141,290,80,677,86,86,86,267,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,515,86,86,33,136,669,86,711,515,86,86,550,640,86,104,708,515,86,159,372,717,86,86,444,515,86,86,663,37,86,563,460,86,390,624,702,131,131,131,131,389,59,708,86,86,341,208,708,635,295,69,108,431,508,100,190,131,131,131,131,131,131,131,131,86,86,86,649,516,660,131,131,86,86,86,218,631,708,131,131,131,131,131,131,131,131,131,131,86,86,341,575,238,514,131,131,86,86,86,218,291,708,307,131,86,86,306,367,708,131,131,131,86,378,697,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,615,253,86,86,86,292,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,104,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,69,86,341,553,549,86,307,86,86,645,275,455,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,708,131,131,131,131,131,131,86,86,86,86,86,86,667,460,86,86,86,86,86,86,86,86,86,86,86,86,717,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,104,86,667,459,131,131,131,131,131,131,86,458,225,86,86,86,516,549,11,390,405,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,460,44,218,197,711,515,131,131,131,131,664,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,118,307,104,286,591,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,681,86,86,75,185,314,582,86,358,496,474,86,104,131,86,86,86,86,146,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,171,86,640,131,131,131,131,131,131,131,131,246,503,689,339,674,81,258,415,439,128,562,366,414,246,503,689,583,222,557,316,636,665,186,355,95,670,246,503,689,339,674,557,258,415,439,186,355,95,670,246,503,689,446,644,536,652,331,532,335,440,274,421,297,570,74,425,364,425,606,552,403,509,134,365,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,218,218,218,498,218,218,577,627,551,497,572,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,553,354,236,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,296,455,131,131,456,243,103,86,41,459,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,9,276,158,716,393,564,383,489,401,654,210,654,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,650,86,86,86,86,86,86,717,667,563,563,563,86,549,102,686,133,246,605,86,448,86,86,207,307,131,131,131,641,86,177,611,445,373,194,584,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,307,171,86,86,86,86,86,86,86,717,86,86,86,86,86,460,131,131,650,86,86,86,694,708,86,86,694,86,458,131,131,131,131,131,131,667,694,289,650,667,131,131,86,640,131,131,664,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,460,86,86,86,86,86,86,86,86,86,86,86,86,86,458,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,466,203,149,429,94,432,160,687,539,63,237,283,192,248,348,259,427,526,396,676,254,468,487,212,327,623,49,633,322,493,434,688,357,361,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131]);
    var mappingStr = "صلى الله عليه وسلمجل جلالهキロメートルrad∕s2エスクードキログラムキロワットグラムトンクルゼイロサンチームパーセントピアストルファラッドブッシェルヘクタールマンションミリバールレントゲン′′′′1⁄10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)∫∫∫∫(오전)(오후)アパートアルファアンペアイニングエーカーカラットカロリーキュリーギルダークローネサイクルシリングバーレルフィートポイントマイクロミクロンメガトンリットルルーブル株式会社kcalm∕s2c∕kgاكبرمحمدصلعمرسولریال1⁄41⁄23⁄4 ̈́ྲཱྀླཱྀ ̈͂ ̓̀ ̓́ ̓͂ ̔̀ ̔́ ̔͂ ̈̀‵‵‵a/ca/sc/oc/utelfax1⁄71⁄91⁄32⁄31⁄52⁄53⁄54⁄51⁄65⁄61⁄83⁄85⁄87⁄8xii0⁄3∮∮∮(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(ᄀ)(ᄂ)(ᄃ)(ᄅ)(ᄆ)(ᄇ)(ᄉ)(ᄋ)(ᄌ)(ᄎ)(ᄏ)(ᄐ)(ᄑ)(ᄒ)(가)(나)(다)(라)(마)(바)(사)(아)(자)(차)(카)(타)(파)(하)(주)(一)(二)(三)(四)(五)(六)(七)(八)(九)(十)(月)(火)(水)(木)(金)(土)(日)(株)(有)(社)(名)(特)(財)(祝)(労)(代)(呼)(学)(監)(企)(資)(協)(祭)(休)(自)(至)pte10月11月12月ergltdアールインチウォンオンスオームカイリガロンガンマギニーケースコルナコーポセンチダースノットハイツパーツピクルフランペニヒヘルツペンスページベータボルトポンドホールホーンマイルマッハマルクヤードヤールユアンルピー10点11点12点13点14点15点16点17点18点19点20点21点22点23点24点hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv∕ma∕m10日11日12日13日14日15日16日17日18日19日20日21日22日23日24日25日26日27日28日29日30日31日galffifflשּׁשּׂ ٌّ ٍّ َّ ُّ ِّ ّٰـَّـُّـِّتجمتحجتحمتخمتمجتمحتمخجمححميحمىسحجسجحسجىسمحسمجسممصححصممشحمشجيشمخشممضحىضخمطمحطممطميعجمعممعمىغممغميغمىفخمقمحقمملحملحيلحىلججلخملمحمحجمحيمجحمجممخممجخهمجهممنحمنحىنجمنجىنمينمىيممبخيتجيتجىتخيتخىتميتمىجميجحىجمىسخىصحيشحيضحيلجيلمييحييجييميمميقمينحيعميكمينجحمخيلجمكممجحيحجيمجيفميبحيسخينجيصلےقلے𝅘𝅥𝅮𝅘𝅥𝅯𝅘𝅥𝅰𝅘𝅥𝅱𝅘𝅥𝅲𝆹𝅥𝅮𝆺𝅥𝅮𝆹𝅥𝅯𝆺𝅥𝅯〔s〕ppv〔本〕〔三〕〔二〕〔安〕〔点〕〔打〕〔盗〕〔勝〕〔敗〕 ̄ ́ ̧ssi̇ijl·ʼndžljnjdz ̆ ̇ ̊ ̨ ̃ ̋ ιեւاٴوٴۇٴيٴक़ख़ग़ज़ड़ढ़फ़य़ড়ঢ়য়ਲ਼ਸ਼ਖ਼ਗ਼ਜ਼ਫ਼ଡ଼ଢ଼ําໍາຫນຫມགྷཌྷདྷབྷཛྷཀྵཱཱིུྲྀླྀྒྷྜྷྡྷྦྷྫྷྐྵaʾἀιἁιἂιἃιἄιἅιἆιἇιἠιἡιἢιἣιἤιἥιἦιἧιὠιὡιὢιὣιὤιὥιὦιὧιὰιαιάιᾶι ͂ὴιηιήιῆιὼιωιώιῶι ̳!! ̅???!!?rs°c°fnosmtmivix⫝̸ ゙ ゚よりコト333435참고주의363738394042444546474849503月4月5月6月7月8月9月hgevギガデシドルナノピコビルペソホンリラレムdaauovpciu平成昭和大正明治naμakakbmbgbpfnfμfμgmgμlmldlklfmnmμmpsnsμsmsnvμvkvpwnwμwmwkwkωmωbqcccddbgyhainkkktlnlxphprsrsvwbstմնմեմիվնմխיִײַשׁשׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּתּוֹבֿכֿפֿאלئائەئوئۇئۆئۈئېئىئجئحئمئيبجبمبىبيتىتيثجثمثىثيخحضجضمطحظمغجفجفحفىفيقحقىقيكاكجكحكخكلكىكينخنىنيهجهىهييىذٰرٰىٰئرئزئنبزبنترتزتنثرثزثنمانرنزننيريزئخئهبهتهصخنههٰثهسهشهطىطيعىعيغىغيسىسيشىشيصىصيضىضيشخشرسرصرضراً ًـًـّ ْـْلآلألإ𝅗𝅥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjほかココàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįĵķĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżɓƃƅɔƈɖɗƌǝəɛƒɠɣɩɨƙɯɲɵơƣƥʀƨʃƭʈưʊʋƴƶʒƹƽǎǐǒǔǖǘǚǜǟǡǣǥǧǩǫǭǯǵƕƿǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟƞȣȥȧȩȫȭȯȱȳⱥȼƚⱦɂƀʉʌɇɉɋɍɏɦɹɻʁʕͱͳʹͷ;ϳέίόύβγδεζθκλνξοπρστυφχψϊϋϗϙϛϝϟϡϣϥϧϩϫϭϯϸϻͻͼͽѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯաբգդզէըթժլծկհձղճյշոչպջռստրցփքօֆ་ⴧⴭნᏰᏱᏲᏳᏴᏵꙋɐɑᴂɜᴖᴗᴝᴥɒɕɟɡɥɪᵻʝɭᶅʟɱɰɳɴɸʂƫᴜʐʑḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἐἑἒἓἔἕἰἱἲἳἴἵἶἷὀὁὂὃὄὅὑὓὕὗᾰᾱὲΐῐῑὶΰῠῡὺῥ`ὸ‐+−∑〈〉ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡɫᵽɽⱨⱪⱬⱳⱶȿɀⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳬⳮⳳⵡ母龟丨丶丿乙亅亠人儿入冂冖冫几凵刀力勹匕匚匸卜卩厂厶又口囗士夂夊夕女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无曰欠止歹殳毋比毛氏气爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸缶网羊羽老而耒耳聿肉臣臼舌舛舟艮色艸虍虫血行衣襾見角言谷豆豕豸貝赤走足身車辛辰辵邑酉釆里長門阜隶隹雨靑非面革韋韭音頁風飛食首香馬骨高髟鬥鬯鬲鬼魚鳥鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齒龍龜龠.〒卄卅ᄁᆪᆬᆭᄄᆰᆱᆲᆳᆴᆵᄚᄈᄡᄊ짜ᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᄔᄕᇇᇈᇌᇎᇓᇗᇙᄜᇝᇟᄝᄞᄠᄢᄣᄧᄩᄫᄬᄭᄮᄯᄲᄶᅀᅇᅌᇱᇲᅗᅘᅙᆄᆅᆈᆑᆒᆔᆞᆡ上中下甲丙丁天地問幼箏우秘男適優印注項写左右医宗夜テヌモヨヰヱヲꙁꙃꙅꙇꙉꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝺꝼᵹꝿꞁꞃꞅꞇꞌꞑꞓꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩɬʞʇꭓꞵꞷꬷꭒᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯ豈更賈滑串句契喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧蘆虜路露魯鷺碌祿綠菉錄論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏諾丹寧怒率異北磻便復不泌數索參塞省葉說殺沈拾若掠略亮兩凉梁糧良諒量勵呂廬旅濾礪閭驪麗黎曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂廉念捻殮簾獵令囹嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料燎療蓼遼暈阮劉杻柳流溜琉留硫紐類戮陸倫崙淪輪律慄栗隆利吏履易李梨泥理痢罹裏裡離匿溺吝燐璘藺隣鱗麟林淋臨笠粒狀炙識什茶刺切度拓糖宅洞暴輻降廓兀嗀塚晴凞猪益礼神祥福靖精蘒諸逸都飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層悔慨憎懲敏既暑梅海渚漢煮爫琢碑祉祈祐祖禍禎穀突節縉繁署者臭艹著褐視謁謹賓贈辶難響頻恵𤋮舘並况全侀充冀勇勺啕喙嗢墳奄奔婢嬨廒廙彩徭惘慎愈慠戴揄搜摒敖望杖滛滋瀞瞧爵犯瑱甆画瘝瘟盛直睊着磌窱类絛缾荒華蝹襁覆調請諭變輸遲醙鉶陼韛頋鬒𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎עםٱٻپڀٺٿٹڤڦڄڃچڇڍڌڎڈژڑکگڳڱںڻۀہھۓڭۋۅۉ、〖〗—–_{}【】《》「」『』[]#&*-<>\\$%@ءؤة\"'^|~⦅⦆・ゥャ¢£¬¦¥₩│←↑→↓■○𐐨𐐩𐐪𐐫𐐬𐐭𐐮𐐯𐐰𐐱𐐲𐐳𐐴𐐵𐐶𐐷𐐸𐐹𐐺𐐻𐐼𐐽𐐾𐐿𐑀𐑁𐑂𐑃𐑄𐑅𐑆𐑇𐑈𐑉𐑊𐑋𐑌𐑍𐑎𐑏𐓘𐓙𐓚𐓛𐓜𐓝𐓞𐓟𐓠𐓡𐓢𐓣𐓤𐓥𐓦𐓧𐓨𐓩𐓪𐓫𐓬𐓭𐓮𐓯𐓰𐓱𐓲𐓳𐓴𐓵𐓶𐓷𐓸𐓹𐓺𐓻𐳀𐳁𐳂𐳃𐳄𐳅𐳆𐳇𐳈𐳉𐳊𐳋𐳌𐳍𐳎𐳏𐳐𐳑𐳒𐳓𐳔𐳕𐳖𐳗𐳘𐳙𐳚𐳛𐳜𐳝𐳞𐳟𐳠𐳡𐳢𐳣𐳤𐳥𐳦𐳧𐳨𐳩𐳪𐳫𐳬𐳭𐳮𐳯𐳰𐳱𐳲𑣀𑣁𑣂𑣃𑣄𑣅𑣆𑣇𑣈𑣉𑣊𑣋𑣌𑣍𑣎𑣏𑣐𑣑𑣒𑣓𑣔𑣕𑣖𑣗𑣘𑣙𑣚𑣛𑣜𑣝𑣞𑣟ıȷ∇∂𞤢𞤣𞤤𞤥𞤦𞤧𞤨𞤩𞤪𞤫𞤬𞤭𞤮𞤯𞤰𞤱𞤲𞤳𞤴𞤵𞤶𞤷𞤸𞤹𞤺𞤻𞤼𞤽𞤾𞤿𞥀𞥁𞥂𞥃ٮڡٯ字双多解交映無前後再新初終販声吹演投捕遊指禁空合満申割営配得可丽丸乁𠄢你侻倂偺備像㒞𠘺兔兤具𠔜㒹內𠕋冗冤仌冬𩇟刃㓟刻剆剷㔕包匆卉博即卽卿𠨬灰及叟𠭣叫叱吆咞吸呈周咢哶唐啓啣善喫喳嗂圖圗噑噴壮城埴堍型堲報墬𡓤売壷夆夢奢𡚨𡛪姬娛娧姘婦㛮嬈嬾𡧈寃寘寳𡬘寿将㞁屠峀岍𡷤嵃𡷦嵮嵫嵼巡巢㠯巽帨帽幩㡢𢆃㡼庰庳庶𪎒𢌱舁弢㣇𣊸𦇚形彫㣣徚忍志忹悁㤺㤜𢛔惇慈慌慺憲憤憯懞戛扝抱拔捐𢬌挽拼捨掃揤𢯱搢揅掩㨮摩摾撝摷㩬敬𣀊旣書晉㬙㬈㫤冒冕最暜肭䏙朡杞杓𣏃㭉柺枅桒𣑭梎栟椔楂榣槪檨𣚣櫛㰘次𣢧歔㱎歲殟殻𣪍𡴋𣫺汎𣲼沿泍汧洖派浩浸涅𣴞洴港湮㴳滇𣻑淹潮𣽞𣾎濆瀹瀛㶖灊災灷炭𠔥煅𤉣熜爨牐𤘈犀犕𤜵𤠔獺王㺬玥㺸瑇瑜璅瓊㼛甤𤰶甾𤲒𢆟瘐𤾡𤾸𥁄㿼䀈𥃳𥃲𥄙𥄳眞真瞋䁆䂖𥐝硎䃣𥘦𥚚𥛅秫䄯穊穏𥥼𥪧䈂𥮫篆築䈧𥲀糒䊠糨糣紀𥾆絣䌁緇縂繅䌴𦈨𦉇䍙𦋙罺𦌾羕翺𦓚𦔣聠𦖨聰𣍟䏕育脃䐋脾媵𦞧𦞵𣎓𣎜舄辞䑫芑芋芝劳花芳芽苦𦬼茝荣莭茣莽菧荓菊菌菜𦰶𦵫𦳕䔫蓱蓳蔖𧏊蕤𦼬䕝䕡𦾱𧃒䕫虐虧虩蚩蚈蜎蛢蜨蝫螆蟡蠁䗹衠𧙧裗裞䘵裺㒻𧢮𧥦䚾䛇誠𧲨貫賁贛起𧼯𠠄跋趼跰𠣞軔𨗒𨗭邔郱鄑𨜮鄛鈸鋗鋘鉼鏹鐕𨯺開䦕閷𨵷䧦雃嶲霣𩅅𩈚䩮䩶韠𩐊䪲𩒖頩𩖶飢䬳餩馧駂駾䯎𩬰鱀鳽䳎䳭鵧𪃎䳸𪄅𪈎𪊑䵖黾鼅鼏鼖𪘀";

    function mapChar(codePoint) {
      if (codePoint >= 0x30000) {
        // High planes are special cased.
        if (codePoint >= 0xE0100 && codePoint <= 0xE01EF)
          return 18874368;
        return 0;
      }
      return blocks[blockIdxes[codePoint >> 4]][codePoint & 15];
    }

    return {
      mapStr: mappingStr,
      mapChar: mapChar
    };
    }));
    });

    var uts46 = createCommonjsModule(function (module, exports) {
    (function(root, factory) {
      /* istanbul ignore next */
      {
        module.exports = factory(punycode_1, idnaMap);
      }
    }(commonjsGlobal, function(punycode, idna_map) {

      function mapLabel(label, useStd3ASCII, transitional) {
        var mapped = [];
        var chars = punycode.ucs2.decode(label);
        for (var i = 0; i < chars.length; i++) {
          var cp = chars[i];
          var ch = punycode.ucs2.encode([chars[i]]);
          var composite = idna_map.mapChar(cp);
          var flags = (composite >> 23);
          var kind = (composite >> 21) & 3;
          var index = (composite >> 5) & 0xffff;
          var length = composite & 0x1f;
          var value = idna_map.mapStr.substr(index, length);
          if (kind === 0 || (useStd3ASCII && (flags & 1))) {
            throw new Error("Illegal char " + ch);
          }
          else if (kind === 1) {
            mapped.push(value);
          }
          else if (kind === 2) {
            mapped.push(transitional ? value : ch);
          }
          /* istanbul ignore next */
          else if (kind === 3) {
            mapped.push(ch);
          }
        }

        var newLabel = mapped.join("").normalize("NFC");
        return newLabel;
      }

      function process(domain, transitional, useStd3ASCII) {
        /* istanbul ignore if */
        if (useStd3ASCII === undefined)
          useStd3ASCII = false;
        var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);

        // Step 3. Break
        var labels = mappedIDNA.split(".");

        // Step 4. Convert/Validate
        labels = labels.map(function(label) {
          if (label.startsWith("xn--")) {
            label = punycode.decode(label.substring(4));
            validateLabel(label, useStd3ASCII, false);
          }
          else {
            validateLabel(label, useStd3ASCII, transitional);
          }
          return label;
        });

        return labels.join(".");
      }

      function validateLabel(label, useStd3ASCII, transitional) {
        // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the
        // third position and fourth positions.
        if (label[2] === '-' && label[3] === '-')
          throw new Error("Failed to validate " + label);

        // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS
        // character.
        if (label.startsWith('-') || label.endsWith('-'))
          throw new Error("Failed to validate " + label);

        // 4. The label must not contain a U+002E ( . ) FULL STOP.
        // this should nerver happen as label is chunked internally by this character
        /* istanbul ignore if */
        if (label.includes('.'))
          throw new Error("Failed to validate " + label);

        if (mapLabel(label, useStd3ASCII, transitional) !== label)
          throw new Error("Failed to validate " + label);

        // 5. The label must not begin with a combining mark, that is:
        // General_Category=Mark.
        var ch = label.codePointAt(0);
        if (idna_map.mapChar(ch) & (0x2 << 23))
          throw new Error("Label contains illegal character: " + ch);
      }

      function toAscii(domain, options) {
        if (options === undefined)
          options = {};
        var transitional = 'transitional' in options ? options.transitional : true;
        var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
        var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;
        var labels = process(domain, transitional, useStd3ASCII).split('.');
        var asciiLabels = labels.map(punycode.toASCII);
        var asciiString = asciiLabels.join('.');
        var i;
        if (verifyDnsLength) {
          if (asciiString.length < 1 || asciiString.length > 253) {
            throw new Error("DNS name has wrong length: " + asciiString);
          }
          for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement
            var label = asciiLabels[i];
            if (label.length < 1 || label.length > 63)
              throw new Error("DNS label has wrong length: " + label);
          }
        }
        return asciiString;
      }

      function toUnicode(domain, options) {
        if (options === undefined)
          options = {};
        var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
        return process(domain, false, useStd3ASCII);
      }

      return {
        toUnicode: toUnicode,
        toAscii: toAscii,
      };
    }));
    });

    var sha3$4 = sha3$3.keccak_256;


    function namehash (inputName) {
      // Reject empty names:
      var node = '';
      for (var i = 0; i < 32; i++) {
        node += '00';
      }

      name = normalize(inputName);

      if (name) {
        var labels = name.split('.');

        for(var i = labels.length - 1; i >= 0; i--) {
          var labelSha = sha3$4(labels[i]);
          node = sha3$4(new Buffer(node + labelSha, 'hex'));
        }
      }

      return '0x' + node
    }

    function normalize(name) {
      return name ? uts46.toUnicode(name, {useStd3ASCII: true, transitional: false}) : name
    }

    var hash$1 = namehash;
    var normalize_1 = normalize;

    var ethEnsNamehash = {
    	hash: hash$1,
    	normalize: normalize_1
    };

    var REGISTRY = [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "resolver",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "label",
                    "type": "bytes32"
                },
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "setSubnodeOwner",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "ttl",
                    "type": "uint64"
                }
            ],
            "name": "setTTL",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "ttl",
            "outputs": [
                {
                    "name": "",
                    "type": "uint64"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "resolver",
                    "type": "address"
                }
            ],
            "name": "setResolver",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "setOwner",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "name": "label",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "NewOwner",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "resolver",
                    "type": "address"
                }
            ],
            "name": "NewResolver",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "ttl",
                    "type": "uint64"
                }
            ],
            "name": "NewTTL",
            "type": "event"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "resolver",
                    "type": "address"
                },
                {
                    "internalType": "uint64",
                    "name": "ttl",
                    "type": "uint64"
                }
            ],
            "name": "setRecord",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "recordExists",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "internalType": "bytes32",
                    "name": "label",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "resolver",
                    "type": "address"
                },
                {
                    "internalType": "uint64",
                    "name": "ttl",
                    "type": "uint64"
                }
            ],
            "name": "setSubnodeRecord",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ];
    var Registry = REGISTRY;

    var RESOLVER = [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "interfaceID",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "contentTypes",
                    "type": "uint256"
                }
            ],
            "name": "ABI",
            "outputs": [
                {
                    "name": "contentType",
                    "type": "uint256"
                },
                {
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "hash",
                    "type": "bytes"
                }
            ],
            "name": "setMultihash",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "multihash",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "x",
                    "type": "bytes32"
                },
                {
                    "name": "y",
                    "type": "bytes32"
                }
            ],
            "name": "setPubkey",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "content",
            "outputs": [
                {
                    "name": "ret",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "addr",
            "outputs": [
                {
                    "name": "ret",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "contentType",
                    "type": "uint256"
                },
                {
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "setABI",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "name",
            "outputs": [
                {
                    "name": "ret",
                    "type": "string"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "name",
                    "type": "string"
                }
            ],
            "name": "setName",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "setContent",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "pubkey",
            "outputs": [
                {
                    "name": "x",
                    "type": "bytes32"
                },
                {
                    "name": "y",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "addr",
                    "type": "address"
                }
            ],
            "name": "setAddr",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "inputs": [
                {
                    "name": "ensAddr",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "a",
                    "type": "address"
                }
            ],
            "name": "AddrChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "hash",
                    "type": "bytes32"
                }
            ],
            "name": "ContentChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "name",
                    "type": "string"
                }
            ],
            "name": "NameChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "name": "contentType",
                    "type": "uint256"
                }
            ],
            "name": "ABIChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "x",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "y",
                    "type": "bytes32"
                }
            ],
            "name": "PubkeyChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "indexed": false,
                    "name": "hash",
                    "type": "bytes"
                }
            ],
            "name": "ContenthashChanged",
            "type": "event"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                }
            ],
            "name": "contenthash",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "node",
                    "type": "bytes32"
                },
                {
                    "name": "hash",
                    "type": "bytes"
                }
            ],
            "name": "setContenthash",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ];
    var Resolver = RESOLVER;

    var formatters$5 = lib$3.formatters;



    /**
     * A wrapper around the ENS registry contract.
     *
     * @method Registry
     * @param {Ens} ens
     * @constructor
     */
    function Registry$1(ens) {
        var self = this;
        this.ens = ens;
        this.contract = ens.checkNetwork().then(function (address) {
            var contract = new lib$e(Registry, address);
            contract.setProvider(self.ens.eth.currentProvider);
            return contract;
        });
    }
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @deprecated Please use the "getOwner" method instead of "owner"
     *
     * @method owner
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<string>}
     */
    Registry$1.prototype.owner = function (name, callback) {
        console.warn('Deprecated: Please use the "getOwner" method instead of "owner".');
        return this.getOwner(name, callback);
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method getOwner
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<string>}
     */
    Registry$1.prototype.getOwner = function (name, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.owner(ethEnsNamehash.hash(name)).call();
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setOwner
     *
     * @param {string} name
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setOwner = function (name, address, txConfig, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.setOwner(ethEnsNamehash.hash(name), formatters$5.inputAddressFormatter(address)).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns the TTL of the given node by his name
     *
     * @method getTTL
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returnss {Promise<string>}
     */
    Registry$1.prototype.getTTL = function (name, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.ttl(ethEnsNamehash.hash(name)).call();
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setTTL
     *
     * @param {string} name
     * @param {number} ttl
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setTTL = function (name, ttl, txConfig, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.setTTL(ethEnsNamehash.hash(name), ttl).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setSubnodeOwner
     *
     * @param {string} name
     * @param {string} label
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {
        var promiEvent = new lib$8(true);
        if (!lib$1.isHexStrict(label)) {
            label = lib$1.sha3(label);
        }
        this.contract.then(function (contract) {
            return contract.methods.setSubnodeOwner(ethEnsNamehash.hash(name), label, formatters$5.inputAddressFormatter(address)).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Sets the owner, resolver, and TTL for an ENS record in a single operation.
     *
     * @method setRecord
     *
     * @param {string} name
     * @param {string} owner
     * @param {string} resolver
     * @param {string | number} ttl
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.setRecord(ethEnsNamehash.hash(name), formatters$5.inputAddressFormatter(owner), formatters$5.inputAddressFormatter(resolver), ttl).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.
     *
     * @method setSubnodeRecord
     *
     * @param {string} name
     * @param {string} label
     * @param {string} owner
     * @param {string} resolver
     * @param {string | number} ttl
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {
        var promiEvent = new lib$8(true);
        if (!lib$1.isHexStrict(label)) {
            label = lib$1.sha3(label);
        }
        this.contract.then(function (contract) {
            return contract.methods.setSubnodeRecord(ethEnsNamehash.hash(name), label, formatters$5.inputAddressFormatter(owner), formatters$5.inputAddressFormatter(resolver), ttl).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Sets or clears an approval by the given operator.
     *
     * @method setApprovalForAll
     *
     * @param {string} operator
     * @param {boolean} approved
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.setApprovalForAll(formatters$5.inputAddressFormatter(operator), approved).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns true if the operator is approved
     *
     * @method isApprovedForAll
     *
     * @param {string} owner
     * @param {string} operator
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<boolean>}
     */
    Registry$1.prototype.isApprovedForAll = function (owner, operator, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.isApprovedForAll(formatters$5.inputAddressFormatter(owner), formatters$5.inputAddressFormatter(operator)).call();
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns true if the record exists
     *
     * @method recordExists
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<boolean>}
     */
    Registry$1.prototype.recordExists = function (name, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.recordExists(ethEnsNamehash.hash(name)).call();
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Returns the resolver contract associated with a name.
     *
     * @deprecated Please use the "getResolver" method instead of "resolver"
     *
     * @method resolver
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<Contract>}
     */
    Registry$1.prototype.resolver = function (name, callback) {
        console.warn('Deprecated: Please use the "getResolver" method instead of "resolver".');
        return this.getResolver(name, callback);
    };
    /**
     * Returns the resolver contract associated with a name.
     *
     * @method getResolver
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<Contract>}
     */
    Registry$1.prototype.getResolver = function (name, callback) {
        var self = this;
        return this.contract.then(function (contract) {
            return contract.methods.resolver(ethEnsNamehash.hash(name)).call();
        }).then(function (address) {
            var contract = new lib$e(Resolver, address);
            contract.setProvider(self.ens.eth.currentProvider);
            if (underscore.isFunction(callback)) {
                // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency
                callback(contract, contract);
                return;
            }
            return contract;
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            throw error;
        });
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setResolver
     *
     * @param {string} name
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    Registry$1.prototype.setResolver = function (name, address, txConfig, callback) {
        var promiEvent = new lib$8(true);
        this.contract.then(function (contract) {
            return contract.methods.setResolver(ethEnsNamehash.hash(name), formatters$5.inputAddressFormatter(address)).send(txConfig);
        }).then(function (receipt) {
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency
                callback(receipt, receipt);
                return;
            }
            promiEvent.resolve(receipt);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    var Registry_1 = Registry$1;

    var errors$c = lib$3.errors;

    var interfaceIds = config_1.interfaceIds;
    /**
     * @param {Registry} registry
     * @constructor
     */
    function ResolverMethodHandler(registry) {
        this.registry = registry;
    }
    /**
     * Executes an resolver method and returns an eventifiedPromise
     *
     * @param {string} ensName
     * @param {string} methodName
     * @param {array} methodArguments
     * @param {function} callback
     * @returns {Object}
     */
    ResolverMethodHandler.prototype.method = function (ensName, methodName, methodArguments, outputFormatter, callback) {
        return {
            call: this.call.bind({
                ensName: ensName,
                methodName: methodName,
                methodArguments: methodArguments,
                callback: callback,
                parent: this,
                outputFormatter: outputFormatter
            }),
            send: this.send.bind({
                ensName: ensName,
                methodName: methodName,
                methodArguments: methodArguments,
                callback: callback,
                parent: this
            })
        };
    };
    /**
     * Executes call
     *
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.call = function (callback) {
        var self = this;
        var promiEvent = new lib$8();
        var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);
        var outputFormatter = this.outputFormatter || null;
        this.parent.registry.getResolver(this.ensName).then(async function (resolver) {
            await self.parent.checkInterfaceSupport(resolver, self.methodName);
            self.parent.handleCall(promiEvent, resolver.methods[self.methodName], preparedArguments, outputFormatter, callback);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Executes send
     *
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.send = function (sendOptions, callback) {
        var self = this;
        var promiEvent = new lib$8();
        var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);
        this.parent.registry.getResolver(this.ensName).then(async function (resolver) {
            await self.parent.checkInterfaceSupport(resolver, self.methodName);
            self.parent.handleSend(promiEvent, resolver.methods[self.methodName], preparedArguments, sendOptions, callback);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent.eventEmitter;
    };
    /**
     * Handles a call method
     *
     * @param {eventifiedPromise} promiEvent
     * @param {function} method
     * @param {array} preparedArguments
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.handleCall = function (promiEvent, method, preparedArguments, outputFormatter, callback) {
        method.apply(this, preparedArguments).call()
            .then(function (result) {
            if (outputFormatter) {
                result = outputFormatter(result);
            }
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the second argument to be backwards compatible and to have the required consistency
                callback(result, result);
                return;
            }
            promiEvent.resolve(result);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent;
    };
    /**
     * Handles a send method
     *
     * @param {eventifiedPromise} promiEvent
     * @param {function} method
     * @param {array} preparedArguments
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    ResolverMethodHandler.prototype.handleSend = function (promiEvent, method, preparedArguments, sendOptions, callback) {
        method.apply(this, preparedArguments).send(sendOptions)
            .on('sending', function () {
            promiEvent.eventEmitter.emit('sending');
        })
            .on('sent', function () {
            promiEvent.eventEmitter.emit('sent');
        })
            .on('transactionHash', function (hash) {
            promiEvent.eventEmitter.emit('transactionHash', hash);
        })
            .on('confirmation', function (confirmationNumber, receipt) {
            promiEvent.eventEmitter.emit('confirmation', confirmationNumber, receipt);
        })
            .on('receipt', function (receipt) {
            promiEvent.eventEmitter.emit('receipt', receipt);
            promiEvent.resolve(receipt);
            if (underscore.isFunction(callback)) {
                // It's required to pass the receipt to the second argument to be backwards compatible and to have the required consistency
                callback(receipt, receipt);
            }
        })
            .on('error', function (error) {
            promiEvent.eventEmitter.emit('error', error);
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            promiEvent.reject(error);
        });
        return promiEvent;
    };
    /**
     * Adds the ENS node to the arguments
     *
     * @param {string} name
     * @param {array} methodArguments
     *
     * @returns {array}
     */
    ResolverMethodHandler.prototype.prepareArguments = function (name, methodArguments) {
        var node = ethEnsNamehash.hash(name);
        if (methodArguments.length > 0) {
            methodArguments.unshift(node);
            return methodArguments;
        }
        return [node];
    };
    /**
     *
     *
     * @param {Contract} resolver
     * @param {string} methodName
     *
     * @returns {Promise}
     */
    ResolverMethodHandler.prototype.checkInterfaceSupport = async function (resolver, methodName) {
        // Skip validation for undocumented interface ids (ex: multihash)
        if (!interfaceIds[methodName])
            return;
        var supported = false;
        try {
            supported = await resolver
                .methods
                .supportsInterface(interfaceIds[methodName])
                .call();
        }
        catch (err) {
            console.warn('Could not verify interface of resolver contract at "' + resolver.options.address + '". ');
        }
        if (!supported) {
            throw errors$c.ResolverMethodMissingError(resolver.options.address, methodName);
        }
    };
    var ResolverMethodHandler_1 = ResolverMethodHandler;

    var encode_1 = encode$3;

    var MSB = 0x80
      , REST = 0x7F
      , MSBALL = ~REST
      , INT = Math.pow(2, 31);

    function encode$3(num, out, offset) {
      out = out || [];
      offset = offset || 0;
      var oldOffset = offset;

      while(num >= INT) {
        out[offset++] = (num & 0xFF) | MSB;
        num /= 128;
      }
      while(num & MSBALL) {
        out[offset++] = (num & 0xFF) | MSB;
        num >>>= 7;
      }
      out[offset] = num | 0;
      
      encode$3.bytes = offset - oldOffset + 1;
      
      return out
    }

    var decode$2 = read$3;

    var MSB$1 = 0x80
      , REST$1 = 0x7F;

    function read$3(buf, offset) {
      var res    = 0
        , offset = offset || 0
        , shift  = 0
        , counter = offset
        , b
        , l = buf.length;

      do {
        if (counter >= l) {
          read$3.bytes = 0;
          throw new RangeError('Could not decode varint')
        }
        b = buf[counter++];
        res += shift < 28
          ? (b & REST$1) << shift
          : (b & REST$1) * Math.pow(2, shift);
        shift += 7;
      } while (b >= MSB$1)

      read$3.bytes = counter - offset;

      return res
    }

    var N1 = Math.pow(2,  7);
    var N2 = Math.pow(2, 14);
    var N3 = Math.pow(2, 21);
    var N4 = Math.pow(2, 28);
    var N5 = Math.pow(2, 35);
    var N6 = Math.pow(2, 42);
    var N7 = Math.pow(2, 49);
    var N8 = Math.pow(2, 56);
    var N9 = Math.pow(2, 63);

    var length = function (value) {
      return (
        value < N1 ? 1
      : value < N2 ? 2
      : value < N3 ? 3
      : value < N4 ? 4
      : value < N5 ? 5
      : value < N6 ? 6
      : value < N7 ? 7
      : value < N8 ? 8
      : value < N9 ? 9
      :              10
      )
    };

    var varint = {
        encode: encode_1
      , decode: decode$2
      , encodingLength: length
    };

    var identity = 0;
    var ip4 = 4;
    var tcp = 6;
    var sha1$1 = 17;
    var dccp = 33;
    var ip6 = 41;
    var ip6zone = 42;
    var path = 47;
    var multicodec = 48;
    var multihash = 49;
    var multiaddr = 50;
    var multibase = 51;
    var dns = 53;
    var dns4 = 54;
    var dns6 = 55;
    var dnsaddr = 56;
    var protobuf = 80;
    var cbor = 81;
    var raw = 85;
    var rlp = 96;
    var bencode = 99;
    var sctp = 132;
    var md4 = 212;
    var md5 = 213;
    var bmt = 214;
    var zeronet = 230;
    var udp = 273;
    var udt = 301;
    var utp = 302;
    var unix = 400;
    var p2p = 421;
    var ipfs = 421;
    var https = 443;
    var onion = 444;
    var onion3 = 445;
    var garlic64 = 446;
    var garlic32 = 447;
    var tls = 448;
    var quic = 460;
    var ws = 477;
    var wss = 478;
    var http$1 = 480;
    var json = 512;
    var messagepack = 513;
    var x11 = 4352;
    var baseTable = {
    	identity: identity,
    	ip4: ip4,
    	tcp: tcp,
    	sha1: sha1$1,
    	"sha2-256": 18,
    	"sha2-512": 19,
    	"sha3-512": 20,
    	"sha3-384": 21,
    	"sha3-256": 22,
    	"sha3-224": 23,
    	"shake-128": 24,
    	"shake-256": 25,
    	"keccak-224": 26,
    	"keccak-256": 27,
    	"keccak-384": 28,
    	"keccak-512": 29,
    	dccp: dccp,
    	"murmur3-128": 34,
    	"murmur3-32": 35,
    	ip6: ip6,
    	ip6zone: ip6zone,
    	path: path,
    	multicodec: multicodec,
    	multihash: multihash,
    	multiaddr: multiaddr,
    	multibase: multibase,
    	dns: dns,
    	dns4: dns4,
    	dns6: dns6,
    	dnsaddr: dnsaddr,
    	protobuf: protobuf,
    	cbor: cbor,
    	raw: raw,
    	"dbl-sha2-256": 86,
    	rlp: rlp,
    	bencode: bencode,
    	"dag-pb": 112,
    	"dag-cbor": 113,
    	"libp2p-key": 114,
    	"git-raw": 120,
    	"torrent-info": 123,
    	"torrent-file": 124,
    	"leofcoin-block": 129,
    	"leofcoin-tx": 130,
    	"leofcoin-pr": 131,
    	sctp: sctp,
    	"eth-block": 144,
    	"eth-block-list": 145,
    	"eth-tx-trie": 146,
    	"eth-tx": 147,
    	"eth-tx-receipt-trie": 148,
    	"eth-tx-receipt": 149,
    	"eth-state-trie": 150,
    	"eth-account-snapshot": 151,
    	"eth-storage-trie": 152,
    	"bitcoin-block": 176,
    	"bitcoin-tx": 177,
    	"zcash-block": 192,
    	"zcash-tx": 193,
    	"stellar-block": 208,
    	"stellar-tx": 209,
    	md4: md4,
    	md5: md5,
    	bmt: bmt,
    	"decred-block": 224,
    	"decred-tx": 225,
    	"ipld-ns": 226,
    	"ipfs-ns": 227,
    	"swarm-ns": 228,
    	"ipns-ns": 229,
    	zeronet: zeronet,
    	"ed25519-pub": 237,
    	"dash-block": 240,
    	"dash-tx": 241,
    	"swarm-manifest": 250,
    	"swarm-feed": 251,
    	udp: udp,
    	"p2p-webrtc-star": 275,
    	"p2p-webrtc-direct": 276,
    	"p2p-stardust": 277,
    	"p2p-circuit": 290,
    	"dag-json": 297,
    	udt: udt,
    	utp: utp,
    	unix: unix,
    	p2p: p2p,
    	ipfs: ipfs,
    	https: https,
    	onion: onion,
    	onion3: onion3,
    	garlic64: garlic64,
    	garlic32: garlic32,
    	tls: tls,
    	quic: quic,
    	ws: ws,
    	wss: wss,
    	"p2p-websocket-star": 479,
    	http: http$1,
    	json: json,
    	messagepack: messagepack,
    	x11: x11,
    	"blake2b-8": 45569,
    	"blake2b-16": 45570,
    	"blake2b-24": 45571,
    	"blake2b-32": 45572,
    	"blake2b-40": 45573,
    	"blake2b-48": 45574,
    	"blake2b-56": 45575,
    	"blake2b-64": 45576,
    	"blake2b-72": 45577,
    	"blake2b-80": 45578,
    	"blake2b-88": 45579,
    	"blake2b-96": 45580,
    	"blake2b-104": 45581,
    	"blake2b-112": 45582,
    	"blake2b-120": 45583,
    	"blake2b-128": 45584,
    	"blake2b-136": 45585,
    	"blake2b-144": 45586,
    	"blake2b-152": 45587,
    	"blake2b-160": 45588,
    	"blake2b-168": 45589,
    	"blake2b-176": 45590,
    	"blake2b-184": 45591,
    	"blake2b-192": 45592,
    	"blake2b-200": 45593,
    	"blake2b-208": 45594,
    	"blake2b-216": 45595,
    	"blake2b-224": 45596,
    	"blake2b-232": 45597,
    	"blake2b-240": 45598,
    	"blake2b-248": 45599,
    	"blake2b-256": 45600,
    	"blake2b-264": 45601,
    	"blake2b-272": 45602,
    	"blake2b-280": 45603,
    	"blake2b-288": 45604,
    	"blake2b-296": 45605,
    	"blake2b-304": 45606,
    	"blake2b-312": 45607,
    	"blake2b-320": 45608,
    	"blake2b-328": 45609,
    	"blake2b-336": 45610,
    	"blake2b-344": 45611,
    	"blake2b-352": 45612,
    	"blake2b-360": 45613,
    	"blake2b-368": 45614,
    	"blake2b-376": 45615,
    	"blake2b-384": 45616,
    	"blake2b-392": 45617,
    	"blake2b-400": 45618,
    	"blake2b-408": 45619,
    	"blake2b-416": 45620,
    	"blake2b-424": 45621,
    	"blake2b-432": 45622,
    	"blake2b-440": 45623,
    	"blake2b-448": 45624,
    	"blake2b-456": 45625,
    	"blake2b-464": 45626,
    	"blake2b-472": 45627,
    	"blake2b-480": 45628,
    	"blake2b-488": 45629,
    	"blake2b-496": 45630,
    	"blake2b-504": 45631,
    	"blake2b-512": 45632,
    	"blake2s-8": 45633,
    	"blake2s-16": 45634,
    	"blake2s-24": 45635,
    	"blake2s-32": 45636,
    	"blake2s-40": 45637,
    	"blake2s-48": 45638,
    	"blake2s-56": 45639,
    	"blake2s-64": 45640,
    	"blake2s-72": 45641,
    	"blake2s-80": 45642,
    	"blake2s-88": 45643,
    	"blake2s-96": 45644,
    	"blake2s-104": 45645,
    	"blake2s-112": 45646,
    	"blake2s-120": 45647,
    	"blake2s-128": 45648,
    	"blake2s-136": 45649,
    	"blake2s-144": 45650,
    	"blake2s-152": 45651,
    	"blake2s-160": 45652,
    	"blake2s-168": 45653,
    	"blake2s-176": 45654,
    	"blake2s-184": 45655,
    	"blake2s-192": 45656,
    	"blake2s-200": 45657,
    	"blake2s-208": 45658,
    	"blake2s-216": 45659,
    	"blake2s-224": 45660,
    	"blake2s-232": 45661,
    	"blake2s-240": 45662,
    	"blake2s-248": 45663,
    	"blake2s-256": 45664,
    	"skein256-8": 45825,
    	"skein256-16": 45826,
    	"skein256-24": 45827,
    	"skein256-32": 45828,
    	"skein256-40": 45829,
    	"skein256-48": 45830,
    	"skein256-56": 45831,
    	"skein256-64": 45832,
    	"skein256-72": 45833,
    	"skein256-80": 45834,
    	"skein256-88": 45835,
    	"skein256-96": 45836,
    	"skein256-104": 45837,
    	"skein256-112": 45838,
    	"skein256-120": 45839,
    	"skein256-128": 45840,
    	"skein256-136": 45841,
    	"skein256-144": 45842,
    	"skein256-152": 45843,
    	"skein256-160": 45844,
    	"skein256-168": 45845,
    	"skein256-176": 45846,
    	"skein256-184": 45847,
    	"skein256-192": 45848,
    	"skein256-200": 45849,
    	"skein256-208": 45850,
    	"skein256-216": 45851,
    	"skein256-224": 45852,
    	"skein256-232": 45853,
    	"skein256-240": 45854,
    	"skein256-248": 45855,
    	"skein256-256": 45856,
    	"skein512-8": 45857,
    	"skein512-16": 45858,
    	"skein512-24": 45859,
    	"skein512-32": 45860,
    	"skein512-40": 45861,
    	"skein512-48": 45862,
    	"skein512-56": 45863,
    	"skein512-64": 45864,
    	"skein512-72": 45865,
    	"skein512-80": 45866,
    	"skein512-88": 45867,
    	"skein512-96": 45868,
    	"skein512-104": 45869,
    	"skein512-112": 45870,
    	"skein512-120": 45871,
    	"skein512-128": 45872,
    	"skein512-136": 45873,
    	"skein512-144": 45874,
    	"skein512-152": 45875,
    	"skein512-160": 45876,
    	"skein512-168": 45877,
    	"skein512-176": 45878,
    	"skein512-184": 45879,
    	"skein512-192": 45880,
    	"skein512-200": 45881,
    	"skein512-208": 45882,
    	"skein512-216": 45883,
    	"skein512-224": 45884,
    	"skein512-232": 45885,
    	"skein512-240": 45886,
    	"skein512-248": 45887,
    	"skein512-256": 45888,
    	"skein512-264": 45889,
    	"skein512-272": 45890,
    	"skein512-280": 45891,
    	"skein512-288": 45892,
    	"skein512-296": 45893,
    	"skein512-304": 45894,
    	"skein512-312": 45895,
    	"skein512-320": 45896,
    	"skein512-328": 45897,
    	"skein512-336": 45898,
    	"skein512-344": 45899,
    	"skein512-352": 45900,
    	"skein512-360": 45901,
    	"skein512-368": 45902,
    	"skein512-376": 45903,
    	"skein512-384": 45904,
    	"skein512-392": 45905,
    	"skein512-400": 45906,
    	"skein512-408": 45907,
    	"skein512-416": 45908,
    	"skein512-424": 45909,
    	"skein512-432": 45910,
    	"skein512-440": 45911,
    	"skein512-448": 45912,
    	"skein512-456": 45913,
    	"skein512-464": 45914,
    	"skein512-472": 45915,
    	"skein512-480": 45916,
    	"skein512-488": 45917,
    	"skein512-496": 45918,
    	"skein512-504": 45919,
    	"skein512-512": 45920,
    	"skein1024-8": 45921,
    	"skein1024-16": 45922,
    	"skein1024-24": 45923,
    	"skein1024-32": 45924,
    	"skein1024-40": 45925,
    	"skein1024-48": 45926,
    	"skein1024-56": 45927,
    	"skein1024-64": 45928,
    	"skein1024-72": 45929,
    	"skein1024-80": 45930,
    	"skein1024-88": 45931,
    	"skein1024-96": 45932,
    	"skein1024-104": 45933,
    	"skein1024-112": 45934,
    	"skein1024-120": 45935,
    	"skein1024-128": 45936,
    	"skein1024-136": 45937,
    	"skein1024-144": 45938,
    	"skein1024-152": 45939,
    	"skein1024-160": 45940,
    	"skein1024-168": 45941,
    	"skein1024-176": 45942,
    	"skein1024-184": 45943,
    	"skein1024-192": 45944,
    	"skein1024-200": 45945,
    	"skein1024-208": 45946,
    	"skein1024-216": 45947,
    	"skein1024-224": 45948,
    	"skein1024-232": 45949,
    	"skein1024-240": 45950,
    	"skein1024-248": 45951,
    	"skein1024-256": 45952,
    	"skein1024-264": 45953,
    	"skein1024-272": 45954,
    	"skein1024-280": 45955,
    	"skein1024-288": 45956,
    	"skein1024-296": 45957,
    	"skein1024-304": 45958,
    	"skein1024-312": 45959,
    	"skein1024-320": 45960,
    	"skein1024-328": 45961,
    	"skein1024-336": 45962,
    	"skein1024-344": 45963,
    	"skein1024-352": 45964,
    	"skein1024-360": 45965,
    	"skein1024-368": 45966,
    	"skein1024-376": 45967,
    	"skein1024-384": 45968,
    	"skein1024-392": 45969,
    	"skein1024-400": 45970,
    	"skein1024-408": 45971,
    	"skein1024-416": 45972,
    	"skein1024-424": 45973,
    	"skein1024-432": 45974,
    	"skein1024-440": 45975,
    	"skein1024-448": 45976,
    	"skein1024-456": 45977,
    	"skein1024-464": 45978,
    	"skein1024-472": 45979,
    	"skein1024-480": 45980,
    	"skein1024-488": 45981,
    	"skein1024-496": 45982,
    	"skein1024-504": 45983,
    	"skein1024-512": 45984,
    	"skein1024-520": 45985,
    	"skein1024-528": 45986,
    	"skein1024-536": 45987,
    	"skein1024-544": 45988,
    	"skein1024-552": 45989,
    	"skein1024-560": 45990,
    	"skein1024-568": 45991,
    	"skein1024-576": 45992,
    	"skein1024-584": 45993,
    	"skein1024-592": 45994,
    	"skein1024-600": 45995,
    	"skein1024-608": 45996,
    	"skein1024-616": 45997,
    	"skein1024-624": 45998,
    	"skein1024-632": 45999,
    	"skein1024-640": 46000,
    	"skein1024-648": 46001,
    	"skein1024-656": 46002,
    	"skein1024-664": 46003,
    	"skein1024-672": 46004,
    	"skein1024-680": 46005,
    	"skein1024-688": 46006,
    	"skein1024-696": 46007,
    	"skein1024-704": 46008,
    	"skein1024-712": 46009,
    	"skein1024-720": 46010,
    	"skein1024-728": 46011,
    	"skein1024-736": 46012,
    	"skein1024-744": 46013,
    	"skein1024-752": 46014,
    	"skein1024-760": 46015,
    	"skein1024-768": 46016,
    	"skein1024-776": 46017,
    	"skein1024-784": 46018,
    	"skein1024-792": 46019,
    	"skein1024-800": 46020,
    	"skein1024-808": 46021,
    	"skein1024-816": 46022,
    	"skein1024-824": 46023,
    	"skein1024-832": 46024,
    	"skein1024-840": 46025,
    	"skein1024-848": 46026,
    	"skein1024-856": 46027,
    	"skein1024-864": 46028,
    	"skein1024-872": 46029,
    	"skein1024-880": 46030,
    	"skein1024-888": 46031,
    	"skein1024-896": 46032,
    	"skein1024-904": 46033,
    	"skein1024-912": 46034,
    	"skein1024-920": 46035,
    	"skein1024-928": 46036,
    	"skein1024-936": 46037,
    	"skein1024-944": 46038,
    	"skein1024-952": 46039,
    	"skein1024-960": 46040,
    	"skein1024-968": 46041,
    	"skein1024-976": 46042,
    	"skein1024-984": 46043,
    	"skein1024-992": 46044,
    	"skein1024-1000": 46045,
    	"skein1024-1008": 46046,
    	"skein1024-1016": 46047,
    	"skein1024-1024": 46048,
    	"holochain-adr-v0": 8417572,
    	"holochain-adr-v1": 8483108,
    	"holochain-key-v0": 9728292,
    	"holochain-key-v1": 9793828,
    	"holochain-sig-v0": 10645796,
    	"holochain-sig-v1": 10711332
    };

    var baseTable$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        identity: identity,
        ip4: ip4,
        tcp: tcp,
        sha1: sha1$1,
        dccp: dccp,
        ip6: ip6,
        ip6zone: ip6zone,
        path: path,
        multicodec: multicodec,
        multihash: multihash,
        multiaddr: multiaddr,
        multibase: multibase,
        dns: dns,
        dns4: dns4,
        dns6: dns6,
        dnsaddr: dnsaddr,
        protobuf: protobuf,
        cbor: cbor,
        raw: raw,
        rlp: rlp,
        bencode: bencode,
        sctp: sctp,
        md4: md4,
        md5: md5,
        bmt: bmt,
        zeronet: zeronet,
        udp: udp,
        udt: udt,
        utp: utp,
        unix: unix,
        p2p: p2p,
        ipfs: ipfs,
        https: https,
        onion: onion,
        onion3: onion3,
        garlic64: garlic64,
        garlic32: garlic32,
        tls: tls,
        quic: quic,
        ws: ws,
        wss: wss,
        http: http$1,
        json: json,
        messagepack: messagepack,
        x11: x11,
        'default': baseTable
    });

    var table = getCjsExportFromNamespace(baseTable$1);

    // map for hexString -> codecName
    const nameTable = new Map();

    for (const encodingName in table) {
      const code = table[encodingName];
      nameTable.set(code, encodingName);
    }

    var intTable = Object.freeze(nameTable);

    var util$1 = {
      numberToBuffer,
      bufferToNumber,
      varintBufferEncode,
      varintBufferDecode,
      varintEncode
    };

    function bufferToNumber (buf) {
      return parseInt(buf.toString('hex'), 16)
    }

    function numberToBuffer (num) {
      let hexString = num.toString(16);
      if (hexString.length % 2 === 1) {
        hexString = '0' + hexString;
      }
      return Buffer.from(hexString, 'hex')
    }

    function varintBufferEncode (input) {
      return Buffer.from(varint.encode(bufferToNumber(input)))
    }

    function varintBufferDecode (input) {
      return numberToBuffer(varint.decode(input))
    }

    function varintEncode (num) {
      return Buffer.from(varint.encode(num))
    }

    const varintEncode$1 = util$1.varintEncode;

    // map for codecName -> codeVarintBuffer
    const varintTable = {};

    for (const encodingName in table) {
      const code = table[encodingName];
      varintTable[encodingName] = varintEncode$1(code);
    }

    var varintTable_1 = Object.freeze(varintTable);

    // map for codecConstant -> code
    const constants = {};

    for (const [name, code] of Object.entries(table)) {
      constants[name.toUpperCase().replace(/-/g, '_')] = code;
    }

    var constants_1 = Object.freeze(constants);

    // map for code -> print friendly name
    const tableByCode = {};

    for (const [name, code] of Object.entries(table)) {
      if (tableByCode[code] === undefined) tableByCode[code] = name;
    }

    var print = Object.freeze(tableByCode);

    var src$3 = createCommonjsModule(function (module, exports) {






    exports = module.exports;

    /**
     * Prefix a buffer with a multicodec-packed.
     *
     * @param {string|number} multicodecStrOrCode
     * @param {Buffer} data
     * @returns {Buffer}
     */
    exports.addPrefix = (multicodecStrOrCode, data) => {
      let prefix;

      if (isBuffer(multicodecStrOrCode)) {
        prefix = util$1.varintBufferEncode(multicodecStrOrCode);
      } else {
        if (varintTable_1[multicodecStrOrCode]) {
          prefix = varintTable_1[multicodecStrOrCode];
        } else {
          throw new Error('multicodec not recognized')
        }
      }
      return Buffer.concat([prefix, data])
    };

    /**
     * Decapsulate the multicodec-packed prefix from the data.
     *
     * @param {Buffer} data
     * @returns {Buffer}
     */
    exports.rmPrefix = (data) => {
      varint.decode(data);
      return data.slice(varint.decode.bytes)
    };

    /**
     * Get the codec of the prefixed data.
     * @param {Buffer} prefixedData
     * @returns {string}
     */
    exports.getCodec = (prefixedData) => {
      const code = varint.decode(prefixedData);
      const codecName = intTable.get(code);
      if (codecName === undefined) {
        throw new Error(`Code ${code} not found`)
      }
      return codecName
    };

    /**
     * Get the name of the codec.
     * @param {number} codec
     * @returns {string}
     */
    exports.getName = (codec) => {
      return intTable.get(codec)
    };

    /**
     * Get the code of the codec
     * @param {string} name
     * @returns {number}
     */
    exports.getNumber = (name) => {
      const code = varintTable_1[name];
      if (code === undefined) {
        throw new Error('Codec `' + name + '` not found')
      }
      return util$1.varintBufferDecode(code)[0]
    };

    /**
     * Get the code of the prefixed data.
     * @param {Buffer} prefixedData
     * @returns {number}
     */
    exports.getCode = (prefixedData) => {
      return varint.decode(prefixedData)
    };

    /**
     * Get the code as varint of a codec name.
     * @param {string} codecName
     * @returns {Buffer}
     */
    exports.getCodeVarint = (codecName) => {
      const code = varintTable_1[codecName];
      if (code === undefined) {
        throw new Error('Codec `' + codecName + '` not found')
      }
      return code
    };

    /**
     * Get the varint of a code.
     * @param {Number} code
     * @returns {Array.<number>}
     */
    exports.getVarint = (code) => {
      return varint.encode(code)
    };

    // Make the constants top-level constants

    Object.assign(exports, constants_1);

    // Human friendly names for printing, e.g. in error messages
    exports.print = print;
    });

    class Base {
      constructor (name, code, implementation, alphabet) {
        this.name = name;
        this.code = code;
        this.alphabet = alphabet;
        if (implementation && alphabet) {
          this.engine = implementation(alphabet);
        }
      }

      encode (stringOrBuffer) {
        return this.engine.encode(stringOrBuffer)
      }

      decode (stringOrBuffer) {
        return this.engine.decode(stringOrBuffer)
      }

      isImplemented () {
        return this.engine
      }
    }

    var base$3 = Base;

    // base-x encoding / decoding
    // Copyright (c) 2018 base-x contributors
    // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
    // Distributed under the MIT software license, see the accompanying
    // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
    // @ts-ignore
    var _Buffer = safeBuffer.Buffer;
    function base$4 (ALPHABET) {
      if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
      var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
      function encode (source) {
        if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
        if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
        if (source.length === 0) { return '' }
            // Skip & count leading zeroes.
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
            // Allocate enough space in big-endian base58 representation.
        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
        var b58 = new Uint8Array(size);
            // Process the bytes.
        while (pbegin !== pend) {
          var carry = source[pbegin];
                // Apply "b58 = b58 * 256 + ch".
          var i = 0;
          for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
            carry += (256 * b58[it1]) >>> 0;
            b58[it1] = (carry % BASE) >>> 0;
            carry = (carry / BASE) >>> 0;
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i;
          pbegin++;
        }
            // Skip leading zeroes in base58 result.
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
            // Translate the result into a string.
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
        return str
      }
      function decodeUnsafe (source) {
        if (typeof source !== 'string') { throw new TypeError('Expected String') }
        if (source.length === 0) { return _Buffer.alloc(0) }
        var psz = 0;
            // Skip leading spaces.
        if (source[psz] === ' ') { return }
            // Skip and count leading '1's.
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
            // Allocate enough space in big-endian base256 representation.
        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
        var b256 = new Uint8Array(size);
            // Process the characters.
        while (source[psz]) {
                // Decode character
          var carry = BASE_MAP[source.charCodeAt(psz)];
                // Invalid character
          if (carry === 255) { return }
          var i = 0;
          for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
            carry += (BASE * b256[it3]) >>> 0;
            b256[it3] = (carry % 256) >>> 0;
            carry = (carry / 256) >>> 0;
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i;
          psz++;
        }
            // Skip trailing spaces.
        if (source[psz] === ' ') { return }
            // Skip leading zeroes in b256.
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0x00, 0, zeroes);
        var j = zeroes;
        while (it4 !== size) {
          vch[j++] = b256[it4++];
        }
        return vch
      }
      function decode (string) {
        var buffer = decodeUnsafe(string);
        if (buffer) { return buffer }
        throw new Error('Non-base' + BASE + ' character')
      }
      return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
      }
    }
    var src$4 = base$4;

    const { Buffer: Buffer$3 } = buffer;

    var base16 = function base16 (alphabet) {
      return {
        encode (input) {
          if (typeof input === 'string') {
            return Buffer$3.from(input).toString('hex')
          }
          return input.toString('hex')
        },
        decode (input) {
          for (const char of input) {
            if (alphabet.indexOf(char) < 0) {
              throw new Error('invalid base16 character')
            }
          }
          return Buffer$3.from(input, 'hex')
        }
      }
    };

    function decode$3 (input, alphabet) {
      input = input.replace(new RegExp('=', 'g'), '');
      const length = input.length;

      let bits = 0;
      let value = 0;

      let index = 0;
      const output = new Uint8Array((length * 5 / 8) | 0);

      for (let i = 0; i < length; i++) {
        value = (value << 5) | alphabet.indexOf(input[i]);
        bits += 5;

        if (bits >= 8) {
          output[index++] = (value >>> (bits - 8)) & 255;
          bits -= 8;
        }
      }

      return output.buffer
    }

    function encode$4 (buffer, alphabet) {
      const length = buffer.byteLength;
      const view = new Uint8Array(buffer);
      const padding = alphabet.indexOf('=') === alphabet.length - 1;

      if (padding) {
        alphabet = alphabet.substring(0, alphabet.length - 1);
      }

      let bits = 0;
      let value = 0;
      let output = '';

      for (let i = 0; i < length; i++) {
        value = (value << 8) | view[i];
        bits += 8;

        while (bits >= 5) {
          output += alphabet[(value >>> (bits - 5)) & 31];
          bits -= 5;
        }
      }

      if (bits > 0) {
        output += alphabet[(value << (5 - bits)) & 31];
      }

      if (padding) {
        while ((output.length % 8) !== 0) {
          output += '=';
        }
      }

      return output
    }

    var base32 = function base32 (alphabet) {
      return {
        encode (input) {
          if (typeof input === 'string') {
            return encode$4(Uint8Array.from(input), alphabet)
          }

          return encode$4(input, alphabet)
        },
        decode (input) {
          for (const char of input) {
            if (alphabet.indexOf(char) < 0) {
              throw new Error('invalid base32 character')
            }
          }

          return decode$3(input, alphabet)
        }
      }
    };

    const { Buffer: Buffer$4 } = buffer;

    var base64 = function base64 (alphabet) {
      // The alphabet is only used to know:
      //   1. If padding is enabled (must contain '=')
      //   2. If the output must be url-safe (must contain '-' and '_')
      //   3. If the input of the output function is valid
      // The alphabets from RFC 4648 are always used.
      const padding = alphabet.indexOf('=') > -1;
      const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;

      return {
        encode (input) {
          let output = '';

          if (typeof input === 'string') {
            output = Buffer$4.from(input).toString('base64');
          } else {
            output = input.toString('base64');
          }

          if (url) {
            output = output.replace(/\+/g, '-').replace(/\//g, '_');
          }

          const pad = output.indexOf('=');
          if (pad > 0 && !padding) {
            output = output.substring(0, pad);
          }

          return output
        },
        decode (input) {
          for (const char of input) {
            if (alphabet.indexOf(char) < 0) {
              throw new Error('invalid base64 character')
            }
          }

          return Buffer$4.from(input, 'base64')
        }
      }
    };

    // name, code, implementation, alphabet
    const constants$1 = [
      ['base1', '1', '', '1'],
      ['base2', '0', src$4, '01'],
      ['base8', '7', src$4, '01234567'],
      ['base10', '9', src$4, '0123456789'],
      ['base16', 'f', base16, '0123456789abcdef'],
      ['base32', 'b', base32, 'abcdefghijklmnopqrstuvwxyz234567'],
      ['base32pad', 'c', base32, 'abcdefghijklmnopqrstuvwxyz234567='],
      ['base32hex', 'v', base32, '0123456789abcdefghijklmnopqrstuv'],
      ['base32hexpad', 't', base32, '0123456789abcdefghijklmnopqrstuv='],
      ['base32z', 'h', base32, 'ybndrfg8ejkmcpqxot1uwisza345h769'],
      ['base58flickr', 'Z', src$4, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
      ['base58btc', 'z', src$4, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
      ['base64', 'm', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
      ['base64pad', 'M', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
      ['base64url', 'u', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
      ['base64urlpad', 'U', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
    ];

    const names = constants$1.reduce((prev, tupple) => {
      prev[tupple[0]] = new base$3(tupple[0], tupple[1], tupple[2], tupple[3]);
      return prev
    }, {});

    const codes = constants$1.reduce((prev, tupple) => {
      prev[tupple[1]] = names[tupple[0]];
      return prev
    }, {});

    var constants_1$1 = {
      names: names,
      codes: codes
    };

    var src$5 = createCommonjsModule(function (module, exports) {

    const { Buffer } = buffer;


    exports = module.exports = multibase;
    exports.encode = encode;
    exports.decode = decode;
    exports.isEncoded = isEncoded;
    exports.names = Object.freeze(Object.keys(constants_1$1.names));
    exports.codes = Object.freeze(Object.keys(constants_1$1.codes));

    /**
     * Create a new buffer with the multibase varint+code.
     *
     * @param {string|number} nameOrCode - The multibase name or code number.
     * @param {Buffer} buf - The data to be prefixed with multibase.
     * @memberof Multibase
     * @returns {Buffer}
     */
    function multibase (nameOrCode, buf) {
      if (!buf) {
        throw new Error('requires an encoded buffer')
      }
      const base = getBase(nameOrCode);
      const codeBuf = Buffer.from(base.code);

      const name = base.name;
      validEncode(name, buf);
      return Buffer.concat([codeBuf, buf])
    }

    /**
     * Encode data with the specified base and add the multibase prefix.
     *
     * @param {string|number} nameOrCode - The multibase name or code number.
     * @param {Buffer} buf - The data to be encoded.
     * @returns {Buffer}
     * @memberof Multibase
     */
    function encode (nameOrCode, buf) {
      const base = getBase(nameOrCode);
      const name = base.name;

      return multibase(name, Buffer.from(base.encode(buf)))
    }

    /**
     * Takes a buffer or string encoded with multibase header, decodes it and
     * returns the decoded buffer
     *
     * @param {Buffer|string} bufOrString
     * @returns {Buffer}
     * @memberof Multibase
     *
     */
    function decode (bufOrString) {
      if (Buffer.isBuffer(bufOrString)) {
        bufOrString = bufOrString.toString();
      }

      const code = bufOrString.substring(0, 1);
      bufOrString = bufOrString.substring(1, bufOrString.length);

      if (typeof bufOrString === 'string') {
        bufOrString = Buffer.from(bufOrString);
      }

      const base = getBase(code);
      return Buffer.from(base.decode(bufOrString.toString()))
    }

    /**
     * Is the given data multibase encoded?
     *
     * @param {Buffer|string} bufOrString
     * @returns {boolean}
     * @memberof Multibase
     */
    function isEncoded (bufOrString) {
      if (Buffer.isBuffer(bufOrString)) {
        bufOrString = bufOrString.toString();
      }

      // Ensure bufOrString is a string
      if (Object.prototype.toString.call(bufOrString) !== '[object String]') {
        return false
      }

      const code = bufOrString.substring(0, 1);
      try {
        const base = getBase(code);
        return base.name
      } catch (err) {
        return false
      }
    }

    /**
     * @param {string} name
     * @param {Buffer} buf
     * @private
     * @returns {undefined}
     */
    function validEncode (name, buf) {
      const base = getBase(name);
      base.decode(buf.toString());
    }

    function getBase (nameOrCode) {
      let base;

      if (constants_1$1.names[nameOrCode]) {
        base = constants_1$1.names[nameOrCode];
      } else if (constants_1$1.codes[nameOrCode]) {
        base = constants_1$1.codes[nameOrCode];
      } else {
        throw new Error('Unsupported encoding')
      }

      if (!base.isImplemented()) {
        throw new Error('Base ' + nameOrCode + ' is not implemented yet')
      }

      return base
    }
    });

    /* eslint quote-props: off */

    var names$1 = Object.freeze({
      'identity':   0x0,
      'sha1':       0x11,
      'sha2-256':   0x12,
      'sha2-512':   0x13,
      'dbl-sha2-256': 0x56,
      'sha3-224':   0x17,
      'sha3-256':   0x16,
      'sha3-384':   0x15,
      'sha3-512':   0x14,
      'shake-128':  0x18,
      'shake-256':  0x19,
      'keccak-224': 0x1A,
      'keccak-256': 0x1B,
      'keccak-384': 0x1C,
      'keccak-512': 0x1D,
      'murmur3-128': 0x22,
      'murmur3-32':  0x23,
      'md4':         0xd4,
      'md5':         0xd5,
      'blake2b-8':   0xb201,
      'blake2b-16':  0xb202,
      'blake2b-24':  0xb203,
      'blake2b-32':  0xb204,
      'blake2b-40':  0xb205,
      'blake2b-48':  0xb206,
      'blake2b-56':  0xb207,
      'blake2b-64':  0xb208,
      'blake2b-72':  0xb209,
      'blake2b-80':  0xb20a,
      'blake2b-88':  0xb20b,
      'blake2b-96':  0xb20c,
      'blake2b-104': 0xb20d,
      'blake2b-112': 0xb20e,
      'blake2b-120': 0xb20f,
      'blake2b-128': 0xb210,
      'blake2b-136': 0xb211,
      'blake2b-144': 0xb212,
      'blake2b-152': 0xb213,
      'blake2b-160': 0xb214,
      'blake2b-168': 0xb215,
      'blake2b-176': 0xb216,
      'blake2b-184': 0xb217,
      'blake2b-192': 0xb218,
      'blake2b-200': 0xb219,
      'blake2b-208': 0xb21a,
      'blake2b-216': 0xb21b,
      'blake2b-224': 0xb21c,
      'blake2b-232': 0xb21d,
      'blake2b-240': 0xb21e,
      'blake2b-248': 0xb21f,
      'blake2b-256': 0xb220,
      'blake2b-264': 0xb221,
      'blake2b-272': 0xb222,
      'blake2b-280': 0xb223,
      'blake2b-288': 0xb224,
      'blake2b-296': 0xb225,
      'blake2b-304': 0xb226,
      'blake2b-312': 0xb227,
      'blake2b-320': 0xb228,
      'blake2b-328': 0xb229,
      'blake2b-336': 0xb22a,
      'blake2b-344': 0xb22b,
      'blake2b-352': 0xb22c,
      'blake2b-360': 0xb22d,
      'blake2b-368': 0xb22e,
      'blake2b-376': 0xb22f,
      'blake2b-384': 0xb230,
      'blake2b-392': 0xb231,
      'blake2b-400': 0xb232,
      'blake2b-408': 0xb233,
      'blake2b-416': 0xb234,
      'blake2b-424': 0xb235,
      'blake2b-432': 0xb236,
      'blake2b-440': 0xb237,
      'blake2b-448': 0xb238,
      'blake2b-456': 0xb239,
      'blake2b-464': 0xb23a,
      'blake2b-472': 0xb23b,
      'blake2b-480': 0xb23c,
      'blake2b-488': 0xb23d,
      'blake2b-496': 0xb23e,
      'blake2b-504': 0xb23f,
      'blake2b-512': 0xb240,
      'blake2s-8':   0xb241,
      'blake2s-16':  0xb242,
      'blake2s-24':  0xb243,
      'blake2s-32':  0xb244,
      'blake2s-40':  0xb245,
      'blake2s-48':  0xb246,
      'blake2s-56':  0xb247,
      'blake2s-64':  0xb248,
      'blake2s-72':  0xb249,
      'blake2s-80':  0xb24a,
      'blake2s-88':  0xb24b,
      'blake2s-96':  0xb24c,
      'blake2s-104': 0xb24d,
      'blake2s-112': 0xb24e,
      'blake2s-120': 0xb24f,
      'blake2s-128': 0xb250,
      'blake2s-136': 0xb251,
      'blake2s-144': 0xb252,
      'blake2s-152': 0xb253,
      'blake2s-160': 0xb254,
      'blake2s-168': 0xb255,
      'blake2s-176': 0xb256,
      'blake2s-184': 0xb257,
      'blake2s-192': 0xb258,
      'blake2s-200': 0xb259,
      'blake2s-208': 0xb25a,
      'blake2s-216': 0xb25b,
      'blake2s-224': 0xb25c,
      'blake2s-232': 0xb25d,
      'blake2s-240': 0xb25e,
      'blake2s-248': 0xb25f,
      'blake2s-256': 0xb260,
      'Skein256-8': 0xb301,
      'Skein256-16': 0xb302,
      'Skein256-24': 0xb303,
      'Skein256-32': 0xb304,
      'Skein256-40': 0xb305,
      'Skein256-48': 0xb306,
      'Skein256-56': 0xb307,
      'Skein256-64': 0xb308,
      'Skein256-72': 0xb309,
      'Skein256-80': 0xb30a,
      'Skein256-88': 0xb30b,
      'Skein256-96': 0xb30c,
      'Skein256-104': 0xb30d,
      'Skein256-112': 0xb30e,
      'Skein256-120': 0xb30f,
      'Skein256-128': 0xb310,
      'Skein256-136': 0xb311,
      'Skein256-144': 0xb312,
      'Skein256-152': 0xb313,
      'Skein256-160': 0xb314,
      'Skein256-168': 0xb315,
      'Skein256-176': 0xb316,
      'Skein256-184': 0xb317,
      'Skein256-192': 0xb318,
      'Skein256-200': 0xb319,
      'Skein256-208': 0xb31a,
      'Skein256-216': 0xb31b,
      'Skein256-224': 0xb31c,
      'Skein256-232': 0xb31d,
      'Skein256-240': 0xb31e,
      'Skein256-248': 0xb31f,
      'Skein256-256': 0xb320,
      'Skein512-8': 0xb321,
      'Skein512-16': 0xb322,
      'Skein512-24': 0xb323,
      'Skein512-32': 0xb324,
      'Skein512-40': 0xb325,
      'Skein512-48': 0xb326,
      'Skein512-56': 0xb327,
      'Skein512-64': 0xb328,
      'Skein512-72': 0xb329,
      'Skein512-80': 0xb32a,
      'Skein512-88': 0xb32b,
      'Skein512-96': 0xb32c,
      'Skein512-104': 0xb32d,
      'Skein512-112': 0xb32e,
      'Skein512-120': 0xb32f,
      'Skein512-128': 0xb330,
      'Skein512-136': 0xb331,
      'Skein512-144': 0xb332,
      'Skein512-152': 0xb333,
      'Skein512-160': 0xb334,
      'Skein512-168': 0xb335,
      'Skein512-176': 0xb336,
      'Skein512-184': 0xb337,
      'Skein512-192': 0xb338,
      'Skein512-200': 0xb339,
      'Skein512-208': 0xb33a,
      'Skein512-216': 0xb33b,
      'Skein512-224': 0xb33c,
      'Skein512-232': 0xb33d,
      'Skein512-240': 0xb33e,
      'Skein512-248': 0xb33f,
      'Skein512-256': 0xb340,
      'Skein512-264': 0xb341,
      'Skein512-272': 0xb342,
      'Skein512-280': 0xb343,
      'Skein512-288': 0xb344,
      'Skein512-296': 0xb345,
      'Skein512-304': 0xb346,
      'Skein512-312': 0xb347,
      'Skein512-320': 0xb348,
      'Skein512-328': 0xb349,
      'Skein512-336': 0xb34a,
      'Skein512-344': 0xb34b,
      'Skein512-352': 0xb34c,
      'Skein512-360': 0xb34d,
      'Skein512-368': 0xb34e,
      'Skein512-376': 0xb34f,
      'Skein512-384': 0xb350,
      'Skein512-392': 0xb351,
      'Skein512-400': 0xb352,
      'Skein512-408': 0xb353,
      'Skein512-416': 0xb354,
      'Skein512-424': 0xb355,
      'Skein512-432': 0xb356,
      'Skein512-440': 0xb357,
      'Skein512-448': 0xb358,
      'Skein512-456': 0xb359,
      'Skein512-464': 0xb35a,
      'Skein512-472': 0xb35b,
      'Skein512-480': 0xb35c,
      'Skein512-488': 0xb35d,
      'Skein512-496': 0xb35e,
      'Skein512-504': 0xb35f,
      'Skein512-512': 0xb360,
      'Skein1024-8': 0xb361,
      'Skein1024-16': 0xb362,
      'Skein1024-24': 0xb363,
      'Skein1024-32': 0xb364,
      'Skein1024-40': 0xb365,
      'Skein1024-48': 0xb366,
      'Skein1024-56': 0xb367,
      'Skein1024-64': 0xb368,
      'Skein1024-72': 0xb369,
      'Skein1024-80': 0xb36a,
      'Skein1024-88': 0xb36b,
      'Skein1024-96': 0xb36c,
      'Skein1024-104': 0xb36d,
      'Skein1024-112': 0xb36e,
      'Skein1024-120': 0xb36f,
      'Skein1024-128': 0xb370,
      'Skein1024-136': 0xb371,
      'Skein1024-144': 0xb372,
      'Skein1024-152': 0xb373,
      'Skein1024-160': 0xb374,
      'Skein1024-168': 0xb375,
      'Skein1024-176': 0xb376,
      'Skein1024-184': 0xb377,
      'Skein1024-192': 0xb378,
      'Skein1024-200': 0xb379,
      'Skein1024-208': 0xb37a,
      'Skein1024-216': 0xb37b,
      'Skein1024-224': 0xb37c,
      'Skein1024-232': 0xb37d,
      'Skein1024-240': 0xb37e,
      'Skein1024-248': 0xb37f,
      'Skein1024-256': 0xb380,
      'Skein1024-264': 0xb381,
      'Skein1024-272': 0xb382,
      'Skein1024-280': 0xb383,
      'Skein1024-288': 0xb384,
      'Skein1024-296': 0xb385,
      'Skein1024-304': 0xb386,
      'Skein1024-312': 0xb387,
      'Skein1024-320': 0xb388,
      'Skein1024-328': 0xb389,
      'Skein1024-336': 0xb38a,
      'Skein1024-344': 0xb38b,
      'Skein1024-352': 0xb38c,
      'Skein1024-360': 0xb38d,
      'Skein1024-368': 0xb38e,
      'Skein1024-376': 0xb38f,
      'Skein1024-384': 0xb390,
      'Skein1024-392': 0xb391,
      'Skein1024-400': 0xb392,
      'Skein1024-408': 0xb393,
      'Skein1024-416': 0xb394,
      'Skein1024-424': 0xb395,
      'Skein1024-432': 0xb396,
      'Skein1024-440': 0xb397,
      'Skein1024-448': 0xb398,
      'Skein1024-456': 0xb399,
      'Skein1024-464': 0xb39a,
      'Skein1024-472': 0xb39b,
      'Skein1024-480': 0xb39c,
      'Skein1024-488': 0xb39d,
      'Skein1024-496': 0xb39e,
      'Skein1024-504': 0xb39f,
      'Skein1024-512': 0xb3a0,
      'Skein1024-520': 0xb3a1,
      'Skein1024-528': 0xb3a2,
      'Skein1024-536': 0xb3a3,
      'Skein1024-544': 0xb3a4,
      'Skein1024-552': 0xb3a5,
      'Skein1024-560': 0xb3a6,
      'Skein1024-568': 0xb3a7,
      'Skein1024-576': 0xb3a8,
      'Skein1024-584': 0xb3a9,
      'Skein1024-592': 0xb3aa,
      'Skein1024-600': 0xb3ab,
      'Skein1024-608': 0xb3ac,
      'Skein1024-616': 0xb3ad,
      'Skein1024-624': 0xb3ae,
      'Skein1024-632': 0xb3af,
      'Skein1024-640': 0xb3b0,
      'Skein1024-648': 0xb3b1,
      'Skein1024-656': 0xb3b2,
      'Skein1024-664': 0xb3b3,
      'Skein1024-672': 0xb3b4,
      'Skein1024-680': 0xb3b5,
      'Skein1024-688': 0xb3b6,
      'Skein1024-696': 0xb3b7,
      'Skein1024-704': 0xb3b8,
      'Skein1024-712': 0xb3b9,
      'Skein1024-720': 0xb3ba,
      'Skein1024-728': 0xb3bb,
      'Skein1024-736': 0xb3bc,
      'Skein1024-744': 0xb3bd,
      'Skein1024-752': 0xb3be,
      'Skein1024-760': 0xb3bf,
      'Skein1024-768': 0xb3c0,
      'Skein1024-776': 0xb3c1,
      'Skein1024-784': 0xb3c2,
      'Skein1024-792': 0xb3c3,
      'Skein1024-800': 0xb3c4,
      'Skein1024-808': 0xb3c5,
      'Skein1024-816': 0xb3c6,
      'Skein1024-824': 0xb3c7,
      'Skein1024-832': 0xb3c8,
      'Skein1024-840': 0xb3c9,
      'Skein1024-848': 0xb3ca,
      'Skein1024-856': 0xb3cb,
      'Skein1024-864': 0xb3cc,
      'Skein1024-872': 0xb3cd,
      'Skein1024-880': 0xb3ce,
      'Skein1024-888': 0xb3cf,
      'Skein1024-896': 0xb3d0,
      'Skein1024-904': 0xb3d1,
      'Skein1024-912': 0xb3d2,
      'Skein1024-920': 0xb3d3,
      'Skein1024-928': 0xb3d4,
      'Skein1024-936': 0xb3d5,
      'Skein1024-944': 0xb3d6,
      'Skein1024-952': 0xb3d7,
      'Skein1024-960': 0xb3d8,
      'Skein1024-968': 0xb3d9,
      'Skein1024-976': 0xb3da,
      'Skein1024-984': 0xb3db,
      'Skein1024-992': 0xb3dc,
      'Skein1024-1000': 0xb3dd,
      'Skein1024-1008': 0xb3de,
      'Skein1024-1016': 0xb3df,
      'Skein1024-1024': 0xb3e0
    });

    var codes$1 = Object.freeze({
      0x0: 'identity',

      // sha family
      0x11: 'sha1',
      0x12: 'sha2-256',
      0x13: 'sha2-512',
      0x56: 'dbl-sha2-256',
      0x17: 'sha3-224',
      0x16: 'sha3-256',
      0x15: 'sha3-384',
      0x14: 'sha3-512',
      0x18: 'shake-128',
      0x19: 'shake-256',
      0x1A: 'keccak-224',
      0x1B: 'keccak-256',
      0x1C: 'keccak-384',
      0x1D: 'keccak-512',

      0x22: 'murmur3-128',
      0x23: 'murmur3-32',

      0xd4: 'md4',
      0xd5: 'md5',

      // blake2
      0xb201: 'blake2b-8',
      0xb202: 'blake2b-16',
      0xb203: 'blake2b-24',
      0xb204: 'blake2b-32',
      0xb205: 'blake2b-40',
      0xb206: 'blake2b-48',
      0xb207: 'blake2b-56',
      0xb208: 'blake2b-64',
      0xb209: 'blake2b-72',
      0xb20a: 'blake2b-80',
      0xb20b: 'blake2b-88',
      0xb20c: 'blake2b-96',
      0xb20d: 'blake2b-104',
      0xb20e: 'blake2b-112',
      0xb20f: 'blake2b-120',
      0xb210: 'blake2b-128',
      0xb211: 'blake2b-136',
      0xb212: 'blake2b-144',
      0xb213: 'blake2b-152',
      0xb214: 'blake2b-160',
      0xb215: 'blake2b-168',
      0xb216: 'blake2b-176',
      0xb217: 'blake2b-184',
      0xb218: 'blake2b-192',
      0xb219: 'blake2b-200',
      0xb21a: 'blake2b-208',
      0xb21b: 'blake2b-216',
      0xb21c: 'blake2b-224',
      0xb21d: 'blake2b-232',
      0xb21e: 'blake2b-240',
      0xb21f: 'blake2b-248',
      0xb220: 'blake2b-256',
      0xb221: 'blake2b-264',
      0xb222: 'blake2b-272',
      0xb223: 'blake2b-280',
      0xb224: 'blake2b-288',
      0xb225: 'blake2b-296',
      0xb226: 'blake2b-304',
      0xb227: 'blake2b-312',
      0xb228: 'blake2b-320',
      0xb229: 'blake2b-328',
      0xb22a: 'blake2b-336',
      0xb22b: 'blake2b-344',
      0xb22c: 'blake2b-352',
      0xb22d: 'blake2b-360',
      0xb22e: 'blake2b-368',
      0xb22f: 'blake2b-376',
      0xb230: 'blake2b-384',
      0xb231: 'blake2b-392',
      0xb232: 'blake2b-400',
      0xb233: 'blake2b-408',
      0xb234: 'blake2b-416',
      0xb235: 'blake2b-424',
      0xb236: 'blake2b-432',
      0xb237: 'blake2b-440',
      0xb238: 'blake2b-448',
      0xb239: 'blake2b-456',
      0xb23a: 'blake2b-464',
      0xb23b: 'blake2b-472',
      0xb23c: 'blake2b-480',
      0xb23d: 'blake2b-488',
      0xb23e: 'blake2b-496',
      0xb23f: 'blake2b-504',
      0xb240: 'blake2b-512',
      0xb241: 'blake2s-8',
      0xb242: 'blake2s-16',
      0xb243: 'blake2s-24',
      0xb244: 'blake2s-32',
      0xb245: 'blake2s-40',
      0xb246: 'blake2s-48',
      0xb247: 'blake2s-56',
      0xb248: 'blake2s-64',
      0xb249: 'blake2s-72',
      0xb24a: 'blake2s-80',
      0xb24b: 'blake2s-88',
      0xb24c: 'blake2s-96',
      0xb24d: 'blake2s-104',
      0xb24e: 'blake2s-112',
      0xb24f: 'blake2s-120',
      0xb250: 'blake2s-128',
      0xb251: 'blake2s-136',
      0xb252: 'blake2s-144',
      0xb253: 'blake2s-152',
      0xb254: 'blake2s-160',
      0xb255: 'blake2s-168',
      0xb256: 'blake2s-176',
      0xb257: 'blake2s-184',
      0xb258: 'blake2s-192',
      0xb259: 'blake2s-200',
      0xb25a: 'blake2s-208',
      0xb25b: 'blake2s-216',
      0xb25c: 'blake2s-224',
      0xb25d: 'blake2s-232',
      0xb25e: 'blake2s-240',
      0xb25f: 'blake2s-248',
      0xb260: 'blake2s-256',

      // skein
      0xb301: 'Skein256-8',
      0xb302: 'Skein256-16',
      0xb303: 'Skein256-24',
      0xb304: 'Skein256-32',
      0xb305: 'Skein256-40',
      0xb306: 'Skein256-48',
      0xb307: 'Skein256-56',
      0xb308: 'Skein256-64',
      0xb309: 'Skein256-72',
      0xb30a: 'Skein256-80',
      0xb30b: 'Skein256-88',
      0xb30c: 'Skein256-96',
      0xb30d: 'Skein256-104',
      0xb30e: 'Skein256-112',
      0xb30f: 'Skein256-120',
      0xb310: 'Skein256-128',
      0xb311: 'Skein256-136',
      0xb312: 'Skein256-144',
      0xb313: 'Skein256-152',
      0xb314: 'Skein256-160',
      0xb315: 'Skein256-168',
      0xb316: 'Skein256-176',
      0xb317: 'Skein256-184',
      0xb318: 'Skein256-192',
      0xb319: 'Skein256-200',
      0xb31a: 'Skein256-208',
      0xb31b: 'Skein256-216',
      0xb31c: 'Skein256-224',
      0xb31d: 'Skein256-232',
      0xb31e: 'Skein256-240',
      0xb31f: 'Skein256-248',
      0xb320: 'Skein256-256',
      0xb321: 'Skein512-8',
      0xb322: 'Skein512-16',
      0xb323: 'Skein512-24',
      0xb324: 'Skein512-32',
      0xb325: 'Skein512-40',
      0xb326: 'Skein512-48',
      0xb327: 'Skein512-56',
      0xb328: 'Skein512-64',
      0xb329: 'Skein512-72',
      0xb32a: 'Skein512-80',
      0xb32b: 'Skein512-88',
      0xb32c: 'Skein512-96',
      0xb32d: 'Skein512-104',
      0xb32e: 'Skein512-112',
      0xb32f: 'Skein512-120',
      0xb330: 'Skein512-128',
      0xb331: 'Skein512-136',
      0xb332: 'Skein512-144',
      0xb333: 'Skein512-152',
      0xb334: 'Skein512-160',
      0xb335: 'Skein512-168',
      0xb336: 'Skein512-176',
      0xb337: 'Skein512-184',
      0xb338: 'Skein512-192',
      0xb339: 'Skein512-200',
      0xb33a: 'Skein512-208',
      0xb33b: 'Skein512-216',
      0xb33c: 'Skein512-224',
      0xb33d: 'Skein512-232',
      0xb33e: 'Skein512-240',
      0xb33f: 'Skein512-248',
      0xb340: 'Skein512-256',
      0xb341: 'Skein512-264',
      0xb342: 'Skein512-272',
      0xb343: 'Skein512-280',
      0xb344: 'Skein512-288',
      0xb345: 'Skein512-296',
      0xb346: 'Skein512-304',
      0xb347: 'Skein512-312',
      0xb348: 'Skein512-320',
      0xb349: 'Skein512-328',
      0xb34a: 'Skein512-336',
      0xb34b: 'Skein512-344',
      0xb34c: 'Skein512-352',
      0xb34d: 'Skein512-360',
      0xb34e: 'Skein512-368',
      0xb34f: 'Skein512-376',
      0xb350: 'Skein512-384',
      0xb351: 'Skein512-392',
      0xb352: 'Skein512-400',
      0xb353: 'Skein512-408',
      0xb354: 'Skein512-416',
      0xb355: 'Skein512-424',
      0xb356: 'Skein512-432',
      0xb357: 'Skein512-440',
      0xb358: 'Skein512-448',
      0xb359: 'Skein512-456',
      0xb35a: 'Skein512-464',
      0xb35b: 'Skein512-472',
      0xb35c: 'Skein512-480',
      0xb35d: 'Skein512-488',
      0xb35e: 'Skein512-496',
      0xb35f: 'Skein512-504',
      0xb360: 'Skein512-512',
      0xb361: 'Skein1024-8',
      0xb362: 'Skein1024-16',
      0xb363: 'Skein1024-24',
      0xb364: 'Skein1024-32',
      0xb365: 'Skein1024-40',
      0xb366: 'Skein1024-48',
      0xb367: 'Skein1024-56',
      0xb368: 'Skein1024-64',
      0xb369: 'Skein1024-72',
      0xb36a: 'Skein1024-80',
      0xb36b: 'Skein1024-88',
      0xb36c: 'Skein1024-96',
      0xb36d: 'Skein1024-104',
      0xb36e: 'Skein1024-112',
      0xb36f: 'Skein1024-120',
      0xb370: 'Skein1024-128',
      0xb371: 'Skein1024-136',
      0xb372: 'Skein1024-144',
      0xb373: 'Skein1024-152',
      0xb374: 'Skein1024-160',
      0xb375: 'Skein1024-168',
      0xb376: 'Skein1024-176',
      0xb377: 'Skein1024-184',
      0xb378: 'Skein1024-192',
      0xb379: 'Skein1024-200',
      0xb37a: 'Skein1024-208',
      0xb37b: 'Skein1024-216',
      0xb37c: 'Skein1024-224',
      0xb37d: 'Skein1024-232',
      0xb37e: 'Skein1024-240',
      0xb37f: 'Skein1024-248',
      0xb380: 'Skein1024-256',
      0xb381: 'Skein1024-264',
      0xb382: 'Skein1024-272',
      0xb383: 'Skein1024-280',
      0xb384: 'Skein1024-288',
      0xb385: 'Skein1024-296',
      0xb386: 'Skein1024-304',
      0xb387: 'Skein1024-312',
      0xb388: 'Skein1024-320',
      0xb389: 'Skein1024-328',
      0xb38a: 'Skein1024-336',
      0xb38b: 'Skein1024-344',
      0xb38c: 'Skein1024-352',
      0xb38d: 'Skein1024-360',
      0xb38e: 'Skein1024-368',
      0xb38f: 'Skein1024-376',
      0xb390: 'Skein1024-384',
      0xb391: 'Skein1024-392',
      0xb392: 'Skein1024-400',
      0xb393: 'Skein1024-408',
      0xb394: 'Skein1024-416',
      0xb395: 'Skein1024-424',
      0xb396: 'Skein1024-432',
      0xb397: 'Skein1024-440',
      0xb398: 'Skein1024-448',
      0xb399: 'Skein1024-456',
      0xb39a: 'Skein1024-464',
      0xb39b: 'Skein1024-472',
      0xb39c: 'Skein1024-480',
      0xb39d: 'Skein1024-488',
      0xb39e: 'Skein1024-496',
      0xb39f: 'Skein1024-504',
      0xb3a0: 'Skein1024-512',
      0xb3a1: 'Skein1024-520',
      0xb3a2: 'Skein1024-528',
      0xb3a3: 'Skein1024-536',
      0xb3a4: 'Skein1024-544',
      0xb3a5: 'Skein1024-552',
      0xb3a6: 'Skein1024-560',
      0xb3a7: 'Skein1024-568',
      0xb3a8: 'Skein1024-576',
      0xb3a9: 'Skein1024-584',
      0xb3aa: 'Skein1024-592',
      0xb3ab: 'Skein1024-600',
      0xb3ac: 'Skein1024-608',
      0xb3ad: 'Skein1024-616',
      0xb3ae: 'Skein1024-624',
      0xb3af: 'Skein1024-632',
      0xb3b0: 'Skein1024-640',
      0xb3b1: 'Skein1024-648',
      0xb3b2: 'Skein1024-656',
      0xb3b3: 'Skein1024-664',
      0xb3b4: 'Skein1024-672',
      0xb3b5: 'Skein1024-680',
      0xb3b6: 'Skein1024-688',
      0xb3b7: 'Skein1024-696',
      0xb3b8: 'Skein1024-704',
      0xb3b9: 'Skein1024-712',
      0xb3ba: 'Skein1024-720',
      0xb3bb: 'Skein1024-728',
      0xb3bc: 'Skein1024-736',
      0xb3bd: 'Skein1024-744',
      0xb3be: 'Skein1024-752',
      0xb3bf: 'Skein1024-760',
      0xb3c0: 'Skein1024-768',
      0xb3c1: 'Skein1024-776',
      0xb3c2: 'Skein1024-784',
      0xb3c3: 'Skein1024-792',
      0xb3c4: 'Skein1024-800',
      0xb3c5: 'Skein1024-808',
      0xb3c6: 'Skein1024-816',
      0xb3c7: 'Skein1024-824',
      0xb3c8: 'Skein1024-832',
      0xb3c9: 'Skein1024-840',
      0xb3ca: 'Skein1024-848',
      0xb3cb: 'Skein1024-856',
      0xb3cc: 'Skein1024-864',
      0xb3cd: 'Skein1024-872',
      0xb3ce: 'Skein1024-880',
      0xb3cf: 'Skein1024-888',
      0xb3d0: 'Skein1024-896',
      0xb3d1: 'Skein1024-904',
      0xb3d2: 'Skein1024-912',
      0xb3d3: 'Skein1024-920',
      0xb3d4: 'Skein1024-928',
      0xb3d5: 'Skein1024-936',
      0xb3d6: 'Skein1024-944',
      0xb3d7: 'Skein1024-952',
      0xb3d8: 'Skein1024-960',
      0xb3d9: 'Skein1024-968',
      0xb3da: 'Skein1024-976',
      0xb3db: 'Skein1024-984',
      0xb3dc: 'Skein1024-992',
      0xb3dd: 'Skein1024-1000',
      0xb3de: 'Skein1024-1008',
      0xb3df: 'Skein1024-1016',
      0xb3e0: 'Skein1024-1024'
    });

    var defaultLengths = Object.freeze({
      0x11: 20,
      0x12: 32,
      0x13: 64,
      0x56: 32,
      0x17: 28,
      0x16: 32,
      0x15: 48,
      0x14: 64,
      0x18: 32,
      0x19: 64,
      0x1A: 28,
      0x1B: 32,
      0x1C: 48,
      0x1D: 64,
      0x22: 32,

      0xb201: 0x01,
      0xb202: 0x02,
      0xb203: 0x03,
      0xb204: 0x04,
      0xb205: 0x05,
      0xb206: 0x06,
      0xb207: 0x07,
      0xb208: 0x08,
      0xb209: 0x09,
      0xb20a: 0x0a,
      0xb20b: 0x0b,
      0xb20c: 0x0c,
      0xb20d: 0x0d,
      0xb20e: 0x0e,
      0xb20f: 0x0f,
      0xb210: 0x10,
      0xb211: 0x11,
      0xb212: 0x12,
      0xb213: 0x13,
      0xb214: 0x14,
      0xb215: 0x15,
      0xb216: 0x16,
      0xb217: 0x17,
      0xb218: 0x18,
      0xb219: 0x19,
      0xb21a: 0x1a,
      0xb21b: 0x1b,
      0xb21c: 0x1c,
      0xb21d: 0x1d,
      0xb21e: 0x1e,
      0xb21f: 0x1f,
      0xb220: 0x20,
      0xb221: 0x21,
      0xb222: 0x22,
      0xb223: 0x23,
      0xb224: 0x24,
      0xb225: 0x25,
      0xb226: 0x26,
      0xb227: 0x27,
      0xb228: 0x28,
      0xb229: 0x29,
      0xb22a: 0x2a,
      0xb22b: 0x2b,
      0xb22c: 0x2c,
      0xb22d: 0x2d,
      0xb22e: 0x2e,
      0xb22f: 0x2f,
      0xb230: 0x30,
      0xb231: 0x31,
      0xb232: 0x32,
      0xb233: 0x33,
      0xb234: 0x34,
      0xb235: 0x35,
      0xb236: 0x36,
      0xb237: 0x37,
      0xb238: 0x38,
      0xb239: 0x39,
      0xb23a: 0x3a,
      0xb23b: 0x3b,
      0xb23c: 0x3c,
      0xb23d: 0x3d,
      0xb23e: 0x3e,
      0xb23f: 0x3f,
      0xb240: 0x40,
      0xb241: 0x01,
      0xb242: 0x02,
      0xb243: 0x03,
      0xb244: 0x04,
      0xb245: 0x05,
      0xb246: 0x06,
      0xb247: 0x07,
      0xb248: 0x08,
      0xb249: 0x09,
      0xb24a: 0x0a,
      0xb24b: 0x0b,
      0xb24c: 0x0c,
      0xb24d: 0x0d,
      0xb24e: 0x0e,
      0xb24f: 0x0f,
      0xb250: 0x10,
      0xb251: 0x11,
      0xb252: 0x12,
      0xb253: 0x13,
      0xb254: 0x14,
      0xb255: 0x15,
      0xb256: 0x16,
      0xb257: 0x17,
      0xb258: 0x18,
      0xb259: 0x19,
      0xb25a: 0x1a,
      0xb25b: 0x1b,
      0xb25c: 0x1c,
      0xb25d: 0x1d,
      0xb25e: 0x1e,
      0xb25f: 0x1f,
      0xb260: 0x20,
      0xb301: 0x01,
      0xb302: 0x02,
      0xb303: 0x03,
      0xb304: 0x04,
      0xb305: 0x05,
      0xb306: 0x06,
      0xb307: 0x07,
      0xb308: 0x08,
      0xb309: 0x09,
      0xb30a: 0x0a,
      0xb30b: 0x0b,
      0xb30c: 0x0c,
      0xb30d: 0x0d,
      0xb30e: 0x0e,
      0xb30f: 0x0f,
      0xb310: 0x10,
      0xb311: 0x11,
      0xb312: 0x12,
      0xb313: 0x13,
      0xb314: 0x14,
      0xb315: 0x15,
      0xb316: 0x16,
      0xb317: 0x17,
      0xb318: 0x18,
      0xb319: 0x19,
      0xb31a: 0x1a,
      0xb31b: 0x1b,
      0xb31c: 0x1c,
      0xb31d: 0x1d,
      0xb31e: 0x1e,
      0xb31f: 0x1f,
      0xb320: 0x20,
      0xb321: 0x01,
      0xb322: 0x02,
      0xb323: 0x03,
      0xb324: 0x04,
      0xb325: 0x05,
      0xb326: 0x06,
      0xb327: 0x07,
      0xb328: 0x08,
      0xb329: 0x09,
      0xb32a: 0x0a,
      0xb32b: 0x0b,
      0xb32c: 0x0c,
      0xb32d: 0x0d,
      0xb32e: 0x0e,
      0xb32f: 0x0f,
      0xb330: 0x10,
      0xb331: 0x11,
      0xb332: 0x12,
      0xb333: 0x13,
      0xb334: 0x14,
      0xb335: 0x15,
      0xb336: 0x16,
      0xb337: 0x17,
      0xb338: 0x18,
      0xb339: 0x19,
      0xb33a: 0x1a,
      0xb33b: 0x1b,
      0xb33c: 0x1c,
      0xb33d: 0x1d,
      0xb33e: 0x1e,
      0xb33f: 0x1f,
      0xb340: 0x20,
      0xb341: 0x21,
      0xb342: 0x22,
      0xb343: 0x23,
      0xb344: 0x24,
      0xb345: 0x25,
      0xb346: 0x26,
      0xb347: 0x27,
      0xb348: 0x28,
      0xb349: 0x29,
      0xb34a: 0x2a,
      0xb34b: 0x2b,
      0xb34c: 0x2c,
      0xb34d: 0x2d,
      0xb34e: 0x2e,
      0xb34f: 0x2f,
      0xb350: 0x30,
      0xb351: 0x31,
      0xb352: 0x32,
      0xb353: 0x33,
      0xb354: 0x34,
      0xb355: 0x35,
      0xb356: 0x36,
      0xb357: 0x37,
      0xb358: 0x38,
      0xb359: 0x39,
      0xb35a: 0x3a,
      0xb35b: 0x3b,
      0xb35c: 0x3c,
      0xb35d: 0x3d,
      0xb35e: 0x3e,
      0xb35f: 0x3f,
      0xb360: 0x40,
      0xb361: 0x01,
      0xb362: 0x02,
      0xb363: 0x03,
      0xb364: 0x04,
      0xb365: 0x05,
      0xb366: 0x06,
      0xb367: 0x07,
      0xb368: 0x08,
      0xb369: 0x09,
      0xb36a: 0x0a,
      0xb36b: 0x0b,
      0xb36c: 0x0c,
      0xb36d: 0x0d,
      0xb36e: 0x0e,
      0xb36f: 0x0f,
      0xb370: 0x10,
      0xb371: 0x11,
      0xb372: 0x12,
      0xb373: 0x13,
      0xb374: 0x14,
      0xb375: 0x15,
      0xb376: 0x16,
      0xb377: 0x17,
      0xb378: 0x18,
      0xb379: 0x19,
      0xb37a: 0x1a,
      0xb37b: 0x1b,
      0xb37c: 0x1c,
      0xb37d: 0x1d,
      0xb37e: 0x1e,
      0xb37f: 0x1f,
      0xb380: 0x20,
      0xb381: 0x21,
      0xb382: 0x22,
      0xb383: 0x23,
      0xb384: 0x24,
      0xb385: 0x25,
      0xb386: 0x26,
      0xb387: 0x27,
      0xb388: 0x28,
      0xb389: 0x29,
      0xb38a: 0x2a,
      0xb38b: 0x2b,
      0xb38c: 0x2c,
      0xb38d: 0x2d,
      0xb38e: 0x2e,
      0xb38f: 0x2f,
      0xb390: 0x30,
      0xb391: 0x31,
      0xb392: 0x32,
      0xb393: 0x33,
      0xb394: 0x34,
      0xb395: 0x35,
      0xb396: 0x36,
      0xb397: 0x37,
      0xb398: 0x38,
      0xb399: 0x39,
      0xb39a: 0x3a,
      0xb39b: 0x3b,
      0xb39c: 0x3c,
      0xb39d: 0x3d,
      0xb39e: 0x3e,
      0xb39f: 0x3f,
      0xb3a0: 0x40,
      0xb3a1: 0x41,
      0xb3a2: 0x42,
      0xb3a3: 0x43,
      0xb3a4: 0x44,
      0xb3a5: 0x45,
      0xb3a6: 0x46,
      0xb3a7: 0x47,
      0xb3a8: 0x48,
      0xb3a9: 0x49,
      0xb3aa: 0x4a,
      0xb3ab: 0x4b,
      0xb3ac: 0x4c,
      0xb3ad: 0x4d,
      0xb3ae: 0x4e,
      0xb3af: 0x4f,
      0xb3b0: 0x50,
      0xb3b1: 0x51,
      0xb3b2: 0x52,
      0xb3b3: 0x53,
      0xb3b4: 0x54,
      0xb3b5: 0x55,
      0xb3b6: 0x56,
      0xb3b7: 0x57,
      0xb3b8: 0x58,
      0xb3b9: 0x59,
      0xb3ba: 0x5a,
      0xb3bb: 0x5b,
      0xb3bc: 0x5c,
      0xb3bd: 0x5d,
      0xb3be: 0x5e,
      0xb3bf: 0x5f,
      0xb3c0: 0x60,
      0xb3c1: 0x61,
      0xb3c2: 0x62,
      0xb3c3: 0x63,
      0xb3c4: 0x64,
      0xb3c5: 0x65,
      0xb3c6: 0x66,
      0xb3c7: 0x67,
      0xb3c8: 0x68,
      0xb3c9: 0x69,
      0xb3ca: 0x6a,
      0xb3cb: 0x6b,
      0xb3cc: 0x6c,
      0xb3cd: 0x6d,
      0xb3ce: 0x6e,
      0xb3cf: 0x6f,
      0xb3d0: 0x70,
      0xb3d1: 0x71,
      0xb3d2: 0x72,
      0xb3d3: 0x73,
      0xb3d4: 0x74,
      0xb3d5: 0x75,
      0xb3d6: 0x76,
      0xb3d7: 0x77,
      0xb3d8: 0x78,
      0xb3d9: 0x79,
      0xb3da: 0x7a,
      0xb3db: 0x7b,
      0xb3dc: 0x7c,
      0xb3dd: 0x7d,
      0xb3de: 0x7e,
      0xb3df: 0x7f,
      0xb3e0: 0x80
    });

    var constants$2 = {
    	names: names$1,
    	codes: codes$1,
    	defaultLengths: defaultLengths
    };

    var src$6 = createCommonjsModule(function (module, exports) {

    const { Buffer } = buffer;




    exports.names = constants$2.names;
    exports.codes = constants$2.codes;
    exports.defaultLengths = constants$2.defaultLengths;

    /**
     * Convert the given multihash to a hex encoded string.
     *
     * @param {Buffer} hash
     * @returns {string}
     */
    exports.toHexString = function toHexString (hash) {
      if (!Buffer.isBuffer(hash)) {
        throw new Error('must be passed a buffer')
      }

      return hash.toString('hex')
    };

    /**
     * Convert the given hex encoded string to a multihash.
     *
     * @param {string} hash
     * @returns {Buffer}
     */
    exports.fromHexString = function fromHexString (hash) {
      return Buffer.from(hash, 'hex')
    };

    /**
     * Convert the given multihash to a base58 encoded string.
     *
     * @param {Buffer} hash
     * @returns {string}
     */
    exports.toB58String = function toB58String (hash) {
      if (!Buffer.isBuffer(hash)) {
        throw new Error('must be passed a buffer')
      }

      return src$5.encode('base58btc', hash).toString().slice(1)
    };

    /**
     * Convert the given base58 encoded string to a multihash.
     *
     * @param {string|Buffer} hash
     * @returns {Buffer}
     */
    exports.fromB58String = function fromB58String (hash) {
      let encoded = hash;
      if (Buffer.isBuffer(hash)) {
        encoded = hash.toString();
      }

      return src$5.decode('z' + encoded)
    };

    /**
     * Decode a hash from the given multihash.
     *
     * @param {Buffer} buf
     * @returns {{code: number, name: string, length: number, digest: Buffer}} result
     */
    exports.decode = function decode (buf) {
      if (!(Buffer.isBuffer(buf))) {
        throw new Error('multihash must be a Buffer')
      }

      if (buf.length < 2) {
        throw new Error('multihash too short. must be > 2 bytes.')
      }

      const code = varint.decode(buf);
      if (!exports.isValidCode(code)) {
        throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)
      }
      buf = buf.slice(varint.decode.bytes);

      const len = varint.decode(buf);
      if (len < 0) {
        throw new Error(`multihash invalid length: ${len}`)
      }
      buf = buf.slice(varint.decode.bytes);

      if (buf.length !== len) {
        throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)
      }

      return {
        code: code,
        name: constants$2.codes[code],
        length: len,
        digest: buf
      }
    };

    /**
     *  Encode a hash digest along with the specified function code.
     *
     * > **Note:** the length is derived from the length of the digest itself.
     *
     * @param {Buffer} digest
     * @param {string|number} code
     * @param {number} [length]
     * @returns {Buffer}
     */
    exports.encode = function encode (digest, code, length) {
      if (!digest || code === undefined) {
        throw new Error('multihash encode requires at least two args: digest, code')
      }

      // ensure it's a hashfunction code.
      const hashfn = exports.coerceCode(code);

      if (!(Buffer.isBuffer(digest))) {
        throw new Error('digest should be a Buffer')
      }

      if (length == null) {
        length = digest.length;
      }

      if (length && digest.length !== length) {
        throw new Error('digest length should be equal to specified length.')
      }

      return Buffer.concat([
        Buffer.from(varint.encode(hashfn)),
        Buffer.from(varint.encode(length)),
        digest
      ])
    };

    /**
     * Converts a hash function name into the matching code.
     * If passed a number it will return the number if it's a valid code.
     * @param {string|number} name
     * @returns {number}
     */
    exports.coerceCode = function coerceCode (name) {
      let code = name;

      if (typeof name === 'string') {
        if (constants$2.names[name] === undefined) {
          throw new Error(`Unrecognized hash function named: ${name}`)
        }
        code = constants$2.names[name];
      }

      if (typeof code !== 'number') {
        throw new Error(`Hash function code should be a number. Got: ${code}`)
      }

      if (constants$2.codes[code] === undefined && !exports.isAppCode(code)) {
        throw new Error(`Unrecognized function code: ${code}`)
      }

      return code
    };

    /**
     * Checks wether a code is part of the app range
     *
     * @param {number} code
     * @returns {boolean}
     */
    exports.isAppCode = function appCode (code) {
      return code > 0 && code < 0x10
    };

    /**
     * Checks whether a multihash code is valid.
     *
     * @param {number} code
     * @returns {boolean}
     */
    exports.isValidCode = function validCode (code) {
      if (exports.isAppCode(code)) {
        return true
      }

      if (constants$2.codes[code]) {
        return true
      }

      return false
    };

    /**
     * Check if the given buffer is a valid multihash. Throws an error if it is not valid.
     *
     * @param {Buffer} multihash
     * @returns {undefined}
     * @throws {Error}
     */
    function validate (multihash) {
      exports.decode(multihash); // throws if bad.
    }
    exports.validate = validate;

    /**
     * Returns a prefix from a valid multihash. Throws an error if it is not valid.
     *
     * @param {Buffer} multihash
     * @returns {undefined}
     * @throws {Error}
     */
    exports.prefix = function prefix (multihash) {
      validate(multihash);

      return multihash.slice(0, 2)
    };
    });

    class Base$1 {
      constructor (name, code, implementation, alphabet) {
        this.name = name;
        this.code = code;
        this.alphabet = alphabet;
        if (implementation && alphabet) {
          this.engine = implementation(alphabet);
        }
      }

      encode (stringOrBuffer) {
        return this.engine.encode(stringOrBuffer)
      }

      decode (stringOrBuffer) {
        return this.engine.decode(stringOrBuffer)
      }

      isImplemented () {
        return this.engine
      }
    }

    var base$5 = Base$1;

    const { Buffer: Buffer$5 } = buffer;

    var base16$1 = function base16 (alphabet) {
      return {
        encode (input) {
          if (typeof input === 'string') {
            return Buffer$5.from(input).toString('hex')
          }
          return input.toString('hex')
        },
        decode (input) {
          for (const char of input) {
            if (alphabet.indexOf(char) < 0) {
              throw new Error('invalid base16 character')
            }
          }
          return Buffer$5.from(input, 'hex')
        }
      }
    };

    function decode$4 (input, alphabet) {
      input = input.replace(new RegExp('=', 'g'), '');
      const length = input.length;

      let bits = 0;
      let value = 0;

      let index = 0;
      const output = new Uint8Array((length * 5 / 8) | 0);

      for (let i = 0; i < length; i++) {
        value = (value << 5) | alphabet.indexOf(input[i]);
        bits += 5;

        if (bits >= 8) {
          output[index++] = (value >>> (bits - 8)) & 255;
          bits -= 8;
        }
      }

      return output.buffer
    }

    function encode$5 (buffer, alphabet) {
      const length = buffer.byteLength;
      const view = new Uint8Array(buffer);
      const padding = alphabet.indexOf('=') === alphabet.length - 1;

      if (padding) {
        alphabet = alphabet.substring(0, alphabet.length - 1);
      }

      let bits = 0;
      let value = 0;
      let output = '';

      for (let i = 0; i < length; i++) {
        value = (value << 8) | view[i];
        bits += 8;

        while (bits >= 5) {
          output += alphabet[(value >>> (bits - 5)) & 31];
          bits -= 5;
        }
      }

      if (bits > 0) {
        output += alphabet[(value << (5 - bits)) & 31];
      }

      if (padding) {
        while ((output.length % 8) !== 0) {
          output += '=';
        }
      }

      return output
    }

    var base32$1 = function base32 (alphabet) {
      return {
        encode (input) {
          if (typeof input === 'string') {
            return encode$5(Uint8Array.from(input), alphabet)
          }

          return encode$5(input, alphabet)
        },
        decode (input) {
          for (const char of input) {
            if (alphabet.indexOf(char) < 0) {
              throw new Error('invalid base32 character')
            }
          }

          return decode$4(input, alphabet)
        }
      }
    };

    const { Buffer: Buffer$6 } = buffer;

    var base64$1 = function base64 (alphabet) {
      // The alphabet is only used to know:
      //   1. If padding is enabled (must contain '=')
      //   2. If the output must be url-safe (must contain '-' and '_')
      //   3. If the input of the output function is valid
      // The alphabets from RFC 4648 are always used.
      const padding = alphabet.indexOf('=') > -1;
      const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;

      return {
        encode (input) {
          let output = '';

          if (typeof input === 'string') {
            output = Buffer$6.from(input).toString('base64');
          } else {
            output = input.toString('base64');
          }

          if (url) {
            output = output.replace(/\+/g, '-').replace(/\//g, '_');
          }

          const pad = output.indexOf('=');
          if (pad > 0 && !padding) {
            output = output.substring(0, pad);
          }

          return output
        },
        decode (input) {
          for (const char of input) {
            if (alphabet.indexOf(char) < 0) {
              throw new Error('invalid base64 character')
            }
          }

          return Buffer$6.from(input, 'base64')
        }
      }
    };

    // name, code, implementation, alphabet
    const constants$3 = [
      ['base1', '1', '', '1'],
      ['base2', '0', src$4, '01'],
      ['base8', '7', src$4, '01234567'],
      ['base10', '9', src$4, '0123456789'],
      ['base16', 'f', base16$1, '0123456789abcdef'],
      ['base32', 'b', base32$1, 'abcdefghijklmnopqrstuvwxyz234567'],
      ['base32pad', 'c', base32$1, 'abcdefghijklmnopqrstuvwxyz234567='],
      ['base32hex', 'v', base32$1, '0123456789abcdefghijklmnopqrstuv'],
      ['base32hexpad', 't', base32$1, '0123456789abcdefghijklmnopqrstuv='],
      ['base32z', 'h', base32$1, 'ybndrfg8ejkmcpqxot1uwisza345h769'],
      ['base58flickr', 'Z', src$4, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
      ['base58btc', 'z', src$4, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
      ['base64', 'm', base64$1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
      ['base64pad', 'M', base64$1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
      ['base64url', 'u', base64$1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
      ['base64urlpad', 'U', base64$1, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
    ];

    const names$2 = constants$3.reduce((prev, tupple) => {
      prev[tupple[0]] = new base$5(tupple[0], tupple[1], tupple[2], tupple[3]);
      return prev
    }, {});

    const codes$2 = constants$3.reduce((prev, tupple) => {
      prev[tupple[1]] = names$2[tupple[0]];
      return prev
    }, {});

    var constants_1$2 = {
      names: names$2,
      codes: codes$2
    };

    var src$7 = createCommonjsModule(function (module, exports) {

    const { Buffer } = buffer;


    exports = module.exports = multibase;
    exports.encode = encode;
    exports.decode = decode;
    exports.isEncoded = isEncoded;
    exports.names = Object.freeze(Object.keys(constants_1$2.names));
    exports.codes = Object.freeze(Object.keys(constants_1$2.codes));

    const errNotSupported = new Error('Unsupported encoding');

    /**
     * Create a new buffer with the multibase varint+code.
     *
     * @param {string|number} nameOrCode - The multibase name or code number.
     * @param {Buffer} buf - The data to be prefixed with multibase.
     * @memberof Multibase
     * @returns {Buffer}
     */
    function multibase (nameOrCode, buf) {
      if (!buf) {
        throw new Error('requires an encoded buffer')
      }
      const base = getBase(nameOrCode);
      const codeBuf = Buffer.from(base.code);

      const name = base.name;
      validEncode(name, buf);
      return Buffer.concat([codeBuf, buf])
    }

    /**
     * Encode data with the specified base and add the multibase prefix.
     *
     * @param {string|number} nameOrCode - The multibase name or code number.
     * @param {Buffer} buf - The data to be encoded.
     * @returns {Buffer}
     * @memberof Multibase
     */
    function encode (nameOrCode, buf) {
      const base = getBase(nameOrCode);
      const name = base.name;

      return multibase(name, Buffer.from(base.encode(buf)))
    }

    /**
     * Takes a buffer or string encoded with multibase header, decodes it and
     * returns the decoded buffer
     *
     * @param {Buffer|string} bufOrString
     * @returns {Buffer}
     * @memberof Multibase
     *
     */
    function decode (bufOrString) {
      if (Buffer.isBuffer(bufOrString)) {
        bufOrString = bufOrString.toString();
      }

      const code = bufOrString.substring(0, 1);
      bufOrString = bufOrString.substring(1, bufOrString.length);

      if (typeof bufOrString === 'string') {
        bufOrString = Buffer.from(bufOrString);
      }

      const base = getBase(code);
      return Buffer.from(base.decode(bufOrString.toString()))
    }

    /**
     * Is the given data multibase encoded?
     *
     * @param {Buffer|string} bufOrString
     * @returns {boolean}
     * @memberof Multibase
     */
    function isEncoded (bufOrString) {
      if (Buffer.isBuffer(bufOrString)) {
        bufOrString = bufOrString.toString();
      }

      // Ensure bufOrString is a string
      if (Object.prototype.toString.call(bufOrString) !== '[object String]') {
        return false
      }

      const code = bufOrString.substring(0, 1);
      try {
        const base = getBase(code);
        return base.name
      } catch (err) {
        return false
      }
    }

    /**
     * @param {string} name
     * @param {Buffer} buf
     * @private
     * @returns {undefined}
     */
    function validEncode (name, buf) {
      const base = getBase(name);
      base.decode(buf.toString());
    }

    function getBase (nameOrCode) {
      let base;

      if (constants_1$2.names[nameOrCode]) {
        base = constants_1$2.names[nameOrCode];
      } else if (constants_1$2.codes[nameOrCode]) {
        base = constants_1$2.codes[nameOrCode];
      } else {
        throw errNotSupported
      }

      if (!base.isImplemented()) {
        throw new Error('Base ' + nameOrCode + ' is not implemented yet')
      }

      return base
    }
    });

    var identity$1 = 0;
    var ip4$1 = 4;
    var tcp$1 = 6;
    var sha1$2 = 17;
    var blake3 = 30;
    var dccp$1 = 33;
    var ip6$1 = 41;
    var ip6zone$1 = 42;
    var path$1 = 47;
    var multicodec$1 = 48;
    var multihash$1 = 49;
    var multiaddr$1 = 50;
    var multibase$1 = 51;
    var dns$1 = 53;
    var dns4$1 = 54;
    var dns6$1 = 55;
    var dnsaddr$1 = 56;
    var protobuf$1 = 80;
    var cbor$1 = 81;
    var raw$1 = 85;
    var rlp$1 = 96;
    var bencode$1 = 99;
    var sctp$1 = 132;
    var md4$1 = 212;
    var md5$1 = 213;
    var bmt$1 = 214;
    var zeronet$1 = 230;
    var udp$1 = 273;
    var udt$1 = 301;
    var utp$1 = 302;
    var unix$1 = 400;
    var p2p$1 = 421;
    var ipfs$1 = 421;
    var https$1 = 443;
    var onion$1 = 444;
    var onion3$1 = 445;
    var garlic64$1 = 446;
    var garlic32$1 = 447;
    var tls$1 = 448;
    var quic$1 = 460;
    var ws$1 = 477;
    var wss$1 = 478;
    var http$2 = 480;
    var json$1 = 512;
    var messagepack$1 = 513;
    var x11$1 = 4352;
    var baseTable$2 = {
    	identity: identity$1,
    	ip4: ip4$1,
    	tcp: tcp$1,
    	sha1: sha1$2,
    	"sha2-256": 18,
    	"sha2-512": 19,
    	"sha3-512": 20,
    	"sha3-384": 21,
    	"sha3-256": 22,
    	"sha3-224": 23,
    	"shake-128": 24,
    	"shake-256": 25,
    	"keccak-224": 26,
    	"keccak-256": 27,
    	"keccak-384": 28,
    	"keccak-512": 29,
    	blake3: blake3,
    	dccp: dccp$1,
    	"murmur3-128": 34,
    	"murmur3-32": 35,
    	ip6: ip6$1,
    	ip6zone: ip6zone$1,
    	path: path$1,
    	multicodec: multicodec$1,
    	multihash: multihash$1,
    	multiaddr: multiaddr$1,
    	multibase: multibase$1,
    	dns: dns$1,
    	dns4: dns4$1,
    	dns6: dns6$1,
    	dnsaddr: dnsaddr$1,
    	protobuf: protobuf$1,
    	cbor: cbor$1,
    	raw: raw$1,
    	"dbl-sha2-256": 86,
    	rlp: rlp$1,
    	bencode: bencode$1,
    	"dag-pb": 112,
    	"dag-cbor": 113,
    	"libp2p-key": 114,
    	"git-raw": 120,
    	"torrent-info": 123,
    	"torrent-file": 124,
    	"leofcoin-block": 129,
    	"leofcoin-tx": 130,
    	"leofcoin-pr": 131,
    	sctp: sctp$1,
    	"dag-jose": 133,
    	"dag-cose": 134,
    	"eth-block": 144,
    	"eth-block-list": 145,
    	"eth-tx-trie": 146,
    	"eth-tx": 147,
    	"eth-tx-receipt-trie": 148,
    	"eth-tx-receipt": 149,
    	"eth-state-trie": 150,
    	"eth-account-snapshot": 151,
    	"eth-storage-trie": 152,
    	"bitcoin-block": 176,
    	"bitcoin-tx": 177,
    	"bitcoin-witness-commitment": 178,
    	"zcash-block": 192,
    	"zcash-tx": 193,
    	"stellar-block": 208,
    	"stellar-tx": 209,
    	md4: md4$1,
    	md5: md5$1,
    	bmt: bmt$1,
    	"decred-block": 224,
    	"decred-tx": 225,
    	"ipld-ns": 226,
    	"ipfs-ns": 227,
    	"swarm-ns": 228,
    	"ipns-ns": 229,
    	zeronet: zeronet$1,
    	"secp256k1-pub": 231,
    	"bls12_381-g1-pub": 234,
    	"bls12_381-g2-pub": 235,
    	"x25519-pub": 236,
    	"ed25519-pub": 237,
    	"dash-block": 240,
    	"dash-tx": 241,
    	"swarm-manifest": 250,
    	"swarm-feed": 251,
    	udp: udp$1,
    	"p2p-webrtc-star": 275,
    	"p2p-webrtc-direct": 276,
    	"p2p-stardust": 277,
    	"p2p-circuit": 290,
    	"dag-json": 297,
    	udt: udt$1,
    	utp: utp$1,
    	unix: unix$1,
    	p2p: p2p$1,
    	ipfs: ipfs$1,
    	https: https$1,
    	onion: onion$1,
    	onion3: onion3$1,
    	garlic64: garlic64$1,
    	garlic32: garlic32$1,
    	tls: tls$1,
    	quic: quic$1,
    	ws: ws$1,
    	wss: wss$1,
    	"p2p-websocket-star": 479,
    	http: http$2,
    	json: json$1,
    	messagepack: messagepack$1,
    	"libp2p-peer-record": 769,
    	"sha2-256-trunc254-padded": 4114,
    	"ripemd-128": 4178,
    	"ripemd-160": 4179,
    	"ripemd-256": 4180,
    	"ripemd-320": 4181,
    	x11: x11$1,
    	"sm3-256": 21325,
    	"blake2b-8": 45569,
    	"blake2b-16": 45570,
    	"blake2b-24": 45571,
    	"blake2b-32": 45572,
    	"blake2b-40": 45573,
    	"blake2b-48": 45574,
    	"blake2b-56": 45575,
    	"blake2b-64": 45576,
    	"blake2b-72": 45577,
    	"blake2b-80": 45578,
    	"blake2b-88": 45579,
    	"blake2b-96": 45580,
    	"blake2b-104": 45581,
    	"blake2b-112": 45582,
    	"blake2b-120": 45583,
    	"blake2b-128": 45584,
    	"blake2b-136": 45585,
    	"blake2b-144": 45586,
    	"blake2b-152": 45587,
    	"blake2b-160": 45588,
    	"blake2b-168": 45589,
    	"blake2b-176": 45590,
    	"blake2b-184": 45591,
    	"blake2b-192": 45592,
    	"blake2b-200": 45593,
    	"blake2b-208": 45594,
    	"blake2b-216": 45595,
    	"blake2b-224": 45596,
    	"blake2b-232": 45597,
    	"blake2b-240": 45598,
    	"blake2b-248": 45599,
    	"blake2b-256": 45600,
    	"blake2b-264": 45601,
    	"blake2b-272": 45602,
    	"blake2b-280": 45603,
    	"blake2b-288": 45604,
    	"blake2b-296": 45605,
    	"blake2b-304": 45606,
    	"blake2b-312": 45607,
    	"blake2b-320": 45608,
    	"blake2b-328": 45609,
    	"blake2b-336": 45610,
    	"blake2b-344": 45611,
    	"blake2b-352": 45612,
    	"blake2b-360": 45613,
    	"blake2b-368": 45614,
    	"blake2b-376": 45615,
    	"blake2b-384": 45616,
    	"blake2b-392": 45617,
    	"blake2b-400": 45618,
    	"blake2b-408": 45619,
    	"blake2b-416": 45620,
    	"blake2b-424": 45621,
    	"blake2b-432": 45622,
    	"blake2b-440": 45623,
    	"blake2b-448": 45624,
    	"blake2b-456": 45625,
    	"blake2b-464": 45626,
    	"blake2b-472": 45627,
    	"blake2b-480": 45628,
    	"blake2b-488": 45629,
    	"blake2b-496": 45630,
    	"blake2b-504": 45631,
    	"blake2b-512": 45632,
    	"blake2s-8": 45633,
    	"blake2s-16": 45634,
    	"blake2s-24": 45635,
    	"blake2s-32": 45636,
    	"blake2s-40": 45637,
    	"blake2s-48": 45638,
    	"blake2s-56": 45639,
    	"blake2s-64": 45640,
    	"blake2s-72": 45641,
    	"blake2s-80": 45642,
    	"blake2s-88": 45643,
    	"blake2s-96": 45644,
    	"blake2s-104": 45645,
    	"blake2s-112": 45646,
    	"blake2s-120": 45647,
    	"blake2s-128": 45648,
    	"blake2s-136": 45649,
    	"blake2s-144": 45650,
    	"blake2s-152": 45651,
    	"blake2s-160": 45652,
    	"blake2s-168": 45653,
    	"blake2s-176": 45654,
    	"blake2s-184": 45655,
    	"blake2s-192": 45656,
    	"blake2s-200": 45657,
    	"blake2s-208": 45658,
    	"blake2s-216": 45659,
    	"blake2s-224": 45660,
    	"blake2s-232": 45661,
    	"blake2s-240": 45662,
    	"blake2s-248": 45663,
    	"blake2s-256": 45664,
    	"skein256-8": 45825,
    	"skein256-16": 45826,
    	"skein256-24": 45827,
    	"skein256-32": 45828,
    	"skein256-40": 45829,
    	"skein256-48": 45830,
    	"skein256-56": 45831,
    	"skein256-64": 45832,
    	"skein256-72": 45833,
    	"skein256-80": 45834,
    	"skein256-88": 45835,
    	"skein256-96": 45836,
    	"skein256-104": 45837,
    	"skein256-112": 45838,
    	"skein256-120": 45839,
    	"skein256-128": 45840,
    	"skein256-136": 45841,
    	"skein256-144": 45842,
    	"skein256-152": 45843,
    	"skein256-160": 45844,
    	"skein256-168": 45845,
    	"skein256-176": 45846,
    	"skein256-184": 45847,
    	"skein256-192": 45848,
    	"skein256-200": 45849,
    	"skein256-208": 45850,
    	"skein256-216": 45851,
    	"skein256-224": 45852,
    	"skein256-232": 45853,
    	"skein256-240": 45854,
    	"skein256-248": 45855,
    	"skein256-256": 45856,
    	"skein512-8": 45857,
    	"skein512-16": 45858,
    	"skein512-24": 45859,
    	"skein512-32": 45860,
    	"skein512-40": 45861,
    	"skein512-48": 45862,
    	"skein512-56": 45863,
    	"skein512-64": 45864,
    	"skein512-72": 45865,
    	"skein512-80": 45866,
    	"skein512-88": 45867,
    	"skein512-96": 45868,
    	"skein512-104": 45869,
    	"skein512-112": 45870,
    	"skein512-120": 45871,
    	"skein512-128": 45872,
    	"skein512-136": 45873,
    	"skein512-144": 45874,
    	"skein512-152": 45875,
    	"skein512-160": 45876,
    	"skein512-168": 45877,
    	"skein512-176": 45878,
    	"skein512-184": 45879,
    	"skein512-192": 45880,
    	"skein512-200": 45881,
    	"skein512-208": 45882,
    	"skein512-216": 45883,
    	"skein512-224": 45884,
    	"skein512-232": 45885,
    	"skein512-240": 45886,
    	"skein512-248": 45887,
    	"skein512-256": 45888,
    	"skein512-264": 45889,
    	"skein512-272": 45890,
    	"skein512-280": 45891,
    	"skein512-288": 45892,
    	"skein512-296": 45893,
    	"skein512-304": 45894,
    	"skein512-312": 45895,
    	"skein512-320": 45896,
    	"skein512-328": 45897,
    	"skein512-336": 45898,
    	"skein512-344": 45899,
    	"skein512-352": 45900,
    	"skein512-360": 45901,
    	"skein512-368": 45902,
    	"skein512-376": 45903,
    	"skein512-384": 45904,
    	"skein512-392": 45905,
    	"skein512-400": 45906,
    	"skein512-408": 45907,
    	"skein512-416": 45908,
    	"skein512-424": 45909,
    	"skein512-432": 45910,
    	"skein512-440": 45911,
    	"skein512-448": 45912,
    	"skein512-456": 45913,
    	"skein512-464": 45914,
    	"skein512-472": 45915,
    	"skein512-480": 45916,
    	"skein512-488": 45917,
    	"skein512-496": 45918,
    	"skein512-504": 45919,
    	"skein512-512": 45920,
    	"skein1024-8": 45921,
    	"skein1024-16": 45922,
    	"skein1024-24": 45923,
    	"skein1024-32": 45924,
    	"skein1024-40": 45925,
    	"skein1024-48": 45926,
    	"skein1024-56": 45927,
    	"skein1024-64": 45928,
    	"skein1024-72": 45929,
    	"skein1024-80": 45930,
    	"skein1024-88": 45931,
    	"skein1024-96": 45932,
    	"skein1024-104": 45933,
    	"skein1024-112": 45934,
    	"skein1024-120": 45935,
    	"skein1024-128": 45936,
    	"skein1024-136": 45937,
    	"skein1024-144": 45938,
    	"skein1024-152": 45939,
    	"skein1024-160": 45940,
    	"skein1024-168": 45941,
    	"skein1024-176": 45942,
    	"skein1024-184": 45943,
    	"skein1024-192": 45944,
    	"skein1024-200": 45945,
    	"skein1024-208": 45946,
    	"skein1024-216": 45947,
    	"skein1024-224": 45948,
    	"skein1024-232": 45949,
    	"skein1024-240": 45950,
    	"skein1024-248": 45951,
    	"skein1024-256": 45952,
    	"skein1024-264": 45953,
    	"skein1024-272": 45954,
    	"skein1024-280": 45955,
    	"skein1024-288": 45956,
    	"skein1024-296": 45957,
    	"skein1024-304": 45958,
    	"skein1024-312": 45959,
    	"skein1024-320": 45960,
    	"skein1024-328": 45961,
    	"skein1024-336": 45962,
    	"skein1024-344": 45963,
    	"skein1024-352": 45964,
    	"skein1024-360": 45965,
    	"skein1024-368": 45966,
    	"skein1024-376": 45967,
    	"skein1024-384": 45968,
    	"skein1024-392": 45969,
    	"skein1024-400": 45970,
    	"skein1024-408": 45971,
    	"skein1024-416": 45972,
    	"skein1024-424": 45973,
    	"skein1024-432": 45974,
    	"skein1024-440": 45975,
    	"skein1024-448": 45976,
    	"skein1024-456": 45977,
    	"skein1024-464": 45978,
    	"skein1024-472": 45979,
    	"skein1024-480": 45980,
    	"skein1024-488": 45981,
    	"skein1024-496": 45982,
    	"skein1024-504": 45983,
    	"skein1024-512": 45984,
    	"skein1024-520": 45985,
    	"skein1024-528": 45986,
    	"skein1024-536": 45987,
    	"skein1024-544": 45988,
    	"skein1024-552": 45989,
    	"skein1024-560": 45990,
    	"skein1024-568": 45991,
    	"skein1024-576": 45992,
    	"skein1024-584": 45993,
    	"skein1024-592": 45994,
    	"skein1024-600": 45995,
    	"skein1024-608": 45996,
    	"skein1024-616": 45997,
    	"skein1024-624": 45998,
    	"skein1024-632": 45999,
    	"skein1024-640": 46000,
    	"skein1024-648": 46001,
    	"skein1024-656": 46002,
    	"skein1024-664": 46003,
    	"skein1024-672": 46004,
    	"skein1024-680": 46005,
    	"skein1024-688": 46006,
    	"skein1024-696": 46007,
    	"skein1024-704": 46008,
    	"skein1024-712": 46009,
    	"skein1024-720": 46010,
    	"skein1024-728": 46011,
    	"skein1024-736": 46012,
    	"skein1024-744": 46013,
    	"skein1024-752": 46014,
    	"skein1024-760": 46015,
    	"skein1024-768": 46016,
    	"skein1024-776": 46017,
    	"skein1024-784": 46018,
    	"skein1024-792": 46019,
    	"skein1024-800": 46020,
    	"skein1024-808": 46021,
    	"skein1024-816": 46022,
    	"skein1024-824": 46023,
    	"skein1024-832": 46024,
    	"skein1024-840": 46025,
    	"skein1024-848": 46026,
    	"skein1024-856": 46027,
    	"skein1024-864": 46028,
    	"skein1024-872": 46029,
    	"skein1024-880": 46030,
    	"skein1024-888": 46031,
    	"skein1024-896": 46032,
    	"skein1024-904": 46033,
    	"skein1024-912": 46034,
    	"skein1024-920": 46035,
    	"skein1024-928": 46036,
    	"skein1024-936": 46037,
    	"skein1024-944": 46038,
    	"skein1024-952": 46039,
    	"skein1024-960": 46040,
    	"skein1024-968": 46041,
    	"skein1024-976": 46042,
    	"skein1024-984": 46043,
    	"skein1024-992": 46044,
    	"skein1024-1000": 46045,
    	"skein1024-1008": 46046,
    	"skein1024-1016": 46047,
    	"skein1024-1024": 46048,
    	"poseidon-bls12_381-a2-fc1": 46081,
    	"poseidon-bls12_381-a2-fc1-sc": 46082,
    	"zeroxcert-imprint-256": 52753,
    	"fil-commitment-unsealed": 61697,
    	"fil-commitment-sealed": 61698,
    	"holochain-adr-v0": 8417572,
    	"holochain-adr-v1": 8483108,
    	"holochain-key-v0": 9728292,
    	"holochain-key-v1": 9793828,
    	"holochain-sig-v0": 10645796,
    	"holochain-sig-v1": 10711332
    };

    var baseTable$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        identity: identity$1,
        ip4: ip4$1,
        tcp: tcp$1,
        sha1: sha1$2,
        blake3: blake3,
        dccp: dccp$1,
        ip6: ip6$1,
        ip6zone: ip6zone$1,
        path: path$1,
        multicodec: multicodec$1,
        multihash: multihash$1,
        multiaddr: multiaddr$1,
        multibase: multibase$1,
        dns: dns$1,
        dns4: dns4$1,
        dns6: dns6$1,
        dnsaddr: dnsaddr$1,
        protobuf: protobuf$1,
        cbor: cbor$1,
        raw: raw$1,
        rlp: rlp$1,
        bencode: bencode$1,
        sctp: sctp$1,
        md4: md4$1,
        md5: md5$1,
        bmt: bmt$1,
        zeronet: zeronet$1,
        udp: udp$1,
        udt: udt$1,
        utp: utp$1,
        unix: unix$1,
        p2p: p2p$1,
        ipfs: ipfs$1,
        https: https$1,
        onion: onion$1,
        onion3: onion3$1,
        garlic64: garlic64$1,
        garlic32: garlic32$1,
        tls: tls$1,
        quic: quic$1,
        ws: ws$1,
        wss: wss$1,
        http: http$2,
        json: json$1,
        messagepack: messagepack$1,
        x11: x11$1,
        'default': baseTable$2
    });

    var codecs = getCjsExportFromNamespace(baseTable$3);

    // map for hexString -> codecName
    const nameTable$1 = new Map();

    for (const encodingName in codecs) {
      const code = codecs[encodingName];
      nameTable$1.set(code, encodingName);
    }

    var intTable$1 = Object.freeze(nameTable$1);

    const { Buffer: Buffer$7 } = buffer;

    var util$2 = {
      numberToBuffer: numberToBuffer$1,
      bufferToNumber: bufferToNumber$1,
      varintBufferEncode: varintBufferEncode$1,
      varintBufferDecode: varintBufferDecode$1,
      varintEncode: varintEncode$2
    };

    function bufferToNumber$1 (buf) {
      return parseInt(buf.toString('hex'), 16)
    }

    function numberToBuffer$1 (num) {
      let hexString = num.toString(16);
      if (hexString.length % 2 === 1) {
        hexString = '0' + hexString;
      }
      return Buffer$7.from(hexString, 'hex')
    }

    function varintBufferEncode$1 (input) {
      return Buffer$7.from(varint.encode(bufferToNumber$1(input)))
    }

    function varintBufferDecode$1 (input) {
      return numberToBuffer$1(varint.decode(input))
    }

    function varintEncode$2 (num) {
      return Buffer$7.from(varint.encode(num))
    }

    const varintEncode$3 = util$2.varintEncode;

    // map for codecName -> codeVarintBuffer
    const varintTable$1 = {};

    for (const encodingName in codecs) {
      const code = codecs[encodingName];
      varintTable$1[encodingName] = varintEncode$3(code);
    }

    var varintTable_1$1 = Object.freeze(varintTable$1);

    // map for codecConstant -> code
    const constants$4 = {};

    for (const [name, code] of Object.entries(codecs)) {
      constants$4[name.toUpperCase().replace(/-/g, '_')] = code;
    }

    var constants_1$3 = Object.freeze(constants$4);

    // map for code -> print friendly name
    const tableByCode$1 = {};

    for (const [name, code] of Object.entries(codecs)) {
      if (tableByCode$1[code] === undefined) tableByCode$1[code] = name;
    }

    var print$1 = Object.freeze(tableByCode$1);

    var src$8 = createCommonjsModule(function (module, exports) {

    const { Buffer } = buffer;





    exports = module.exports;

    /**
     * Prefix a buffer with a multicodec-packed.
     *
     * @param {string|number} multicodecStrOrCode
     * @param {Buffer} data
     * @returns {Buffer}
     */
    exports.addPrefix = (multicodecStrOrCode, data) => {
      let prefix;

      if (Buffer.isBuffer(multicodecStrOrCode)) {
        prefix = util$2.varintBufferEncode(multicodecStrOrCode);
      } else {
        if (varintTable_1$1[multicodecStrOrCode]) {
          prefix = varintTable_1$1[multicodecStrOrCode];
        } else {
          throw new Error('multicodec not recognized')
        }
      }
      return Buffer.concat([prefix, data])
    };

    /**
     * Decapsulate the multicodec-packed prefix from the data.
     *
     * @param {Buffer} data
     * @returns {Buffer}
     */
    exports.rmPrefix = (data) => {
      varint.decode(data);
      return data.slice(varint.decode.bytes)
    };

    /**
     * Get the codec of the prefixed data.
     * @param {Buffer} prefixedData
     * @returns {string}
     */
    exports.getCodec = (prefixedData) => {
      const code = varint.decode(prefixedData);
      const codecName = intTable$1.get(code);
      if (codecName === undefined) {
        throw new Error(`Code ${code} not found`)
      }
      return codecName
    };

    /**
     * Get the name of the codec.
     * @param {number} codec
     * @returns {string}
     */
    exports.getName = (codec) => {
      return intTable$1.get(codec)
    };

    /**
     * Get the code of the codec
     * @param {string} name
     * @returns {number}
     */
    exports.getNumber = (name) => {
      const code = varintTable_1$1[name];
      if (code === undefined) {
        throw new Error('Codec `' + name + '` not found')
      }
      return util$2.varintBufferDecode(code)[0]
    };

    /**
     * Get the code of the prefixed data.
     * @param {Buffer} prefixedData
     * @returns {number}
     */
    exports.getCode = (prefixedData) => {
      return varint.decode(prefixedData)
    };

    /**
     * Get the code as varint of a codec name.
     * @param {string} codecName
     * @returns {Buffer}
     */
    exports.getCodeVarint = (codecName) => {
      const code = varintTable_1$1[codecName];
      if (code === undefined) {
        throw new Error('Codec `' + codecName + '` not found')
      }
      return code
    };

    /**
     * Get the varint of a code.
     * @param {Number} code
     * @returns {Array.<number>}
     */
    exports.getVarint = (code) => {
      return varint.encode(code)
    };

    // Make the constants top-level constants

    Object.assign(exports, constants_1$3);

    // Human friendly names for printing, e.g. in error messages
    exports.print = print$1;
    });

    const { Buffer: Buffer$8 } = buffer;
    var CIDUtil = {
      /**
       * Test if the given input is a valid CID object.
       * Returns an error message if it is not.
       * Returns undefined if it is a valid CID.
       *
       * @param {any} other
       * @returns {string}
       */
      checkCIDComponents: function (other) {
        if (other == null) {
          return 'null values are not valid CIDs'
        }

        if (!(other.version === 0 || other.version === 1)) {
          return 'Invalid version, must be a number equal to 1 or 0'
        }

        if (typeof other.codec !== 'string') {
          return 'codec must be string'
        }

        if (other.version === 0) {
          if (other.codec !== 'dag-pb') {
            return "codec must be 'dag-pb' for CIDv0"
          }
          if (other.multibaseName !== 'base58btc') {
            return "multibaseName must be 'base58btc' for CIDv0"
          }
        }

        if (!Buffer$8.isBuffer(other.multihash)) {
          return 'multihash must be a Buffer'
        }

        try {
          src$6.validate(other.multihash);
        } catch (err) {
          let errorMsg = err.message;
          if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message
            errorMsg = 'Multihash validation failed';
          }
          return errorMsg
        }
      }
    };

    var cidUtil = CIDUtil;

    function withIs(Class, { className, symbolName }) {
        const symbol = Symbol.for(symbolName);

        const ClassIsWrapper = {
            // The code below assigns the class wrapper to an object to trick
            // JavaScript engines to show the name of the extended class when
            // logging an instances.
            // We are assigning an anonymous class (class wrapper) to the object
            // with key `className` to keep the correct name.
            // If this is not supported it falls back to logging `ClassIsWrapper`.
            [className]: class extends Class {
                constructor(...args) {
                    super(...args);
                    Object.defineProperty(this, symbol, { value: true });
                }

                get [Symbol.toStringTag]() {
                    return className;
                }
            },
        }[className];

        ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);

        return ClassIsWrapper;
    }

    function withIsProto(Class, { className, symbolName, withoutNew }) {
        const symbol = Symbol.for(symbolName);

        /* eslint-disable object-shorthand */
        const ClassIsWrapper = {
            [className]: function (...args) {
                if (withoutNew && !(this instanceof ClassIsWrapper)) {
                    return new ClassIsWrapper(...args);
                }

                const _this = Class.call(this, ...args) || this;

                if (_this && !_this[symbol]) {
                    Object.defineProperty(_this, symbol, { value: true });
                }

                return _this;
            },
        }[className];
        /* eslint-enable object-shorthand */

        ClassIsWrapper.prototype = Object.create(Class.prototype);
        ClassIsWrapper.prototype.constructor = ClassIsWrapper;

        Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {
            get() {
                return className;
            },
        });

        ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);

        return ClassIsWrapper;
    }

    var classIs = withIs;
    var proto = withIsProto;
    classIs.proto = proto;

    const { Buffer: Buffer$9 } = buffer;







    /**
     * @typedef {Object} SerializedCID
     * @param {string} codec
     * @param {number} version
     * @param {Buffer} multihash
     */

    /**
     * Test if the given input is a CID.
     * @function isCID
     * @memberof CID
     * @static
     * @param {any} other
     * @returns {bool}
     */

    /**
     * Class representing a CID `<mbase><version><mcodec><mhash>`
     * , as defined in [ipld/cid](https://github.com/multiformats/cid).
     * @class CID
     */
    class CID {
      /**
       * Create a new CID.
       *
       * The algorithm for argument input is roughly:
       * ```
       * if (cid)
       *   -> create a copy
       * else if (str)
       *   if (1st char is on multibase table) -> CID String
       *   else -> bs58 encoded multihash
       * else if (Buffer)
       *   if (1st byte is 0 or 1) -> CID
       *   else -> multihash
       * else if (Number)
       *   -> construct CID by parts
       * ```
       *
       * @param {string|Buffer|CID} version
       * @param {string} [codec]
       * @param {Buffer} [multihash]
       * @param {string} [multibaseName]
       *
       * @example
       * new CID(<version>, <codec>, <multihash>, <multibaseName>)
       * new CID(<cidStr>)
       * new CID(<cid.buffer>)
       * new CID(<multihash>)
       * new CID(<bs58 encoded multihash>)
       * new CID(<cid>)
       */
      constructor (version, codec, multihash, multibaseName) {
        if (_CID.isCID(version)) {
          // version is an exising CID instance
          const cid = version;
          this.version = cid.version;
          this.codec = cid.codec;
          this.multihash = Buffer$9.from(cid.multihash);
          // Default guard for when a CID < 0.7 is passed with no multibaseName
          this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');
          return
        }

        if (typeof version === 'string') {
          // e.g. 'base32' or false
          const baseName = src$7.isEncoded(version);
          if (baseName) {
            // version is a CID String encoded with multibase, so v1
            const cid = src$7.decode(version);
            this.version = parseInt(cid.slice(0, 1).toString('hex'), 16);
            this.codec = src$8.getCodec(cid.slice(1));
            this.multihash = src$8.rmPrefix(cid.slice(1));
            this.multibaseName = baseName;
          } else {
            // version is a base58btc string multihash, so v0
            this.version = 0;
            this.codec = 'dag-pb';
            this.multihash = src$6.fromB58String(version);
            this.multibaseName = 'base58btc';
          }
          CID.validateCID(this);
          Object.defineProperty(this, 'string', { value: version });
          return
        }

        if (Buffer$9.isBuffer(version)) {
          const firstByte = version.slice(0, 1);
          const v = parseInt(firstByte.toString('hex'), 16);
          if (v === 1) {
            // version is a CID buffer
            const cid = version;
            this.version = v;
            this.codec = src$8.getCodec(cid.slice(1));
            this.multihash = src$8.rmPrefix(cid.slice(1));
            this.multibaseName = 'base32';
          } else {
            // version is a raw multihash buffer, so v0
            this.version = 0;
            this.codec = 'dag-pb';
            this.multihash = version;
            this.multibaseName = 'base58btc';
          }
          CID.validateCID(this);
          return
        }

        // otherwise, assemble the CID from the parameters

        /**
         * @type {number}
         */
        this.version = version;

        /**
         * @type {string}
         */
        this.codec = codec;

        /**
         * @type {Buffer}
         */
        this.multihash = multihash;

        /**
         * @type {string}
         */
        this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');

        CID.validateCID(this);
      }

      /**
       * The CID as a `Buffer`
       *
       * @return {Buffer}
       * @readonly
       *
       * @memberOf CID
       */
      get buffer () {
        let buffer = this._buffer;

        if (!buffer) {
          if (this.version === 0) {
            buffer = this.multihash;
          } else if (this.version === 1) {
            buffer = Buffer$9.concat([
              Buffer$9.from('01', 'hex'),
              src$8.getCodeVarint(this.codec),
              this.multihash
            ]);
          } else {
            throw new Error('unsupported version')
          }

          // Cache this buffer so it doesn't have to be recreated
          Object.defineProperty(this, '_buffer', { value: buffer });
        }

        return buffer
      }

      /**
       * Get the prefix of the CID.
       *
       * @returns {Buffer}
       * @readonly
       */
      get prefix () {
        return Buffer$9.concat([
          Buffer$9.from(`0${this.version}`, 'hex'),
          src$8.getCodeVarint(this.codec),
          src$6.prefix(this.multihash)
        ])
      }

      /**
       * Convert to a CID of version `0`.
       *
       * @returns {CID}
       */
      toV0 () {
        if (this.codec !== 'dag-pb') {
          throw new Error('Cannot convert a non dag-pb CID to CIDv0')
        }

        const { name, length } = src$6.decode(this.multihash);

        if (name !== 'sha2-256') {
          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')
        }

        if (length !== 32) {
          throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')
        }

        return new _CID(0, this.codec, this.multihash)
      }

      /**
       * Convert to a CID of version `1`.
       *
       * @returns {CID}
       */
      toV1 () {
        return new _CID(1, this.codec, this.multihash)
      }

      /**
       * Encode the CID into a string.
       *
       * @param {string} [base=this.multibaseName] - Base encoding to use.
       * @returns {string}
       */
      toBaseEncodedString (base = this.multibaseName) {
        if (this.string && base === this.multibaseName) {
          return this.string
        }
        let str = null;
        if (this.version === 0) {
          if (base !== 'base58btc') {
            throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')
          }
          str = src$6.toB58String(this.multihash);
        } else if (this.version === 1) {
          str = src$7.encode(base, this.buffer).toString();
        } else {
          throw new Error('unsupported version')
        }
        if (base === this.multibaseName) {
          // cache the string value
          Object.defineProperty(this, 'string', { value: str });
        }
        return str
      }

      /**
       * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)
       *
       * @returns {String}
       */
      [Symbol.for('nodejs.util.inspect.custom')] () {
        return 'CID(' + this.toString() + ')'
      }

      toString (base) {
        return this.toBaseEncodedString(base)
      }

      /**
       * Serialize to a plain object.
       *
       * @returns {SerializedCID}
       */
      toJSON () {
        return {
          codec: this.codec,
          version: this.version,
          hash: this.multihash
        }
      }

      /**
       * Compare equality with another CID.
       *
       * @param {CID} other
       * @returns {bool}
       */
      equals (other) {
        return this.codec === other.codec &&
          this.version === other.version &&
          this.multihash.equals(other.multihash)
      }

      /**
       * Test if the given input is a valid CID object.
       * Throws if it is not.
       *
       * @param {any} other
       * @returns {void}
       */
      static validateCID (other) {
        const errorMsg = cidUtil.checkCIDComponents(other);
        if (errorMsg) {
          throw new Error(errorMsg)
        }
      }
    }

    const _CID = classIs(CID, {
      className: 'CID',
      symbolName: '@ipld/js-cid/CID'
    });

    _CID.codecs = codecs;

    var src$9 = _CID;

    /*
    	ISC License

    	Copyright (c) 2019, Pierre-Louis Despaigne

    	Permission to use, copy, modify, and/or distribute this software for any
    	purpose with or without fee is hereby granted, provided that the above
    	copyright notice and this permission notice appear in all copies.

    	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    */




    /**
     * Convert an hexadecimal string to a Buffer, the string can start with or without '0x'
     * @param {string} hex an hexadecimal value
     * @return {Buffer} the resulting Buffer
     */
    const hexStringToBuffer = (hex) => {
    	let prefix = hex.slice(0, 2);
    	let value = hex.slice(2);
    	let res = '';
    	if (prefix === '0x') res = value;
    	else res = hex;
    	return src$6.fromHexString(res);
    };

    /**
    * list of known encoding,
    * encoding should be a function that takes a `string` input,
    * and return a `Buffer` result
    */
    const encodes = {
      /**
      * @param {string} value
      * @return {Buffer}
      */
      swarm: (value) => {
        const multihash = src$6.encode(hexStringToBuffer(value), 'keccak-256');
    		return new src$9(1, 'swarm-manifest', multihash).buffer;
      },
      /**
      * @param {string} value
      * @return {Buffer}
      */
      ipfs: (value) => {
        const multihash = src$6.fromB58String(value);
        return new src$9(1, 'dag-pb', multihash).buffer;
      },
      /**
      * @param {string} value
      * @return {Buffer}
      */
      utf8: (value) => {
        return Buffer.from(value, 'utf8');
      },
    };

    /** 
    * list of known decoding,
    * decoding should be a function that takes a `Buffer` input,
    * and return a `string` result
    */
    const decodes = {
      /**
      * @param {Buffer} value 
      */
      hexMultiHash: (value) => {
        const cid = new src$9(value);
        return src$6.decode(cid.multihash).digest.toString('hex');
      },
      /**
      * @param {Buffer} value 
      */
      b58MultiHash: (value) => {
        const cid = new src$9(value);
        return src$6.toB58String(cid.multihash);
      },
      /**
      * @param {Buffer} value 
      */
      utf8: (value) => {
        return value.toString('utf8');
      },
    };

    /**
    * list of known encoding/decoding for a given codec,
    * `encode` should be chosen among the `encodes` functions
    * `decode` should be chosen among the `decodes` functions
    */
    const profiles = {
      'swarm-ns': {
        encode: encodes.swarm,
        decode: decodes.hexMultiHash,
      },
      'ipfs-ns': {
        encode: encodes.ipfs,
        decode: decodes.b58MultiHash,
      },
      'ipns-ns': {
        encode: encodes.ipfs,
        decode: decodes.b58MultiHash,
      },
      'default': {
        encode: encodes.utf8,
        decode: decodes.utf8,
      },
    };

    var hexStringToBuffer_1 = hexStringToBuffer;
    var profiles_2 = profiles;

    var profiles_1 = {
    	hexStringToBuffer: hexStringToBuffer_1,
    	profiles: profiles_2
    };

    /*
    	ISC License

    	Copyright (c) 2019, Pierre-Louis Despaigne

    	Permission to use, copy, modify, and/or distribute this software for any
    	purpose with or without fee is hereby granted, provided that the above
    	copyright notice and this permission notice appear in all copies.

    	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    */



    /**
     * Take any ipfsHash and convert it to a CID v1 encoded in base32.
     * @param {string} ipfsHash a regular ipfs hash either a cid v0 or v1 (v1 will remain unchanged)
     * @return {string} the resulting ipfs hash as a cid v1
     */
    const cidV0ToV1Base32 = (ipfsHash) => {
    	let cid = new src$9(ipfsHash);
    	if (cid.version === 0) {
    		cid = cid.toV1();
    	}
    	return cid.toString('base32');
    };

    var cidV0ToV1Base32_1 = cidV0ToV1Base32;

    var helpers$1 = {
    	cidV0ToV1Base32: cidV0ToV1Base32_1
    };

    /*
    	ISC License

    	Copyright (c) 2019, Pierre-Louis Despaigne

    	Permission to use, copy, modify, and/or distribute this software for any
    	purpose with or without fee is hereby granted, provided that the above
    	copyright notice and this permission notice appear in all copies.

    	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    */



    const { hexStringToBuffer: hexStringToBuffer$1, profiles: profiles$1 } = profiles_1;
    const { cidV0ToV1Base32: cidV0ToV1Base32$1 } = helpers$1;

    var src$a = {

    	//export some helpers functions
    	helpers: {
    		cidV0ToV1Base32: cidV0ToV1Base32$1,
    	},

    	/**
    	* Decode a Content Hash.
    	* @param {string} hash an hex string containing a content hash
    	* @return {string} the decoded content
    	*/
    	decode: function (contentHash) {
    		const buffer = hexStringToBuffer$1(contentHash);
    		const codec = src$3.getCodec(buffer);
    		const value = src$3.rmPrefix(buffer);
    		let profile = profiles$1[codec];
    		if (!profile) profile = profiles$1['default'];
    		return profile.decode(value);
    	},

    	/**
    	* Encode an IPFS address into a content hash
    	* @param {string} ipfsHash string containing an IPFS address
    	* @return {string} the resulting content hash
    	*/
    	fromIpfs: function (ipfsHash) {
    		return this.encode('ipfs-ns', ipfsHash);
    	},

    	/**
    	* Encode a Swarm address into a content hash
    	* @param {string} swarmHash string containing a Swarm address
    	* @return {string} the resulting content hash
    	*/
    	fromSwarm: function (swarmHash) {
    		return this.encode('swarm-ns', swarmHash);
    	},

    	/**
    	* General purpose encoding function
      * @param {string} codec 
      * @param {string} value 
      */
    	encode: function (codec, value) {
    		let profile = profiles$1[codec];
    		if (!profile) profile = profiles$1['default'];
    		const encodedValue = profile.encode(value);
    		return src$3.addPrefix(codec, encodedValue).toString('hex');
    	},

    	/**
    	* Extract the codec of a content hash
    	* @param {string} hash hex string containing a content hash
    	* @return {string} the extracted codec
    	*/
    	getCodec: function (hash) {
    		let buffer = hexStringToBuffer$1(hash);
    		return src$3.getCodec(buffer);
    	},
    };

    /*
    Adapted from ensdomains/ui
    https://github.com/ensdomains/ui/blob/3e62e440b53466eeec9dd1c63d73924eefbd88c1/src/utils/contents.js#L1-L85

    BSD 2-Clause License

    Copyright (c) 2019, Ethereum Name Service
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */

    function decode$5(encoded) {
        var decoded = null;
        var protocolType = null;
        var error = null;
        if (encoded && encoded.error) {
            return {
                protocolType: null,
                decoded: encoded.error
            };
        }
        if (encoded) {
            try {
                decoded = src$a.decode(encoded);
                var codec = src$a.getCodec(encoded);
                if (codec === 'ipfs-ns') {
                    protocolType = 'ipfs';
                }
                else if (codec === 'swarm-ns') {
                    protocolType = 'bzz';
                }
                else if (codec === 'onion') {
                    protocolType = 'onion';
                }
                else if (codec === 'onion3') {
                    protocolType = 'onion3';
                }
                else {
                    decoded = encoded;
                }
            }
            catch (e) {
                error = e.message;
            }
        }
        return {
            protocolType: protocolType,
            decoded: decoded,
            error: error
        };
    }
    function encode$6(text) {
        var content, contentType;
        var encoded = false;
        if (!!text) {
            var matched = text.match(/^(ipfs|bzz|onion|onion3):\/\/(.*)/) || text.match(/\/(ipfs)\/(.*)/);
            if (matched) {
                contentType = matched[1];
                content = matched[2];
            }
            try {
                if (contentType === 'ipfs') {
                    if (content.length >= 4) {
                        encoded = '0x' + src$a.fromIpfs(content);
                    }
                }
                else if (contentType === 'bzz') {
                    if (content.length >= 4) {
                        encoded = '0x' + src$a.fromSwarm(content);
                    }
                }
                else if (contentType === 'onion') {
                    if (content.length === 16) {
                        encoded = '0x' + src$a.encode('onion', content);
                    }
                }
                else if (contentType === 'onion3') {
                    if (content.length === 56) {
                        encoded = '0x' + src$a.encode('onion3', content);
                    }
                }
                else {
                    throw new Error('Could not encode content hash: unsupported content type');
                }
            }
            catch (err) {
                throw err;
            }
        }
        return encoded;
    }
    var contentHash_1 = {
        decode: decode$5,
        encode: encode$6
    };

    var formatters$6 = lib$3.formatters;




    /**
     * Constructs a new instance of ENS
     *
     * @param {Eth} eth
     *
     * @constructor
     */
    function ENS(eth) {
        this.eth = eth;
        var registryAddress = null;
        this._detectedAddress = null;
        this._lastSyncCheck = null;
        Object.defineProperty(this, 'registry', {
            get: function () {
                return new Registry_1(this);
            },
            enumerable: true
        });
        Object.defineProperty(this, 'resolverMethodHandler', {
            get: function () {
                return new ResolverMethodHandler_1(this.registry);
            },
            enumerable: true
        });
        Object.defineProperty(this, 'registryAddress', {
            get: function () {
                return registryAddress;
            },
            set: function (value) {
                if (value === null) {
                    registryAddress = value;
                    return;
                }
                registryAddress = formatters$6.inputAddressFormatter(value);
            },
            enumerable: true
        });
    }
    /**
     * Returns true if the given interfaceId is supported and otherwise false.
     *
     * @method supportsInterface
     *
     * @param {string} name
     * @param {string} interfaceId
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<boolean>}
     */
    ENS.prototype.supportsInterface = function (name, interfaceId, callback) {
        return this.getResolver(name).then(function (resolver) {
            if (!lib$1.isHexStrict(interfaceId)) {
                interfaceId = lib$1.sha3(interfaceId).slice(0, 10);
            }
            return resolver.methods.supportsInterface(interfaceId).call(callback);
        }).catch(function (error) {
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            throw error;
        });
    };
    /**
     * Returns the Resolver by the given address
     *
     * @deprecated Please use the "getResolver" method instead of "resolver"
     *
     * @method resolver
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<Contract>}
     */
    ENS.prototype.resolver = function (name, callback) {
        return this.registry.resolver(name, callback);
    };
    /**
     * Returns the Resolver by the given address
     *
     * @method getResolver
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<Contract>}
     */
    ENS.prototype.getResolver = function (name, callback) {
        return this.registry.getResolver(name, callback);
    };
    /**
     * Does set the resolver of the given name
     *
     * @method setResolver
     *
     * @param {string} name
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setResolver = function (name, address, txConfig, callback) {
        return this.registry.setResolver(name, address, txConfig, callback);
    };
    /**
     * Sets the owner, resolver, and TTL for an ENS record in a single operation.
     *
     * @method setRecord
     *
     * @param {string} name
     * @param {string} owner
     * @param {string} resolver
     * @param {string | number} ttl
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {
        return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);
    };
    /**
     * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.
     *
     * @method setSubnodeRecord
     *
     * @param {string} name
     * @param {string} label
     * @param {string} owner
     * @param {string} resolver
     * @param {string | number} ttl
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {
        return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);
    };
    /**
     * Sets or clears an approval by the given operator.
     *
     * @method setApprovalForAll
     *
     * @param {string} operator
     * @param {boolean} approved
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {
        return this.registry.setApprovalForAll(operator, approved, txConfig, callback);
    };
    /**
     * Returns true if the operator is approved
     *
     * @method isApprovedForAll
     *
     * @param {string} owner
     * @param {string} operator
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<boolean>}
     */
    ENS.prototype.isApprovedForAll = function (owner, operator, callback) {
        return this.registry.isApprovedForAll(owner, operator, callback);
    };
    /**
     * Returns true if the record exists
     *
     * @method recordExists
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {Promise<boolean>}
     */
    ENS.prototype.recordExists = function (name, callback) {
        return this.registry.recordExists(name, callback);
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setSubnodeOwner
     *
     * @param {string} name
     * @param {string} label
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {
        return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method getTTL
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.getTTL = function (name, callback) {
        return this.registry.getTTL(name, callback);
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setTTL
     *
     * @param {string} name
     * @param {number} ttl
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setTTL = function (name, ttl, txConfig, callback) {
        return this.registry.setTTL(name, ttl, txConfig, callback);
    };
    /**
     * Returns the owner by the given name and current configured or detected Registry
     *
     * @method getOwner
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.getOwner = function (name, callback) {
        return this.registry.getOwner(name, callback);
    };
    /**
     * Returns the address of the owner of an ENS name.
     *
     * @method setOwner
     *
     * @param {string} name
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setOwner = function (name, address, txConfig, callback) {
        return this.registry.setOwner(name, address, txConfig, callback);
    };
    /**
     * Returns the address record associated with a name.
     *
     * @method getAddress
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.getAddress = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'addr', []).call(callback);
    };
    /**
     * Sets a new address
     *
     * @method setAddress
     *
     * @param {string} name
     * @param {string} address
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setAddress = function (name, address, txConfig, callback) {
        return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);
    };
    /**
     * Returns the public key
     *
     * @method getPubkey
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.getPubkey = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);
    };
    /**
     * Set the new public key
     *
     * @method setPubkey
     *
     * @param {string} name
     * @param {string} x
     * @param {string} y
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {
        return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);
    };
    /**
     * Returns the content
     *
     * @method getContent
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.getContent = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'content', []).call(callback);
    };
    /**
     * Set the content
     *
     * @method setContent
     *
     * @param {string} name
     * @param {string} hash
     * @param {function} callback
     * @param {TransactionConfig} txConfig
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setContent = function (name, hash, txConfig, callback) {
        return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);
    };
    /**
     * Returns the contenthash
     *
     * @method getContenthash
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<ContentHash>}
     */
    ENS.prototype.getContenthash = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'contenthash', [], contentHash_1.decode).call(callback);
    };
    /**
     * Set the contenthash
     *
     * @method setContent
     *
     * @param {string} name
     * @param {string} hash
     * @param {function} callback
     * @param {TransactionConfig} txConfig
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setContenthash = function (name, hash, txConfig, callback) {
        var encoded;
        try {
            encoded = contentHash_1.encode(hash);
        }
        catch (err) {
            var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');
            if (underscore.isFunction(callback)) {
                callback(error, null);
                return;
            }
            throw error;
        }
        return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);
    };
    /**
     * Get the multihash
     *
     * @method getMultihash
     *
     * @param {string} name
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.getMultihash = function (name, callback) {
        return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);
    };
    /**
     * Set the multihash
     *
     * @method setMultihash
     *
     * @param {string} name
     * @param {string} hash
     * @param {TransactionConfig} txConfig
     * @param {function} callback
     *
     * @callback callback callback(error, result)
     * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}
     */
    ENS.prototype.setMultihash = function (name, hash, txConfig, callback) {
        return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);
    };
    /**
     * Checks if the current used network is synced and looks for ENS support there.
     * Throws an error if not.
     *
     * @returns {Promise<string>}
     */
    ENS.prototype.checkNetwork = async function () {
        var now = new Date() / 1000;
        if (!this._lastSyncCheck || (now - this._lastSyncCheck) > 3600) {
            var block = await this.eth.getBlock('latest');
            var headAge = now - block.timestamp;
            if (headAge > 3600) {
                throw new Error("Network not synced; last block was " + headAge + " seconds ago");
            }
            this._lastSyncCheck = now;
        }
        if (this.registryAddress) {
            return this.registryAddress;
        }
        if (!this._detectedAddress) {
            var networkType = await this.eth.net.getNetworkType();
            var addr = config_1.addresses[networkType];
            if (typeof addr === 'undefined') {
                throw new Error("ENS is not supported on network " + networkType);
            }
            this._detectedAddress = addr;
            return this._detectedAddress;
        }
        return this._detectedAddress;
    };
    var ENS_1 = ENS;

    var lib$f = ENS_1;

    var formatters$7 = lib$3.formatters;
    var Personal = function Personal() {
        var _this = this;
        // sets _requestmanager
        lib$b.packageInit(this, arguments);
        this.net = new lib$c(this);
        var defaultAccount = null;
        var defaultBlock = 'latest';
        Object.defineProperty(this, 'defaultAccount', {
            get: function () {
                return defaultAccount;
            },
            set: function (val) {
                if (val) {
                    defaultAccount = lib$1.toChecksumAddress(formatters$7.inputAddressFormatter(val));
                }
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultAccount = defaultAccount;
                });
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultBlock', {
            get: function () {
                return defaultBlock;
            },
            set: function (val) {
                defaultBlock = val;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultBlock = defaultBlock;
                });
                return val;
            },
            enumerable: true
        });
        var methods = [
            new lib$a({
                name: 'getAccounts',
                call: 'personal_listAccounts',
                params: 0,
                outputFormatter: lib$1.toChecksumAddress
            }),
            new lib$a({
                name: 'newAccount',
                call: 'personal_newAccount',
                params: 1,
                inputFormatter: [null],
                outputFormatter: lib$1.toChecksumAddress
            }),
            new lib$a({
                name: 'unlockAccount',
                call: 'personal_unlockAccount',
                params: 3,
                inputFormatter: [formatters$7.inputAddressFormatter, null, null]
            }),
            new lib$a({
                name: 'lockAccount',
                call: 'personal_lockAccount',
                params: 1,
                inputFormatter: [formatters$7.inputAddressFormatter]
            }),
            new lib$a({
                name: 'importRawKey',
                call: 'personal_importRawKey',
                params: 2
            }),
            new lib$a({
                name: 'sendTransaction',
                call: 'personal_sendTransaction',
                params: 2,
                inputFormatter: [formatters$7.inputTransactionFormatter, null]
            }),
            new lib$a({
                name: 'signTransaction',
                call: 'personal_signTransaction',
                params: 2,
                inputFormatter: [formatters$7.inputTransactionFormatter, null]
            }),
            new lib$a({
                name: 'sign',
                call: 'personal_sign',
                params: 3,
                inputFormatter: [formatters$7.inputSignFormatter, formatters$7.inputAddressFormatter, null]
            }),
            new lib$a({
                name: 'ecRecover',
                call: 'personal_ecRecover',
                params: 2,
                inputFormatter: [formatters$7.inputSignFormatter, null]
            })
        ];
        methods.forEach(function (method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager);
            method.defaultBlock = _this.defaultBlock;
            method.defaultAccount = _this.defaultAccount;
        });
    };
    lib$b.addProviders(Personal);
    var lib$g = Personal;

    const at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);

    const random = bytes => {
      let rnd;
      if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof commonjsRequire !== "undefined") rnd = commonjsRequire().randomBytes(bytes);else throw "Safe random numbers not available.";
      let hex = "0x";
      for (let i = 0; i < bytes; ++i) hex += ("00" + rnd[i].toString(16)).slice(-2);
      return hex;
    };

    const length$1 = a => (a.length - 2) / 2;

    const flatten = a => "0x" + a.reduce((r, s) => r + s.slice(2), "");

    const slice = (i, j, bs) => "0x" + bs.slice(i * 2 + 2, j * 2 + 2);

    const reverse = hex => {
      let rev = "0x";
      for (let i = 0, l = length$1(hex); i < l; ++i) {
        rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
      }
      return rev;
    };

    const pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));

    const padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");

    const toArray$1 = hex => {
      let arr = [];
      for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));
      return arr;
    };

    const fromArray = arr => {
      let hex = "0x";
      for (let i = 0, l = arr.length; i < l; ++i) {
        let b = arr[i];
        hex += (b < 16 ? "0" : "") + b.toString(16);
      }
      return hex;
    };

    const toUint8Array = hex => new Uint8Array(toArray$1(hex));

    const fromUint8Array = arr => fromArray([].slice.call(arr, 0));

    const fromNumber = num => {
      let hex = num.toString(16);
      return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
    };

    const toNumber = hex => parseInt(hex.slice(2), 16);

    const concat$1 = (a, b) => a.concat(b.slice(2));

    const fromNat = bn => bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);

    const toNat = bn => bn[2] === "0" ? "0x" + bn.slice(3) : bn;

    const fromAscii = ascii => {
      let hex = "0x";
      for (let i = 0; i < ascii.length; ++i) hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
      return hex;
    };

    const toAscii = hex => {
      let ascii = "";
      for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
      return ascii;
    };

    // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
    const fromString$1 = s => {
      const makeByte = uint8 => {
        const b = uint8.toString(16);
        return b.length < 2 ? "0" + b : b;
      };
      let bytes = "0x";
      for (let ci = 0; ci != s.length; ci++) {
        let c = s.charCodeAt(ci);
        if (c < 128) {
          bytes += makeByte(c);
          continue;
        }
        if (c < 2048) {
          bytes += makeByte(c >> 6 | 192);
        } else {
          if (c > 0xd7ff && c < 0xdc00) {
            if (++ci == s.length) return null;
            let c2 = s.charCodeAt(ci);
            if (c2 < 0xdc00 || c2 > 0xdfff) return null;
            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            bytes += makeByte(c >> 18 | 240);
            bytes += makeByte(c >> 12 & 63 | 128);
          } else {
            // c <= 0xffff
            bytes += makeByte(c >> 12 | 224);
          }
          bytes += makeByte(c >> 6 & 63 | 128);
        }
        bytes += makeByte(c & 63 | 128);
      }
      return bytes;
    };

    const toString$1 = bytes => {
      let s = '';
      let i = 0;
      let l = length$1(bytes);
      while (i < l) {
        let c = at(bytes, i++);
        if (c > 127) {
          if (c > 191 && c < 224) {
            if (i >= l) return null;
            c = (c & 31) << 6 | at(bytes, i) & 63;
          } else if (c > 223 && c < 240) {
            if (i + 1 >= l) return null;
            c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
          } else if (c > 239 && c < 248) {
            if (i + 2 >= l) return null;
            c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
          } else return null;
          ++i;
        }
        if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
          c -= 0x10000;
          s += String.fromCharCode(c >> 10 | 0xd800);
          s += String.fromCharCode(c & 0x3FF | 0xdc00);
        } else return null;
      }
      return s;
    };

    var bytes = {
      random,
      length: length$1,
      concat: concat$1,
      flatten,
      slice,
      reverse,
      pad,
      padRight,
      fromAscii,
      toAscii,
      fromString: fromString$1,
      toString: toString$1,
      fromNumber,
      toNumber,
      fromNat,
      toNat,
      fromArray,
      toArray: toArray$1,
      fromUint8Array,
      toUint8Array
    };

    const fromBN = bn => "0x" + bn.toString("hex");

    const toBN$2 = str => new bn$2(str.slice(2), 16);

    const fromString$2 = str => {
      const bn = "0x" + (str.slice(0, 2) === "0x" ? new bn$2(str.slice(2), 16) : new bn$2(str, 10)).toString("hex");
      return bn === "0x0" ? "0x" : bn;
    };

    const toEther = wei => toNumber$1(div(wei, fromString$2("10000000000"))) / 100000000;

    const fromEther = eth => mul(fromNumber$1(Math.floor(eth * 100000000)), fromString$2("10000000000"));

    const toString$2 = a => toBN$2(a).toString(10);

    const fromNumber$1 = a => typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new bn$2(a).toString("hex");

    const toNumber$1 = a => toBN$2(a).toNumber();

    const toUint256 = a => bytes.pad(32, a);

    const bin = method => (a, b) => fromBN(toBN$2(a)[method](toBN$2(b)));

    const add = bin("add");
    const mul = bin("mul");
    const div = bin("div");
    const sub = bin("sub");

    var nat = {
      toString: toString$2,
      fromString: fromString$2,
      toNumber: toNumber$1,
      fromNumber: fromNumber$1,
      toEther,
      fromEther,
      toUint256,
      add,
      mul,
      div,
      sub
    };

    // The RLP format
    // Serialization and deserialization for the BytesTree type, under the following grammar:
    // | First byte | Meaning                                                                    |
    // | ---------- | -------------------------------------------------------------------------- |
    // | 0   to 127 | HEX(leaf)                                                                  |
    // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
    // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
    // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
    // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

    const encode$7 = tree => {
      const padEven = str => str.length % 2 === 0 ? str : "0" + str;

      const uint = num => padEven(num.toString(16));

      const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);

      const dataTree = tree => {
        if (typeof tree === "string") {
          const hex = tree.slice(2);
          const pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
          return pre + hex;
        } else {
          const hex = tree.map(dataTree).join("");
          const pre = length(hex.length / 2, 192);
          return pre + hex;
        }
      };

      return "0x" + dataTree(tree);
    };

    const decode$6 = hex => {
      let i = 2;

      const parseTree = () => {
        if (i >= hex.length) throw "";
        const head = hex.slice(i, i + 2);
        return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
      };

      const parseLength = () => {
        const len = parseInt(hex.slice(i, i += 2), 16) % 64;
        return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
      };

      const parseHex = () => {
        const len = parseLength();
        return "0x" + hex.slice(i, i += len * 2);
      };

      const parseList = () => {
        const lim = parseLength() * 2 + i;
        let list = [];
        while (i < lim) list.push(parseTree());
        return list;
      };

      try {
        return parseTree();
      } catch (e) {
        return [];
      }
    };

    var rlp$2 = { encode: encode$7, decode: decode$6 };

    // This was ported from https://github.com/emn178/js-sha3, with some minor
    // modifications and pruning. It is licensed under MIT:
    //
    // Copyright 2015-2016 Chen, Yi-Cyuan
    //  
    // Permission is hereby granted, free of charge, to any person obtaining
    // a copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to
    // permit persons to whom the Software is furnished to do so, subject to
    // the following conditions:
    // 
    // The above copyright notice and this permission notice shall be
    // included in all copies or substantial portions of the Software.
    // 
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    const HEX_CHARS$1 = '0123456789abcdef'.split('');
    const KECCAK_PADDING$1 = [1, 256, 65536, 16777216];
    const SHIFT$1 = [0, 8, 16, 24];
    const RC$1 = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

    const Keccak$1 = bits => ({
      blocks: [],
      reset: true,
      block: 0,
      start: 0,
      blockCount: 1600 - (bits << 1) >> 5,
      outputBlocks: bits >> 5,
      s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    });

    const update$2 = (state, message) => {
      var length = message.length,
          blocks = state.blocks,
          byteCount = state.blockCount << 2,
          blockCount = state.blockCount,
          outputBlocks = state.outputBlocks,
          s = state.s,
          index = 0,
          i,
          code;

      // update
      while (index < length) {
        if (state.reset) {
          state.reset = false;
          blocks[0] = state.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (typeof message !== "string") {
          for (i = state.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT$1[i++ & 3];
          }
        } else {
          for (i = state.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT$1[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT$1[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$1[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT$1[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT$1[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$1[i++ & 3];
            } else {
              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT$1[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT$1[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT$1[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$1[i++ & 3];
            }
          }
        }
        state.lastByteIndex = i;
        if (i >= byteCount) {
          state.start = i - byteCount;
          state.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f$2(s);
          state.reset = true;
        } else {
          state.start = i;
        }
      }

      // finalize
      i = state.lastByteIndex;
      blocks[i >> 2] |= KECCAK_PADDING$1[i & 3];
      if (state.lastByteIndex === byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f$2(s);

      // toString
      var hex = '',
          i = 0,
          j = 0,
          block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS$1[block >> 4 & 0x0F] + HEX_CHARS$1[block & 0x0F] + HEX_CHARS$1[block >> 12 & 0x0F] + HEX_CHARS$1[block >> 8 & 0x0F] + HEX_CHARS$1[block >> 20 & 0x0F] + HEX_CHARS$1[block >> 16 & 0x0F] + HEX_CHARS$1[block >> 28 & 0x0F] + HEX_CHARS$1[block >> 24 & 0x0F];
        }
        if (j % blockCount === 0) {
          f$2(s);
          i = 0;
        }
      }
      return "0x" + hex;
    };

    const f$2 = s => {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;

        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;

        s[0] ^= RC$1[n];
        s[1] ^= RC$1[n + 1];
      }
    };

    const keccak$1 = bits => str => {
      var msg;
      if (str.slice(0, 2) === "0x") {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));
      } else {
        msg = str;
      }
      return update$2(Keccak$1(bits), msg);
    };

    var hash$2 = {
      keccak256: keccak$1(256),
      keccak512: keccak$1(512),
      keccak256s: keccak$1(256),
      keccak512s: keccak$1(512)
    };

    const secp256k1$1 = new elliptic_1.ec("secp256k1"); // eslint-disable-line
    const { keccak256: keccak256$1, keccak256s } = hash$2;

    const create = entropy => {
      const innerHex = keccak256$1(bytes.concat(bytes.random(32), entropy || bytes.random(32)));
      const middleHex = bytes.concat(bytes.concat(bytes.random(32), innerHex), bytes.random(32));
      const outerHex = keccak256$1(middleHex);
      return fromPrivate(outerHex);
    };

    const toChecksum = address => {
      const addressHash = keccak256s(address.slice(2));
      let checksumAddress = "0x";
      for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
      return checksumAddress;
    };

    const fromPrivate = privateKey => {
      const buffer = new Buffer(privateKey.slice(2), "hex");
      const ecKey = secp256k1$1.keyFromPrivate(buffer);
      const publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
      const publicHash = keccak256$1(publicKey);
      const address = toChecksum("0x" + publicHash.slice(-40));
      return {
        address: address,
        privateKey: privateKey
      };
    };

    const encodeSignature = ([v, r, s]) => bytes.flatten([r, s, v]);

    const decodeSignature = hex => [bytes.slice(64, bytes.length(hex), hex), bytes.slice(0, 32, hex), bytes.slice(32, 64, hex)];

    const makeSigner = addToV => (hash, privateKey) => {
      const signature = secp256k1$1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), { canonical: true });
      return encodeSignature([nat.fromString(bytes.fromNumber(addToV + signature.recoveryParam)), bytes.pad(32, bytes.fromNat("0x" + signature.r.toString(16))), bytes.pad(32, bytes.fromNat("0x" + signature.s.toString(16)))]);
    };

    const sign = makeSigner(27); // v=27|28 instead of 0|1...

    const recover = (hash, signature) => {
      const vals = decodeSignature(signature);
      const vrs = { v: bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };
      const ecPublicKey = secp256k1$1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
      const publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
      const publicHash = keccak256$1(publicKey);
      const address = toChecksum("0x" + publicHash.slice(-40));
      return address;
    };

    var account = {
      create,
      toChecksum,
      fromPrivate,
      sign,
      makeSigner,
      recover,
      encodeSignature,
      decodeSignature
    };

    var streamBrowser = events.EventEmitter;

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var Buffer$a = buffer.Buffer;

    var inspect = require$$0.inspect;

    var custom = inspect && inspect.custom || 'inspect';

    function copyBuffer(src, target, offset) {
      Buffer$a.prototype.copy.call(src, target, offset);
    }

    var buffer_list =
    /*#__PURE__*/
    function () {
      function BufferList() {
        _classCallCheck(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;

          while (p = p.next) {
            ret += s + p.data;
          }

          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer$a.alloc(0);
          var ret = Buffer$a.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;

          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }

          return ret;
        } // Consumes a specified amount of bytes or characters from the buffered data.

      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;

          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }

          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        } // Consumes a specified amount of characters from the buffered data.

      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Consumes a specified amount of bytes from the buffered data.

      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer$a.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Make sure the linked list only shows the minimal necessary information.

      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);

      return BufferList;
    }();

    function destroy(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            nextTick(emitErrorNT, this, err);
          }
        }

        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks


      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well


      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            nextTick(emitErrorAndCloseNT, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            nextTick(emitErrorAndCloseNT, _this, err);
          } else {
            nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          nextTick(emitCloseNT, _this);
          cb(err);
        } else {
          nextTick(emitCloseNT, _this);
        }
      });

      return this;
    }

    function emitErrorAndCloseNT(self, err) {
      emitErrorNT(self, err);
      emitCloseNT(self);
    }

    function emitCloseNT(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }

    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT(self, err) {
      self.emit('error', err);
    }

    function errorOrDestroy(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }

    var destroy_1 = {
      destroy: destroy,
      undestroy: undestroy,
      errorOrDestroy: errorOrDestroy
    };

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

    var codes$3 = {};

    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }

      var NodeError =
      /*#__PURE__*/
      function (_Base) {
        _inheritsLoose(NodeError, _Base);

        function NodeError(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }

        return NodeError;
      }(Base);

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes$3[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });

        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;

      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      var msg;

      if (endsWith(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      }

      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    var codes_1 = codes$3;

    var errorsBrowser = {
    	codes: codes_1
    };

    var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;

    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }

    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }

        return Math.floor(hwm);
      } // Default value


      return state.objectMode ? 16 : 16 * 1024;
    }

    var state = {
      getHighWaterMark: getHighWaterMark
    };

    /**
     * Module exports.
     */

    var browser$5 = deprecate;

    /**
     * Mark that a method should not be used.
     * Returns a modified function which warns once by default.
     *
     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
     *
     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
     * will throw an Error when invoked.
     *
     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
     * will invoke `console.trace()` instead of `console.error()`.
     *
     * @param {Function} fn - the function to deprecate
     * @param {String} msg - the string to print to the console when `fn` is invoked
     * @returns {Function} a new "deprecated" version of `fn`
     * @api public
     */

    function deprecate (fn, msg) {
      if (config$3('noDeprecation')) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config$3('throwDeprecation')) {
            throw new Error(msg);
          } else if (config$3('traceDeprecation')) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    /**
     * Checks `localStorage` for boolean values for the given `name`.
     *
     * @param {String} name
     * @returns {Boolean}
     * @api private
     */

    function config$3 (name) {
      // accessing global.localStorage can trigger a DOMException in sandboxed iframes
      try {
        if (!commonjsGlobal.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = commonjsGlobal.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === 'true';
    }

    var _stream_writable = Writable$1;
    // there will be only 2 of these for each stream


    function CorkedRequest$1(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/


    var Duplex$1;
    /*</replacement>*/

    Writable$1.WritableState = WritableState$1;
    /*<replacement>*/

    var internalUtil = {
      deprecate: browser$5
    };
    /*</replacement>*/

    /*<replacement>*/


    /*</replacement>*/


    var Buffer$b = buffer.Buffer;

    var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer(chunk) {
      return Buffer$b.from(chunk);
    }

    function _isUint8Array(obj) {
      return Buffer$b.isBuffer(obj) || obj instanceof OurUint8Array;
    }



    var getHighWaterMark$1 = state.getHighWaterMark;

    var _require$codes = errorsBrowser.codes,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

    var errorOrDestroy$1 = destroy_1.errorOrDestroy;

    inherits_browser$1(Writable$1, streamBrowser);

    function nop$1() {}

    function WritableState$1(options, stream, isDuplex) {
      Duplex$1 = Duplex$1 || _stream_duplex;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream,
      // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$1; // object stream flag to indicate whether or not this stream
      // contains buffers or objects.

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()

      this.highWaterMark = getHighWaterMark$1(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

      this.finalCalled = false; // drain event flag.

      this.needDrain = false; // at the start of calling end()

      this.ending = false; // when end() has been called, and returned

      this.ended = false; // when 'finish' is emitted

      this.finished = false; // has it been destroyed

      this.destroyed = false; // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.

      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.

      this.length = 0; // a flag to see when we're in the middle of a write.

      this.writing = false; // when true all writes will be buffered until .uncork() call

      this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.

      this.sync = true; // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.

      this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

      this.onwrite = function (er) {
        onwrite$1(stream, er);
      }; // the callback that the user supplies to write(chunk,encoding,cb)


      this.writecb = null; // the amount that is being written when _write is called.

      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted

      this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams

      this.prefinished = false; // True if the error was already emitted and should not be thrown again

      this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

      this.autoDestroy = !!options.autoDestroy; // count buffered requests

      this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two

      this.corkedRequestsFree = new CorkedRequest$1(this);
    }

    WritableState$1.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];

      while (current) {
        out.push(current);
        current = current.next;
      }

      return out;
    };

    (function () {
      try {
        Object.defineProperty(WritableState$1.prototype, 'buffer', {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })(); // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.


    var realHasInstance;

    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable$1, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable$1) return false;
          return object && object._writableState instanceof WritableState$1;
        }
      });
    } else {
      realHasInstance = function realHasInstance(object) {
        return object instanceof this;
      };
    }

    function Writable$1(options) {
      Duplex$1 = Duplex$1 || _stream_duplex; // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the WritableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$1;
      if (!isDuplex && !realHasInstance.call(Writable$1, this)) return new Writable$1(options);
      this._writableState = new WritableState$1(options, this, isDuplex); // legacy.

      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
      }

      streamBrowser.call(this);
    } // Otherwise people can pipe Writable streams, which is just wrong.


    Writable$1.prototype.pipe = function () {
      errorOrDestroy$1(this, new ERR_STREAM_CANNOT_PIPE());
    };

    function writeAfterEnd$1(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

      errorOrDestroy$1(stream, er);
      nextTick(cb, er);
    } // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.


    function validChunk$1(stream, state, chunk, cb) {
      var er;

      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== 'string' && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
      }

      if (er) {
        errorOrDestroy$1(stream, er);
        nextTick(cb, er);
        return false;
      }

      return true;
    }

    Writable$1.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      var isBuf = !state.objectMode && _isUint8Array(chunk);

      if (isBuf && !Buffer$b.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop$1;
      if (state.ending) writeAfterEnd$1(this, cb);else if (isBuf || validChunk$1(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer$1(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };

    Writable$1.prototype.cork = function () {
      this._writableState.corked++;
    };

    Writable$1.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer$1(this, state);
      }
    };

    Writable$1.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    Object.defineProperty(Writable$1.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });

    function decodeChunk$1(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer$b.from(chunk, encoding);
      }

      return chunk;
    }

    Object.defineProperty(Writable$1.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }); // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.

    function writeOrBuffer$1(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk$1(state, chunk, encoding);

        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }

      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };

        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }

        state.bufferedRequestCount += 1;
      } else {
        doWrite$1(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite$1(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError$1(stream, state, sync, er, cb) {
      --state.pendingcb;

      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        nextTick(cb, er); // this can emit finish, and it will always happen
        // after error

        nextTick(finishMaybe$1, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$1(stream, er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$1(stream, er); // this can emit finish, but finish must
        // always follow error

        finishMaybe$1(stream, state);
      }
    }

    function onwriteStateUpdate$1(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite$1(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate$1(state);
      if (er) onwriteError$1(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish$1(state) || stream.destroyed;

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer$1(stream, state);
        }

        if (sync) {
          nextTick(afterWrite$1, stream, state, finished, cb);
        } else {
          afterWrite$1(stream, state, finished, cb);
        }
      }
    }

    function afterWrite$1(stream, state, finished, cb) {
      if (!finished) onwriteDrain$1(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe$1(stream, state);
    } // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.


    function onwriteDrain$1(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    } // if there's something in the buffer waiting, then process it


    function clearBuffer$1(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;

        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }

        buffer.allBuffers = allBuffers;
        doWrite$1(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite

        state.pendingcb++;
        state.lastBufferedRequest = null;

        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest$1(state);
        }

        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite$1(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.

          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable$1.prototype._write = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
    };

    Writable$1.prototype._writev = null;

    Writable$1.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

      if (state.corked) {
        state.corked = 1;
        this.uncork();
      } // ignore unnecessary end() calls.


      if (!state.ending) endWritable$1(this, state, cb);
      return this;
    };

    Object.defineProperty(Writable$1.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });

    function needFinish$1(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;

        if (err) {
          errorOrDestroy$1(stream, err);
        }

        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe$1(stream, state);
      });
    }

    function prefinish$1(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }

    function finishMaybe$1(stream, state) {
      var need = needFinish$1(state);

      if (need) {
        prefinish$1(stream, state);

        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');

          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the readable side is ready for autoDestroy as well
            var rState = stream._readableState;

            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }

      return need;
    }

    function endWritable$1(stream, state, cb) {
      state.ending = true;
      finishMaybe$1(stream, state);

      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }

      state.ended = true;
      stream.writable = false;
    }

    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      } // reuse the free corkReq.


      state.corkedRequestsFree.next = corkReq;
    }

    Object.defineProperty(Writable$1.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === undefined) {
          return false;
        }

        return this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._writableState.destroyed = value;
      }
    });
    Writable$1.prototype.destroy = destroy_1.destroy;
    Writable$1.prototype._undestroy = destroy_1.undestroy;

    Writable$1.prototype._destroy = function (err, cb) {
      cb(err);
    };

    /*<replacement>*/

    var objectKeys$1 = Object.keys || function (obj) {
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      return keys;
    };
    /*</replacement>*/


    var _stream_duplex = Duplex$2;





    inherits_browser$1(Duplex$2, _stream_readable);

    {
      // Allow the keys array to be GC'ed.
      var keys$1 = objectKeys$1(_stream_writable.prototype);

      for (var v$1 = 0; v$1 < keys$1.length; v$1++) {
        var method$1 = keys$1[v$1];
        if (!Duplex$2.prototype[method$1]) Duplex$2.prototype[method$1] = _stream_writable.prototype[method$1];
      }
    }

    function Duplex$2(options) {
      if (!(this instanceof Duplex$2)) return new Duplex$2(options);
      _stream_readable.call(this, options);
      _stream_writable.call(this, options);
      this.allowHalfOpen = true;

      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;

        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once('end', onend$1);
        }
      }
    }

    Object.defineProperty(Duplex$2.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex$2.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex$2.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    }); // the no-half-open enforcer

    function onend$1() {
      // If the writable side ended, then we're ok.
      if (this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.

      nextTick(onEndNT$1, this);
    }

    function onEndNT$1(self) {
      self.end();
    }

    Object.defineProperty(Duplex$2.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }

        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    /*<replacement>*/

    var Buffer$c = safeBuffer.Buffer;
    /*</replacement>*/

    var isEncoding$1 = Buffer$c.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };

    function _normalizeEncoding$1(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding$1(enc) {
      var nenc = _normalizeEncoding$1(enc);
      if (typeof nenc !== 'string' && (Buffer$c.isEncoding === isEncoding$1 || !isEncoding$1(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    var StringDecoder_1$1 = StringDecoder$1;
    function StringDecoder$1(encoding) {
      this.encoding = normalizeEncoding$1(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text$1;
          this.end = utf16End$1;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast$1;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text$1;
          this.end = base64End$1;
          nb = 3;
          break;
        default:
          this.write = simpleWrite$1;
          this.end = simpleEnd$1;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer$c.allocUnsafe(nb);
    }

    StringDecoder$1.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder$1.prototype.end = utf8End$1;

    // Returns only complete characters in a Buffer
    StringDecoder$1.prototype.text = utf8Text$1;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder$1.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte$1(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete$1(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte$1(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte$1(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte$1(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes$1(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast$1(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes$1(this, buf);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text$1(buf, i) {
      var total = utf8CheckIncomplete$1(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End$1(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text$1(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End$1(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }

    function base64Text$1(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }

    function base64End$1(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite$1(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd$1(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }

    var string_decoder = {
    	StringDecoder: StringDecoder_1$1
    };

    var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;

    function once$2(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);
      };
    }

    function noop$2() {}

    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function eos(stream, opts, callback) {
      if (typeof opts === 'function') return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once$2(callback || noop$2);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;

      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };

      var writableEnded = stream._writableState && stream._writableState.finished;

      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };

      var readableEnded = stream._readableState && stream._readableState.endEmitted;

      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };

      var onerror = function onerror(err) {
        callback.call(stream, err);
      };

      var onclose = function onclose() {
        var err;

        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }

        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };

      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };

      if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }

      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }

    var endOfStream = eos;

    var _Object$setPrototypeO;

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



    var kLastResolve = Symbol('lastResolve');
    var kLastReject = Symbol('lastReject');
    var kError = Symbol('error');
    var kEnded = Symbol('ended');
    var kLastPromise = Symbol('lastPromise');
    var kHandlePromise = Symbol('handlePromise');
    var kStream = Symbol('stream');

    function createIterResult(value, done) {
      return {
        value: value,
        done: done
      };
    }

    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];

      if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'

        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }

    function onReadable(iter) {
      // we wait for the next tick, because it might
      // emit an error with process.nextTick
      nextTick(readAndResolve, iter);
    }

    function wrapForNext(lastPromise, iter) {
      return function (resolve, reject) {
        lastPromise.then(function () {
          if (iter[kEnded]) {
            resolve(createIterResult(undefined, true));
            return;
          }

          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }

    var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },

      next: function next() {
        var _this = this;

        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];

        if (error !== null) {
          return Promise.reject(error);
        }

        if (this[kEnded]) {
          return Promise.resolve(createIterResult(undefined, true));
        }

        if (this[kStream].destroyed) {
          // We need to defer via nextTick because if .destroy(err) is
          // called, the error will be emitted via nextTick, and
          // we cannot guarantee that there is no error lingering around
          // waiting to be emitted.
          return new Promise(function (resolve, reject) {
            nextTick(function () {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(undefined, true));
              }
            });
          });
        } // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time


        var lastPromise = this[kLastPromise];
        var promise;

        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          // fast path needed to support multiple this.push()
          // without triggering the next() queue
          var data = this[kStream].read();

          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }

          promise = new Promise(this[kHandlePromise]);
        }

        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty$1(_Object$setPrototypeO, Symbol.asyncIterator, function () {
      return this;
    }), _defineProperty$1(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;

      // destroy(err, cb) is a private API
      // we can guarantee we have that here, because we control the
      // Readable class this is attached to
      return new Promise(function (resolve, reject) {
        _this2[kStream].destroy(null, function (err) {
          if (err) {
            reject(err);
            return;
          }

          resolve(createIterResult(undefined, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);

    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
      var _Object$create;

      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty$1(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty$1(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty$1(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty$1(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty$1(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty$1(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();

          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      endOfStream(stream, function (err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
          // returned by next() and store the error

          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }

          iterator[kError] = err;
          return;
        }

        var resolve = iterator[kLastResolve];

        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(undefined, true));
        }

        iterator[kEnded] = true;
      });
      stream.on('readable', onReadable.bind(null, iterator));
      return iterator;
    };

    var async_iterator = createReadableStreamAsyncIterator;

    var fromBrowser = function () {
      throw new Error('Readable.from is not available in the browser')
    };

    var _stream_readable = Readable$1;
    /*<replacement>*/

    var Duplex$3;
    /*</replacement>*/

    Readable$1.ReadableState = ReadableState$1;

    var EElistenerCount = function EElistenerCount(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/



    /*</replacement>*/


    var Buffer$d = buffer.Buffer;

    var OurUint8Array$1 = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer$1(chunk) {
      return Buffer$d.from(chunk);
    }

    function _isUint8Array$1(obj) {
      return Buffer$d.isBuffer(obj) || obj instanceof OurUint8Array$1;
    }
    /*<replacement>*/




    var debug$1;

    if (require$$0 && require$$0.debuglog) {
      debug$1 = require$$0.debuglog('stream');
    } else {
      debug$1 = function debug() {};
    }
    /*</replacement>*/






    var getHighWaterMark$2 = state.getHighWaterMark;

    var _require$codes$1 = errorsBrowser.codes,
        ERR_INVALID_ARG_TYPE$1 = _require$codes$1.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF = _require$codes$1.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$1.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


    var StringDecoder$2;
    var createReadableStreamAsyncIterator$1;
    var from$1;

    inherits_browser$1(Readable$1, streamBrowser);

    var errorOrDestroy$2 = destroy_1.errorOrDestroy;
    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

    function prependListener$1(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.

      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }

    function ReadableState$1(options, stream, isDuplex) {
      Duplex$3 = Duplex$3 || _stream_duplex;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$3; // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"

      this.highWaterMark = getHighWaterMark$2(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()

      this.buffer = new buffer_list();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.

      this.sync = true; // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.

      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

      this.autoDestroy = !!options.autoDestroy; // has it been destroyed

      this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

      this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;

      if (options.encoding) {
        if (!StringDecoder$2) StringDecoder$2 = string_decoder.StringDecoder;
        this.decoder = new StringDecoder$2(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable$1(options) {
      Duplex$3 = Duplex$3 || _stream_duplex;
      if (!(this instanceof Readable$1)) return new Readable$1(options); // Checking for a Stream.Duplex instance is faster here instead of inside
      // the ReadableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$3;
      this._readableState = new ReadableState$1(options, this, isDuplex); // legacy

      this.readable = true;

      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }

      streamBrowser.call(this);
    }

    Object.defineProperty(Readable$1.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined) {
          return false;
        }

        return this._readableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
      }
    });
    Readable$1.prototype.destroy = destroy_1.destroy;
    Readable$1.prototype._undestroy = destroy_1.undestroy;

    Readable$1.prototype._destroy = function (err, cb) {
      cb(err);
    }; // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.


    Readable$1.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;

      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;

          if (encoding !== state.encoding) {
            chunk = Buffer$d.from(chunk, encoding);
            encoding = '';
          }

          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }

      return readableAddChunk$1(this, chunk, encoding, false, skipChunkCheck);
    }; // Unshift should *always* be something directly out of read()


    Readable$1.prototype.unshift = function (chunk) {
      return readableAddChunk$1(this, chunk, null, true, false);
    };

    function readableAddChunk$1(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug$1('readableAddChunk', chunk);
      var state = stream._readableState;

      if (chunk === null) {
        state.reading = false;
        onEofChunk$1(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid$1(state, chunk);

        if (er) {
          errorOrDestroy$2(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$d.prototype) {
            chunk = _uint8ArrayToBuffer$1(chunk);
          }

          if (addToFront) {
            if (state.endEmitted) errorOrDestroy$2(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy$2(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;

            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore$1(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore$1(stream, state);
        }
      } // We can push more data if we are below the highWaterMark.
      // Also, if we have no data yet, we can stand some more bytes.
      // This is to work around cases where hwm=0, such as the repl.


      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }

    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable$1(stream);
      }

      maybeReadMore$1(stream, state);
    }

    function chunkInvalid$1(state, chunk) {
      var er;

      if (!_isUint8Array$1(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE$1('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
      }

      return er;
    }

    Readable$1.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    }; // backwards compatibility.


    Readable$1.prototype.setEncoding = function (enc) {
      if (!StringDecoder$2) StringDecoder$2 = string_decoder.StringDecoder;
      var decoder = new StringDecoder$2(enc);
      this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

      this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

      var p = this._readableState.buffer.head;
      var content = '';

      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }

      this._readableState.buffer.clear();

      if (content !== '') this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    }; // Don't raise the hwm > 1GB


    var MAX_HWM$1 = 0x40000000;

    function computeNewHighWaterMark$1(n) {
      if (n >= MAX_HWM$1) {
        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
        n = MAX_HWM$1;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }

      return n;
    } // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function howMuchToRead$1(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;

      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      } // If we're asking for more than the current hwm, then raise the hwm.


      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark$1(n);
      if (n <= state.length) return n; // Don't have enough

      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }

      return state.length;
    } // you can override either this method, or the async _read(n) below.


    Readable$1.prototype.read = function (n) {
      debug$1('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.

      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug$1('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable$1(this);else emitReadable$1(this);
        return null;
      }

      n = howMuchToRead$1(n, state); // if we've ended, and we're now clear, then finish it up.

      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable$1(this);
        return null;
      } // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
      // if we need a readable event, then we need to do some reading.


      var doRead = state.needReadable;
      debug$1('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug$1('length less than watermark', doRead);
      } // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.


      if (state.ended || state.reading) {
        doRead = false;
        debug$1('reading or ended', doRead);
      } else if (doRead) {
        debug$1('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.

        if (state.length === 0) state.needReadable = true; // call internal read method

        this._read(state.highWaterMark);

        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.

        if (!state.reading) n = howMuchToRead$1(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList$1(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

        if (nOrig !== n && state.ended) endReadable$1(this);
      }

      if (ret !== null) this.emit('data', ret);
      return ret;
    };

    function onEofChunk$1(stream, state) {
      debug$1('onEofChunk');
      if (state.ended) return;

      if (state.decoder) {
        var chunk = state.decoder.end();

        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }

      state.ended = true;

      if (state.sync) {
        // if we are sync, wait until next tick to emit the data.
        // Otherwise we risk emitting data in the flow()
        // the readable code triggers during a read() call
        emitReadable$1(stream);
      } else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;

        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_$1(stream);
        }
      }
    } // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.


    function emitReadable$1(stream) {
      var state = stream._readableState;
      debug$1('emitReadable', state.needReadable, state.emittedReadable);
      state.needReadable = false;

      if (!state.emittedReadable) {
        debug$1('emitReadable', state.flowing);
        state.emittedReadable = true;
        nextTick(emitReadable_$1, stream);
      }
    }

    function emitReadable_$1(stream) {
      var state = stream._readableState;
      debug$1('emitReadable_', state.destroyed, state.length, state.ended);

      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
      } // The stream needs another readable event if
      // 1. It is not flowing, as the flow mechanism will take
      //    care of it.
      // 2. It is not ended.
      // 3. It is below the highWaterMark, so we can schedule
      //    another readable later.


      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow$1(stream);
    } // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.


    function maybeReadMore$1(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_$1, stream, state);
      }
    }

    function maybeReadMore_$1(stream, state) {
      // Attempt to read more data if we should.
      //
      // The conditions for reading more data are (one of):
      // - Not enough data buffered (state.length < state.highWaterMark). The loop
      //   is responsible for filling the buffer with enough data if such data
      //   is available. If highWaterMark is 0 and we are not in the flowing mode
      //   we should _not_ attempt to buffer any extra data. We'll get more data
      //   when the stream consumer calls read() instead.
      // - No data in the buffer, and the stream is in flowing mode. In this mode
      //   the loop below is responsible for ensuring read() is called. Failing to
      //   call read here would abort the flow and there's no other mechanism for
      //   continuing the flow if the stream consumer has just subscribed to the
      //   'data' event.
      //
      // In addition to the above conditions to keep reading data, the following
      // conditions prevent the data from being read:
      // - The stream has ended (state.ended).
      // - There is already a pending 'read' operation (state.reading). This is a
      //   case where the the stream has called the implementation defined _read()
      //   method, but they are processing the call asynchronously and have _not_
      //   called push() with new data. In this case we skip performing more
      //   read()s. The execution ends in this method again after the _read() ends
      //   up calling push() with more data.
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug$1('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) // didn't get any data, stop spinning.
          break;
      }

      state.readingMore = false;
    } // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.


    Readable$1.prototype._read = function (n) {
      errorOrDestroy$2(this, new ERR_METHOD_NOT_IMPLEMENTED$1('_read()'));
    };

    Readable$1.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;

        case 1:
          state.pipes = [state.pipes, dest];
          break;

        default:
          state.pipes.push(dest);
          break;
      }

      state.pipesCount += 1;
      debug$1('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);

      function onunpipe(readable, unpipeInfo) {
        debug$1('onunpipe');

        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }

      function onend() {
        debug$1('onend');
        dest.end();
      } // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.


      var ondrain = pipeOnDrain$1(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;

      function cleanup() {
        debug$1('cleanup'); // cleanup event handlers once the pipe is broken

        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.

        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      src.on('data', ondata);

      function ondata(chunk) {
        debug$1('ondata');
        var ret = dest.write(chunk);
        debug$1('dest.write', ret);

        if (ret === false) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
            debug$1('false write response, pause', state.awaitDrain);
            state.awaitDrain++;
          }

          src.pause();
        }
      } // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.


      function onerror(er) {
        debug$1('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy$2(dest, er);
      } // Make sure our error handler is attached before userland ones.


      prependListener$1(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }

      dest.once('close', onclose);

      function onfinish() {
        debug$1('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }

      dest.once('finish', onfinish);

      function unpipe() {
        debug$1('unpipe');
        src.unpipe(dest);
      } // tell the dest that it's being piped to


      dest.emit('pipe', src); // start the flow if it hasn't been started already.

      if (!state.flowing) {
        debug$1('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain$1(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug$1('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;

        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow$1(src);
        }
      };
    }

    Readable$1.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      }; // if we're not piping anywhere, then do nothing.

      if (state.pipesCount === 0) return this; // just one destination.  most common case.

      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.

        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      } // slow case. multiple pipe destinations.


      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, {
            hasUnpiped: false
          });
        }

        return this;
      } // try to find the right one.


      var index = indexOf$1(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    }; // set up data events if they are asked for
    // Ensure readable listeners eventually get something


    Readable$1.prototype.on = function (ev, fn) {
      var res = streamBrowser.prototype.on.call(this, ev, fn);
      var state = this._readableState;

      if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

        if (state.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug$1('on readable', state.length, state.reading);

          if (state.length) {
            emitReadable$1(this);
          } else if (!state.reading) {
            nextTick(nReadingNextTick$1, this);
          }
        }
      }

      return res;
    };

    Readable$1.prototype.addListener = Readable$1.prototype.on;

    Readable$1.prototype.removeListener = function (ev, fn) {
      var res = streamBrowser.prototype.removeListener.call(this, ev, fn);

      if (ev === 'readable') {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        nextTick(updateReadableListening, this);
      }

      return res;
    };

    Readable$1.prototype.removeAllListeners = function (ev) {
      var res = streamBrowser.prototype.removeAllListeners.apply(this, arguments);

      if (ev === 'readable' || ev === undefined) {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        nextTick(updateReadableListening, this);
      }

      return res;
    };

    function updateReadableListening(self) {
      var state = self._readableState;
      state.readableListening = self.listenerCount('readable') > 0;

      if (state.resumeScheduled && !state.paused) {
        // flowing needs to be set to true now, otherwise
        // the upcoming resume will not flow.
        state.flowing = true; // crude way to check if we should resume
      } else if (self.listenerCount('data') > 0) {
        self.resume();
      }
    }

    function nReadingNextTick$1(self) {
      debug$1('readable nexttick read 0');
      self.read(0);
    } // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.


    Readable$1.prototype.resume = function () {
      var state = this._readableState;

      if (!state.flowing) {
        debug$1('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()

        state.flowing = !state.readableListening;
        resume$1(this, state);
      }

      state.paused = false;
      return this;
    };

    function resume$1(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_$1, stream, state);
      }
    }

    function resume_$1(stream, state) {
      debug$1('resume', state.reading);

      if (!state.reading) {
        stream.read(0);
      }

      state.resumeScheduled = false;
      stream.emit('resume');
      flow$1(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable$1.prototype.pause = function () {
      debug$1('call pause flowing=%j', this._readableState.flowing);

      if (this._readableState.flowing !== false) {
        debug$1('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }

      this._readableState.paused = true;
      return this;
    };

    function flow$1(stream) {
      var state = stream._readableState;
      debug$1('flow', state.flowing);

      while (state.flowing && stream.read() !== null) {
      }
    } // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.


    Readable$1.prototype.wrap = function (stream) {
      var _this = this;

      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug$1('wrapped end');

        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }

        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug$1('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = _this.push(chunk);

        if (!ret) {
          paused = true;
          stream.pause();
        }
      }); // proxy all the other methods.
      // important when wrapping filters and duplexes.

      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      } // proxy certain important events.


      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      } // when we try to consume some more bytes, simply unpause the
      // underlying stream.


      this._read = function (n) {
        debug$1('wrapped _read', n);

        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return this;
    };

    if (typeof Symbol === 'function') {
      Readable$1.prototype[Symbol.asyncIterator] = function () {
        if (createReadableStreamAsyncIterator$1 === undefined) {
          createReadableStreamAsyncIterator$1 = async_iterator;
        }

        return createReadableStreamAsyncIterator$1(this);
      };
    }

    Object.defineProperty(Readable$1.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable$1.prototype, 'readableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable$1.prototype, 'readableFlowing', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    }); // exposed for testing purposes only.

    Readable$1._fromList = fromList$1;
    Object.defineProperty(Readable$1.prototype, 'readableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    }); // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.

    function fromList$1(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }

    function endReadable$1(stream) {
      var state = stream._readableState;
      debug$1('endReadable', state.endEmitted);

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT$1, state, stream);
      }
    }

    function endReadableNT$1(state, stream) {
      debug$1('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');

        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the writable side is ready for autoDestroy as well
          var wState = stream._writableState;

          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }

    if (typeof Symbol === 'function') {
      Readable$1.from = function (iterable, opts) {
        if (from$1 === undefined) {
          from$1 = fromBrowser;
        }

        return from$1(Readable$1, iterable, opts);
      };
    }

    function indexOf$1(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }

      return -1;
    }

    var _stream_transform = Transform$1;

    var _require$codes$2 = errorsBrowser.codes,
        ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK$1 = _require$codes$2.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$2.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$2.ERR_TRANSFORM_WITH_LENGTH_0;



    inherits_browser$1(Transform$1, _stream_duplex);

    function afterTransform$1(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK$1());
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform$1(options) {
      if (!(this instanceof Transform$1)) return new Transform$1(options);
      _stream_duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform$1.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish$2);
    }

    function prefinish$2() {
      var _this = this;

      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done$1(_this, er, data);
        });
      } else {
        done$1(this, null, null);
      }
    }

    Transform$1.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return _stream_duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform$1.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED$2('_transform()'));
    };

    Transform$1.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform$1.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform$1.prototype._destroy = function (err, cb) {
      _stream_duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };

    function done$1(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }

    var _stream_passthrough = PassThrough$1;



    inherits_browser$1(PassThrough$1, _stream_transform);

    function PassThrough$1(options) {
      if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);
      _stream_transform.call(this, options);
    }

    PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    var eos$1;

    function once$3(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }

    var _require$codes$3 = errorsBrowser.codes,
        ERR_MISSING_ARGS = _require$codes$3.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED;

    function noop$3(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }

    function isRequest$1(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function destroyer(stream, reading, writing, callback) {
      callback = once$3(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos$1 === undefined) eos$1 = endOfStream;
      eos$1(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want

        if (isRequest$1(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED$1('pipe'));
      };
    }

    function call(fn) {
      fn();
    }

    function pipe(from, to) {
      return from.pipe(to);
    }

    function popCallback(streams) {
      if (!streams.length) return noop$3;
      if (typeof streams[streams.length - 1] !== 'function') return noop$3;
      return streams.pop();
    }

    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }

      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];

      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }

      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }

    var pipeline_1 = pipeline;

    var readableBrowser = createCommonjsModule(function (module, exports) {
    exports = module.exports = _stream_readable;
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = _stream_writable;
    exports.Duplex = _stream_duplex;
    exports.Transform = _stream_transform;
    exports.PassThrough = _stream_passthrough;
    exports.finished = endOfStream;
    exports.pipeline = pipeline_1;
    });

    var Buffer$e = safeBuffer.Buffer;
    var Transform$2 = readableBrowser.Transform;


    function throwIfNotStringOrBuffer (val, prefix) {
      if (!Buffer$e.isBuffer(val) && typeof val !== 'string') {
        throw new TypeError(prefix + ' must be a string or a buffer')
      }
    }

    function HashBase (blockSize) {
      Transform$2.call(this);

      this._block = Buffer$e.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];

      this._finalized = false;
    }

    inherits_browser$1(HashBase, Transform$2);

    HashBase.prototype._transform = function (chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    HashBase.prototype._flush = function (callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    HashBase.prototype.update = function (data, encoding) {
      throwIfNotStringOrBuffer(data, 'Data');
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer$e.isBuffer(data)) data = Buffer$e.from(data, encoding);

      // consume data
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];

      // update length
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = (this._length[j] / 0x0100000000) | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
      }

      return this
    };

    HashBase.prototype._update = function () {
      throw new Error('_update is not implemented')
    };

    HashBase.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true;

      var digest = this._digest();
      if (encoding !== undefined) digest = digest.toString(encoding);

      // reset state
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;

      return digest
    };

    HashBase.prototype._digest = function () {
      throw new Error('_digest is not implemented')
    };

    var hashBase = HashBase;

    var Buffer$f = safeBuffer.Buffer;

    var ARRAY16 = new Array(16);

    function MD5 () {
      hashBase.call(this, 64);

      // state
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
    }

    inherits_browser$1(MD5, hashBase);

    MD5.prototype._update = function () {
      var M = ARRAY16;
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;

      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
      c = fnF(c, d, a, b, M[2], 0x242070db, 17);
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
      d = fnG(d, a, b, c, M[10], 0x02441453, 9);
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

      a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

      this._a = (this._a + a) | 0;
      this._b = (this._b + b) | 0;
      this._c = (this._c + c) | 0;
      this._d = (this._d + d) | 0;
    };

    MD5.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }

      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();

      // produce result
      var buffer = Buffer$f.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer
    };

    function rotl (x, n) {
      return (x << n) | (x >>> (32 - n))
    }

    function fnF (a, b, c, d, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
    }

    function fnG (a, b, c, d, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
    }

    function fnH (a, b, c, d, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
    }

    function fnI (a, b, c, d, m, k, s) {
      return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
    }

    var md5_js = MD5;

    var Buffer$g = buffer.Buffer;



    var ARRAY16$1 = new Array(16);

    var zl = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var zr = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var sl = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sr = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
    var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

    function RIPEMD160$1 () {
      hashBase.call(this, 64);

      // state
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
    }

    inherits_browser$1(RIPEMD160$1, hashBase);

    RIPEMD160$1.prototype._update = function () {
      var words = ARRAY16$1;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;

      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;

      // computation
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else { // if (i<80) {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }

        al = el;
        el = dl;
        dl = rotl$1(cl, 10);
        cl = bl;
        bl = tl;

        ar = er;
        er = dr;
        dr = rotl$1(cr, 10);
        cr = br;
        br = tr;
      }

      // update state
      var t = (this._b + cl + dr) | 0;
      this._b = (this._c + dl + er) | 0;
      this._c = (this._d + el + ar) | 0;
      this._d = (this._e + al + br) | 0;
      this._e = (this._a + bl + cr) | 0;
      this._a = t;
    };

    RIPEMD160$1.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }

      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();

      // produce result
      var buffer = Buffer$g.alloc ? Buffer$g.alloc(20) : new Buffer$g(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer
    };

    function rotl$1 (x, n) {
      return (x << n) | (x >>> (32 - n))
    }

    function fn1 (a, b, c, d, e, m, k, s) {
      return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
    }

    function fn2 (a, b, c, d, e, m, k, s) {
      return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
    }

    function fn3 (a, b, c, d, e, m, k, s) {
      return (rotl$1((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
    }

    function fn4 (a, b, c, d, e, m, k, s) {
      return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
    }

    function fn5 (a, b, c, d, e, m, k, s) {
      return (rotl$1((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
    }

    var ripemd160$1 = RIPEMD160$1;

    var Buffer$h = safeBuffer.Buffer;

    // prototype class for hash functions
    function Hash (blockSize, finalSize) {
      this._block = Buffer$h.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }

    Hash.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer$h.from(data, enc);
      }

      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;

      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);

        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }

        accum += remainder;
        offset += remainder;

        if ((accum % blockSize) === 0) {
          this._update(block);
        }
      }

      this._len += length;
      return this
    };

    Hash.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize;

      this._block[rem] = 0x80;

      // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
      this._block.fill(0, rem + 1);

      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }

      var bits = this._len * 8;

      // uint32
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);

      // uint64
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;

        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }

      this._update(this._block);
      var hash = this._hash();

      return enc ? hash.toString(enc) : hash
    };

    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    };

    var hash$3 = Hash;

    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
     * in FIPS PUB 180-1
     * This source code is derived from sha1.js of the same repository.
     * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
     * operation was added.
     */



    var Buffer$i = safeBuffer.Buffer;

    var K$1 = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ];

    var W = new Array(80);

    function Sha () {
      this.init();
      this._w = W;

      hash$3.call(this, 64, 56);
    }

    inherits_browser$1(Sha, hash$3);

    Sha.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;

      return this
    };

    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }

    function ft (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K$1[s]) | 0;

        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };

    Sha.prototype._hash = function () {
      var H = Buffer$i.allocUnsafe(20);

      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);

      return H
    };

    var sha$1 = Sha;

    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */



    var Buffer$j = safeBuffer.Buffer;

    var K$2 = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ];

    var W$1 = new Array(80);

    function Sha1 () {
      this.init();
      this._w = W$1;

      hash$3.call(this, 64, 56);
    }

    inherits_browser$1(Sha1, hash$3);

    Sha1.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;

      return this
    };

    function rotl1 (num) {
      return (num << 1) | (num >>> 31)
    }

    function rotl5$1 (num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30$1 (num) {
      return (num << 30) | (num >>> 2)
    }

    function ft$1 (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha1.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$2[s]) | 0;

        e = d;
        d = c;
        c = rotl30$1(b);
        b = a;
        a = t;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };

    Sha1.prototype._hash = function () {
      var H = Buffer$j.allocUnsafe(20);

      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);

      return H
    };

    var sha1$3 = Sha1;

    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */



    var Buffer$k = safeBuffer.Buffer;

    var K$3 = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ];

    var W$2 = new Array(64);

    function Sha256 () {
      this.init();

      this._w = W$2; // new Array(64)

      hash$3.call(this, 64, 56);
    }

    inherits_browser$1(Sha256, hash$3);

    Sha256.prototype.init = function () {
      this._a = 0x6a09e667;
      this._b = 0xbb67ae85;
      this._c = 0x3c6ef372;
      this._d = 0xa54ff53a;
      this._e = 0x510e527f;
      this._f = 0x9b05688c;
      this._g = 0x1f83d9ab;
      this._h = 0x5be0cd19;

      return this
    };

    function ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }

    function maj (x, y, z) {
      return (x & y) | (z & (x | y))
    }

    function sigma0 (x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
    }

    function sigma1 (x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
    }

    function gamma0 (x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
    }

    function gamma1 (x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
    }

    Sha256.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

      for (var j = 0; j < 64; ++j) {
        var T1 = (h + sigma1(e) + ch(e, f, g) + K$3[j] + W[j]) | 0;
        var T2 = (sigma0(a) + maj(a, b, c)) | 0;

        h = g;
        g = f;
        f = e;
        e = (d + T1) | 0;
        d = c;
        c = b;
        b = a;
        a = (T1 + T2) | 0;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
      this._f = (f + this._f) | 0;
      this._g = (g + this._g) | 0;
      this._h = (h + this._h) | 0;
    };

    Sha256.prototype._hash = function () {
      var H = Buffer$k.allocUnsafe(32);

      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);

      return H
    };

    var sha256$1 = Sha256;

    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */




    var Buffer$l = safeBuffer.Buffer;

    var W$3 = new Array(64);

    function Sha224 () {
      this.init();

      this._w = W$3; // new Array(64)

      hash$3.call(this, 64, 56);
    }

    inherits_browser$1(Sha224, sha256$1);

    Sha224.prototype.init = function () {
      this._a = 0xc1059ed8;
      this._b = 0x367cd507;
      this._c = 0x3070dd17;
      this._d = 0xf70e5939;
      this._e = 0xffc00b31;
      this._f = 0x68581511;
      this._g = 0x64f98fa7;
      this._h = 0xbefa4fa4;

      return this
    };

    Sha224.prototype._hash = function () {
      var H = Buffer$l.allocUnsafe(28);

      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);

      return H
    };

    var sha224$1 = Sha224;

    var Buffer$m = safeBuffer.Buffer;

    var K$4 = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    var W$4 = new Array(160);

    function Sha512 () {
      this.init();
      this._w = W$4;

      hash$3.call(this, 128, 112);
    }

    inherits_browser$1(Sha512, hash$3);

    Sha512.prototype.init = function () {
      this._ah = 0x6a09e667;
      this._bh = 0xbb67ae85;
      this._ch = 0x3c6ef372;
      this._dh = 0xa54ff53a;
      this._eh = 0x510e527f;
      this._fh = 0x9b05688c;
      this._gh = 0x1f83d9ab;
      this._hh = 0x5be0cd19;

      this._al = 0xf3bcc908;
      this._bl = 0x84caa73b;
      this._cl = 0xfe94f82b;
      this._dl = 0x5f1d36f1;
      this._el = 0xade682d1;
      this._fl = 0x2b3e6c1f;
      this._gl = 0xfb41bd6b;
      this._hl = 0x137e2179;

      return this
    };

    function Ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }

    function maj$1 (x, y, z) {
      return (x & y) | (z & (x | y))
    }

    function sigma0$1 (x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
    }

    function sigma1$1 (x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
    }

    function Gamma0 (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
    }

    function Gamma0l (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
    }

    function Gamma1 (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
    }

    function Gamma1l (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
    }

    function getCarry (a, b) {
      return (a >>> 0) < (b >>> 0) ? 1 : 0
    }

    Sha512.prototype._update = function (M) {
      var W = this._w;

      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;

      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;

      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
      }
      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2];
        var xl = W[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);

        xh = W[i - 2 * 2];
        xl = W[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);

        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 7 * 2];
        var Wi7l = W[i - 7 * 2 + 1];

        var Wi16h = W[i - 16 * 2];
        var Wi16l = W[i - 16 * 2 + 1];

        var Wil = (gamma0l + Wi7l) | 0;
        var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
        Wil = (Wil + gamma1l) | 0;
        Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
        Wil = (Wil + Wi16l) | 0;
        Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

        W[i] = Wih;
        W[i + 1] = Wil;
      }

      for (var j = 0; j < 160; j += 2) {
        Wih = W[j];
        Wil = W[j + 1];

        var majh = maj$1(ah, bh, ch);
        var majl = maj$1(al, bl, cl);

        var sigma0h = sigma0$1(ah, al);
        var sigma0l = sigma0$1(al, ah);
        var sigma1h = sigma1$1(eh, el);
        var sigma1l = sigma1$1(el, eh);

        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K$4[j];
        var Kil = K$4[j + 1];

        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);

        var t1l = (hl + sigma1l) | 0;
        var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
        t1l = (t1l + chl) | 0;
        t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
        t1l = (t1l + Kil) | 0;
        t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
        t1l = (t1l + Wil) | 0;
        t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

        // t2 = sigma0 + maj
        var t2l = (sigma0l + majl) | 0;
        var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = (dl + t1l) | 0;
        eh = (dh + t1h + getCarry(el, dl)) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = (t1l + t2l) | 0;
        ah = (t1h + t2h + getCarry(al, t1l)) | 0;
      }

      this._al = (this._al + al) | 0;
      this._bl = (this._bl + bl) | 0;
      this._cl = (this._cl + cl) | 0;
      this._dl = (this._dl + dl) | 0;
      this._el = (this._el + el) | 0;
      this._fl = (this._fl + fl) | 0;
      this._gl = (this._gl + gl) | 0;
      this._hl = (this._hl + hl) | 0;

      this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
      this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
      this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
      this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
      this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
      this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
      this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
      this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
    };

    Sha512.prototype._hash = function () {
      var H = Buffer$m.allocUnsafe(64);

      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }

      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);

      return H
    };

    var sha512$1 = Sha512;

    var Buffer$n = safeBuffer.Buffer;

    var W$5 = new Array(160);

    function Sha384 () {
      this.init();
      this._w = W$5;

      hash$3.call(this, 128, 112);
    }

    inherits_browser$1(Sha384, sha512$1);

    Sha384.prototype.init = function () {
      this._ah = 0xcbbb9d5d;
      this._bh = 0x629a292a;
      this._ch = 0x9159015a;
      this._dh = 0x152fecd8;
      this._eh = 0x67332667;
      this._fh = 0x8eb44a87;
      this._gh = 0xdb0c2e0d;
      this._hh = 0x47b5481d;

      this._al = 0xc1059ed8;
      this._bl = 0x367cd507;
      this._cl = 0x3070dd17;
      this._dl = 0xf70e5939;
      this._el = 0xffc00b31;
      this._fl = 0x68581511;
      this._gl = 0x64f98fa7;
      this._hl = 0xbefa4fa4;

      return this
    };

    Sha384.prototype._hash = function () {
      var H = Buffer$n.allocUnsafe(48);

      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }

      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);

      return H
    };

    var sha384$1 = Sha384;

    var sha_js = createCommonjsModule(function (module) {
    var exports = module.exports = function SHA (algorithm) {
      algorithm = algorithm.toLowerCase();

      var Algorithm = exports[algorithm];
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

      return new Algorithm()
    };

    exports.sha = sha$1;
    exports.sha1 = sha1$3;
    exports.sha224 = sha224$1;
    exports.sha256 = sha256$1;
    exports.sha384 = sha384$1;
    exports.sha512 = sha512$1;
    });

    var Buffer$o = safeBuffer.Buffer;
    var Transform$3 = Stream.Transform;
    var StringDecoder$3 = string_decoder.StringDecoder;


    function CipherBase (hashMode) {
      Transform$3.call(this);
      this.hashMode = typeof hashMode === 'string';
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits_browser$1(CipherBase, Transform$3);

    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = Buffer$o.from(data, inputEnc);
      }

      var outData = this._update(data);
      if (this.hashMode) return this

      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }

      return outData
    };

    CipherBase.prototype.setAutoPadding = function () {};
    CipherBase.prototype.getAuthTag = function () {
      throw new Error('trying to get auth tag in unsupported state')
    };

    CipherBase.prototype.setAuthTag = function () {
      throw new Error('trying to set auth tag in unsupported state')
    };

    CipherBase.prototype.setAAD = function () {
      throw new Error('trying to set aad in unsupported state')
    };

    CipherBase.prototype._transform = function (data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function (done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }

      done(err);
    };
    CipherBase.prototype._finalOrDigest = function (outputEnc) {
      var outData = this.__final() || Buffer$o.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData
    };

    CipherBase.prototype._toString = function (value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder$3(enc);
        this._encoding = enc;
      }

      if (this._encoding !== enc) throw new Error('can\'t switch encodings')

      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }

      return out
    };

    var cipherBase = CipherBase;

    function Hash$1 (hash) {
      cipherBase.call(this, 'digest');

      this._hash = hash;
    }

    inherits_browser$1(Hash$1, cipherBase);

    Hash$1.prototype._update = function (data) {
      this._hash.update(data);
    };

    Hash$1.prototype._final = function () {
      return this._hash.digest()
    };

    var browser$6 = function createHash (alg) {
      alg = alg.toLowerCase();
      if (alg === 'md5') return new md5_js()
      if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160$1()

      return new Hash$1(sha_js(alg))
    };

    var Buffer$p = safeBuffer.Buffer;



    var ZEROS = Buffer$p.alloc(128);
    var blocksize = 64;

    function Hmac$1 (alg, key) {
      cipherBase.call(this, 'digest');
      if (typeof key === 'string') {
        key = Buffer$p.from(key);
      }

      this._alg = alg;
      this._key = key;

      if (key.length > blocksize) {
        key = alg(key);
      } else if (key.length < blocksize) {
        key = Buffer$p.concat([key, ZEROS], blocksize);
      }

      var ipad = this._ipad = Buffer$p.allocUnsafe(blocksize);
      var opad = this._opad = Buffer$p.allocUnsafe(blocksize);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }

      this._hash = [ipad];
    }

    inherits_browser$1(Hmac$1, cipherBase);

    Hmac$1.prototype._update = function (data) {
      this._hash.push(data);
    };

    Hmac$1.prototype._final = function () {
      var h = this._alg(Buffer$p.concat(this._hash));
      return this._alg(Buffer$p.concat([this._opad, h]))
    };
    var legacy = Hmac$1;

    var md5$2 = function (buffer) {
      return new md5_js().update(buffer).digest()
    };

    var Buffer$q = safeBuffer.Buffer;





    var ZEROS$1 = Buffer$q.alloc(128);

    function Hmac$2 (alg, key) {
      cipherBase.call(this, 'digest');
      if (typeof key === 'string') {
        key = Buffer$q.from(key);
      }

      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new ripemd160$1() : sha_js(alg);
        key = hash.update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer$q.concat([key, ZEROS$1], blocksize);
      }

      var ipad = this._ipad = Buffer$q.allocUnsafe(blocksize);
      var opad = this._opad = Buffer$q.allocUnsafe(blocksize);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }
      this._hash = alg === 'rmd160' ? new ripemd160$1() : sha_js(alg);
      this._hash.update(ipad);
    }

    inherits_browser$1(Hmac$2, cipherBase);

    Hmac$2.prototype._update = function (data) {
      this._hash.update(data);
    };

    Hmac$2.prototype._final = function () {
      var h = this._hash.digest();
      var hash = this._alg === 'rmd160' ? new ripemd160$1() : sha_js(this._alg);
      return hash.update(this._opad).update(h).digest()
    };

    var browser$7 = function createHmac (alg, key) {
      alg = alg.toLowerCase();
      if (alg === 'rmd160' || alg === 'ripemd160') {
        return new Hmac$2('rmd160', key)
      }
      if (alg === 'md5') {
        return new legacy(md5$2, key)
      }
      return new Hmac$2(alg, key)
    };

    var sha224WithRSAEncryption = {
    	sign: "rsa",
    	hash: "sha224",
    	id: "302d300d06096086480165030402040500041c"
    };
    var sha256WithRSAEncryption = {
    	sign: "rsa",
    	hash: "sha256",
    	id: "3031300d060960864801650304020105000420"
    };
    var sha384WithRSAEncryption = {
    	sign: "rsa",
    	hash: "sha384",
    	id: "3041300d060960864801650304020205000430"
    };
    var sha512WithRSAEncryption = {
    	sign: "rsa",
    	hash: "sha512",
    	id: "3051300d060960864801650304020305000440"
    };
    var sha256$2 = {
    	sign: "ecdsa",
    	hash: "sha256",
    	id: ""
    };
    var sha224$2 = {
    	sign: "ecdsa",
    	hash: "sha224",
    	id: ""
    };
    var sha384$2 = {
    	sign: "ecdsa",
    	hash: "sha384",
    	id: ""
    };
    var sha512$2 = {
    	sign: "ecdsa",
    	hash: "sha512",
    	id: ""
    };
    var DSA = {
    	sign: "dsa",
    	hash: "sha1",
    	id: ""
    };
    var ripemd160WithRSA = {
    	sign: "rsa",
    	hash: "rmd160",
    	id: "3021300906052b2403020105000414"
    };
    var md5WithRSAEncryption = {
    	sign: "rsa",
    	hash: "md5",
    	id: "3020300c06082a864886f70d020505000410"
    };
    var algorithms = {
    	sha224WithRSAEncryption: sha224WithRSAEncryption,
    	"RSA-SHA224": {
    	sign: "ecdsa/rsa",
    	hash: "sha224",
    	id: "302d300d06096086480165030402040500041c"
    },
    	sha256WithRSAEncryption: sha256WithRSAEncryption,
    	"RSA-SHA256": {
    	sign: "ecdsa/rsa",
    	hash: "sha256",
    	id: "3031300d060960864801650304020105000420"
    },
    	sha384WithRSAEncryption: sha384WithRSAEncryption,
    	"RSA-SHA384": {
    	sign: "ecdsa/rsa",
    	hash: "sha384",
    	id: "3041300d060960864801650304020205000430"
    },
    	sha512WithRSAEncryption: sha512WithRSAEncryption,
    	"RSA-SHA512": {
    	sign: "ecdsa/rsa",
    	hash: "sha512",
    	id: "3051300d060960864801650304020305000440"
    },
    	"RSA-SHA1": {
    	sign: "rsa",
    	hash: "sha1",
    	id: "3021300906052b0e03021a05000414"
    },
    	"ecdsa-with-SHA1": {
    	sign: "ecdsa",
    	hash: "sha1",
    	id: ""
    },
    	sha256: sha256$2,
    	sha224: sha224$2,
    	sha384: sha384$2,
    	sha512: sha512$2,
    	"DSA-SHA": {
    	sign: "dsa",
    	hash: "sha1",
    	id: ""
    },
    	"DSA-SHA1": {
    	sign: "dsa",
    	hash: "sha1",
    	id: ""
    },
    	DSA: DSA,
    	"DSA-WITH-SHA224": {
    	sign: "dsa",
    	hash: "sha224",
    	id: ""
    },
    	"DSA-SHA224": {
    	sign: "dsa",
    	hash: "sha224",
    	id: ""
    },
    	"DSA-WITH-SHA256": {
    	sign: "dsa",
    	hash: "sha256",
    	id: ""
    },
    	"DSA-SHA256": {
    	sign: "dsa",
    	hash: "sha256",
    	id: ""
    },
    	"DSA-WITH-SHA384": {
    	sign: "dsa",
    	hash: "sha384",
    	id: ""
    },
    	"DSA-SHA384": {
    	sign: "dsa",
    	hash: "sha384",
    	id: ""
    },
    	"DSA-WITH-SHA512": {
    	sign: "dsa",
    	hash: "sha512",
    	id: ""
    },
    	"DSA-SHA512": {
    	sign: "dsa",
    	hash: "sha512",
    	id: ""
    },
    	"DSA-RIPEMD160": {
    	sign: "dsa",
    	hash: "rmd160",
    	id: ""
    },
    	ripemd160WithRSA: ripemd160WithRSA,
    	"RSA-RIPEMD160": {
    	sign: "rsa",
    	hash: "rmd160",
    	id: "3021300906052b2403020105000414"
    },
    	md5WithRSAEncryption: md5WithRSAEncryption,
    	"RSA-MD5": {
    	sign: "rsa",
    	hash: "md5",
    	id: "3020300c06082a864886f70d020505000410"
    }
    };

    var algorithms$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sha224WithRSAEncryption: sha224WithRSAEncryption,
        sha256WithRSAEncryption: sha256WithRSAEncryption,
        sha384WithRSAEncryption: sha384WithRSAEncryption,
        sha512WithRSAEncryption: sha512WithRSAEncryption,
        sha256: sha256$2,
        sha224: sha224$2,
        sha384: sha384$2,
        sha512: sha512$2,
        DSA: DSA,
        ripemd160WithRSA: ripemd160WithRSA,
        md5WithRSAEncryption: md5WithRSAEncryption,
        'default': algorithms
    });

    var algorithms$2 = getCjsExportFromNamespace(algorithms$1);

    var algos = algorithms$2;

    var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

    var precondition = function (iterations, keylen) {
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number')
      }

      if (iterations < 0) {
        throw new TypeError('Bad iterations')
      }

      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number')
      }

      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
        throw new TypeError('Bad key length')
      }
    };

    var browser$8 = true;

    var defaultEncoding;
    /* istanbul ignore next */
    {
      defaultEncoding = 'utf-8';
    }
    var defaultEncoding_1 = defaultEncoding;

    var Buffer$r = safeBuffer.Buffer;

    var toBuffer = function (thing, encoding, name) {
      if (Buffer$r.isBuffer(thing)) {
        return thing
      } else if (typeof thing === 'string') {
        return Buffer$r.from(thing, encoding)
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer$r.from(thing.buffer)
      } else {
        throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
      }
    };

    var Buffer$s = safeBuffer.Buffer;





    var ZEROS$2 = Buffer$s.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };

    function Hmac$3 (alg, key, saltLen) {
      var hash = getDigest(alg);
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

      if (key.length > blocksize) {
        key = hash(key);
      } else if (key.length < blocksize) {
        key = Buffer$s.concat([key, ZEROS$2], blocksize);
      }

      var ipad = Buffer$s.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer$s.allocUnsafe(blocksize + sizes[alg]);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }

      var ipad1 = Buffer$s.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash;
      this.size = sizes[alg];
    }

    Hmac$3.prototype.run = function (data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad)
    };

    function getDigest (alg) {
      function shaFunc (data) {
        return sha_js(alg).update(data).digest()
      }
      function rmd160Func (data) {
        return new ripemd160$1().update(data).digest()
      }

      if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
      if (alg === 'md5') return md5$2
      return shaFunc
    }

    function pbkdf2 (password, salt, iterations, keylen, digest) {
      precondition(iterations, keylen);
      password = toBuffer(password, defaultEncoding_1, 'Password');
      salt = toBuffer(salt, defaultEncoding_1, 'Salt');

      digest = digest || 'sha1';

      var hmac = new Hmac$3(digest, password, salt.length);

      var DK = Buffer$s.allocUnsafe(keylen);
      var block1 = Buffer$s.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);

      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);

      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);

        var T = hmac.run(block1, hmac.ipad1);
        var U = T;

        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);
          for (var k = 0; k < hLen; k++) T[k] ^= U[k];
        }

        T.copy(DK, destPos);
        destPos += hLen;
      }

      return DK
    }

    var syncBrowser = pbkdf2;

    var Buffer$t = safeBuffer.Buffer;






    var ZERO_BUF;
    var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
    var toBrowser = {
      sha: 'SHA-1',
      'sha-1': 'SHA-1',
      sha1: 'SHA-1',
      sha256: 'SHA-256',
      'sha-256': 'SHA-256',
      sha384: 'SHA-384',
      'sha-384': 'SHA-384',
      'sha-512': 'SHA-512',
      sha512: 'SHA-512'
    };
    var checks = [];
    function checkNative (algo) {
      if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
        return Promise.resolve(false)
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false)
      }
      if (checks[algo] !== undefined) {
        return checks[algo]
      }
      ZERO_BUF = ZERO_BUF || Buffer$t.alloc(8);
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
        .then(function () {
          return true
        }).catch(function () {
          return false
        });
      checks[algo] = prom;
      return prom
    }

    function browserPbkdf2 (password, salt, iterations, length, algo) {
      return subtle.importKey(
        'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
      ).then(function (key) {
        return subtle.deriveBits({
          name: 'PBKDF2',
          salt: salt,
          iterations: iterations,
          hash: {
            name: algo
          }
        }, key, length << 3)
      }).then(function (res) {
        return Buffer$t.from(res)
      })
    }

    function resolvePromise (promise, callback) {
      promise.then(function (out) {
        nextTick(function () {
          callback(null, out);
        });
      }, function (e) {
        nextTick(function () {
          callback(e);
        });
      });
    }
    var async = function (password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
      }

      digest = digest || 'sha1';
      var algo = toBrowser[digest.toLowerCase()];

      if (!algo || typeof commonjsGlobal.Promise !== 'function') {
        return nextTick(function () {
          var out;
          try {
            out = syncBrowser(password, salt, iterations, keylen, digest);
          } catch (e) {
            return callback(e)
          }
          callback(null, out);
        })
      }

      precondition(iterations, keylen);
      password = toBuffer(password, defaultEncoding_1, 'Password');
      salt = toBuffer(salt, defaultEncoding_1, 'Salt');
      if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

      resolvePromise(checkNative(algo).then(function (resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

        return syncBrowser(password, salt, iterations, keylen, digest)
      }), callback);
    };

    var pbkdf2$1 = async;
    var pbkdf2Sync = syncBrowser;

    var browser$9 = {
    	pbkdf2: pbkdf2$1,
    	pbkdf2Sync: pbkdf2Sync
    };

    var readUInt32BE = function readUInt32BE(bytes, off) {
      var res =  (bytes[0 + off] << 24) |
                 (bytes[1 + off] << 16) |
                 (bytes[2 + off] << 8) |
                 bytes[3 + off];
      return res >>> 0;
    };

    var writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = (value >>> 16) & 0xff;
      bytes[2 + off] = (value >>> 8) & 0xff;
      bytes[3 + off] = value & 0xff;
    };

    var ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      // 7, 15, 23, 31, 39, 47, 55, 63
      // 6, 14, 22, 30, 39, 47, 55, 63
      // 5, 13, 21, 29, 39, 47, 55, 63
      // 4, 12, 20, 28
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }

      // 1, 9, 17, 25, 33, 41, 49, 57
      // 2, 10, 18, 26, 34, 42, 50, 58
      // 3, 11, 19, 27, 35, 43, 51, 59
      // 36, 44, 52, 60
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var r28shl = function r28shl(num, shift) {
      return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
    };

    var pc2table = [
      // inL => outL
      14, 11, 17, 4, 27, 23, 25, 0,
      13, 22, 7, 18, 5, 9, 16, 24,
      2, 20, 12, 21, 1, 8, 15, 26,

      // inR => outR
      15, 4, 25, 19, 9, 1, 26, 16,
      5, 11, 23, 8, 12, 7, 17, 0,
      22, 3, 10, 14, 6, 20, 27, 24
    ];

    var pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= (inL >>> pc2table[i]) & 0x1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= (inR >>> pc2table[i]) & 0x1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;

      outL = ((r & 1) << 5) | (r >>> 27);
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= (r >>> i) & 0x3f;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= (r >>> i) & 0x3f;
        outR <<= 6;
      }
      outR |= ((r & 0x1f) << 1) | (r >>> 31);

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var sTable = [
      14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
      3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
      4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
      15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

      15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
      9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
      0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
      5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

      10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
      1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
      13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
      11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

      7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
      1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
      10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
      15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

      2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
      8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
      4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
      15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

      12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
      0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
      9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
      7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

      4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
      3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
      1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
      10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

      13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
      10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
      7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
      0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
    ];

    var substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = (inL >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[i * 0x40 + b];

        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = (inR >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];

        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };

    var permuteTable = [
      16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
      30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
    ];

    var permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= (num >>> permuteTable[i]) & 0x1;
      }
      return out >>> 0;
    };

    var padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size)
        str = '0' + str;

      var out = [];
      for (var i = 0; i < size; i += group)
        out.push(str.slice(i, i + group));
      return out.join(' ');
    };

    var utils$3 = {
    	readUInt32BE: readUInt32BE,
    	writeUInt32BE: writeUInt32BE,
    	ip: ip,
    	rip: rip,
    	pc1: pc1,
    	r28shl: r28shl,
    	pc2: pc2,
    	expand: expand,
    	substitute: substitute,
    	permute: permute,
    	padSplit: padSplit
    };

    function Cipher(options) {
      this.options = options;

      this.type = this.options.type;
      this.blockSize = 8;
      this._init();

      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    var cipher = Cipher;

    Cipher.prototype._init = function _init() {
      // Might be overrided
    };

    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];

      if (this.type === 'decrypt')
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };

    Cipher.prototype._buffer = function _buffer(data, off) {
      // Append data to buffer
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;

      // Shift next
      return min;
    };

    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };

    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;

      var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
      var out = new Array(count * this.blockSize);

      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);

        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }

      // Write blocks
      var max = data.length - ((data.length - inputOff) % this.blockSize);
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }

      // Queue rest
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];

      return out;
    };

    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;

      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);

      // TODO(indutny): optimize it, this is far from optimal
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }

      // Buffer rest of the input
      inputOff += this._buffer(data, inputOff);

      return out;
    };

    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);

      var last;
      if (this.type === 'encrypt')
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();

      if (first)
        return first.concat(last);
      else
        return last;
    };

    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;

      while (off < buffer.length)
        buffer[off++] = 0;

      return true;
    };

    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];

      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };

    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };

    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      minimalisticAssert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);

      return this._unpad(out);
    };

    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }

    function DES(options) {
      cipher.call(this, options);

      var state = new DESState();
      this._desState = state;

      this.deriveKeys(state, options.key);
    }
    inherits_browser$1(DES, cipher);
    var des = DES;

    DES.create = function create(options) {
      return new DES(options);
    };

    var shiftTable = [
      1, 1, 2, 2, 2, 2, 2, 2,
      1, 2, 2, 2, 2, 2, 2, 1
    ];

    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);

      minimalisticAssert.equal(key.length, this.blockSize, 'Invalid key length');

      var kL = utils$3.readUInt32BE(key, 0);
      var kR = utils$3.readUInt32BE(key, 4);

      utils$3.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils$3.r28shl(kL, shift);
        kR = utils$3.r28shl(kR, shift);
        utils$3.pc2(kL, kR, state.keys, i);
      }
    };

    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;

      var l = utils$3.readUInt32BE(inp, inOff);
      var r = utils$3.readUInt32BE(inp, inOff + 4);

      // Initial Permutation
      utils$3.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];

      if (this.type === 'encrypt')
        this._encrypt(state, l, r, state.tmp, 0);
      else
        this._decrypt(state, l, r, state.tmp, 0);

      l = state.tmp[0];
      r = state.tmp[1];

      utils$3.writeUInt32BE(out, l, outOff);
      utils$3.writeUInt32BE(out, r, outOff + 4);
    };

    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++)
        buffer[i] = value;

      return true;
    };

    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++)
        minimalisticAssert.equal(buffer[i], pad);

      return buffer.slice(0, buffer.length - pad);
    };

    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;

      // Apply f() x16 times
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];

        // f(r, k)
        utils$3.expand(r, state.tmp, 0);

        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils$3.substitute(keyL, keyR);
        var f = utils$3.permute(s);

        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }

      // Reverse Initial Permutation
      utils$3.rip(r, l, out, off);
    };

    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;

      // Apply f() x16 times
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];

        // f(r, k)
        utils$3.expand(l, state.tmp, 0);

        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils$3.substitute(keyL, keyR);
        var f = utils$3.permute(s);

        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }

      // Reverse Initial Permutation
      utils$3.rip(l, r, out, off);
    };

    var proto$1 = {};

    function CBCState(iv) {
      minimalisticAssert.equal(iv.length, 8, 'Invalid IV length');

      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++)
        this.iv[i] = iv[i];
    }

    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits_browser$1(CBC, Base);

      var keys = Object.keys(proto$1);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto$1[key];
      }

      CBC.create = function create(options) {
        return new CBC(options);
      };

      return CBC;
    }

    var instantiate_1 = instantiate;

    proto$1._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };

    proto$1._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;

      var iv = state.iv;
      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++)
          iv[i] ^= inp[inOff + i];

        superProto._update.call(this, iv, 0, out, outOff);

        for (var i = 0; i < this.blockSize; i++)
          iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);

        for (var i = 0; i < this.blockSize; i++)
          out[outOff + i] ^= iv[i];

        for (var i = 0; i < this.blockSize; i++)
          iv[i] = inp[inOff + i];
      }
    };

    var cbc = {
    	instantiate: instantiate_1
    };

    function EDEState(type, key) {
      minimalisticAssert.equal(key.length, 24, 'Invalid key length');

      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);

      if (type === 'encrypt') {
        this.ciphers = [
          des.create({ type: 'encrypt', key: k1 }),
          des.create({ type: 'decrypt', key: k2 }),
          des.create({ type: 'encrypt', key: k3 })
        ];
      } else {
        this.ciphers = [
          des.create({ type: 'decrypt', key: k3 }),
          des.create({ type: 'encrypt', key: k2 }),
          des.create({ type: 'decrypt', key: k1 })
        ];
      }
    }

    function EDE(options) {
      cipher.call(this, options);

      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits_browser$1(EDE, cipher);

    var ede = EDE;

    EDE.create = function create(options) {
      return new EDE(options);
    };

    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;

      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };

    EDE.prototype._pad = des.prototype._pad;
    EDE.prototype._unpad = des.prototype._unpad;

    var utils$4 = utils$3;
    var Cipher$1 = cipher;
    var DES$1 = des;
    var CBC = cbc;
    var EDE$1 = ede;

    var des$1 = {
    	utils: utils$4,
    	Cipher: Cipher$1,
    	DES: DES$1,
    	CBC: CBC,
    	EDE: EDE$1
    };

    var Buffer$u = safeBuffer.Buffer;

    var modes = {
      'des-ede3-cbc': des$1.CBC.instantiate(des$1.EDE),
      'des-ede3': des$1.EDE,
      'des-ede-cbc': des$1.CBC.instantiate(des$1.EDE),
      'des-ede': des$1.EDE,
      'des-cbc': des$1.CBC.instantiate(des$1.DES),
      'des-ecb': des$1.DES
    };
    modes.des = modes['des-cbc'];
    modes.des3 = modes['des-ede3-cbc'];
    var browserifyDes = DES$2;
    inherits_browser$1(DES$2, cipherBase);
    function DES$2 (opts) {
      cipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes[modeName];
      var type;
      if (opts.decrypt) {
        type = 'decrypt';
      } else {
        type = 'encrypt';
      }
      var key = opts.key;
      if (!Buffer$u.isBuffer(key)) {
        key = Buffer$u.from(key);
      }
      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer$u.concat([key, key.slice(0, 8)]);
      }
      var iv = opts.iv;
      if (!Buffer$u.isBuffer(iv)) {
        iv = Buffer$u.from(iv);
      }
      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      });
    }
    DES$2.prototype._update = function (data) {
      return Buffer$u.from(this._des.update(data))
    };
    DES$2.prototype._final = function () {
      return Buffer$u.from(this._des.final())
    };

    var encrypt = function (self, block) {
      return self._cipher.encryptBlock(block)
    };

    var decrypt = function (self, block) {
      return self._cipher.decryptBlock(block)
    };

    var ecb = {
    	encrypt: encrypt,
    	decrypt: decrypt
    };

    var bufferXor = function xor (a, b) {
      var length = Math.min(a.length, b.length);
      var buffer = new Buffer(length);

      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i];
      }

      return buffer
    };

    var encrypt$1 = function (self, block) {
      var data = bufferXor(block, self._prev);

      self._prev = self._cipher.encryptBlock(data);
      return self._prev
    };

    var decrypt$1 = function (self, block) {
      var pad = self._prev;

      self._prev = block;
      var out = self._cipher.decryptBlock(block);

      return bufferXor(out, pad)
    };

    var cbc$1 = {
    	encrypt: encrypt$1,
    	decrypt: decrypt$1
    };

    var Buffer$v = safeBuffer.Buffer;


    function encryptStart (self, data, decrypt) {
      var len = data.length;
      var out = bufferXor(data, self._cache);
      self._cache = self._cache.slice(len);
      self._prev = Buffer$v.concat([self._prev, decrypt ? data : out]);
      return out
    }

    var encrypt$2 = function (self, data, decrypt) {
      var out = Buffer$v.allocUnsafe(0);
      var len;

      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev);
          self._prev = Buffer$v.allocUnsafe(0);
        }

        if (self._cache.length <= data.length) {
          len = self._cache.length;
          out = Buffer$v.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
          data = data.slice(len);
        } else {
          out = Buffer$v.concat([out, encryptStart(self, data, decrypt)]);
          break
        }
      }

      return out
    };

    var cfb = {
    	encrypt: encrypt$2
    };

    var Buffer$w = safeBuffer.Buffer;

    function encryptByte (self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev);
      var out = pad[0] ^ byteParam;

      self._prev = Buffer$w.concat([
        self._prev.slice(1),
        Buffer$w.from([decrypt ? byteParam : out])
      ]);

      return out
    }

    var encrypt$3 = function (self, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer$w.allocUnsafe(len);
      var i = -1;

      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }

      return out
    };

    var cfb8 = {
    	encrypt: encrypt$3
    };

    var Buffer$x = safeBuffer.Buffer;

    function encryptByte$1 (self, byteParam, decrypt) {
      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit, value;
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev);
        bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += ((value & 0x80) >> (i % 8));
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
      }
      return out
    }

    function shiftIn (buffer, value) {
      var len = buffer.length;
      var i = -1;
      var out = Buffer$x.allocUnsafe(buffer.length);
      buffer = Buffer$x.concat([buffer, Buffer$x.from([value])]);

      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> (7);
      }

      return out
    }

    var encrypt$4 = function (self, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer$x.allocUnsafe(len);
      var i = -1;

      while (++i < len) {
        out[i] = encryptByte$1(self, chunk[i], decrypt);
      }

      return out
    };

    var cfb1 = {
    	encrypt: encrypt$4
    };

    function getBlock (self) {
      self._prev = self._cipher.encryptBlock(self._prev);
      return self._prev
    }

    var encrypt$5 = function (self, chunk) {
      while (self._cache.length < chunk.length) {
        self._cache = Buffer.concat([self._cache, getBlock(self)]);
      }

      var pad = self._cache.slice(0, chunk.length);
      self._cache = self._cache.slice(chunk.length);
      return bufferXor(chunk, pad)
    };

    var ofb = {
    	encrypt: encrypt$5
    };

    function incr32 (iv) {
      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break
        }
      }
    }
    var incr32_1 = incr32;

    var Buffer$y = safeBuffer.Buffer;


    function getBlock$1 (self) {
      var out = self._cipher.encryptBlockRaw(self._prev);
      incr32_1(self._prev);
      return out
    }

    var blockSize = 16;
    var encrypt$6 = function (self, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self._cache.length;
      self._cache = Buffer$y.concat([
        self._cache,
        Buffer$y.allocUnsafe(chunkNum * blockSize)
      ]);
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock$1(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self._cache.slice(0, chunk.length);
      self._cache = self._cache.slice(chunk.length);
      return bufferXor(chunk, pad)
    };

    var ctr = {
    	encrypt: encrypt$6
    };

    var aes128 = {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "CBC",
    	type: "block"
    };
    var aes192 = {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "CBC",
    	type: "block"
    };
    var aes256 = {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "CBC",
    	type: "block"
    };
    var list = {
    	"aes-128-ecb": {
    	cipher: "AES",
    	key: 128,
    	iv: 0,
    	mode: "ECB",
    	type: "block"
    },
    	"aes-192-ecb": {
    	cipher: "AES",
    	key: 192,
    	iv: 0,
    	mode: "ECB",
    	type: "block"
    },
    	"aes-256-ecb": {
    	cipher: "AES",
    	key: 256,
    	iv: 0,
    	mode: "ECB",
    	type: "block"
    },
    	"aes-128-cbc": {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "CBC",
    	type: "block"
    },
    	"aes-192-cbc": {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "CBC",
    	type: "block"
    },
    	"aes-256-cbc": {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "CBC",
    	type: "block"
    },
    	aes128: aes128,
    	aes192: aes192,
    	aes256: aes256,
    	"aes-128-cfb": {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "CFB",
    	type: "stream"
    },
    	"aes-192-cfb": {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "CFB",
    	type: "stream"
    },
    	"aes-256-cfb": {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "CFB",
    	type: "stream"
    },
    	"aes-128-cfb8": {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "CFB8",
    	type: "stream"
    },
    	"aes-192-cfb8": {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "CFB8",
    	type: "stream"
    },
    	"aes-256-cfb8": {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "CFB8",
    	type: "stream"
    },
    	"aes-128-cfb1": {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "CFB1",
    	type: "stream"
    },
    	"aes-192-cfb1": {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "CFB1",
    	type: "stream"
    },
    	"aes-256-cfb1": {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "CFB1",
    	type: "stream"
    },
    	"aes-128-ofb": {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "OFB",
    	type: "stream"
    },
    	"aes-192-ofb": {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "OFB",
    	type: "stream"
    },
    	"aes-256-ofb": {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "OFB",
    	type: "stream"
    },
    	"aes-128-ctr": {
    	cipher: "AES",
    	key: 128,
    	iv: 16,
    	mode: "CTR",
    	type: "stream"
    },
    	"aes-192-ctr": {
    	cipher: "AES",
    	key: 192,
    	iv: 16,
    	mode: "CTR",
    	type: "stream"
    },
    	"aes-256-ctr": {
    	cipher: "AES",
    	key: 256,
    	iv: 16,
    	mode: "CTR",
    	type: "stream"
    },
    	"aes-128-gcm": {
    	cipher: "AES",
    	key: 128,
    	iv: 12,
    	mode: "GCM",
    	type: "auth"
    },
    	"aes-192-gcm": {
    	cipher: "AES",
    	key: 192,
    	iv: 12,
    	mode: "GCM",
    	type: "auth"
    },
    	"aes-256-gcm": {
    	cipher: "AES",
    	key: 256,
    	iv: 12,
    	mode: "GCM",
    	type: "auth"
    }
    };

    var list$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        aes128: aes128,
        aes192: aes192,
        aes256: aes256,
        'default': list
    });

    var modes$1 = getCjsExportFromNamespace(list$1);

    var modeModules = {
      ECB: ecb,
      CBC: cbc$1,
      CFB: cfb,
      CFB8: cfb8,
      CFB1: cfb1,
      OFB: ofb,
      CTR: ctr,
      GCM: ctr
    };



    for (var key$2 in modes$1) {
      modes$1[key$2].module = modeModules[modes$1[key$2].mode];
    }

    var modes_1 = modes$1;

    // based on the aes implimentation in triple sec
    // https://github.com/keybase/triplesec
    // which is in turn based on the one from crypto-js
    // https://code.google.com/p/crypto-js/

    var Buffer$z = safeBuffer.Buffer;

    function asUInt32Array (buf) {
      if (!Buffer$z.isBuffer(buf)) buf = Buffer$z.from(buf);

      var len = (buf.length / 4) | 0;
      var out = new Array(len);

      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4);
      }

      return out
    }

    function scrubVec (v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0;
      }
    }

    function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];

      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;

      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }

      t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
      t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
      t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
      t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t2 = t2 >>> 0;
      t3 = t3 >>> 0;

      return [t0, t1, t2, t3]
    }

    // AES constants
    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    var G = (function () {
      // Compute double table
      var d = new Array(256);
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1;
        } else {
          d[j] = (j << 1) ^ 0x11b;
        }
      }

      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [[], [], [], []];
      var INV_SUB_MIX = [[], [], [], []];

      // Walk GF(2^8)
      var x = 0;
      var xi = 0;
      for (var i = 0; i < 256; ++i) {
        // Compute sbox
        var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;

        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];

        // Compute sub bytes, mix columns tables
        var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
        SUB_MIX[0][x] = (t << 24) | (t >>> 8);
        SUB_MIX[1][x] = (t << 16) | (t >>> 16);
        SUB_MIX[2][x] = (t << 8) | (t >>> 24);
        SUB_MIX[3][x] = t;

        // Compute inv sub bytes, inv mix columns tables
        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
        INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
        INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
        INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
        INV_SUB_MIX[3][sx] = t;

        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }

      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      }
    })();

    function AES (key) {
      this._key = asUInt32Array(key);
      this._reset();
    }

    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function () {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;

      var keySchedule = [];
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k];
      }

      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1];

        if (k % keySize === 0) {
          t = (t << 8) | (t >>> 24);
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff]);

          t ^= RCON[(k / keySize) | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) {
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff]);
        }

        keySchedule[k] = keySchedule[k - keySize] ^ t;
      }

      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt;
        } else {
          invKeySchedule[ik] =
            G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
            G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
            G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
            G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
        }
      }

      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };

    AES.prototype.encryptBlockRaw = function (M) {
      M = asUInt32Array(M);
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
    };

    AES.prototype.encryptBlock = function (M) {
      var out = this.encryptBlockRaw(M);
      var buf = Buffer$z.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf
    };

    AES.prototype.decryptBlock = function (M) {
      M = asUInt32Array(M);

      // swap
      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;

      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer$z.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf
    };

    AES.prototype.scrub = function () {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };

    var AES_1 = AES;

    var aes = {
    	AES: AES_1
    };

    var Buffer$A = safeBuffer.Buffer;
    var ZEROES = Buffer$A.alloc(16, 0);

    function toArray$2 (buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ]
    }

    function fromArray$1 (out) {
      var buf = Buffer$A.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf
    }

    function GHASH (key) {
      this.h = key;
      this.state = Buffer$A.alloc(16, 0);
      this.cache = Buffer$A.allocUnsafe(0);
    }

    // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
    // by Juho Vähä-Herttua
    GHASH.prototype.ghash = function (block) {
      var i = -1;
      while (++i < block.length) {
        this.state[i] ^= block[i];
      }
      this._multiply();
    };

    GHASH.prototype._multiply = function () {
      var Vi = toArray$2(this.h);
      var Zi = [0, 0, 0, 0];
      var j, xi, lsbVi;
      var i = -1;
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0;
        if (xi) {
          // Z_i+1 = Z_i ^ V_i
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        }

        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;

        // V_i+1 = V_i >> 1
        for (j = 3; j > 0; j--) {
          Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
        }
        Vi[0] = Vi[0] >>> 1;

        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) {
          Vi[0] = Vi[0] ^ (0xe1 << 24);
        }
      }
      this.state = fromArray$1(Zi);
    };

    GHASH.prototype.update = function (buf) {
      this.cache = Buffer$A.concat([this.cache, buf]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };

    GHASH.prototype.final = function (abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer$A.concat([this.cache, ZEROES], 16));
      }

      this.ghash(fromArray$1([0, abl, 0, bl]));
      return this.state
    };

    var ghash = GHASH;

    var Buffer$B = safeBuffer.Buffer;






    function xorTest (a, b) {
      var out = 0;
      if (a.length !== b.length) out++;

      var len = Math.min(a.length, b.length);
      for (var i = 0; i < len; ++i) {
        out += (a[i] ^ b[i]);
      }

      return out
    }

    function calcIv (self, iv, ck) {
      if (iv.length === 12) {
        self._finID = Buffer$B.concat([iv, Buffer$B.from([0, 0, 0, 1])]);
        return Buffer$B.concat([iv, Buffer$B.from([0, 0, 0, 2])])
      }
      var ghash$1 = new ghash(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash$1.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash$1.update(Buffer$B.alloc(toPad, 0));
      }
      ghash$1.update(Buffer$B.alloc(8, 0));
      var ivBits = len * 8;
      var tail = Buffer$B.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash$1.update(tail);
      self._finID = ghash$1.state;
      var out = Buffer$B.from(self._finID);
      incr32_1(out);
      return out
    }
    function StreamCipher (mode, key, iv, decrypt) {
      cipherBase.call(this);

      var h = Buffer$B.alloc(4, 0);

      this._cipher = new aes.AES(key);
      var ck = this._cipher.encryptBlock(h);
      this._ghash = new ghash(ck);
      iv = calcIv(this, iv, ck);

      this._prev = Buffer$B.from(iv);
      this._cache = Buffer$B.allocUnsafe(0);
      this._secCache = Buffer$B.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;

      this._authTag = null;
      this._called = false;
    }

    inherits_browser$1(StreamCipher, cipherBase);

    StreamCipher.prototype._update = function (chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - (this._alen % 16);
        if (rump < 16) {
          rump = Buffer$B.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }

      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
      return out
    };

    StreamCipher.prototype._final = function () {
      if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

      var tag = bufferXor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

      this._authTag = tag;
      this._cipher.scrub();
    };

    StreamCipher.prototype.getAuthTag = function getAuthTag () {
      if (this._decrypt || !Buffer$B.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

      return this._authTag
    };

    StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
      if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

      this._authTag = tag;
    };

    StreamCipher.prototype.setAAD = function setAAD (buf) {
      if (this._called) throw new Error('Attempting to set AAD in unsupported state')

      this._ghash.update(buf);
      this._alen += buf.length;
    };

    var authCipher = StreamCipher;

    var Buffer$C = safeBuffer.Buffer;



    function StreamCipher$1 (mode, key, iv, decrypt) {
      cipherBase.call(this);

      this._cipher = new aes.AES(key);
      this._prev = Buffer$C.from(iv);
      this._cache = Buffer$C.allocUnsafe(0);
      this._secCache = Buffer$C.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
    }

    inherits_browser$1(StreamCipher$1, cipherBase);

    StreamCipher$1.prototype._update = function (chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt)
    };

    StreamCipher$1.prototype._final = function () {
      this._cipher.scrub();
    };

    var streamCipher = StreamCipher$1;

    var Buffer$D = safeBuffer.Buffer;


    /* eslint-disable camelcase */
    function EVP_BytesToKey (password, salt, keyBits, ivLen) {
      if (!Buffer$D.isBuffer(password)) password = Buffer$D.from(password, 'binary');
      if (salt) {
        if (!Buffer$D.isBuffer(salt)) salt = Buffer$D.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
      }

      var keyLen = keyBits / 8;
      var key = Buffer$D.alloc(keyLen);
      var iv = Buffer$D.alloc(ivLen || 0);
      var tmp = Buffer$D.alloc(0);

      while (keyLen > 0 || ivLen > 0) {
        var hash = new md5_js();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();

        var used = 0;

        if (keyLen > 0) {
          var keyStart = key.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key, keyStart, 0, used);
          keyLen -= used;
        }

        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }

      tmp.fill(0);
      return { key: key, iv: iv }
    }

    var evp_bytestokey = EVP_BytesToKey;

    var Buffer$E = safeBuffer.Buffer;






    function Cipher$2 (mode, key, iv) {
      cipherBase.call(this);

      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = Buffer$E.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }

    inherits_browser$1(Cipher$2, cipherBase);

    Cipher$2.prototype._update = function (data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];

      while ((chunk = this._cache.get())) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }

      return Buffer$E.concat(out)
    };

    var PADDING = Buffer$E.alloc(16, 0x10);

    Cipher$2.prototype._final = function () {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk
      }

      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length')
      }
    };

    Cipher$2.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo;
      return this
    };

    function Splitter () {
      this.cache = Buffer$E.allocUnsafe(0);
    }

    Splitter.prototype.add = function (data) {
      this.cache = Buffer$E.concat([this.cache, data]);
    };

    Splitter.prototype.get = function () {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
      return null
    };

    Splitter.prototype.flush = function () {
      var len = 16 - this.cache.length;
      var padBuff = Buffer$E.allocUnsafe(len);

      var i = -1;
      while (++i < len) {
        padBuff.writeUInt8(len, i);
      }

      return Buffer$E.concat([this.cache, padBuff])
    };

    function createCipheriv (suite, password, iv) {
      var config = modes_1[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type')

      if (typeof password === 'string') password = Buffer$E.from(password);
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

      if (typeof iv === 'string') iv = Buffer$E.from(iv);
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

      if (config.type === 'stream') {
        return new streamCipher(config.module, password, iv)
      } else if (config.type === 'auth') {
        return new authCipher(config.module, password, iv)
      }

      return new Cipher$2(config.module, password, iv)
    }

    function createCipher (suite, password) {
      var config = modes_1[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type')

      var keys = evp_bytestokey(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv)
    }

    var createCipheriv_1 = createCipheriv;
    var createCipher_1 = createCipher;

    var encrypter = {
    	createCipheriv: createCipheriv_1,
    	createCipher: createCipher_1
    };

    var Buffer$F = safeBuffer.Buffer;







    function Decipher (mode, key, iv) {
      cipherBase.call(this);

      this._cache = new Splitter$1();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = Buffer$F.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }

    inherits_browser$1(Decipher, cipherBase);

    Decipher.prototype._update = function (data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while ((chunk = this._cache.get(this._autopadding))) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer$F.concat(out)
    };

    Decipher.prototype._final = function () {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk))
      } else if (chunk) {
        throw new Error('data not multiple of block length')
      }
    };

    Decipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo;
      return this
    };

    function Splitter$1 () {
      this.cache = Buffer$F.allocUnsafe(0);
    }

    Splitter$1.prototype.add = function (data) {
      this.cache = Buffer$F.concat([this.cache, data]);
    };

    Splitter$1.prototype.get = function (autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out
        }
      }

      return null
    };

    Splitter$1.prototype.flush = function () {
      if (this.cache.length) return this.cache
    };

    function unpad (last) {
      var padded = last[15];
      if (padded < 1 || padded > 16) {
        throw new Error('unable to decrypt data')
      }
      var i = -1;
      while (++i < padded) {
        if (last[(i + (16 - padded))] !== padded) {
          throw new Error('unable to decrypt data')
        }
      }
      if (padded === 16) return

      return last.slice(0, 16 - padded)
    }

    function createDecipheriv (suite, password, iv) {
      var config = modes_1[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type')

      if (typeof iv === 'string') iv = Buffer$F.from(iv);
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

      if (typeof password === 'string') password = Buffer$F.from(password);
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

      if (config.type === 'stream') {
        return new streamCipher(config.module, password, iv, true)
      } else if (config.type === 'auth') {
        return new authCipher(config.module, password, iv, true)
      }

      return new Decipher(config.module, password, iv)
    }

    function createDecipher (suite, password) {
      var config = modes_1[suite.toLowerCase()];
      if (!config) throw new TypeError('invalid suite type')

      var keys = evp_bytestokey(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv)
    }

    var createDecipher_1 = createDecipher;
    var createDecipheriv_1 = createDecipheriv;

    var decrypter = {
    	createDecipher: createDecipher_1,
    	createDecipheriv: createDecipheriv_1
    };

    var browser$a = createCommonjsModule(function (module, exports) {
    function getCiphers () {
      return Object.keys(modes$1)
    }

    exports.createCipher = exports.Cipher = encrypter.createCipher;
    exports.createCipheriv = exports.Cipheriv = encrypter.createCipheriv;
    exports.createDecipher = exports.Decipher = decrypter.createDecipher;
    exports.createDecipheriv = exports.Decipheriv = decrypter.createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
    });

    var modes$2 = createCommonjsModule(function (module, exports) {
    exports['des-ecb'] = {
      key: 8,
      iv: 0
    };
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    };
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    };
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    };
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    };
    exports['des-ede'] = {
      key: 16,
      iv: 0
    };
    });

    var browser$b = createCommonjsModule(function (module, exports) {
    function createCipher (suite, password) {
      suite = suite.toLowerCase();

      var keyLen, ivLen;
      if (modes_1[suite]) {
        keyLen = modes_1[suite].key;
        ivLen = modes_1[suite].iv;
      } else if (modes$2[suite]) {
        keyLen = modes$2[suite].key * 8;
        ivLen = modes$2[suite].iv;
      } else {
        throw new TypeError('invalid suite type')
      }

      var keys = evp_bytestokey(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv)
    }

    function createDecipher (suite, password) {
      suite = suite.toLowerCase();

      var keyLen, ivLen;
      if (modes_1[suite]) {
        keyLen = modes_1[suite].key;
        ivLen = modes_1[suite].iv;
      } else if (modes$2[suite]) {
        keyLen = modes$2[suite].key * 8;
        ivLen = modes$2[suite].iv;
      } else {
        throw new TypeError('invalid suite type')
      }

      var keys = evp_bytestokey(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv)
    }

    function createCipheriv (suite, key, iv) {
      suite = suite.toLowerCase();
      if (modes_1[suite]) return browser$a.createCipheriv(suite, key, iv)
      if (modes$2[suite]) return new browserifyDes({ key: key, iv: iv, mode: suite })

      throw new TypeError('invalid suite type')
    }

    function createDecipheriv (suite, key, iv) {
      suite = suite.toLowerCase();
      if (modes_1[suite]) return browser$a.createDecipheriv(suite, key, iv)
      if (modes$2[suite]) return new browserifyDes({ key: key, iv: iv, mode: suite, decrypt: true })

      throw new TypeError('invalid suite type')
    }

    function getCiphers () {
      return Object.keys(modes$2).concat(browser$a.getCiphers())
    }

    exports.createCipher = exports.Cipher = createCipher;
    exports.createCipheriv = exports.Cipheriv = createCipheriv;
    exports.createDecipher = exports.Decipher = createDecipher;
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
    });

    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    var mr = MillerRabin;

    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };

    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);

      // Generage random bytes until a number less than n is found.
      // This ensures that 0..n-1 have an equal probability of being selected.
      do
        var a = new bn$2(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);

      return a;
    };

    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      // Generate a random number greater than or equal to start and less than stop.
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };

    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn$2.mont(n);
      var rone = new bn$2(1).toRed(red);

      if (!k)
        k = Math.max(1, (len / 48) | 0);

      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);

      var rn1 = n1.toRed(red);

      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn$2(2), n1);
        if (cb)
          cb(a);

        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();

          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }

        if (i === s)
          return false;
      }

      return prime;
    };

    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn$2.mont(n);
      var rone = new bn$2(1).toRed(red);

      if (!k)
        k = Math.max(1, (len / 48) | 0);

      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);

      var rn1 = n1.toRed(red);

      for (; k > 0; k--) {
        var a = this._randrange(new bn$2(2), n1);

        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;

        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();

          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }

        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }

      return false;
    };

    var generatePrime = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;

    var TWENTYFOUR = new bn$2(24);

    var millerRabin = new mr();
    var ONE$1 = new bn$2(1);
    var TWO = new bn$2(2);
    var FIVE = new bn$2(5);
    var SIXTEEN = new bn$2(16);
    var EIGHT = new bn$2(8);
    var TEN = new bn$2(10);
    var THREE = new bn$2(3);
    var SEVEN = new bn$2(7);
    var ELEVEN = new bn$2(11);
    var FOUR = new bn$2(4);
    var TWELVE = new bn$2(12);
    var primes = null;

    function _getPrimes() {
      if (primes !== null)
        return primes;

      var limit = 0x100000;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;

        if (i !== j && res[j] <= sqrt)
          continue;

        res[i++] = k;
      }
      primes = res;
      return res;
    }

    function simpleSieve(p) {
      var primes = _getPrimes();

      for (var i = 0; i < primes.length; i++)
        if (p.modn(primes[i]) === 0) {
          if (p.cmpn(primes[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }

      return true;
    }

    function fermatTest(p) {
      var red = bn$2.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }

    function findPrime(bits, gen) {
      if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) {
          return new bn$2([0x8c, 0x7b]);
        } else {
          return new bn$2([0x8c, 0x27]);
        }
      }
      gen = new bn$2(gen);

      var num, n2;

      while (true) {
        num = new bn$2(browser$1(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE$1);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) &&
          fermatTest(n2) && fermatTest(num) &&
          millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }

    }

    var modp1 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    };
    var modp2 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    };
    var modp5 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    };
    var modp14 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    };
    var modp15 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    };
    var modp16 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    };
    var modp17 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    };
    var modp18 = {
    	gen: "02",
    	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    };
    var primes$1 = {
    	modp1: modp1,
    	modp2: modp2,
    	modp5: modp5,
    	modp14: modp14,
    	modp15: modp15,
    	modp16: modp16,
    	modp17: modp17,
    	modp18: modp18
    };

    var primes$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        modp1: modp1,
        modp2: modp2,
        modp5: modp5,
        modp14: modp14,
        modp15: modp15,
        modp16: modp16,
        modp17: modp17,
        modp18: modp18,
        'default': primes$1
    });

    var millerRabin$1 = new mr();
    var TWENTYFOUR$1 = new bn$2(24);
    var ELEVEN$1 = new bn$2(11);
    var TEN$1 = new bn$2(10);
    var THREE$1 = new bn$2(3);
    var SEVEN$1 = new bn$2(7);


    var dh = DH;

    function setPublicKey(pub, enc) {
      enc = enc || 'utf8';
      if (!isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new bn$2(pub);
      return this;
    }

    function setPrivateKey(priv, enc) {
      enc = enc || 'utf8';
      if (!isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new bn$2(priv);
      return this;
    }

    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString('hex');
      var hex = [gen, prime.toString(16)].join('_');
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;

      if (prime.isEven() ||
        !generatePrime.simpleSieve ||
        !generatePrime.fermatTest(prime) ||
        !millerRabin$1.test(prime)) {
        //not a prime so +1
        error += 1;

        if (gen === '02' || gen === '05') {
          // we'd be able to check the generator
          // it would fail so +8
          error += 8;
        } else {
          //we wouldn't be able to test the generator
          // so +4
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin$1.test(prime.shrn(1))) {
        //not a safe prime
        error += 2;
      }
      var rem;
      switch (gen) {
        case '02':
          if (prime.mod(TWENTYFOUR$1).cmp(ELEVEN$1)) {
            // unsuidable generator
            error += 8;
          }
          break;
        case '05':
          rem = prime.mod(TEN$1);
          if (rem.cmp(THREE$1) && rem.cmp(SEVEN$1)) {
            // prime mod 10 needs to equal 3 or 7
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }

    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new bn$2(prime);
      this._prime = bn$2.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = undefined;
      this._priv = undefined;
      this._primeCode = undefined;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, 'verifyError', {
      enumerable: true,
      get: function () {
        if (typeof this._primeCode !== 'number') {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function () {
      if (!this._priv) {
        this._priv = new bn$2(browser$1(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };

    DH.prototype.computeSecret = function (other) {
      other = new bn$2(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([front, out]);
      }
      return out;
    };

    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };

    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };

    DH.prototype.getPrime = function (enc) {
      return formatReturnValue(this.__prime, enc);
    };

    DH.prototype.getGenerator = function (enc) {
      return formatReturnValue(this._gen, enc);
    };

    DH.prototype.setGenerator = function (gen, enc) {
      enc = enc || 'utf8';
      if (!isBuffer(gen)) {
        gen = new Buffer(gen, enc);
      }
      this.__gen = gen;
      this._gen = new bn$2(gen);
      return this;
    };

    function formatReturnValue(bn, enc) {
      var buf = new Buffer(bn.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }

    var primes$3 = getCjsExportFromNamespace(primes$2);

    var browser$c = createCommonjsModule(function (module, exports) {
    function getDiffieHellman (mod) {
      var prime = new Buffer(primes$3[mod].prime, 'hex');
      var gen = new Buffer(primes$3[mod].gen, 'hex');

      return new dh(prime, gen)
    }

    var ENCODINGS = {
      'binary': true, 'hex': true, 'base64': true
    };

    function createDiffieHellman (prime, enc, generator, genc) {
      if (isBuffer(enc) || ENCODINGS[enc] === undefined) {
        return createDiffieHellman(prime, 'binary', enc, generator)
      }

      enc = enc || 'binary';
      genc = genc || 'binary';
      generator = generator || new Buffer([2]);

      if (!isBuffer(generator)) {
        generator = new Buffer(generator, genc);
      }

      if (typeof prime === 'number') {
        return new dh(generatePrime(prime, generator), generator, true)
      }

      if (!isBuffer(prime)) {
        prime = new Buffer(prime, enc);
      }

      return new dh(prime, generator, true)
    }

    exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
    exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
    });

    var streamBrowser$1 = events.EventEmitter;

    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

    var Buffer$G = buffer.Buffer;

    var inspect$1 = require$$0.inspect;

    var custom$1 = inspect$1 && inspect$1.custom || 'inspect';

    function copyBuffer$1(src, target, offset) {
      Buffer$G.prototype.copy.call(src, target, offset);
    }

    var buffer_list$1 =
    /*#__PURE__*/
    function () {
      function BufferList() {
        _classCallCheck$1(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      _createClass$1(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;

          while (p = p.next) {
            ret += s + p.data;
          }

          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer$G.alloc(0);
          var ret = Buffer$G.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;

          while (p) {
            copyBuffer$1(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }

          return ret;
        } // Consumes a specified amount of bytes or characters from the buffered data.

      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;

          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }

          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        } // Consumes a specified amount of characters from the buffered data.

      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Consumes a specified amount of bytes from the buffered data.

      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer$G.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Make sure the linked list only shows the minimal necessary information.

      }, {
        key: custom$1,
        value: function value(_, options) {
          return inspect$1(this, _objectSpread$1({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);

      return BufferList;
    }();

    function destroy$1(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            nextTick(emitErrorNT$1, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            nextTick(emitErrorNT$1, this, err);
          }
        }

        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks


      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well


      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            nextTick(emitErrorAndCloseNT$1, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            nextTick(emitErrorAndCloseNT$1, _this, err);
          } else {
            nextTick(emitCloseNT$1, _this);
          }
        } else if (cb) {
          nextTick(emitCloseNT$1, _this);
          cb(err);
        } else {
          nextTick(emitCloseNT$1, _this);
        }
      });

      return this;
    }

    function emitErrorAndCloseNT$1(self, err) {
      emitErrorNT$1(self, err);
      emitCloseNT$1(self);
    }

    function emitCloseNT$1(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }

    function undestroy$1() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT$1(self, err) {
      self.emit('error', err);
    }

    function errorOrDestroy$3(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }

    var destroy_1$1 = {
      destroy: destroy$1,
      undestroy: undestroy$1,
      errorOrDestroy: errorOrDestroy$3
    };

    function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

    var codes$4 = {};

    function createErrorType$1(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }

      var NodeError =
      /*#__PURE__*/
      function (_Base) {
        _inheritsLoose$1(NodeError, _Base);

        function NodeError(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }

        return NodeError;
      }(Base);

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes$4[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


    function oneOf$1(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });

        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


    function startsWith$1(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith$1(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


    function includes$1(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType$1('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType$1('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;

      if (typeof expected === 'string' && startsWith$1(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      var msg;

      if (endsWith$1(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf$1(expected, 'type'));
      } else {
        var type = includes$1(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf$1(expected, 'type'));
      }

      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType$1('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType$1('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType$1('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType$1('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType$1('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType$1('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType$1('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType$1('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType$1('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType$1('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    var codes_1$1 = codes$4;

    var errorsBrowser$1 = {
    	codes: codes_1$1
    };

    var ERR_INVALID_OPT_VALUE$1 = errorsBrowser$1.codes.ERR_INVALID_OPT_VALUE;

    function highWaterMarkFrom$1(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }

    function getHighWaterMark$3(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom$1(options, isDuplex, duplexKey);

      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE$1(name, hwm);
        }

        return Math.floor(hwm);
      } // Default value


      return state.objectMode ? 16 : 16 * 1024;
    }

    var state$1 = {
      getHighWaterMark: getHighWaterMark$3
    };

    var _stream_writable$1 = Writable$2;
    // there will be only 2 of these for each stream


    function CorkedRequest$2(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function () {
        onCorkedFinish$1(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/


    var Duplex$4;
    /*</replacement>*/

    Writable$2.WritableState = WritableState$2;
    /*<replacement>*/

    var internalUtil$1 = {
      deprecate: browser$5
    };
    /*</replacement>*/

    /*<replacement>*/


    /*</replacement>*/


    var Buffer$H = buffer.Buffer;

    var OurUint8Array$2 = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer$2(chunk) {
      return Buffer$H.from(chunk);
    }

    function _isUint8Array$2(obj) {
      return Buffer$H.isBuffer(obj) || obj instanceof OurUint8Array$2;
    }



    var getHighWaterMark$4 = state$1.getHighWaterMark;

    var _require$codes$4 = errorsBrowser$1.codes,
        ERR_INVALID_ARG_TYPE$2 = _require$codes$4.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED$3 = _require$codes$4.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK$2 = _require$codes$4.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE$1 = _require$codes$4.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED$2 = _require$codes$4.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES$1 = _require$codes$4.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END$1 = _require$codes$4.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING$1 = _require$codes$4.ERR_UNKNOWN_ENCODING;

    var errorOrDestroy$4 = destroy_1$1.errorOrDestroy;

    inherits_browser$1(Writable$2, streamBrowser$1);

    function nop$2() {}

    function WritableState$2(options, stream, isDuplex) {
      Duplex$4 = Duplex$4 || _stream_duplex$1;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream,
      // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$4; // object stream flag to indicate whether or not this stream
      // contains buffers or objects.

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()

      this.highWaterMark = getHighWaterMark$4(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

      this.finalCalled = false; // drain event flag.

      this.needDrain = false; // at the start of calling end()

      this.ending = false; // when end() has been called, and returned

      this.ended = false; // when 'finish' is emitted

      this.finished = false; // has it been destroyed

      this.destroyed = false; // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.

      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.

      this.length = 0; // a flag to see when we're in the middle of a write.

      this.writing = false; // when true all writes will be buffered until .uncork() call

      this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.

      this.sync = true; // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.

      this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

      this.onwrite = function (er) {
        onwrite$2(stream, er);
      }; // the callback that the user supplies to write(chunk,encoding,cb)


      this.writecb = null; // the amount that is being written when _write is called.

      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted

      this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams

      this.prefinished = false; // True if the error was already emitted and should not be thrown again

      this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

      this.autoDestroy = !!options.autoDestroy; // count buffered requests

      this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two

      this.corkedRequestsFree = new CorkedRequest$2(this);
    }

    WritableState$2.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];

      while (current) {
        out.push(current);
        current = current.next;
      }

      return out;
    };

    (function () {
      try {
        Object.defineProperty(WritableState$2.prototype, 'buffer', {
          get: internalUtil$1.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })(); // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.


    var realHasInstance$1;

    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance$1 = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable$2, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance$1.call(this, object)) return true;
          if (this !== Writable$2) return false;
          return object && object._writableState instanceof WritableState$2;
        }
      });
    } else {
      realHasInstance$1 = function realHasInstance(object) {
        return object instanceof this;
      };
    }

    function Writable$2(options) {
      Duplex$4 = Duplex$4 || _stream_duplex$1; // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the WritableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$4;
      if (!isDuplex && !realHasInstance$1.call(Writable$2, this)) return new Writable$2(options);
      this._writableState = new WritableState$2(options, this, isDuplex); // legacy.

      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
      }

      streamBrowser$1.call(this);
    } // Otherwise people can pipe Writable streams, which is just wrong.


    Writable$2.prototype.pipe = function () {
      errorOrDestroy$4(this, new ERR_STREAM_CANNOT_PIPE$1());
    };

    function writeAfterEnd$2(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END$1(); // TODO: defer error events consistently everywhere, not just the cb

      errorOrDestroy$4(stream, er);
      nextTick(cb, er);
    } // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.


    function validChunk$2(stream, state, chunk, cb) {
      var er;

      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES$1();
      } else if (typeof chunk !== 'string' && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE$2('chunk', ['string', 'Buffer'], chunk);
      }

      if (er) {
        errorOrDestroy$4(stream, er);
        nextTick(cb, er);
        return false;
      }

      return true;
    }

    Writable$2.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      var isBuf = !state.objectMode && _isUint8Array$2(chunk);

      if (isBuf && !Buffer$H.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer$2(chunk);
      }

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop$2;
      if (state.ending) writeAfterEnd$2(this, cb);else if (isBuf || validChunk$2(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer$2(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };

    Writable$2.prototype.cork = function () {
      this._writableState.corked++;
    };

    Writable$2.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer$2(this, state);
      }
    };

    Writable$2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING$1(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    Object.defineProperty(Writable$2.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });

    function decodeChunk$2(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer$H.from(chunk, encoding);
      }

      return chunk;
    }

    Object.defineProperty(Writable$2.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }); // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.

    function writeOrBuffer$2(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk$2(state, chunk, encoding);

        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }

      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };

        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }

        state.bufferedRequestCount += 1;
      } else {
        doWrite$2(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite$2(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED$2('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError$2(stream, state, sync, er, cb) {
      --state.pendingcb;

      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        nextTick(cb, er); // this can emit finish, and it will always happen
        // after error

        nextTick(finishMaybe$2, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$4(stream, er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$4(stream, er); // this can emit finish, but finish must
        // always follow error

        finishMaybe$2(stream, state);
      }
    }

    function onwriteStateUpdate$2(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite$2(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK$2();
      onwriteStateUpdate$2(state);
      if (er) onwriteError$2(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish$2(state) || stream.destroyed;

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer$2(stream, state);
        }

        if (sync) {
          nextTick(afterWrite$2, stream, state, finished, cb);
        } else {
          afterWrite$2(stream, state, finished, cb);
        }
      }
    }

    function afterWrite$2(stream, state, finished, cb) {
      if (!finished) onwriteDrain$2(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe$2(stream, state);
    } // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.


    function onwriteDrain$2(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    } // if there's something in the buffer waiting, then process it


    function clearBuffer$2(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;

        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }

        buffer.allBuffers = allBuffers;
        doWrite$2(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite

        state.pendingcb++;
        state.lastBufferedRequest = null;

        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest$2(state);
        }

        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite$2(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.

          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable$2.prototype._write = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED$3('_write()'));
    };

    Writable$2.prototype._writev = null;

    Writable$2.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

      if (state.corked) {
        state.corked = 1;
        this.uncork();
      } // ignore unnecessary end() calls.


      if (!state.ending) endWritable$2(this, state, cb);
      return this;
    };

    Object.defineProperty(Writable$2.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });

    function needFinish$2(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function callFinal$1(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;

        if (err) {
          errorOrDestroy$4(stream, err);
        }

        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe$2(stream, state);
      });
    }

    function prefinish$3(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          nextTick(callFinal$1, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }

    function finishMaybe$2(stream, state) {
      var need = needFinish$2(state);

      if (need) {
        prefinish$3(stream, state);

        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');

          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the readable side is ready for autoDestroy as well
            var rState = stream._readableState;

            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }

      return need;
    }

    function endWritable$2(stream, state, cb) {
      state.ending = true;
      finishMaybe$2(stream, state);

      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }

      state.ended = true;
      stream.writable = false;
    }

    function onCorkedFinish$1(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      } // reuse the free corkReq.


      state.corkedRequestsFree.next = corkReq;
    }

    Object.defineProperty(Writable$2.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === undefined) {
          return false;
        }

        return this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._writableState.destroyed = value;
      }
    });
    Writable$2.prototype.destroy = destroy_1$1.destroy;
    Writable$2.prototype._undestroy = destroy_1$1.undestroy;

    Writable$2.prototype._destroy = function (err, cb) {
      cb(err);
    };

    /*<replacement>*/

    var objectKeys$2 = Object.keys || function (obj) {
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      return keys;
    };
    /*</replacement>*/


    var _stream_duplex$1 = Duplex$5;





    inherits_browser$1(Duplex$5, _stream_readable$1);

    {
      // Allow the keys array to be GC'ed.
      var keys$2 = objectKeys$2(_stream_writable$1.prototype);

      for (var v$2 = 0; v$2 < keys$2.length; v$2++) {
        var method$2 = keys$2[v$2];
        if (!Duplex$5.prototype[method$2]) Duplex$5.prototype[method$2] = _stream_writable$1.prototype[method$2];
      }
    }

    function Duplex$5(options) {
      if (!(this instanceof Duplex$5)) return new Duplex$5(options);
      _stream_readable$1.call(this, options);
      _stream_writable$1.call(this, options);
      this.allowHalfOpen = true;

      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;

        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once('end', onend$2);
        }
      }
    }

    Object.defineProperty(Duplex$5.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex$5.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex$5.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    }); // the no-half-open enforcer

    function onend$2() {
      // If the writable side ended, then we're ok.
      if (this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.

      nextTick(onEndNT$2, this);
    }

    function onEndNT$2(self) {
      self.end();
    }

    Object.defineProperty(Duplex$5.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }

        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    var ERR_STREAM_PREMATURE_CLOSE$1 = errorsBrowser$1.codes.ERR_STREAM_PREMATURE_CLOSE;

    function once$4(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);
      };
    }

    function noop$4() {}

    function isRequest$2(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function eos$2(stream, opts, callback) {
      if (typeof opts === 'function') return eos$2(stream, null, opts);
      if (!opts) opts = {};
      callback = once$4(callback || noop$4);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;

      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };

      var writableEnded = stream._writableState && stream._writableState.finished;

      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };

      var readableEnded = stream._readableState && stream._readableState.endEmitted;

      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };

      var onerror = function onerror(err) {
        callback.call(stream, err);
      };

      var onclose = function onclose() {
        var err;

        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE$1();
          return callback.call(stream, err);
        }

        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE$1();
          return callback.call(stream, err);
        }
      };

      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };

      if (isRequest$2(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }

      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }

    var endOfStream$1 = eos$2;

    var _Object$setPrototypeO$1;

    function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



    var kLastResolve$1 = Symbol('lastResolve');
    var kLastReject$1 = Symbol('lastReject');
    var kError$1 = Symbol('error');
    var kEnded$1 = Symbol('ended');
    var kLastPromise$1 = Symbol('lastPromise');
    var kHandlePromise$1 = Symbol('handlePromise');
    var kStream$1 = Symbol('stream');

    function createIterResult$1(value, done) {
      return {
        value: value,
        done: done
      };
    }

    function readAndResolve$1(iter) {
      var resolve = iter[kLastResolve$1];

      if (resolve !== null) {
        var data = iter[kStream$1].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'

        if (data !== null) {
          iter[kLastPromise$1] = null;
          iter[kLastResolve$1] = null;
          iter[kLastReject$1] = null;
          resolve(createIterResult$1(data, false));
        }
      }
    }

    function onReadable$1(iter) {
      // we wait for the next tick, because it might
      // emit an error with process.nextTick
      nextTick(readAndResolve$1, iter);
    }

    function wrapForNext$1(lastPromise, iter) {
      return function (resolve, reject) {
        lastPromise.then(function () {
          if (iter[kEnded$1]) {
            resolve(createIterResult$1(undefined, true));
            return;
          }

          iter[kHandlePromise$1](resolve, reject);
        }, reject);
      };
    }

    var AsyncIteratorPrototype$1 = Object.getPrototypeOf(function () {});
    var ReadableStreamAsyncIteratorPrototype$1 = Object.setPrototypeOf((_Object$setPrototypeO$1 = {
      get stream() {
        return this[kStream$1];
      },

      next: function next() {
        var _this = this;

        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError$1];

        if (error !== null) {
          return Promise.reject(error);
        }

        if (this[kEnded$1]) {
          return Promise.resolve(createIterResult$1(undefined, true));
        }

        if (this[kStream$1].destroyed) {
          // We need to defer via nextTick because if .destroy(err) is
          // called, the error will be emitted via nextTick, and
          // we cannot guarantee that there is no error lingering around
          // waiting to be emitted.
          return new Promise(function (resolve, reject) {
            nextTick(function () {
              if (_this[kError$1]) {
                reject(_this[kError$1]);
              } else {
                resolve(createIterResult$1(undefined, true));
              }
            });
          });
        } // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time


        var lastPromise = this[kLastPromise$1];
        var promise;

        if (lastPromise) {
          promise = new Promise(wrapForNext$1(lastPromise, this));
        } else {
          // fast path needed to support multiple this.push()
          // without triggering the next() queue
          var data = this[kStream$1].read();

          if (data !== null) {
            return Promise.resolve(createIterResult$1(data, false));
          }

          promise = new Promise(this[kHandlePromise$1]);
        }

        this[kLastPromise$1] = promise;
        return promise;
      }
    }, _defineProperty$3(_Object$setPrototypeO$1, Symbol.asyncIterator, function () {
      return this;
    }), _defineProperty$3(_Object$setPrototypeO$1, "return", function _return() {
      var _this2 = this;

      // destroy(err, cb) is a private API
      // we can guarantee we have that here, because we control the
      // Readable class this is attached to
      return new Promise(function (resolve, reject) {
        _this2[kStream$1].destroy(null, function (err) {
          if (err) {
            reject(err);
            return;
          }

          resolve(createIterResult$1(undefined, true));
        });
      });
    }), _Object$setPrototypeO$1), AsyncIteratorPrototype$1);

    var createReadableStreamAsyncIterator$2 = function createReadableStreamAsyncIterator(stream) {
      var _Object$create;

      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype$1, (_Object$create = {}, _defineProperty$3(_Object$create, kStream$1, {
        value: stream,
        writable: true
      }), _defineProperty$3(_Object$create, kLastResolve$1, {
        value: null,
        writable: true
      }), _defineProperty$3(_Object$create, kLastReject$1, {
        value: null,
        writable: true
      }), _defineProperty$3(_Object$create, kError$1, {
        value: null,
        writable: true
      }), _defineProperty$3(_Object$create, kEnded$1, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty$3(_Object$create, kHandlePromise$1, {
        value: function value(resolve, reject) {
          var data = iterator[kStream$1].read();

          if (data) {
            iterator[kLastPromise$1] = null;
            iterator[kLastResolve$1] = null;
            iterator[kLastReject$1] = null;
            resolve(createIterResult$1(data, false));
          } else {
            iterator[kLastResolve$1] = resolve;
            iterator[kLastReject$1] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise$1] = null;
      endOfStream$1(stream, function (err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          var reject = iterator[kLastReject$1]; // reject if we are waiting for data in the Promise
          // returned by next() and store the error

          if (reject !== null) {
            iterator[kLastPromise$1] = null;
            iterator[kLastResolve$1] = null;
            iterator[kLastReject$1] = null;
            reject(err);
          }

          iterator[kError$1] = err;
          return;
        }

        var resolve = iterator[kLastResolve$1];

        if (resolve !== null) {
          iterator[kLastPromise$1] = null;
          iterator[kLastResolve$1] = null;
          iterator[kLastReject$1] = null;
          resolve(createIterResult$1(undefined, true));
        }

        iterator[kEnded$1] = true;
      });
      stream.on('readable', onReadable$1.bind(null, iterator));
      return iterator;
    };

    var async_iterator$1 = createReadableStreamAsyncIterator$2;

    var fromBrowser$1 = function () {
      throw new Error('Readable.from is not available in the browser')
    };

    var _stream_readable$1 = Readable$2;
    /*<replacement>*/

    var Duplex$6;
    /*</replacement>*/

    Readable$2.ReadableState = ReadableState$2;

    var EElistenerCount$1 = function EElistenerCount(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/



    /*</replacement>*/


    var Buffer$I = buffer.Buffer;

    var OurUint8Array$3 = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer$3(chunk) {
      return Buffer$I.from(chunk);
    }

    function _isUint8Array$3(obj) {
      return Buffer$I.isBuffer(obj) || obj instanceof OurUint8Array$3;
    }
    /*<replacement>*/




    var debug$2;

    if (require$$0 && require$$0.debuglog) {
      debug$2 = require$$0.debuglog('stream');
    } else {
      debug$2 = function debug() {};
    }
    /*</replacement>*/






    var getHighWaterMark$5 = state$1.getHighWaterMark;

    var _require$codes$5 = errorsBrowser$1.codes,
        ERR_INVALID_ARG_TYPE$3 = _require$codes$5.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF$1 = _require$codes$5.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED$4 = _require$codes$5.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT$1 = _require$codes$5.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


    var StringDecoder$4;
    var createReadableStreamAsyncIterator$3;
    var from$2;

    inherits_browser$1(Readable$2, streamBrowser$1);

    var errorOrDestroy$5 = destroy_1$1.errorOrDestroy;
    var kProxyEvents$1 = ['error', 'close', 'destroy', 'pause', 'resume'];

    function prependListener$2(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.

      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }

    function ReadableState$2(options, stream, isDuplex) {
      Duplex$6 = Duplex$6 || _stream_duplex$1;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$6; // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"

      this.highWaterMark = getHighWaterMark$5(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()

      this.buffer = new buffer_list$1();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.

      this.sync = true; // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.

      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

      this.autoDestroy = !!options.autoDestroy; // has it been destroyed

      this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

      this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;

      if (options.encoding) {
        if (!StringDecoder$4) StringDecoder$4 = string_decoder.StringDecoder;
        this.decoder = new StringDecoder$4(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable$2(options) {
      Duplex$6 = Duplex$6 || _stream_duplex$1;
      if (!(this instanceof Readable$2)) return new Readable$2(options); // Checking for a Stream.Duplex instance is faster here instead of inside
      // the ReadableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$6;
      this._readableState = new ReadableState$2(options, this, isDuplex); // legacy

      this.readable = true;

      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }

      streamBrowser$1.call(this);
    }

    Object.defineProperty(Readable$2.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined) {
          return false;
        }

        return this._readableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
      }
    });
    Readable$2.prototype.destroy = destroy_1$1.destroy;
    Readable$2.prototype._undestroy = destroy_1$1.undestroy;

    Readable$2.prototype._destroy = function (err, cb) {
      cb(err);
    }; // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.


    Readable$2.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;

      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;

          if (encoding !== state.encoding) {
            chunk = Buffer$I.from(chunk, encoding);
            encoding = '';
          }

          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }

      return readableAddChunk$2(this, chunk, encoding, false, skipChunkCheck);
    }; // Unshift should *always* be something directly out of read()


    Readable$2.prototype.unshift = function (chunk) {
      return readableAddChunk$2(this, chunk, null, true, false);
    };

    function readableAddChunk$2(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug$2('readableAddChunk', chunk);
      var state = stream._readableState;

      if (chunk === null) {
        state.reading = false;
        onEofChunk$2(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid$2(state, chunk);

        if (er) {
          errorOrDestroy$5(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$I.prototype) {
            chunk = _uint8ArrayToBuffer$3(chunk);
          }

          if (addToFront) {
            if (state.endEmitted) errorOrDestroy$5(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT$1());else addChunk$1(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy$5(stream, new ERR_STREAM_PUSH_AFTER_EOF$1());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;

            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk$1(stream, state, chunk, false);else maybeReadMore$2(stream, state);
            } else {
              addChunk$1(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore$2(stream, state);
        }
      } // We can push more data if we are below the highWaterMark.
      // Also, if we have no data yet, we can stand some more bytes.
      // This is to work around cases where hwm=0, such as the repl.


      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }

    function addChunk$1(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable$2(stream);
      }

      maybeReadMore$2(stream, state);
    }

    function chunkInvalid$2(state, chunk) {
      var er;

      if (!_isUint8Array$3(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE$3('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
      }

      return er;
    }

    Readable$2.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    }; // backwards compatibility.


    Readable$2.prototype.setEncoding = function (enc) {
      if (!StringDecoder$4) StringDecoder$4 = string_decoder.StringDecoder;
      var decoder = new StringDecoder$4(enc);
      this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

      this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

      var p = this._readableState.buffer.head;
      var content = '';

      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }

      this._readableState.buffer.clear();

      if (content !== '') this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    }; // Don't raise the hwm > 1GB


    var MAX_HWM$2 = 0x40000000;

    function computeNewHighWaterMark$2(n) {
      if (n >= MAX_HWM$2) {
        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
        n = MAX_HWM$2;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }

      return n;
    } // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function howMuchToRead$2(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;

      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      } // If we're asking for more than the current hwm, then raise the hwm.


      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark$2(n);
      if (n <= state.length) return n; // Don't have enough

      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }

      return state.length;
    } // you can override either this method, or the async _read(n) below.


    Readable$2.prototype.read = function (n) {
      debug$2('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.

      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug$2('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable$2(this);else emitReadable$2(this);
        return null;
      }

      n = howMuchToRead$2(n, state); // if we've ended, and we're now clear, then finish it up.

      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable$2(this);
        return null;
      } // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
      // if we need a readable event, then we need to do some reading.


      var doRead = state.needReadable;
      debug$2('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug$2('length less than watermark', doRead);
      } // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.


      if (state.ended || state.reading) {
        doRead = false;
        debug$2('reading or ended', doRead);
      } else if (doRead) {
        debug$2('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.

        if (state.length === 0) state.needReadable = true; // call internal read method

        this._read(state.highWaterMark);

        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.

        if (!state.reading) n = howMuchToRead$2(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList$2(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

        if (nOrig !== n && state.ended) endReadable$2(this);
      }

      if (ret !== null) this.emit('data', ret);
      return ret;
    };

    function onEofChunk$2(stream, state) {
      debug$2('onEofChunk');
      if (state.ended) return;

      if (state.decoder) {
        var chunk = state.decoder.end();

        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }

      state.ended = true;

      if (state.sync) {
        // if we are sync, wait until next tick to emit the data.
        // Otherwise we risk emitting data in the flow()
        // the readable code triggers during a read() call
        emitReadable$2(stream);
      } else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;

        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_$2(stream);
        }
      }
    } // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.


    function emitReadable$2(stream) {
      var state = stream._readableState;
      debug$2('emitReadable', state.needReadable, state.emittedReadable);
      state.needReadable = false;

      if (!state.emittedReadable) {
        debug$2('emitReadable', state.flowing);
        state.emittedReadable = true;
        nextTick(emitReadable_$2, stream);
      }
    }

    function emitReadable_$2(stream) {
      var state = stream._readableState;
      debug$2('emitReadable_', state.destroyed, state.length, state.ended);

      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
      } // The stream needs another readable event if
      // 1. It is not flowing, as the flow mechanism will take
      //    care of it.
      // 2. It is not ended.
      // 3. It is below the highWaterMark, so we can schedule
      //    another readable later.


      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow$2(stream);
    } // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.


    function maybeReadMore$2(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_$2, stream, state);
      }
    }

    function maybeReadMore_$2(stream, state) {
      // Attempt to read more data if we should.
      //
      // The conditions for reading more data are (one of):
      // - Not enough data buffered (state.length < state.highWaterMark). The loop
      //   is responsible for filling the buffer with enough data if such data
      //   is available. If highWaterMark is 0 and we are not in the flowing mode
      //   we should _not_ attempt to buffer any extra data. We'll get more data
      //   when the stream consumer calls read() instead.
      // - No data in the buffer, and the stream is in flowing mode. In this mode
      //   the loop below is responsible for ensuring read() is called. Failing to
      //   call read here would abort the flow and there's no other mechanism for
      //   continuing the flow if the stream consumer has just subscribed to the
      //   'data' event.
      //
      // In addition to the above conditions to keep reading data, the following
      // conditions prevent the data from being read:
      // - The stream has ended (state.ended).
      // - There is already a pending 'read' operation (state.reading). This is a
      //   case where the the stream has called the implementation defined _read()
      //   method, but they are processing the call asynchronously and have _not_
      //   called push() with new data. In this case we skip performing more
      //   read()s. The execution ends in this method again after the _read() ends
      //   up calling push() with more data.
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug$2('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) // didn't get any data, stop spinning.
          break;
      }

      state.readingMore = false;
    } // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.


    Readable$2.prototype._read = function (n) {
      errorOrDestroy$5(this, new ERR_METHOD_NOT_IMPLEMENTED$4('_read()'));
    };

    Readable$2.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;

        case 1:
          state.pipes = [state.pipes, dest];
          break;

        default:
          state.pipes.push(dest);
          break;
      }

      state.pipesCount += 1;
      debug$2('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);

      function onunpipe(readable, unpipeInfo) {
        debug$2('onunpipe');

        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }

      function onend() {
        debug$2('onend');
        dest.end();
      } // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.


      var ondrain = pipeOnDrain$2(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;

      function cleanup() {
        debug$2('cleanup'); // cleanup event handlers once the pipe is broken

        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.

        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      src.on('data', ondata);

      function ondata(chunk) {
        debug$2('ondata');
        var ret = dest.write(chunk);
        debug$2('dest.write', ret);

        if (ret === false) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$2(state.pipes, dest) !== -1) && !cleanedUp) {
            debug$2('false write response, pause', state.awaitDrain);
            state.awaitDrain++;
          }

          src.pause();
        }
      } // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.


      function onerror(er) {
        debug$2('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount$1(dest, 'error') === 0) errorOrDestroy$5(dest, er);
      } // Make sure our error handler is attached before userland ones.


      prependListener$2(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }

      dest.once('close', onclose);

      function onfinish() {
        debug$2('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }

      dest.once('finish', onfinish);

      function unpipe() {
        debug$2('unpipe');
        src.unpipe(dest);
      } // tell the dest that it's being piped to


      dest.emit('pipe', src); // start the flow if it hasn't been started already.

      if (!state.flowing) {
        debug$2('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain$2(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug$2('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;

        if (state.awaitDrain === 0 && EElistenerCount$1(src, 'data')) {
          state.flowing = true;
          flow$2(src);
        }
      };
    }

    Readable$2.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      }; // if we're not piping anywhere, then do nothing.

      if (state.pipesCount === 0) return this; // just one destination.  most common case.

      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.

        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      } // slow case. multiple pipe destinations.


      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, {
            hasUnpiped: false
          });
        }

        return this;
      } // try to find the right one.


      var index = indexOf$2(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    }; // set up data events if they are asked for
    // Ensure readable listeners eventually get something


    Readable$2.prototype.on = function (ev, fn) {
      var res = streamBrowser$1.prototype.on.call(this, ev, fn);
      var state = this._readableState;

      if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

        if (state.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug$2('on readable', state.length, state.reading);

          if (state.length) {
            emitReadable$2(this);
          } else if (!state.reading) {
            nextTick(nReadingNextTick$2, this);
          }
        }
      }

      return res;
    };

    Readable$2.prototype.addListener = Readable$2.prototype.on;

    Readable$2.prototype.removeListener = function (ev, fn) {
      var res = streamBrowser$1.prototype.removeListener.call(this, ev, fn);

      if (ev === 'readable') {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        nextTick(updateReadableListening$1, this);
      }

      return res;
    };

    Readable$2.prototype.removeAllListeners = function (ev) {
      var res = streamBrowser$1.prototype.removeAllListeners.apply(this, arguments);

      if (ev === 'readable' || ev === undefined) {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        nextTick(updateReadableListening$1, this);
      }

      return res;
    };

    function updateReadableListening$1(self) {
      var state = self._readableState;
      state.readableListening = self.listenerCount('readable') > 0;

      if (state.resumeScheduled && !state.paused) {
        // flowing needs to be set to true now, otherwise
        // the upcoming resume will not flow.
        state.flowing = true; // crude way to check if we should resume
      } else if (self.listenerCount('data') > 0) {
        self.resume();
      }
    }

    function nReadingNextTick$2(self) {
      debug$2('readable nexttick read 0');
      self.read(0);
    } // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.


    Readable$2.prototype.resume = function () {
      var state = this._readableState;

      if (!state.flowing) {
        debug$2('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()

        state.flowing = !state.readableListening;
        resume$2(this, state);
      }

      state.paused = false;
      return this;
    };

    function resume$2(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_$2, stream, state);
      }
    }

    function resume_$2(stream, state) {
      debug$2('resume', state.reading);

      if (!state.reading) {
        stream.read(0);
      }

      state.resumeScheduled = false;
      stream.emit('resume');
      flow$2(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable$2.prototype.pause = function () {
      debug$2('call pause flowing=%j', this._readableState.flowing);

      if (this._readableState.flowing !== false) {
        debug$2('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }

      this._readableState.paused = true;
      return this;
    };

    function flow$2(stream) {
      var state = stream._readableState;
      debug$2('flow', state.flowing);

      while (state.flowing && stream.read() !== null) {
      }
    } // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.


    Readable$2.prototype.wrap = function (stream) {
      var _this = this;

      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug$2('wrapped end');

        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }

        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug$2('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = _this.push(chunk);

        if (!ret) {
          paused = true;
          stream.pause();
        }
      }); // proxy all the other methods.
      // important when wrapping filters and duplexes.

      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      } // proxy certain important events.


      for (var n = 0; n < kProxyEvents$1.length; n++) {
        stream.on(kProxyEvents$1[n], this.emit.bind(this, kProxyEvents$1[n]));
      } // when we try to consume some more bytes, simply unpause the
      // underlying stream.


      this._read = function (n) {
        debug$2('wrapped _read', n);

        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return this;
    };

    if (typeof Symbol === 'function') {
      Readable$2.prototype[Symbol.asyncIterator] = function () {
        if (createReadableStreamAsyncIterator$3 === undefined) {
          createReadableStreamAsyncIterator$3 = async_iterator$1;
        }

        return createReadableStreamAsyncIterator$3(this);
      };
    }

    Object.defineProperty(Readable$2.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable$2.prototype, 'readableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable$2.prototype, 'readableFlowing', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    }); // exposed for testing purposes only.

    Readable$2._fromList = fromList$2;
    Object.defineProperty(Readable$2.prototype, 'readableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    }); // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.

    function fromList$2(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }

    function endReadable$2(stream) {
      var state = stream._readableState;
      debug$2('endReadable', state.endEmitted);

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT$2, state, stream);
      }
    }

    function endReadableNT$2(state, stream) {
      debug$2('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');

        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the writable side is ready for autoDestroy as well
          var wState = stream._writableState;

          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }

    if (typeof Symbol === 'function') {
      Readable$2.from = function (iterable, opts) {
        if (from$2 === undefined) {
          from$2 = fromBrowser$1;
        }

        return from$2(Readable$2, iterable, opts);
      };
    }

    function indexOf$2(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }

      return -1;
    }

    var _stream_transform$1 = Transform$4;

    var _require$codes$6 = errorsBrowser$1.codes,
        ERR_METHOD_NOT_IMPLEMENTED$5 = _require$codes$6.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK$3 = _require$codes$6.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING$1 = _require$codes$6.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0$1 = _require$codes$6.ERR_TRANSFORM_WITH_LENGTH_0;



    inherits_browser$1(Transform$4, _stream_duplex$1);

    function afterTransform$2(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK$3());
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform$4(options) {
      if (!(this instanceof Transform$4)) return new Transform$4(options);
      _stream_duplex$1.call(this, options);
      this._transformState = {
        afterTransform: afterTransform$2.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish$4);
    }

    function prefinish$4() {
      var _this = this;

      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done$2(_this, er, data);
        });
      } else {
        done$2(this, null, null);
      }
    }

    Transform$4.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return _stream_duplex$1.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform$4.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED$5('_transform()'));
    };

    Transform$4.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform$4.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform$4.prototype._destroy = function (err, cb) {
      _stream_duplex$1.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };

    function done$2(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0$1();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING$1();
      return stream.push(null);
    }

    var _stream_passthrough$1 = PassThrough$2;



    inherits_browser$1(PassThrough$2, _stream_transform$1);

    function PassThrough$2(options) {
      if (!(this instanceof PassThrough$2)) return new PassThrough$2(options);
      _stream_transform$1.call(this, options);
    }

    PassThrough$2.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    var eos$3;

    function once$5(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }

    var _require$codes$7 = errorsBrowser$1.codes,
        ERR_MISSING_ARGS$1 = _require$codes$7.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED$3 = _require$codes$7.ERR_STREAM_DESTROYED;

    function noop$5(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }

    function isRequest$3(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function destroyer$1(stream, reading, writing, callback) {
      callback = once$5(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos$3 === undefined) eos$3 = endOfStream$1;
      eos$3(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want

        if (isRequest$3(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED$3('pipe'));
      };
    }

    function call$1(fn) {
      fn();
    }

    function pipe$1(from, to) {
      return from.pipe(to);
    }

    function popCallback$1(streams) {
      if (!streams.length) return noop$5;
      if (typeof streams[streams.length - 1] !== 'function') return noop$5;
      return streams.pop();
    }

    function pipeline$1() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }

      var callback = popCallback$1(streams);
      if (Array.isArray(streams[0])) streams = streams[0];

      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS$1('streams');
      }

      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer$1(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call$1);
          if (reading) return;
          destroys.forEach(call$1);
          callback(error);
        });
      });
      return streams.reduce(pipe$1);
    }

    var pipeline_1$1 = pipeline$1;

    var readableBrowser$1 = createCommonjsModule(function (module, exports) {
    exports = module.exports = _stream_readable$1;
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = _stream_writable$1;
    exports.Duplex = _stream_duplex$1;
    exports.Transform = _stream_transform$1;
    exports.PassThrough = _stream_passthrough$1;
    exports.finished = endOfStream$1;
    exports.pipeline = pipeline_1$1;
    });

    var browserifyRsa = crt;
    function blind(priv) {
      var r = getr(priv);
      var blinder = r.toRed(bn$2.mont(priv.modulus))
      .redPow(new bn$2(priv.publicExponent)).fromRed();
      return {
        blinder: blinder,
        unblinder:r.invm(priv.modulus)
      };
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len = priv.modulus.byteLength();
      var mod = bn$2.mont(priv.modulus);
      var blinded = new bn$2(msg).mul(blinds.blinder).umod(priv.modulus);
      var c1 = blinded.toRed(bn$2.mont(priv.prime1));
      var c2 = blinded.toRed(bn$2.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p = priv.prime1;
      var q = priv.prime2;
      var m1 = c1.redPow(priv.exponent1);
      var m2 = c2.redPow(priv.exponent2);
      m1 = m1.fromRed();
      m2 = m2.fromRed();
      var h = m1.isub(m2).imul(qinv).umod(p);
      h.imul(q);
      m2.iadd(h);
      return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
    }
    crt.getr = getr;
    function getr(priv) {
      var len = priv.modulus.byteLength();
      var r = new bn$2(browser$1(len));
      while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
        r = new bn$2(browser$1(len));
      }
      return r;
    }

    var bn$3 = createCommonjsModule(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        Buffer = require$$0.Buffer;
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }

        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }

        if (number[0] === '-') {
          this.negative = 1;
        }

        this._strip();

        if (endian !== 'le') return;

        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex (str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        var z = 0;
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r <<= 4;

          var b;

          // 'a' - 'f'
          if (c >= 49 && c <= 54) {
            b = c - 49 + 0xa;

          // 'A' - 'F'
          } else if (c >= 17 && c <= 22) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }

          r |= b;
          z |= b;
        }

        assert(!(z & 0xf0), 'Invalid character in ' + str);
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        // Scan 24-bit chunks and add them to the number
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        }
        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })( module, commonjsGlobal);
    });

    var Buffer$J = buffer.Buffer;

    var safer = {};

    var key$3;

    for (key$3 in buffer) {
      if (!buffer.hasOwnProperty(key$3)) continue
      if (key$3 === 'SlowBuffer' || key$3 === 'Buffer') continue
      safer[key$3] = buffer[key$3];
    }

    var Safer = safer.Buffer = {};
    for (key$3 in Buffer$J) {
      if (!Buffer$J.hasOwnProperty(key$3)) continue
      if (key$3 === 'allocUnsafe' || key$3 === 'allocUnsafeSlow') continue
      Safer[key$3] = Buffer$J[key$3];
    }

    safer.Buffer.prototype = Buffer$J.prototype;

    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function (value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
        }
        if (value && typeof value.length === 'undefined') {
          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
        }
        return Buffer$J(value, encodingOrOffset, length)
      };
    }

    if (!Safer.alloc) {
      Safer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"')
        }
        var buf = Buffer$J(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf
      };
    }

    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
      } catch (e) {
        // we can't determine kStringMaxLength in environments where process.binding
        // is unsupported, so let's not set it
      }
    }

    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength
      };
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
      }
    }

    var safer_1 = safer;

    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    var Reporter_1 = Reporter;

    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };

    Reporter.prototype.save = function save() {
      const state = this._reporterState;

      return { obj: state.obj, pathLen: state.path.length };
    };

    Reporter.prototype.restore = function restore(data) {
      const state = this._reporterState;

      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };

    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };

    Reporter.prototype.exitKey = function exitKey(index) {
      const state = this._reporterState;

      state.path = state.path.slice(0, index - 1);
    };

    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      const state = this._reporterState;

      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };

    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };

    Reporter.prototype.enterObject = function enterObject() {
      const state = this._reporterState;

      const prev = state.obj;
      state.obj = {};
      return prev;
    };

    Reporter.prototype.leaveObject = function leaveObject(prev) {
      const state = this._reporterState;

      const now = state.obj;
      state.obj = prev;
      return now;
    };

    Reporter.prototype.error = function error(msg) {
      let err;
      const state = this._reporterState;

      const inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return '[' + JSON.stringify(elem) + ']';
        }).join(''), msg.message || msg, msg.stack);
      }

      if (!state.options.partial)
        throw err;

      if (!inherited)
        state.errors.push(err);

      return err;
    };

    Reporter.prototype.wrapResult = function wrapResult(result) {
      const state = this._reporterState;
      if (!state.options.partial)
        return result;

      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };

    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits_browser$1(ReporterError, Error);

    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);

      if (!this.stack) {
        try {
          // IE only adds stack when thrown
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };

    var reporter = {
    	Reporter: Reporter_1
    };

    const Reporter$1 = reporter.Reporter;
    const Buffer$K = safer_1.Buffer;

    function DecoderBuffer(base, options) {
      Reporter$1.call(this, options);
      if (!Buffer$K.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }

      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits_browser$1(DecoderBuffer, Reporter$1);
    var DecoderBuffer_1 = DecoderBuffer;

    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      }

      // Or accept compatible API
      const isCompatible = typeof data === 'object' &&
        Buffer$K.isBuffer(data.base) &&
        data.constructor.name === 'DecoderBuffer' &&
        typeof data.offset === 'number' &&
        typeof data.length === 'number' &&
        typeof data.save === 'function' &&
        typeof data.restore === 'function' &&
        typeof data.isEmpty === 'function' &&
        typeof data.readUInt8 === 'function' &&
        typeof data.skip === 'function' &&
        typeof data.raw === 'function';

      return isCompatible;
    };

    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter$1.prototype.save.call(this) };
    };

    DecoderBuffer.prototype.restore = function restore(save) {
      // Return skipped data
      const res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;

      this.offset = save.offset;
      Reporter$1.prototype.restore.call(this, save.reporter);

      return res;
    };

    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };

    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || 'DecoderBuffer overrun');
    };

    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || 'DecoderBuffer overrun');

      const res = new DecoderBuffer(this.base);

      // Share reporter state
      res._reporterState = this._reporterState;

      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };

    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };

    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!EncoderBuffer.isEncoderBuffer(item))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff))
          return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer$K.byteLength(value);
      } else if (Buffer$K.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    var EncoderBuffer_1 = EncoderBuffer;

    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      }

      // Or accept compatible API
      const isCompatible = typeof data === 'object' &&
        data.constructor.name === 'EncoderBuffer' &&
        typeof data.length === 'number' &&
        typeof data.join === 'function';

      return isCompatible;
    };

    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = Buffer$K.alloc(this.length);
      if (!offset)
        offset = 0;

      if (this.length === 0)
        return out;

      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number')
          out[offset] = this.value;
        else if (typeof this.value === 'string')
          out.write(this.value, offset);
        else if (Buffer$K.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }

      return out;
    };

    var buffer$2 = {
    	DecoderBuffer: DecoderBuffer_1,
    	EncoderBuffer: EncoderBuffer_1
    };

    const Reporter$2 = reporter.Reporter;
    const EncoderBuffer$1 = buffer$2.EncoderBuffer;
    const DecoderBuffer$1 = buffer$2.DecoderBuffer;


    // Supported tags
    const tags = [
      'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
      'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
      'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
      'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
    ];

    // Public methods list
    const methods = [
      'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
      'any', 'contains'
    ].concat(tags);

    // Overrided methods list
    const overrided = [
      '_peekTag', '_decodeTag', '_use',
      '_decodeStr', '_decodeObjid', '_decodeTime',
      '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

      '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
      '_encodeNull', '_encodeInt', '_encodeBool'
    ];

    function Node(enc, parent, name) {
      const state = {};
      this._baseState = state;

      state.name = name;
      state.enc = enc;

      state.parent = parent || null;
      state.children = null;

      // State
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;

      // Should create new instance on each method
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    var node = Node;

    const stateProps = [
      'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
      'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
      'implicit', 'contains'
    ];

    Node.prototype.clone = function clone() {
      const state = this._baseState;
      const cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      const res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };

    Node.prototype._wrap = function wrap() {
      const state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          const clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };

    Node.prototype._init = function init(body) {
      const state = this._baseState;

      minimalisticAssert(state.parent === null);
      body.call(this);

      // Filter children
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      minimalisticAssert.equal(state.children.length, 1, 'Root node can have only one child');
    };

    Node.prototype._useArgs = function useArgs(args) {
      const state = this._baseState;

      // Filter children and args
      const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);

      if (children.length !== 0) {
        minimalisticAssert(state.children === null);
        state.children = children;

        // Replace parent to maintain backward link
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        minimalisticAssert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== 'object' || arg.constructor !== Object)
            return arg;

          const res = {};
          Object.keys(arg).forEach(function(key) {
            if (key == (key | 0))
              key |= 0;
            const value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };

    //
    // Overrided methods
    //

    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    });

    //
    // Public methods
    //

    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);

        minimalisticAssert(state.tag === null);
        state.tag = tag;

        this._useArgs(args);

        return this;
      };
    });

    Node.prototype.use = function use(item) {
      minimalisticAssert(item);
      const state = this._baseState;

      minimalisticAssert(state.use === null);
      state.use = item;

      return this;
    };

    Node.prototype.optional = function optional() {
      const state = this._baseState;

      state.optional = true;

      return this;
    };

    Node.prototype.def = function def(val) {
      const state = this._baseState;

      minimalisticAssert(state['default'] === null);
      state['default'] = val;
      state.optional = true;

      return this;
    };

    Node.prototype.explicit = function explicit(num) {
      const state = this._baseState;

      minimalisticAssert(state.explicit === null && state.implicit === null);
      state.explicit = num;

      return this;
    };

    Node.prototype.implicit = function implicit(num) {
      const state = this._baseState;

      minimalisticAssert(state.explicit === null && state.implicit === null);
      state.implicit = num;

      return this;
    };

    Node.prototype.obj = function obj() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);

      state.obj = true;

      if (args.length !== 0)
        this._useArgs(args);

      return this;
    };

    Node.prototype.key = function key(newKey) {
      const state = this._baseState;

      minimalisticAssert(state.key === null);
      state.key = newKey;

      return this;
    };

    Node.prototype.any = function any() {
      const state = this._baseState;

      state.any = true;

      return this;
    };

    Node.prototype.choice = function choice(obj) {
      const state = this._baseState;

      minimalisticAssert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));

      return this;
    };

    Node.prototype.contains = function contains(item) {
      const state = this._baseState;

      minimalisticAssert(state.use === null);
      state.contains = item;

      return this;
    };

    //
    // Decoding
    //

    Node.prototype._decode = function decode(input, options) {
      const state = this._baseState;

      // Decode root node
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));

      let result = state['default'];
      let present = true;

      let prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);

      // Check if tag is there
      if (state.optional) {
        let tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;

        if (tag === null && !state.any) {
          // Trial and Error
          const save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);

          if (input.isError(present))
            return present;
        }
      }

      // Push object on stack
      let prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();

      if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
          const explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }

        const start = input.offset;

        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
          let save;
          if (state.any)
            save = input.save();
          const body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;

          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }

        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, 'tagged');

        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, 'content');

        // Select proper method for tag
        if (state.any) ; else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }

        if (input.isError(result))
          return result;

        // Decode children
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
          });
        }

        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          const data = new DecoderBuffer$1(result);
          result = this._getUse(state.contains, input._reporterState.obj)
            ._decode(data, options);
        }
      }

      // Pop object
      if (state.obj && present)
        result = input.leaveObject(prevObj);

      // Set key
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);

      return result;
    };

    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      const state = this._baseState;

      if (tag === 'seq' || tag === 'set')
        return null;
      if (tag === 'seqof' || tag === 'setof')
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === 'objid' && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === 'objid')
        return this._decodeObjid(input, null, null, options);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._decodeTime(input, tag, options);
      else if (tag === 'null_')
        return this._decodeNull(input, options);
      else if (tag === 'bool')
        return this._decodeBool(input, options);
      else if (tag === 'objDesc')
        return this._decodeStr(input, tag, options);
      else if (tag === 'int' || tag === 'enum')
        return this._decodeInt(input, state.args && state.args[0], options);

      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)
          ._decode(input, options);
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };

    Node.prototype._getUse = function _getUse(entity, obj) {

      const state = this._baseState;
      // Create altered use decoder if implicit is set
      state.useDecoder = this._use(entity, obj);
      minimalisticAssert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };

    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      const state = this._baseState;
      let result = null;
      let match = false;

      Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
          const value = node._decode(input, options);
          if (input.isError(value))
            return false;

          result = { type: key, value: value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);

      if (!match)
        return input.error('Choice not matched');

      return result;
    };

    //
    // Encoding
    //

    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer$1(data, this.reporter);
    };

    Node.prototype._encode = function encode(data, reporter, parent) {
      const state = this._baseState;
      if (state['default'] !== null && state['default'] === data)
        return;

      const result = this._encodeValue(data, reporter, parent);
      if (result === undefined)
        return;

      if (this._skipDefault(result, reporter, parent))
        return;

      return result;
    };

    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      const state = this._baseState;

      // Decode root node
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter$2());

      let result = null;

      // Set reporter to share it with a child class
      this.reporter = reporter;

      // Check if data is there
      if (state.optional && data === undefined) {
        if (state['default'] !== null)
          data = state['default'];
        else
          return;
      }

      // Encode children first
      let content = null;
      let primitive = false;
      if (state.any) {
        // Anything that was given is translated to buffer
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child) {
          if (child._baseState.tag === 'null_')
            return child._encode(null, reporter, data);

          if (child._baseState.key === null)
            return reporter.error('Child should have a key');
          const prevKey = reporter.enterKey(child._baseState.key);

          if (typeof data !== 'object')
            return reporter.error('Child expected, but input is not object');

          const res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);

          return res;
        }, this).filter(function(child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          // TODO(indutny): this should be thrown on DSL level
          if (!(state.args && state.args.length === 1))
            return reporter.error('Too many args for : ' + state.tag);

          if (!Array.isArray(data))
            return reporter.error('seqof/setof, but data is not Array');

          const child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            const state = this._baseState;

            return this._getUse(state.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }

      // Encode data itself
      if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? 'universal' : 'context';

        if (tag === null) {
          if (state.use === null)
            reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }

      // Wrap in explicit
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, 'context', result);

      return result;
    };

    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      const state = this._baseState;

      const node = state.choice[data.type];
      if (!node) {
        minimalisticAssert(
          false,
          data.type + ' not found in ' +
                JSON.stringify(Object.keys(state.choice)));
      }
      return node._encode(data.value, reporter);
    };

    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      const state = this._baseState;

      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === 'objid' && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === 'objid')
        return this._encodeObjid(data, null, null);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._encodeTime(data, tag);
      else if (tag === 'null_')
        return this._encodeNull();
      else if (tag === 'int' || tag === 'enum')
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === 'bool')
        return this._encodeBool(data);
      else if (tag === 'objDesc')
        return this._encodeStr(data, tag);
      else
        throw new Error('Unsupported tag: ' + tag);
    };

    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };

    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };

    var der = createCommonjsModule(function (module, exports) {

    // Helper
    function reverse(map) {
      const res = {};

      Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;

        const value = map[key];
        res[value] = key;
      });

      return res;
    }

    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = reverse(exports.tagClass);

    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = reverse(exports.tag);
    });

    const Buffer$L = safer_1.Buffer;


    // Import DER constants


    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;

      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    var der_1 = DEREncoder;

    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };

    // Tree methods

    function DERNode(parent) {
      node.call(this, 'der', parent);
    }
    inherits_browser$1(DERNode, node);

    DERNode.prototype._encodeComposite = function encodeComposite(tag,
      primitive,
      cls,
      content) {
      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

      // Short form
      if (content.length < 0x80) {
        const header = Buffer$L.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([ header, content ]);
      }

      // Long form
      // Count octets required to store length
      let lenOctets = 1;
      for (let i = content.length; i >= 0x100; i >>= 8)
        lenOctets++;

      const header = Buffer$L.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;

      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 0xff;

      return this._createEncoderBuffer([ header, content ]);
    };

    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([ str.unused | 0, str.data ]);
      } else if (tag === 'bmpstr') {
        const buf = Buffer$L.alloc(str.length * 2);
        for (let i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error('Encoding of string type: numstr supports ' +
                                     'only digits and space');
        }
        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error('Encoding of string type: printstr supports ' +
                                     'only latin upper and lower case letters, ' +
                                     'digits, space, apostrophe, left and rigth ' +
                                     'parenthesis, plus sign, comma, hyphen, ' +
                                     'dot, slash, colon, equal sign, ' +
                                     'question mark');
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error('Encoding of string type: ' + tag +
                                   ' unsupported');
      }
    };

    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values)
          return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id))
          return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      }

      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' +
                                   'got: ' + JSON.stringify(id));
      }

      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }

      // Count number of octets
      let size = 0;
      for (let i = 0; i < id.length; i++) {
        let ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7)
          size++;
      }

      const objid = Buffer$L.alloc(size);
      let offset = objid.length - 1;
      for (let i = id.length - 1; i >= 0; i--) {
        let ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0)
          objid[offset--] = 0x80 | (ident & 0x7f);
      }

      return this._createEncoderBuffer(objid);
    };

    function two(num) {
      if (num < 10)
        return '0' + num;
      else
        return num;
    }

    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      let str;
      const date = new Date(time);

      if (tag === 'gentime') {
        str = [
          two(date.getUTCFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else if (tag === 'utctime') {
        str = [
          two(date.getUTCFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }

      return this._encodeStr(str, 'octstr');
    };

    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };

    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values)
          return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' +
                                     JSON.stringify(num));
        }
        num = values[num];
      }

      // Bignum, assume big endian
      if (typeof num !== 'number' && !Buffer$L.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = Buffer$L.from(numArray);
      }

      if (Buffer$L.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0)
          size++;

        const out = Buffer$L.alloc(size);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0;
        return this._createEncoderBuffer(out);
      }

      if (num < 0x80)
        return this._createEncoderBuffer(num);

      if (num < 0x100)
        return this._createEncoderBuffer([0, num]);

      let size = 1;
      for (let i = num; i >= 0x100; i >>= 8)
        size++;

      const out = new Array(size);
      for (let i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if(out[0] & 0x80) {
        out.unshift(0);
      }

      return this._createEncoderBuffer(Buffer$L.from(out));
    };

    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getEncoder('der').tree;
    };

    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      const state = this._baseState;
      let i;
      if (state['default'] === null)
        return false;

      const data = dataBuffer.join();
      if (state.defaultBuffer === undefined)
        state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

      if (data.length !== state.defaultBuffer.length)
        return false;

      for (i=0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;

      return true;
    };

    // Utility methods

    function encodeTag(tag, primitive, cls, reporter) {
      let res;

      if (tag === 'seqof')
        tag = 'seq';
      else if (tag === 'setof')
        tag = 'set';

      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === 'number' && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error('Unknown tag: ' + tag);

      if (res >= 0x1f)
        return reporter.error('Multi-octet tag encoding unsupported');

      if (!primitive)
        res |= 0x20;

      res |= (der.tagClassByName[cls || 'universal'] << 6);

      return res;
    }

    function PEMEncoder(entity) {
      der_1.call(this, entity);
      this.enc = 'pem';
    }
    inherits_browser$1(PEMEncoder, der_1);
    var pem = PEMEncoder;

    PEMEncoder.prototype.encode = function encode(data, options) {
      const buf = der_1.prototype.encode.call(this, data);

      const p = buf.toString('base64');
      const out = [ '-----BEGIN ' + options.label + '-----' ];
      for (let i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };

    var encoders_1 = createCommonjsModule(function (module, exports) {

    const encoders = exports;

    encoders.der = der_1;
    encoders.pem = pem;
    });

    const DecoderBuffer$2 = buffer$2.DecoderBuffer;


    // Import DER constants


    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;

      // Construct base tree
      this.tree = new DERNode$1();
      this.tree._init(entity.body);
    }
    var der_1$1 = DERDecoder;

    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer$2.isDecoderBuffer(data)) {
        data = new DecoderBuffer$2(data, options);
      }

      return this.tree._decode(data, options);
    };

    // Tree methods

    function DERNode$1(parent) {
      node.call(this, 'der', parent);
    }
    inherits_browser$1(DERNode$1, node);

    DERNode$1.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;

      const state = buffer.save();
      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;

      buffer.restore(state);

      return decodedTag.tag === tag || decodedTag.tagStr === tag ||
        (decodedTag.tagStr + 'of') === tag || any;
    };

    DERNode$1.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      const decodedTag = derDecodeTag(buffer,
        'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;

      let len = derDecodeLen(buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"');

      // Failure
      if (buffer.isError(len))
        return len;

      if (!any &&
          decodedTag.tag !== tag &&
          decodedTag.tagStr !== tag &&
          decodedTag.tagStr + 'of' !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }

      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

      // Indefinite length... find END tag
      const state = buffer.save();
      const res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res))
        return res;

      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };

    DERNode$1.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (;;) {
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;

        let res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len);
        else
          res = this._skipUntilEnd(buffer, fail);

        // Failure
        if (buffer.isError(res))
          return res;

        if (tag.tagStr === 'end')
          break;
      }
    };

    DERNode$1.prototype._decodeList = function decodeList(buffer, tag, decoder,
      options) {
      const result = [];
      while (!buffer.isEmpty()) {
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd))
          return possibleEnd;

        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };

    DERNode$1.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused: unused, data: buffer.raw() };
      } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error('Decoding of string type: bmpstr length mismatch');

        let str = '';
        for (let i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
          return buffer.error('Decoding of string type: ' +
                              'numstr unsupported characters');
        }
        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'objDesc') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
          return buffer.error('Decoding of string type: ' +
                              'printstr unsupported characters');
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };

    DERNode$1.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      let result;
      const identifiers = [];
      let ident = 0;
      let subident = 0;
      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 0x80)
        identifiers.push(ident);

      const first = (identifiers[0] / 40) | 0;
      const second = identifiers[0] % 40;

      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));

      if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined)
          tmp = values[result.join('.')];
        if (tmp !== undefined)
          result = tmp;
      }

      return result;
    };

    DERNode$1.prototype._decodeTime = function decodeTime(buffer, tag) {
      const str = buffer.raw().toString();

      let year;
      let mon;
      let day;
      let hour;
      let min;
      let sec;
      if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2000 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }

      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };

    DERNode$1.prototype._decodeNull = function decodeNull() {
      return null;
    };

    DERNode$1.prototype._decodeBool = function decodeBool(buffer) {
      const res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };

    DERNode$1.prototype._decodeInt = function decodeInt(buffer, values) {
      // Bigint, return as it is (assume big endian)
      const raw = buffer.raw();
      let res = new bn$2(raw);

      if (values)
        res = values[res.toString(10)] || res;

      return res;
    };

    DERNode$1.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getDecoder('der').tree;
    };

    // Utility methods

    function derDecodeTag(buf, fail) {
      let tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;

      const cls = der.tagClass[tag >> 6];
      const primitive = (tag & 0x20) === 0;

      // Multi-octet tag - load
      if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;

          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }
      const tagStr = der.tag[tag];

      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }

    function derDecodeLen(buf, primitive, fail) {
      let len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;

      // Indefinite form
      if (!primitive && len === 0x80)
        return null;

      // Definite form
      if ((len & 0x80) === 0) {
        // Short form
        return len;
      }

      // Long form
      const num = len & 0x7f;
      if (num > 4)
        return buf.error('length octect is too long');

      len = 0;
      for (let i = 0; i < num; i++) {
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }

      return len;
    }

    const Buffer$M = safer_1.Buffer;



    function PEMDecoder(entity) {
      der_1$1.call(this, entity);
      this.enc = 'pem';
    }
    inherits_browser$1(PEMDecoder, der_1$1);
    var pem$1 = PEMDecoder;

    PEMDecoder.prototype.decode = function decode(data, options) {
      const lines = data.toString().split(/[\r\n]+/g);

      const label = options.label.toUpperCase();

      const re = /^-----(BEGIN|END) ([^-]+)-----$/;
      let start = -1;
      let end = -1;
      for (let i = 0; i < lines.length; i++) {
        const match = lines[i].match(re);
        if (match === null)
          continue;

        if (match[2] !== label)
          continue;

        if (start === -1) {
          if (match[1] !== 'BEGIN')
            break;
          start = i;
        } else {
          if (match[1] !== 'END')
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error('PEM section not found for: ' + label);

      const base64 = lines.slice(start + 1, end).join('');
      // Remove excessive symbols
      base64.replace(/[^a-z0-9+/=]+/gi, '');

      const input = Buffer$M.from(base64, 'base64');
      return der_1$1.prototype.decode.call(this, input, options);
    };

    var decoders_1 = createCommonjsModule(function (module, exports) {

    const decoders = exports;

    decoders.der = der_1$1;
    decoders.pem = pem$1;
    });

    var api_1 = createCommonjsModule(function (module, exports) {





    const api = exports;

    api.define = function define(name, body) {
      return new Entity(name, body);
    };

    function Entity(name, body) {
      this.name = name;
      this.body = body;

      this.decoders = {};
      this.encoders = {};
    }

    Entity.prototype._createNamed = function createNamed(Base) {
      const name = this.name;

      function Generated(entity) {
        this._initNamed(entity, name);
      }
      inherits_browser$1(Generated, Base);
      Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
      };

      return new Generated(this);
    };

    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der';
      // Lazily create decoder
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(decoders_1[enc]);
      return this.decoders[enc];
    };

    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };

    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der';
      // Lazily create encoder
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(encoders_1[enc]);
      return this.encoders[enc];
    };

    Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
    });

    var base_1 = createCommonjsModule(function (module, exports) {

    const base = exports;

    base.Reporter = reporter.Reporter;
    base.DecoderBuffer = buffer$2.DecoderBuffer;
    base.EncoderBuffer = buffer$2.EncoderBuffer;
    base.Node = node;
    });

    var constants_1$4 = createCommonjsModule(function (module, exports) {

    const constants = exports;

    // Helper
    constants._reverse = function reverse(map) {
      const res = {};

      Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;

        const value = map[key];
        res[value] = key;
      });

      return res;
    };

    constants.der = der;
    });

    var asn1_1 = createCommonjsModule(function (module, exports) {

    const asn1 = exports;

    asn1.bignum = bn$2;

    asn1.define = api_1.define;
    asn1.base = base_1;
    asn1.constants = constants_1$4;
    asn1.decoders = decoders_1;
    asn1.encoders = encoders_1;
    });

    var Time = asn1_1.define('Time', function () {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });

    var AttributeTypeValue = asn1_1.define('AttributeTypeValue', function () {
      this.seq().obj(
        this.key('type').objid(),
        this.key('value').any()
      );
    });

    var AlgorithmIdentifier = asn1_1.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('parameters').optional(),
        this.key('curve').objid().optional()
      );
    });

    var SubjectPublicKeyInfo = asn1_1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      );
    });

    var RelativeDistinguishedName = asn1_1.define('RelativeDistinguishedName', function () {
      this.setof(AttributeTypeValue);
    });

    var RDNSequence = asn1_1.define('RDNSequence', function () {
      this.seqof(RelativeDistinguishedName);
    });

    var Name = asn1_1.define('Name', function () {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });

    var Validity = asn1_1.define('Validity', function () {
      this.seq().obj(
        this.key('notBefore').use(Time),
        this.key('notAfter').use(Time)
      );
    });

    var Extension = asn1_1.define('Extension', function () {
      this.seq().obj(
        this.key('extnID').objid(),
        this.key('critical').bool().def(false),
        this.key('extnValue').octstr()
      );
    });

    var TBSCertificate = asn1_1.define('TBSCertificate', function () {
      this.seq().obj(
        this.key('version').explicit(0).int().optional(),
        this.key('serialNumber').int(),
        this.key('signature').use(AlgorithmIdentifier),
        this.key('issuer').use(Name),
        this.key('validity').use(Validity),
        this.key('subject').use(Name),
        this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
        this.key('issuerUniqueID').implicit(1).bitstr().optional(),
        this.key('subjectUniqueID').implicit(2).bitstr().optional(),
        this.key('extensions').explicit(3).seqof(Extension).optional()
      );
    });

    var X509Certificate = asn1_1.define('X509Certificate', function () {
      this.seq().obj(
        this.key('tbsCertificate').use(TBSCertificate),
        this.key('signatureAlgorithm').use(AlgorithmIdentifier),
        this.key('signatureValue').bitstr()
      );
    });

    var certificate = X509Certificate;

    var certificate$1 = certificate;

    var RSAPrivateKey = asn1_1.define('RSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('modulus').int(),
        this.key('publicExponent').int(),
        this.key('privateExponent').int(),
        this.key('prime1').int(),
        this.key('prime2').int(),
        this.key('exponent1').int(),
        this.key('exponent2').int(),
        this.key('coefficient').int()
      );
    });
    var RSAPrivateKey_1 = RSAPrivateKey;

    var RSAPublicKey = asn1_1.define('RSAPublicKey', function () {
      this.seq().obj(
        this.key('modulus').int(),
        this.key('publicExponent').int()
      );
    });
    var RSAPublicKey_1 = RSAPublicKey;

    var PublicKey = asn1_1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier$1),
        this.key('subjectPublicKey').bitstr()
      );
    });
    var PublicKey_1 = PublicKey;

    var AlgorithmIdentifier$1 = asn1_1.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('none').null_().optional(),
        this.key('curve').objid().optional(),
        this.key('params').seq().obj(
          this.key('p').int(),
          this.key('q').int(),
          this.key('g').int()
        ).optional()
      );
    });

    var PrivateKeyInfo = asn1_1.define('PrivateKeyInfo', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('algorithm').use(AlgorithmIdentifier$1),
        this.key('subjectPrivateKey').octstr()
      );
    });
    var PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1_1.define('EncryptedPrivateKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').seq().obj(
          this.key('id').objid(),
          this.key('decrypt').seq().obj(
            this.key('kde').seq().obj(
              this.key('id').objid(),
              this.key('kdeparams').seq().obj(
                this.key('salt').octstr(),
                this.key('iters').int()
              )
            ),
            this.key('cipher').seq().obj(
              this.key('algo').objid(),
              this.key('iv').octstr()
            )
          )
        ),
        this.key('subjectPrivateKey').octstr()
      );
    });

    var EncryptedPrivateKey = EncryptedPrivateKeyInfo;

    var DSAPrivateKey = asn1_1.define('DSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int(),
        this.key('pub_key').int(),
        this.key('priv_key').int()
      );
    });
    var DSAPrivateKey_1 = DSAPrivateKey;

    var DSAparam = asn1_1.define('DSAparam', function () {
      this.int();
    });

    var ECPrivateKey = asn1_1.define('ECPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('privateKey').octstr(),
        this.key('parameters').optional().explicit(0).use(ECParameters),
        this.key('publicKey').optional().explicit(1).bitstr()
      );
    });
    var ECPrivateKey_1 = ECPrivateKey;

    var ECParameters = asn1_1.define('ECParameters', function () {
      this.choice({
        namedCurve: this.objid()
      });
    });

    var signature$2 = asn1_1.define('signature', function () {
      this.seq().obj(
        this.key('r').int(),
        this.key('s').int()
      );
    });

    var asn1_1$1 = {
    	certificate: certificate$1,
    	RSAPrivateKey: RSAPrivateKey_1,
    	RSAPublicKey: RSAPublicKey_1,
    	PublicKey: PublicKey_1,
    	PrivateKey: PrivateKey,
    	EncryptedPrivateKey: EncryptedPrivateKey,
    	DSAPrivateKey: DSAPrivateKey_1,
    	DSAparam: DSAparam,
    	ECPrivateKey: ECPrivateKey_1,
    	signature: signature$2
    };

    var aesid = {
    	"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
    	"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
    	"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
    	"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
    	"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
    	"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
    	"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
    	"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
    	"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
    	"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
    	"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
    	"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };

    var aesid$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': aesid
    });

    // adapted from https://github.com/apatil/pemstrip
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;


    var Buffer$N = safeBuffer.Buffer;
    var fixProc = function (okey, password) {
      var key = okey.toString();
      var match = key.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer$N.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
      } else {
        var suite = 'aes' + match[1];
        var iv = Buffer$N.from(match[2], 'hex');
        var cipherText = Buffer$N.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp_bytestokey(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = browser$a.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer$N.concat(out);
      }
      var tag = key.match(startRegex)[1];
      return {
        tag: tag,
        data: decrypted
      }
    };

    var aesid$2 = getCjsExportFromNamespace(aesid$1);

    var Buffer$O = safeBuffer.Buffer;
    var parseAsn1 = parseKeys;

    function parseKeys (buffer) {
      var password;
      if (typeof buffer === 'object' && !Buffer$O.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
      }
      if (typeof buffer === 'string') {
        buffer = Buffer$O.from(buffer);
      }

      var stripped = fixProc(buffer, password);

      var type = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;
      switch (type) {
        case 'CERTIFICATE':
          ndata = asn1_1$1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
          // falls through
        case 'PUBLIC KEY':
          if (!ndata) {
            ndata = asn1_1$1.PublicKey.decode(data, 'der');
          }
          subtype = ndata.algorithm.algorithm.join('.');
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1_1$1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
            case '1.2.840.10045.2.1':
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: 'ec',
                data: ndata
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.pub_key = asn1_1$1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
          // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
          data = asn1_1$1.EncryptedPrivateKey.decode(data, 'der');
          data = decrypt$2(data, password);
          // falls through
        case 'PRIVATE KEY':
          ndata = asn1_1$1.PrivateKey.decode(data, 'der');
          subtype = ndata.algorithm.algorithm.join('.');
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1_1$1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
            case '1.2.840.10045.2.1':
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1_1$1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.priv_key = asn1_1$1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
          // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
          return asn1_1$1.RSAPublicKey.decode(data, 'der')
        case 'RSA PRIVATE KEY':
          return asn1_1$1.RSAPrivateKey.decode(data, 'der')
        case 'DSA PRIVATE KEY':
          return {
            type: 'dsa',
            params: asn1_1$1.DSAPrivateKey.decode(data, 'der')
          }
        case 'EC PRIVATE KEY':
          data = asn1_1$1.ECPrivateKey.decode(data, 'der');
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          }
        default: throw new Error('unknown key type ' + type)
      }
    }
    parseKeys.signature = asn1_1$1.signature;
    function decrypt$2 (data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid$2[data.algorithm.decrypt.cipher.algo.join('.')];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split('-')[1], 10) / 8;
      var key = browser$9.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
      var cipher = browser$a.createDecipheriv(algo, key, iv);
      var out = [];
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      return Buffer$O.concat(out)
    }

    var curves = {
    	"1.3.132.0.10": "secp256k1",
    	"1.3.132.0.33": "p224",
    	"1.2.840.10045.3.1.1": "p192",
    	"1.2.840.10045.3.1.7": "p256",
    	"1.3.132.0.34": "p384",
    	"1.3.132.0.35": "p521"
    };

    var curves$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': curves
    });

    var curves$2 = getCjsExportFromNamespace(curves$1);

    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer$P = safeBuffer.Buffer;


    var EC$1 = elliptic_1.ec;




    function sign$1 (hash, key, hashType, signType, tag) {
      var priv = parseAsn1(key);
      if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
        return ecSign(hash, priv)
      } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type')
        return dsaSign(hash, priv, hashType)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
      }
      hash = Buffer$P.concat([tag, hash]);
      var len = priv.modulus.byteLength();
      var pad = [0, 1];
      while (hash.length + pad.length + 1 < len) pad.push(0xff);
      pad.push(0x00);
      var i = -1;
      while (++i < hash.length) pad.push(hash[i]);

      var out = browserifyRsa(pad, priv);
      return out
    }

    function ecSign (hash, priv) {
      var curveId = curves$2[priv.curve.join('.')];
      if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

      var curve = new EC$1(curveId);
      var key = curve.keyFromPrivate(priv.privateKey);
      var out = key.sign(hash);

      return Buffer$P.from(out.toDER())
    }

    function dsaSign (hash, priv, algo) {
      var x = priv.params.priv_key;
      var p = priv.params.p;
      var q = priv.params.q;
      var g = priv.params.g;
      var r = new bn$3(0);
      var k;
      var H = bits2int(hash, q).mod(q);
      var s = false;
      var kv = getKey(x, q, hash, algo);
      while (s === false) {
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
          s = false;
          r = new bn$3(0);
        }
      }
      return toDER(r, s)
    }

    function toDER (r, s) {
      r = r.toArray();
      s = s.toArray();

      // Pad values
      if (r[0] & 0x80) r = [0].concat(r);
      if (s[0] & 0x80) s = [0].concat(s);

      var total = r.length + s.length + 4;
      var res = [0x30, total, 0x02, r.length];
      res = res.concat(r, [0x02, s.length], s);
      return Buffer$P.from(res)
    }

    function getKey (x, q, hash, algo) {
      x = Buffer$P.from(x.toArray());
      if (x.length < q.byteLength()) {
        var zeros = Buffer$P.alloc(q.byteLength() - x.length);
        x = Buffer$P.concat([zeros, x]);
      }
      var hlen = hash.length;
      var hbits = bits2octets(hash, q);
      var v = Buffer$P.alloc(hlen);
      v.fill(1);
      var k = Buffer$P.alloc(hlen);
      k = browser$7(algo, k).update(v).update(Buffer$P.from([0])).update(x).update(hbits).digest();
      v = browser$7(algo, k).update(v).digest();
      k = browser$7(algo, k).update(v).update(Buffer$P.from([1])).update(x).update(hbits).digest();
      v = browser$7(algo, k).update(v).digest();
      return { k: k, v: v }
    }

    function bits2int (obits, q) {
      var bits = new bn$3(obits);
      var shift = (obits.length << 3) - q.bitLength();
      if (shift > 0) bits.ishrn(shift);
      return bits
    }

    function bits2octets (bits, q) {
      bits = bits2int(bits, q);
      bits = bits.mod(q);
      var out = Buffer$P.from(bits.toArray());
      if (out.length < q.byteLength()) {
        var zeros = Buffer$P.alloc(q.byteLength() - out.length);
        out = Buffer$P.concat([zeros, out]);
      }
      return out
    }

    function makeKey (q, kv, algo) {
      var t;
      var k;

      do {
        t = Buffer$P.alloc(0);

        while (t.length * 8 < q.bitLength()) {
          kv.v = browser$7(algo, kv.k).update(kv.v).digest();
          t = Buffer$P.concat([t, kv.v]);
        }

        k = bits2int(t, q);
        kv.k = browser$7(algo, kv.k).update(kv.v).update(Buffer$P.from([0])).digest();
        kv.v = browser$7(algo, kv.k).update(kv.v).digest();
      } while (k.cmp(q) !== -1)

      return k
    }

    function makeR (g, k, p, q) {
      return g.toRed(bn$3.mont(p)).redPow(k).fromRed().mod(q)
    }

    var sign_1 = sign$1;
    var getKey_1 = getKey;
    var makeKey_1 = makeKey;
    sign_1.getKey = getKey_1;
    sign_1.makeKey = makeKey_1;

    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer$Q = safeBuffer.Buffer;

    var EC$2 = elliptic_1.ec;



    function verify (sig, hash, key, signType, tag) {
      var pub = parseAsn1(key);
      if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
        return ecVerify(sig, hash, pub)
      } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type')
        return dsaVerify(sig, hash, pub)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
      }
      hash = Buffer$Q.concat([tag, hash]);
      var len = pub.modulus.byteLength();
      var pad = [1];
      var padNum = 0;
      while (hash.length + pad.length + 2 < len) {
        pad.push(0xff);
        padNum++;
      }
      pad.push(0x00);
      var i = -1;
      while (++i < hash.length) {
        pad.push(hash[i]);
      }
      pad = Buffer$Q.from(pad);
      var red = bn$3.mont(pub.modulus);
      sig = new bn$3(sig).toRed(red);

      sig = sig.redPow(new bn$3(pub.publicExponent));
      sig = Buffer$Q.from(sig.fromRed().toArray());
      var out = padNum < 8 ? 1 : 0;
      len = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length) out = 1;

      i = -1;
      while (++i < len) out |= sig[i] ^ pad[i];
      return out === 0
    }

    function ecVerify (sig, hash, pub) {
      var curveId = curves$2[pub.data.algorithm.curve.join('.')];
      if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

      var curve = new EC$2(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;

      return curve.verify(hash, sig, pubkey)
    }

    function dsaVerify (sig, hash, pub) {
      var p = pub.data.p;
      var q = pub.data.q;
      var g = pub.data.g;
      var y = pub.data.pub_key;
      var unpacked = parseAsn1.signature.decode(sig, 'der');
      var s = unpacked.s;
      var r = unpacked.r;
      checkValue(s, q);
      checkValue(r, q);
      var montp = bn$3.mont(p);
      var w = s.invm(q);
      var v = g.toRed(montp)
        .redPow(new bn$3(hash).mul(w).mod(q))
        .fromRed()
        .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
        .mod(p)
        .mod(q);
      return v.cmp(r) === 0
    }

    function checkValue (b, q) {
      if (b.cmpn(0) <= 0) throw new Error('invalid sig')
      if (b.cmp(q) >= q) throw new Error('invalid sig')
    }

    var verify_1 = verify;

    var Buffer$R = safeBuffer.Buffer;







    Object.keys(algorithms$2).forEach(function (key) {
      algorithms$2[key].id = Buffer$R.from(algorithms$2[key].id, 'hex');
      algorithms$2[key.toLowerCase()] = algorithms$2[key];
    });

    function Sign (algorithm) {
      readableBrowser$1.Writable.call(this);

      var data = algorithms$2[algorithm];
      if (!data) throw new Error('Unknown message digest')

      this._hashType = data.hash;
      this._hash = browser$6(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits_browser$1(Sign, readableBrowser$1.Writable);

    Sign.prototype._write = function _write (data, _, done) {
      this._hash.update(data);
      done();
    };

    Sign.prototype.update = function update (data, enc) {
      if (typeof data === 'string') data = Buffer$R.from(data, enc);

      this._hash.update(data);
      return this
    };

    Sign.prototype.sign = function signMethod (key, enc) {
      this.end();
      var hash = this._hash.digest();
      var sig = sign_1(hash, key, this._hashType, this._signType, this._tag);

      return enc ? sig.toString(enc) : sig
    };

    function Verify (algorithm) {
      readableBrowser$1.Writable.call(this);

      var data = algorithms$2[algorithm];
      if (!data) throw new Error('Unknown message digest')

      this._hash = browser$6(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits_browser$1(Verify, readableBrowser$1.Writable);

    Verify.prototype._write = function _write (data, _, done) {
      this._hash.update(data);
      done();
    };

    Verify.prototype.update = function update (data, enc) {
      if (typeof data === 'string') data = Buffer$R.from(data, enc);

      this._hash.update(data);
      return this
    };

    Verify.prototype.verify = function verifyMethod (key, sig, enc) {
      if (typeof sig === 'string') sig = Buffer$R.from(sig, enc);

      this.end();
      var hash = this._hash.digest();
      return verify_1(sig, hash, key, this._signType, this._tag)
    };

    function createSign (algorithm) {
      return new Sign(algorithm)
    }

    function createVerify (algorithm) {
      return new Verify(algorithm)
    }

    var browser$d = {
      Sign: createSign,
      Verify: createVerify,
      createSign: createSign,
      createVerify: createVerify
    };

    var browser$e = function createECDH (curve) {
      return new ECDH(curve)
    };

    var aliases = {
      secp256k1: {
        name: 'secp256k1',
        byteLength: 32
      },
      secp224r1: {
        name: 'p224',
        byteLength: 28
      },
      prime256v1: {
        name: 'p256',
        byteLength: 32
      },
      prime192v1: {
        name: 'p192',
        byteLength: 24
      },
      ed25519: {
        name: 'ed25519',
        byteLength: 32
      },
      secp384r1: {
        name: 'p384',
        byteLength: 48
      },
      secp521r1: {
        name: 'p521',
        byteLength: 66
      }
    };

    aliases.p224 = aliases.secp224r1;
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
    aliases.p384 = aliases.secp384r1;
    aliases.p521 = aliases.secp521r1;

    function ECDH (curve) {
      this.curveType = aliases[curve];
      if (!this.curveType) {
        this.curveType = {
          name: curve
        };
      }
      this.curve = new elliptic_1.ec(this.curveType.name); // eslint-disable-line new-cap
      this.keys = void 0;
    }

    ECDH.prototype.generateKeys = function (enc, format) {
      this.keys = this.curve.genKeyPair();
      return this.getPublicKey(enc, format)
    };

    ECDH.prototype.computeSecret = function (other, inenc, enc) {
      inenc = inenc || 'utf8';
      if (!isBuffer(other)) {
        other = new Buffer(other, inenc);
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic();
      var out = otherPub.mul(this.keys.getPrivate()).getX();
      return formatReturnValue$1(out, enc, this.curveType.byteLength)
    };

    ECDH.prototype.getPublicKey = function (enc, format) {
      var key = this.keys.getPublic(format === 'compressed', true);
      if (format === 'hybrid') {
        if (key[key.length - 1] % 2) {
          key[0] = 7;
        } else {
          key[0] = 6;
        }
      }
      return formatReturnValue$1(key, enc)
    };

    ECDH.prototype.getPrivateKey = function (enc) {
      return formatReturnValue$1(this.keys.getPrivate(), enc)
    };

    ECDH.prototype.setPublicKey = function (pub, enc) {
      enc = enc || 'utf8';
      if (!isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this.keys._importPublic(pub);
      return this
    };

    ECDH.prototype.setPrivateKey = function (priv, enc) {
      enc = enc || 'utf8';
      if (!isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }

      var _priv = new bn$2(priv);
      _priv = _priv.toString(16);
      this.keys = this.curve.genKeyPair();
      this.keys._importPrivate(_priv);
      return this
    };

    function formatReturnValue$1 (bn, enc, len) {
      if (!Array.isArray(bn)) {
        bn = bn.toArray();
      }
      var buf = new Buffer(bn);
      if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([zeros, buf]);
      }
      if (!enc) {
        return buf
      } else {
        return buf.toString(enc)
      }
    }

    var Buffer$S = safeBuffer.Buffer;

    var mgf = function (seed, len) {
      var t = Buffer$S.alloc(0);
      var i = 0;
      var c;
      while (t.length < len) {
        c = i2ops(i++);
        t = Buffer$S.concat([t, browser$6('sha1').update(seed).update(c).digest()]);
      }
      return t.slice(0, len)
    };

    function i2ops (c) {
      var out = Buffer$S.allocUnsafe(4);
      out.writeUInt32BE(c, 0);
      return out
    }

    var xor = function xor (a, b) {
      var len = a.length;
      var i = -1;
      while (++i < len) {
        a[i] ^= b[i];
      }
      return a
    };

    var Buffer$T = safeBuffer.Buffer;

    function withPublic (paddedMsg, key) {
      return Buffer$T.from(paddedMsg
        .toRed(bn$2.mont(key.modulus))
        .redPow(new bn$2(key.publicExponent))
        .fromRed()
        .toArray())
    }

    var withPublic_1 = withPublic;

    var Buffer$U = safeBuffer.Buffer;

    var publicEncrypt = function publicEncrypt (publicKey, msg, reverse) {
      var padding;
      if (publicKey.padding) {
        padding = publicKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseAsn1(publicKey);
      var paddedMsg;
      if (padding === 4) {
        paddedMsg = oaep(key, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new bn$2(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error('data too long for modulus')
        }
      } else {
        throw new Error('unknown padding')
      }
      if (reverse) {
        return browserifyRsa(paddedMsg, key)
      } else {
        return withPublic_1(paddedMsg, key)
      }
    };

    function oaep (key, msg) {
      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = browser$6('sha1').update(Buffer$U.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k - hLen2 - 2) {
        throw new Error('message too long')
      }
      var ps = Buffer$U.alloc(k - mLen - hLen2 - 2);
      var dblen = k - hLen - 1;
      var seed = browser$1(hLen);
      var maskedDb = xor(Buffer$U.concat([iHash, ps, Buffer$U.alloc(1, 1), msg], dblen), mgf(seed, dblen));
      var maskedSeed = xor(seed, mgf(maskedDb, hLen));
      return new bn$2(Buffer$U.concat([Buffer$U.alloc(1), maskedSeed, maskedDb], k))
    }
    function pkcs1 (key, msg, reverse) {
      var mLen = msg.length;
      var k = key.modulus.byteLength();
      if (mLen > k - 11) {
        throw new Error('message too long')
      }
      var ps;
      if (reverse) {
        ps = Buffer$U.alloc(k - mLen - 3, 0xff);
      } else {
        ps = nonZero(k - mLen - 3);
      }
      return new bn$2(Buffer$U.concat([Buffer$U.from([0, reverse ? 1 : 2]), ps, Buffer$U.alloc(1), msg], k))
    }
    function nonZero (len) {
      var out = Buffer$U.allocUnsafe(len);
      var i = 0;
      var cache = browser$1(len * 2);
      var cur = 0;
      var num;
      while (i < len) {
        if (cur === cache.length) {
          cache = browser$1(len * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i++] = num;
        }
      }
      return out
    }

    var Buffer$V = safeBuffer.Buffer;

    var privateDecrypt = function privateDecrypt (privateKey, enc, reverse) {
      var padding;
      if (privateKey.padding) {
        padding = privateKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }

      var key = parseAsn1(privateKey);
      var k = key.modulus.byteLength();
      if (enc.length > k || new bn$2(enc).cmp(key.modulus) >= 0) {
        throw new Error('decryption error')
      }
      var msg;
      if (reverse) {
        msg = withPublic_1(new bn$2(enc), key);
      } else {
        msg = browserifyRsa(enc, key);
      }
      var zBuffer = Buffer$V.alloc(k - msg.length);
      msg = Buffer$V.concat([zBuffer, msg], k);
      if (padding === 4) {
        return oaep$1(key, msg)
      } else if (padding === 1) {
        return pkcs1$1(key, msg, reverse)
      } else if (padding === 3) {
        return msg
      } else {
        throw new Error('unknown padding')
      }
    };

    function oaep$1 (key, msg) {
      var k = key.modulus.byteLength();
      var iHash = browser$6('sha1').update(Buffer$V.alloc(0)).digest();
      var hLen = iHash.length;
      if (msg[0] !== 0) {
        throw new Error('decryption error')
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor(maskedSeed, mgf(maskedDb, hLen));
      var db = xor(maskedDb, mgf(seed, k - hLen - 1));
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error('decryption error')
      }
      var i = hLen;
      while (db[i] === 0) {
        i++;
      }
      if (db[i++] !== 1) {
        throw new Error('decryption error')
      }
      return db.slice(i)
    }

    function pkcs1$1 (key, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i = 2;
      var status = 0;
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++;
          break
        }
      }
      var ps = msg.slice(2, i - 1);

      if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
        throw new Error('decryption error')
      }
      return msg.slice(i)
    }
    function compare (a, b) {
      a = Buffer$V.from(a);
      b = Buffer$V.from(b);
      var dif = 0;
      var len = a.length;
      if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
      }
      var i = -1;
      while (++i < len) {
        dif += (a[i] ^ b[i]);
      }
      return dif
    }

    var browser$f = createCommonjsModule(function (module, exports) {
    exports.publicEncrypt = publicEncrypt;
    exports.privateDecrypt = privateDecrypt;

    exports.privateEncrypt = function privateEncrypt (key, buf) {
      return exports.publicEncrypt(key, buf, true)
    };

    exports.publicDecrypt = function publicDecrypt (key, buf) {
      return exports.privateDecrypt(key, buf, true)
    };
    });

    var browser$g = createCommonjsModule(function (module, exports) {

    function oldBrowser () {
      throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
    }


    var Buffer = safeBuffer.Buffer;
    var kBufferMaxLength = safeBuffer.kMaxLength;
    var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
    var kMaxUint32 = Math.pow(2, 32) - 1;
    function assertOffset (offset, length) {
      if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
        throw new TypeError('offset must be a number')
      }

      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError('offset must be a uint32')
      }

      if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError('offset out of range')
      }
    }

    function assertSize (size, offset, length) {
      if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
        throw new TypeError('size must be a number')
      }

      if (size > kMaxUint32 || size < 0) {
        throw new TypeError('size must be a uint32')
      }

      if (size + offset > length || size > kBufferMaxLength) {
        throw new RangeError('buffer too small')
      }
    }
    if ((crypto && crypto.getRandomValues) || !browser$8) {
      exports.randomFill = randomFill;
      exports.randomFillSync = randomFillSync;
    } else {
      exports.randomFill = oldBrowser;
      exports.randomFillSync = oldBrowser;
    }
    function randomFill (buf, offset, size, cb) {
      if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
      }

      if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
      } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
      } else if (typeof cb !== 'function') {
        throw new TypeError('"cb" argument must be a function')
      }
      assertOffset(offset, buf.length);
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size, cb)
    }

    function actualFill (buf, offset, size, cb) {
      {
        var ourBuf = buf.buffer;
        var uint = new Uint8Array(ourBuf, offset, size);
        crypto.getRandomValues(uint);
        if (cb) {
          nextTick(function () {
            cb(null, buf);
          });
          return
        }
        return buf
      }
    }
    function randomFillSync (buf, offset, size) {
      if (typeof offset === 'undefined') {
        offset = 0;
      }
      if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
      }

      assertOffset(offset, buf.length);

      if (size === undefined) size = buf.length - offset;

      assertSize(size, offset, buf.length);

      return actualFill(buf, offset, size)
    }
    });

    var cryptoBrowserify = createCommonjsModule(function (module, exports) {

    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = browser$1;
    exports.createHash = exports.Hash = browser$6;
    exports.createHmac = exports.Hmac = browser$7;


    var algoKeys = Object.keys(algos);
    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
    exports.getHashes = function () {
      return hashes
    };


    exports.pbkdf2 = browser$9.pbkdf2;
    exports.pbkdf2Sync = browser$9.pbkdf2Sync;



    exports.Cipher = browser$b.Cipher;
    exports.createCipher = browser$b.createCipher;
    exports.Cipheriv = browser$b.Cipheriv;
    exports.createCipheriv = browser$b.createCipheriv;
    exports.Decipher = browser$b.Decipher;
    exports.createDecipher = browser$b.createDecipher;
    exports.Decipheriv = browser$b.Decipheriv;
    exports.createDecipheriv = browser$b.createDecipheriv;
    exports.getCiphers = browser$b.getCiphers;
    exports.listCiphers = browser$b.listCiphers;



    exports.DiffieHellmanGroup = browser$c.DiffieHellmanGroup;
    exports.createDiffieHellmanGroup = browser$c.createDiffieHellmanGroup;
    exports.getDiffieHellman = browser$c.getDiffieHellman;
    exports.createDiffieHellman = browser$c.createDiffieHellman;
    exports.DiffieHellman = browser$c.DiffieHellman;



    exports.createSign = browser$d.createSign;
    exports.Sign = browser$d.Sign;
    exports.createVerify = browser$d.createVerify;
    exports.Verify = browser$d.Verify;

    exports.createECDH = browser$e;



    exports.publicEncrypt = browser$f.publicEncrypt;
    exports.privateEncrypt = browser$f.privateEncrypt;
    exports.publicDecrypt = browser$f.publicDecrypt;
    exports.privateDecrypt = browser$f.privateDecrypt;

    // the least I can do is make error messages for the rest of the node.js/crypto api.
    // ;[
    //   'createCredentials'
    // ].forEach(function (name) {
    //   exports[name] = function () {
    //     throw new Error([
    //       'sorry, ' + name + ' is not implemented yet',
    //       'we accept pull requests',
    //       'https://github.com/crypto-browserify/crypto-browserify'
    //     ].join('\n'))
    //   }
    // })



    exports.randomFill = browser$g.randomFill;
    exports.randomFillSync = browser$g.randomFillSync;

    exports.createCredentials = function () {
      throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
      ].join('\n'))
    };

    exports.constants = {
      'DH_CHECK_P_NOT_SAFE_PRIME': 2,
      'DH_CHECK_P_NOT_PRIME': 1,
      'DH_UNABLE_TO_CHECK_GENERATOR': 4,
      'DH_NOT_SUITABLE_GENERATOR': 8,
      'NPN_ENABLED': 1,
      'ALPN_ENABLED': 1,
      'RSA_PKCS1_PADDING': 1,
      'RSA_SSLV23_PADDING': 2,
      'RSA_NO_PADDING': 3,
      'RSA_PKCS1_OAEP_PADDING': 4,
      'RSA_X931_PADDING': 5,
      'RSA_PKCS1_PSS_PADDING': 6,
      'POINT_CONVERSION_COMPRESSED': 2,
      'POINT_CONVERSION_UNCOMPRESSED': 4,
      'POINT_CONVERSION_HYBRID': 6
    };
    });

    var require$$1 = {};

    var scrypt = createCommonjsModule(function (module, exports) {

    (function(root) {
        const MAX_VALUE = 0x7fffffff;

        // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
        // See: https://github.com/dchest/scrypt-async-js
        function SHA256(m) {
            const K = new Uint32Array([
               0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
               0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
               0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
               0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
               0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
               0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
               0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
               0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
               0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
               0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
               0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
               0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
               0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
           ]);

            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);

            function blocks(p) {
                let off = 0, len = p.length;
                while (len >= 64) {
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                    for (i = 0; i < 16; i++) {
                        j = off + i*4;
                        w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                        ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                    }

                    for (i = 16; i < 64; i++) {
                        u = w[i-2];
                        t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                        u = w[i-15];
                        t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                        w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                    }

                    for (i = 0; i < 64; i++) {
                        t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                 ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                              ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                        t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                        h = g;
                        g = f;
                        f = e;
                        e = (d + t1) | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = (t1 + t2) | 0;
                    }

                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                    h4 = (h4 + e) | 0;
                    h5 = (h5 + f) | 0;
                    h6 = (h6 + g) | 0;
                    h7 = (h7 + h) | 0;

                    off += 64;
                    len -= 64;
                }
            }

            blocks(m);

            let i, bytesLeft = m.length % 64,
            bitLenHi = (m.length / 0x20000000) | 0,
            bitLenLo = m.length << 3,
            numZeros = (bytesLeft < 56) ? 56 : 120,
            p = m.slice(m.length - bytesLeft, m.length);

            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);

            blocks(p);

            return [
                (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
        }

        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);

            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);

            let i;
            let dk = [];

            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

            // increments counter inside inner
            function incrementCounter() {
                for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                    inner[i]++;
                    if (inner[i] <= 0xff) return;
                    inner[i] = 0;
                }
            }

            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }

            return dk;
        }

        // The following is an adaptation of scryptsy
        // See: https://www.npmjs.com/package/scryptsy
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;

            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }

        function R(a, b) {
            return (a << b) | (a >>> (32 - b));
        }

        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);

            for (let i = 8; i > 0; i -= 2) {
                x[ 4] ^= R(x[ 0] + x[12], 7);
                x[ 8] ^= R(x[ 4] + x[ 0], 9);
                x[12] ^= R(x[ 8] + x[ 4], 13);
                x[ 0] ^= R(x[12] + x[ 8], 18);
                x[ 9] ^= R(x[ 5] + x[ 1], 7);
                x[13] ^= R(x[ 9] + x[ 5], 9);
                x[ 1] ^= R(x[13] + x[ 9], 13);
                x[ 5] ^= R(x[ 1] + x[13], 18);
                x[14] ^= R(x[10] + x[ 6], 7);
                x[ 2] ^= R(x[14] + x[10], 9);
                x[ 6] ^= R(x[ 2] + x[14], 13);
                x[10] ^= R(x[ 6] + x[ 2], 18);
                x[ 3] ^= R(x[15] + x[11], 7);
                x[ 7] ^= R(x[ 3] + x[15], 9);
                x[11] ^= R(x[ 7] + x[ 3], 13);
                x[15] ^= R(x[11] + x[ 7], 18);
                x[ 1] ^= R(x[ 0] + x[ 3], 7);
                x[ 2] ^= R(x[ 1] + x[ 0], 9);
                x[ 3] ^= R(x[ 2] + x[ 1], 13);
                x[ 0] ^= R(x[ 3] + x[ 2], 18);
                x[ 6] ^= R(x[ 5] + x[ 4], 7);
                x[ 7] ^= R(x[ 6] + x[ 5], 9);
                x[ 4] ^= R(x[ 7] + x[ 6], 13);
                x[ 5] ^= R(x[ 4] + x[ 7], 18);
                x[11] ^= R(x[10] + x[ 9], 7);
                x[ 8] ^= R(x[11] + x[10], 9);
                x[ 9] ^= R(x[ 8] + x[11], 13);
                x[10] ^= R(x[ 9] + x[ 8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }

            for (let i = 0; i < 16; ++i) {
                B[i] += x[i];
            }
        }

        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
                D[i] ^= S[Si + i];
            }
        }

        function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
                dest[destPos++] = src[srcPos++];
            }
        }

        function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }

            for (let i = 0; i < o.length; i++) {
                const v = o[i];
                if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }

            return true;
        }

        function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
        }

        // N = Cpu cost, r = Memory cost, p = parallelization cost
        // callback(error, progress, key)
        function _scrypt(password, salt, N, r, p, dkLen, callback) {

            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');

            dkLen = ensureInteger(dkLen, 'dkLen');

            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

            if (!checkBufferish(password)) {
                throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);

            if (!checkBufferish(salt)) {
                throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);

            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r);
            for (let i = 0; i < B.length; i++) {
                const j = i * 4;
                B[i] = ((b[j + 3] & 0xff) << 24) |
                       ((b[j + 2] & 0xff) << 16) |
                       ((b[j + 1] & 0xff) << 8) |
                       ((b[j + 0] & 0xff) << 0);
            }

            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);

            const Yi = 32 * r;

            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8

            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;

            // Set this to true to abandon the scrypt on the next step
            let stop = false;

            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;

            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;

            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error('cancelled'), currentOp / totalOps);
                }

                let steps;

                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;

                        arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                        state = 1;                                         // Move to ROMix 2
                        i1 = 0;

                        // Fall through

                    case 1:

                        // Run up to 1000 steps of the first inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                  // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                        }

                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;

                        if (callback) {
                            // Call the callback with the progress (optionally stopping us)
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        i1 = 0;                                          // Move to ROMix 6
                        state = 2;

                        // Fall through

                    case 2:

                        // Run up to 1000 steps of the second inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                // ROMix - 6
                            const offset = (2 * r - 1) * 16;             // ROMix - 7
                            const j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                        }

                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;

                        // Call the callback with the progress (optionally stopping us)
                        if (callback) {
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }

                        b = [];
                        for (let i = 0; i < B.length; i++) {
                            b.push((B[i] >>  0) & 0xff);
                            b.push((B[i] >>  8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }

                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                        // Send the result to the callback
                        if (callback) { callback(null, 1.0, derivedKey); }

                        // Done; don't break (which would reschedule)
                        return derivedKey;
                }

                // Schedule the next steps
                if (callback) { nextTick(incrementalSMix); }
            };

            // Run the smix state machine until completion
            if (!callback) {
                while (true) {
                    const derivedKey = incrementalSMix();
                    if (derivedKey != undefined) { return derivedKey; }
                }
            }

            // Bootstrap the async incremental smix
            incrementalSMix();
        }

        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) { progressCallback(0); }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };

        // node.js
        {
           module.exports = lib;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }

    })();
    });

    var rngBrowser = createCommonjsModule(function (module) {
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection

    // getRandomValues needs to be invoked in a context where "this" is a Crypto
    // implementation. Also, find the complete implementation of crypto on IE11.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }
    });

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i$2 = 0; i$2 < 256; ++i$2) {
      byteToHex[i$2] = (i$2 + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
      return ([bth[buf[i++]], bth[buf[i++]], 
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]], '-',
    	bth[buf[i++]], bth[buf[i++]],
    	bth[buf[i++]], bth[buf[i++]],
    	bth[buf[i++]], bth[buf[i++]]]).join('');
    }

    var bytesToUuid_1 = bytesToUuid;

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    var _nodeId;
    var _clockseq;

    // Previous uuid creation time
    var _lastMSecs = 0;
    var _lastNSecs = 0;

    // See https://github.com/broofa/node-uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189
      if (node == null || clockseq == null) {
        var seedBytes = rngBrowser();
        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
          ];
        }
        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      }

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf ? buf : bytesToUuid_1(b);
    }

    var v1_1 = v1;

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rngBrowser)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid_1(rnds);
    }

    var v4_1 = v4;

    var uuid = v4_1;
    uuid.v1 = v1_1;
    uuid.v4 = v4_1;

    var uuid_1 = uuid;

    const errors$d = {
      IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
      TWEAK_ADD:
        'The tweak was out of range or the resulted private key is invalid',
      TWEAK_MUL: 'The tweak was out of range or equal to zero',
      CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
      SECKEY_INVALID: 'Private Key is invalid',
      PUBKEY_PARSE: 'Public Key could not be parsed',
      PUBKEY_SERIALIZE: 'Public Key serialization error',
      PUBKEY_COMBINE: 'The sum of the public keys is not valid',
      SIG_PARSE: 'Signature could not be parsed',
      SIGN: 'The nonce generation function failed, or the private key was invalid',
      RECOVER: 'Public key could not be recover',
      ECDH: 'Scalar was invalid (zero or overflow)'
    };

    function assert$a (cond, msg) {
      if (!cond) throw new Error(msg)
    }

    function isUint8Array (name, value, length) {
      assert$a(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);

      if (length !== undefined) {
        if (Array.isArray(length)) {
          const numbers = length.join(', ');
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert$a(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert$a(value.length === length, msg);
        }
      }
    }

    function isCompressed (value) {
      assert$a(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
    }

    function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
      if (typeof output === 'function') output = output(length);
      isUint8Array('output', output, length);
      return output
    }

    function toTypeString (value) {
      return Object.prototype.toString.call(value).slice(8, -1)
    }

    var lib$h = (secp256k1) => {
      return {
        contextRandomize (seed) {
          assert$a(
            seed === null || seed instanceof Uint8Array,
            'Expected seed to be an Uint8Array or null'
          );
          if (seed !== null) isUint8Array('seed', seed, 32);

          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors$d.CONTEXT_RANDOMIZE_UNKNOW)
          }
        },

        privateKeyVerify (seckey) {
          isUint8Array('private key', seckey, 32);

          return secp256k1.privateKeyVerify(seckey) === 0
        },

        privateKeyNegate (seckey) {
          isUint8Array('private key', seckey, 32);

          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors$d.IMPOSSIBLE_CASE)
          }
        },

        privateKeyTweakAdd (seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors$d.TWEAK_ADD)
          }
        },

        privateKeyTweakMul (seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors$d.TWEAK_MUL)
          }
        },

        publicKeyVerify (pubkey) {
          isUint8Array('public key', pubkey, [33, 65]);

          return secp256k1.publicKeyVerify(pubkey) === 0
        },

        publicKeyCreate (seckey, compressed = true, output) {
          isUint8Array('private key', seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.SECKEY_INVALID)
            case 2:
              throw new Error(errors$d.PUBKEY_SERIALIZE)
          }
        },

        publicKeyConvert (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$d.PUBKEY_SERIALIZE)
          }
        },

        publicKeyNegate (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$d.IMPOSSIBLE_CASE)
            case 3:
              throw new Error(errors$d.PUBKEY_SERIALIZE)
          }
        },

        publicKeyCombine (pubkeys, compressed = true, output) {
          assert$a(Array.isArray(pubkeys), 'Expected public keys to be an Array');
          assert$a(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
          for (const pubkey of pubkeys) {
            isUint8Array('public key', pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$d.PUBKEY_COMBINE)
            case 3:
              throw new Error(errors$d.PUBKEY_SERIALIZE)
          }
        },

        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$d.TWEAK_ADD)
          }
        },

        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$d.TWEAK_MUL)
          }
        },

        signatureNormalize (sig) {
          isUint8Array('signature', sig, 64);

          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig
            case 1:
              throw new Error(errors$d.SIG_PARSE)
          }
        },

        signatureExport (sig, output) {
          isUint8Array('signature', sig, 64);
          output = getAssertedOutput(output, 72);

          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen)
            case 1:
              throw new Error(errors$d.SIG_PARSE)
            case 2:
              throw new Error(errors$d.IMPOSSIBLE_CASE)
          }
        },

        signatureImport (sig, output) {
          isUint8Array('signature', sig);
          output = getAssertedOutput(output, 64);

          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.SIG_PARSE)
            case 2:
              throw new Error(errors$d.IMPOSSIBLE_CASE)
          }
        },

        ecdsaSign (msg32, seckey, options = {}, output) {
          isUint8Array('message', msg32, 32);
          isUint8Array('private key', seckey, 32);
          assert$a(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.noncefn !== undefined) assert$a(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
          output = getAssertedOutput(output, 64);

          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj
            case 1:
              throw new Error(errors$d.SIGN)
            case 2:
              throw new Error(errors$d.IMPOSSIBLE_CASE)
          }
        },

        ecdsaVerify (sig, msg32, pubkey) {
          isUint8Array('signature', sig, 64);
          isUint8Array('message', msg32, 32);
          isUint8Array('public key', pubkey, [33, 65]);

          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true
            case 3:
              return false
            case 1:
              throw new Error(errors$d.SIG_PARSE)
            case 2:
              throw new Error(errors$d.PUBKEY_PARSE)
          }
        },

        ecdsaRecover (sig, recid, msg32, compressed = true, output) {
          isUint8Array('signature', sig, 64);
          assert$a(
            toTypeString(recid) === 'Number' &&
              recid >= 0 &&
              recid <= 3,
            'Expected recovery id to be a Number within interval [0, 3]'
          );
          isUint8Array('message', msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.SIG_PARSE)
            case 2:
              throw new Error(errors$d.RECOVER)
            case 3:
              throw new Error(errors$d.IMPOSSIBLE_CASE)
          }
        },

        ecdh (pubkey, seckey, options = {}, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('private key', seckey, 32);
          assert$a(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.hashfn !== undefined) {
            assert$a(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
            if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
            if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
            isUint8Array('output', output);
          } else {
            output = getAssertedOutput(output, 32);
          }

          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output
            case 1:
              throw new Error(errors$d.PUBKEY_PARSE)
            case 2:
              throw new Error(errors$d.ECDH)
          }
        }
      }
    };

    const EC$3 = elliptic_1.ec;

    const ec$1 = new EC$3('secp256k1');
    const ecparams = ec$1.curve;

    // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
    // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
    const BN = ecparams.n.constructor;

    function loadCompressedPublicKey (first, xbuf) {
      let x = new BN(xbuf);

      // overflow
      if (x.cmp(ecparams.p) >= 0) return null
      x = x.toRed(ecparams.red);

      // compute corresponding Y
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

      return ec$1.keyPair({ pub: { x: x, y: y } })
    }

    function loadUncompressedPublicKey (first, xbuf, ybuf) {
      let x = new BN(xbuf);
      let y = new BN(ybuf);

      // overflow
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);

      // is odd flag
      if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

      // x*x*x + b = y*y
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

      return ec$1.keyPair({ pub: { x: x, y: y } })
    }

    function loadPublicKey (pubkey) {
      // length should be validated in interface
      const first = pubkey[0];
      switch (first) {
        case 0x02:
        case 0x03:
          if (pubkey.length !== 33) return null
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
        case 0x04:
        case 0x06:
        case 0x07:
          if (pubkey.length !== 65) return null
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
        default:
          return null
      }
    }

    function savePublicKey (output, point) {
      const pubkey = point.encode(null, output.length === 33);
      // Loop should be faster because we do not need create extra Uint8Array
      // output.set(new Uint8Array(pubkey))
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
    }

    var elliptic = {
      contextRandomize () {
        return 0
      },

      privateKeyVerify (seckey) {
        const bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
      },

      privateKeyNegate (seckey) {
        const bn = new BN(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
        seckey.set(negate);
        return 0
      },

      privateKeyTweakAdd (seckey, tweak) {
        const bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1

        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1

        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);

        return 0
      },

      privateKeyTweakMul (seckey, tweak) {
        let bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);

        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);

        return 0
      },

      publicKeyVerify (pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0
      },

      publicKeyCreate (output, seckey) {
        const bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

        const point = ec$1.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);

        return 0
      },

      publicKeyConvert (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const point = pair.getPublic();
        savePublicKey(output, point);

        return 0
      },

      publicKeyNegate (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);

        return 0
      },

      publicKeyCombine (output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1
        }

        let point = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
        if (point.isInfinity()) return 2

        savePublicKey(output, point);

        return 0
      },

      publicKeyTweakAdd (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2

        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2

        savePublicKey(output, point);

        return 0
      },

      publicKeyTweakMul (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);

        return 0
      },

      signatureNormalize (sig) {
        const r = new BN(sig.subarray(0, 32));
        const s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

        if (s.cmp(ec$1.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
        }

        return 0
      },

      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport (obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

        const { output } = obj;

        // Prepare R
        let r = output.subarray(4, 4 + 33);
        r[0] = 0x00;
        r.set(sigR, 1);

        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

        r = r.subarray(posR);
        if (r[0] & 0x80) return 1
        if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

        // Prepare S
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0x00;
        s.set(sigS, 1);

        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

        s = s.subarray(posS);
        if (s[0] & 0x80) return 1
        if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

        // Set output length for return
        obj.outputlen = 6 + lenR + lenS;

        // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        output[0] = 0x30;
        output[1] = obj.outputlen - 2;
        output[2] = 0x02;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 0x02;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);

        return 0
      },

      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport (output, sig) {
        if (sig.length < 8) return 1
        if (sig.length > 72) return 1
        if (sig[0] !== 0x30) return 1
        if (sig[1] !== sig.length - 2) return 1
        if (sig[2] !== 0x02) return 1

        const lenR = sig[3];
        if (lenR === 0) return 1
        if (5 + lenR >= sig.length) return 1
        if (sig[4 + lenR] !== 0x02) return 1

        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1
        if ((6 + lenR + lenS) !== sig.length) return 1

        if (sig[4] & 0x80) return 1
        if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

        if (sig[lenR + 6] & 0x80) return 1
        if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1

        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error('S length is too long')

        let r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0) r = new BN(0);

        let s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN(0);

        output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
        output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);

        return 0
      },

      ecdsaSign (obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);

            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error('This is the way')

            return new BN(nonce)
          };
        }

        const d = new BN(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

        let sig;
        try {
          sig = ec$1.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1
        }

        obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
        obj.recid = sig.recoveryParam;

        return 0
      },

      ecdsaVerify (sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };

        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
        if (sigs.cmp(ec$1.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2

        const point = pair.getPublic();
        const isValid = ec$1.verify(msg32, sigObj, point);
        return isValid ? 0 : 3
      },

      ecdsaRecover (output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };

        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

        if (sigr.isZero() || sigs.isZero()) return 2

        // Can throw `throw new Error('Unable to find sencond key candinate');`
        let point;
        try {
          point = ec$1.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2
        }

        savePublicKey(output, point);

        return 0
      },

      ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

        const point = pair.getPublic().mul(scalar);

        if (hashfn === undefined) {
          const data = point.encode(null, true);
          const sha256 = ec$1.hash().update(data).digest();
          for (let i = 0; i < 32; ++i) output[i] = sha256[i];
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          const x = point.getX().toArray('be', 32);
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i];

          if (!ybuf) ybuf = new Uint8Array(32);
          const y = point.getY().toArray('be', 32);
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i];

          const hash = hashfn(xbuf, ybuf, data);

          const isValid = hash instanceof Uint8Array && hash.length === output.length;
          if (!isValid) return 2

          output.set(hash);
        }

        return 0
      }
    };

    var elliptic$1 = lib$h(elliptic);

    var random$1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    function getRandomBytes(bytes) {
        return new Promise(function (resolve, reject) {
            browser$1(bytes, function (err, resp) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    exports.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
        return browser$1(bytes);
    }
    exports.getRandomBytesSync = getRandomBytesSync;

    });

    var secp256k1$2 = createCommonjsModule(function (module, exports) {
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });


    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
        return __awaiter(this, void 0, void 0, function () {
            var pk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, random$1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                    case 1:
                        pk = _a.sent();
                        if (elliptic$1.privateKeyVerify(pk)) {
                            return [2 /*return*/, pk];
                        }
                        return [3 /*break*/, 0];
                    case 2: return [2 /*return*/];
                }
            });
        });
    }
    exports.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
        while (true) {
            var pk = random$1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
            if (elliptic$1.privateKeyVerify(pk)) {
                return pk;
            }
        }
    }
    exports.createPrivateKeySync = createPrivateKeySync;
    __export(elliptic$1);

    });

    var secp256k1v3Lib = createCommonjsModule(function (module, exports) {
    // This file is imported from secp256k1 v3
    // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
    Object.defineProperty(exports, "__esModule", { value: true });

    var EC = elliptic_1.ec;
    var ec = new EC('secp256k1');
    var ecparams = ec.curve;
    exports.privateKeyExport = function (privateKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        var d = new bn$2(privateKey);
        if (d.ucmp(ecparams.n) >= 0) {
            throw new Error("couldn't export to DER format");
        }
        var point = ec.g.mul(d);
        return toPublicKey(point.getX(), point.getY(), compressed);
    };
    exports.privateKeyModInverse = function (privateKey) {
        var bn = new bn$2(privateKey);
        if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
            throw new Error('private key range is invalid');
        }
        return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
    };
    exports.signatureImport = function (sigObj) {
        var r = new bn$2(sigObj.r);
        if (r.ucmp(ecparams.n) >= 0) {
            r = new bn$2(0);
        }
        var s = new bn$2(sigObj.s);
        if (s.ucmp(ecparams.n) >= 0) {
            s = new bn$2(0);
        }
        return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
    };
    exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        var point = ec.keyFromPublic(publicKey);
        var scalar = new bn$2(privateKey);
        if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
            throw new Error('scalar was invalid (zero or overflow)');
        }
        var shared = point.pub.mul(scalar);
        return toPublicKey(shared.getX(), shared.getY(), compressed);
    };
    var toPublicKey = function (x, y, compressed) {
        var publicKey;
        if (compressed) {
            publicKey = Buffer.alloc(33);
            publicKey[0] = y.isOdd() ? 0x03 : 0x02;
            x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
        }
        else {
            publicKey = Buffer.alloc(65);
            publicKey[0] = 0x04;
            x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
            y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
        }
        return publicKey;
    };

    });

    var der$1 = createCommonjsModule(function (module, exports) {
    // This file is imported from secp256k1 v3
    // https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
    Object.defineProperty(exports, "__esModule", { value: true });
    var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
        // begin
        0x30,
        0x81,
        0xd3,
        0x02,
        0x01,
        0x01,
        0x04,
        0x20,
        // private key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        // middle
        0xa0,
        0x81,
        0x85,
        0x30,
        0x81,
        0x82,
        0x02,
        0x01,
        0x01,
        0x30,
        0x2c,
        0x06,
        0x07,
        0x2a,
        0x86,
        0x48,
        0xce,
        0x3d,
        0x01,
        0x01,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xff,
        0xff,
        0xfc,
        0x2f,
        0x30,
        0x06,
        0x04,
        0x01,
        0x00,
        0x04,
        0x01,
        0x07,
        0x04,
        0x21,
        0x02,
        0x79,
        0xbe,
        0x66,
        0x7e,
        0xf9,
        0xdc,
        0xbb,
        0xac,
        0x55,
        0xa0,
        0x62,
        0x95,
        0xce,
        0x87,
        0x0b,
        0x07,
        0x02,
        0x9b,
        0xfc,
        0xdb,
        0x2d,
        0xce,
        0x28,
        0xd9,
        0x59,
        0xf2,
        0x81,
        0x5b,
        0x16,
        0xf8,
        0x17,
        0x98,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xba,
        0xae,
        0xdc,
        0xe6,
        0xaf,
        0x48,
        0xa0,
        0x3b,
        0xbf,
        0xd2,
        0x5e,
        0x8c,
        0xd0,
        0x36,
        0x41,
        0x41,
        0x02,
        0x01,
        0x01,
        0xa1,
        0x24,
        0x03,
        0x22,
        0x00,
        // public key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
    ]);
    var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
        // begin
        0x30,
        0x82,
        0x01,
        0x13,
        0x02,
        0x01,
        0x01,
        0x04,
        0x20,
        // private key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        // middle
        0xa0,
        0x81,
        0xa5,
        0x30,
        0x81,
        0xa2,
        0x02,
        0x01,
        0x01,
        0x30,
        0x2c,
        0x06,
        0x07,
        0x2a,
        0x86,
        0x48,
        0xce,
        0x3d,
        0x01,
        0x01,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xff,
        0xff,
        0xfc,
        0x2f,
        0x30,
        0x06,
        0x04,
        0x01,
        0x00,
        0x04,
        0x01,
        0x07,
        0x04,
        0x41,
        0x04,
        0x79,
        0xbe,
        0x66,
        0x7e,
        0xf9,
        0xdc,
        0xbb,
        0xac,
        0x55,
        0xa0,
        0x62,
        0x95,
        0xce,
        0x87,
        0x0b,
        0x07,
        0x02,
        0x9b,
        0xfc,
        0xdb,
        0x2d,
        0xce,
        0x28,
        0xd9,
        0x59,
        0xf2,
        0x81,
        0x5b,
        0x16,
        0xf8,
        0x17,
        0x98,
        0x48,
        0x3a,
        0xda,
        0x77,
        0x26,
        0xa3,
        0xc4,
        0x65,
        0x5d,
        0xa4,
        0xfb,
        0xfc,
        0x0e,
        0x11,
        0x08,
        0xa8,
        0xfd,
        0x17,
        0xb4,
        0x48,
        0xa6,
        0x85,
        0x54,
        0x19,
        0x9c,
        0x47,
        0xd0,
        0x8f,
        0xfb,
        0x10,
        0xd4,
        0xb8,
        0x02,
        0x21,
        0x00,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xff,
        0xfe,
        0xba,
        0xae,
        0xdc,
        0xe6,
        0xaf,
        0x48,
        0xa0,
        0x3b,
        0xbf,
        0xd2,
        0x5e,
        0x8c,
        0xd0,
        0x36,
        0x41,
        0x41,
        0x02,
        0x01,
        0x01,
        0xa1,
        0x44,
        0x03,
        0x42,
        0x00,
        // public key
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
    ]);
    exports.privateKeyExport = function (privateKey, publicKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
        privateKey.copy(result, compressed ? 8 : 9);
        publicKey.copy(result, compressed ? 181 : 214);
        return result;
    };
    exports.privateKeyImport = function (privateKey) {
        var length = privateKey.length;
        // sequence header
        var index = 0;
        if (length < index + 1 || privateKey[index] !== 0x30)
            return null;
        index += 1;
        // sequence length constructor
        if (length < index + 1 || !(privateKey[index] & 0x80))
            return null;
        var lenb = privateKey[index] & 0x7f;
        index += 1;
        if (lenb < 1 || lenb > 2)
            return null;
        if (length < index + lenb)
            return null;
        // sequence length
        var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
        index += lenb;
        if (length < index + len)
            return null;
        // sequence element 0: version number (=1)
        if (length < index + 3 ||
            privateKey[index] !== 0x02 ||
            privateKey[index + 1] !== 0x01 ||
            privateKey[index + 2] !== 0x01) {
            return null;
        }
        index += 3;
        // sequence element 1: octet string, up to 32 bytes
        if (length < index + 2 ||
            privateKey[index] !== 0x04 ||
            privateKey[index + 1] > 0x20 ||
            length < index + 2 + privateKey[index + 1]) {
            return null;
        }
        return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
    };
    exports.signatureImportLax = function (signature) {
        var r = Buffer.alloc(32, 0);
        var s = Buffer.alloc(32, 0);
        var length = signature.length;
        var index = 0;
        // sequence tag byte
        if (signature[index++] !== 0x30) {
            return null;
        }
        // sequence length byte
        var lenbyte = signature[index++];
        if (lenbyte & 0x80) {
            index += lenbyte - 0x80;
            if (index > length) {
                return null;
            }
        }
        // sequence tag byte for r
        if (signature[index++] !== 0x02) {
            return null;
        }
        // length for r
        var rlen = signature[index++];
        if (rlen & 0x80) {
            lenbyte = rlen - 0x80;
            if (index + lenbyte > length) {
                return null;
            }
            for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
                ;
            for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
                rlen = (rlen << 8) + signature[index];
        }
        if (rlen > length - index) {
            return null;
        }
        var rindex = index;
        index += rlen;
        // sequence tag byte for s
        if (signature[index++] !== 0x02) {
            return null;
        }
        // length for s
        var slen = signature[index++];
        if (slen & 0x80) {
            lenbyte = slen - 0x80;
            if (index + lenbyte > length) {
                return null;
            }
            for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
                ;
            for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
                slen = (slen << 8) + signature[index];
        }
        if (slen > length - index) {
            return null;
        }
        var sindex = index;
        index += slen;
        // ignore leading zeros in r
        for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)
            ;
        // copy r value
        if (rlen > 32) {
            return null;
        }
        var rvalue = signature.slice(rindex, rindex + rlen);
        rvalue.copy(r, 32 - rvalue.length);
        // ignore leading zeros in s
        for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)
            ;
        // copy s value
        if (slen > 32) {
            return null;
        }
        var svalue = signature.slice(sindex, sindex + slen);
        svalue.copy(s, 32 - svalue.length);
        return { r: r, s: s };
    };

    });

    var secp256k1v3Adapter = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;



    /**
     * Verify an ECDSA privateKey
     * @method privateKeyVerify
     * @param {Buffer} privateKey
     * @return {boolean}
     */
    exports.privateKeyVerify = function (privateKey) {
        // secp256k1 v4 version throws when privateKey length is not 32
        if (privateKey.length !== 32) {
            return false;
        }
        return secp256k1$2.privateKeyVerify(Uint8Array.from(privateKey));
    };
    /**
     * Export a privateKey in DER format
     * @method privateKeyExport
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {boolean}
     */
    exports.privateKeyExport = function (privateKey, compressed) {
        // secp256k1 v4 version throws when privateKey length is not 32
        if (privateKey.length !== 32) {
            throw new RangeError('private key length is invalid');
        }
        var publicKey = secp256k1v3Lib.privateKeyExport(privateKey, compressed);
        return der$1.privateKeyExport(privateKey, publicKey, compressed);
    };
    /**
     * Import a privateKey in DER format
     * @method privateKeyImport
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.privateKeyImport = function (privateKey) {
        // privateKeyImport method is not part of secp256k1 v4 package
        // this implementation is based on v3
        privateKey = der$1.privateKeyImport(privateKey);
        if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
            return privateKey;
        }
        throw new Error("couldn't import from DER format");
    };
    /**
     * Negate a privateKey by subtracting it from the order of the curve's base point
     * @method privateKeyNegate
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.privateKeyNegate = function (privateKey) {
        return Buffer.from(secp256k1$2.privateKeyNegate(Uint8Array.from(privateKey)));
    };
    /**
     * Compute the inverse of a privateKey (modulo the order of the curve's base point).
     * @method privateKeyModInverse
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.privateKeyModInverse = function (privateKey) {
        if (privateKey.length !== 32) {
            throw new Error('private key length is invalid');
        }
        return Buffer.from(secp256k1v3Lib.privateKeyModInverse(Uint8Array.from(privateKey)));
    };
    /**
     * Tweak a privateKey by adding tweak to it.
     * @method privateKeyTweakAdd
     * @param {Buffer} privateKey
     * @param {Buffer} tweak
     * @return {Buffer}
     */
    exports.privateKeyTweakAdd = function (privateKey, tweak) {
        return Buffer.from(secp256k1$2.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
    };
    /**
     * Tweak a privateKey by multiplying it by a tweak.
     * @method privateKeyTweakMul
     * @param {Buffer} privateKey
     * @param {Buffer} tweak
     * @return {Buffer}
     */
    exports.privateKeyTweakMul = function (privateKey, tweak) {
        return Buffer.from(secp256k1$2.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
    };
    /**
     * Compute the public key for a privateKey.
     * @method publicKeyCreate
     * @param {Buffer} privateKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyCreate = function (privateKey, compressed) {
        return Buffer.from(secp256k1$2.publicKeyCreate(Uint8Array.from(privateKey), compressed));
    };
    /**
     * Convert a publicKey to compressed or uncompressed form.
     * @method publicKeyConvert
     * @param {Buffer} publicKey
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyConvert = function (publicKey, compressed) {
        return Buffer.from(secp256k1$2.publicKeyConvert(Uint8Array.from(publicKey), compressed));
    };
    /**
     * Verify an ECDSA publicKey.
     * @method publicKeyVerify
     * @param {Buffer} publicKey
     * @return {boolean}
     */
    exports.publicKeyVerify = function (publicKey) {
        // secp256k1 v4 version throws when publicKey length is not 33 or 65
        if (publicKey.length !== 33 && publicKey.length !== 65) {
            return false;
        }
        return secp256k1$2.publicKeyVerify(Uint8Array.from(publicKey));
    };
    /**
     * Tweak a publicKey by adding tweak times the generator to it.
     * @method publicKeyTweakAdd
     * @param {Buffer} publicKey
     * @param {Buffer} tweak
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
        return Buffer.from(secp256k1$2.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    /**
     * Tweak a publicKey by multiplying it by a tweak value
     * @method publicKeyTweakMul
     * @param {Buffer} publicKey
     * @param {Buffer} tweak
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
        return Buffer.from(secp256k1$2.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
    };
    /**
     * Add a given publicKeys together.
     * @method publicKeyCombine
     * @param {Array<Buffer>} publicKeys
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.publicKeyCombine = function (publicKeys, compressed) {
        var keys = [];
        publicKeys.forEach(function (publicKey) {
            keys.push(Uint8Array.from(publicKey));
        });
        return Buffer.from(secp256k1$2.publicKeyCombine(keys, compressed));
    };
    /**
     * Convert a signature to a normalized lower-S form.
     * @method signatureNormalize
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureNormalize = function (signature) {
        return Buffer.from(secp256k1$2.signatureNormalize(Uint8Array.from(signature)));
    };
    /**
     * Serialize an ECDSA signature in DER format.
     * @method signatureExport
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureExport = function (signature) {
        return Buffer.from(secp256k1$2.signatureExport(Uint8Array.from(signature)));
    };
    /**
     * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
     * @method signatureImport
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureImport = function (signature) {
        return Buffer.from(secp256k1$2.signatureImport(Uint8Array.from(signature)));
    };
    /**
     * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
     * @method signatureImportLax
     * @param {Buffer} signature
     * @return {Buffer}
     */
    exports.signatureImportLax = function (signature) {
        // signatureImportLax method is not part of secp256k1 v4 package
        // this implementation is based on v3
        // ensure that signature is greater than 0
        if (signature.length === 0) {
            throw new RangeError('signature length is invalid');
        }
        var sigObj = der$1.signatureImportLax(signature);
        if (sigObj === null) {
            throw new Error("couldn't parse DER signature");
        }
        return secp256k1v3Lib.signatureImport(sigObj);
    };
    /**
     * Create an ECDSA signature. Always return low-S signature.
     * @method sign
     * @param {Buffer} message
     * @param {Buffer} privateKey
     * @param {Object} options
     * @return {Buffer}
     */
    exports.sign = function (message, privateKey, options) {
        if (options === null) {
            throw new TypeError('options should be an Object');
        }
        var signOptions = undefined;
        if (options) {
            signOptions = {};
            if (options.data === null) {
                // validate option.data length
                throw new TypeError('options.data should be a Buffer');
            }
            if (options.data) {
                if (options.data.length != 32) {
                    throw new RangeError('options.data length is invalid');
                }
                signOptions.data = new Uint8Array(options.data);
            }
            if (options.noncefn === null) {
                throw new TypeError('options.noncefn should be a Function');
            }
            if (options.noncefn) {
                // convert option.noncefn function signature
                signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
                    var bufferAlgo = algo != null ? Buffer.from(algo) : null;
                    var bufferData = data != null ? Buffer.from(data) : null;
                    var buffer = Buffer.from('');
                    if (options.noncefn) {
                        buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
                    }
                    return new Uint8Array(buffer);
                };
            }
        }
        var sig = secp256k1$2.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
        return {
            signature: Buffer.from(sig.signature),
            recovery: sig.recid,
        };
    };
    /**
     * Verify an ECDSA signature.
     * @method verify
     * @param {Buffer} message
     * @param {Buffer} signature
     * @param {Buffer} publicKey
     * @return {boolean}
     */
    exports.verify = function (message, signature, publicKey) {
        return secp256k1$2.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
    };
    /**
     * Recover an ECDSA public key from a signature.
     * @method recover
     * @param {Buffer} message
     * @param {Buffer} signature
     * @param {Number} recid
     * @param {boolean} compressed
     * @return {Buffer}
     */
    exports.recover = function (message, signature, recid, compressed) {
        return Buffer.from(secp256k1$2.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
    };
    /**
     * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
     * @method ecdh
     * @param {Buffer} publicKey
     * @param {Buffer} privateKey
     * @return {Buffer}
     */
    exports.ecdh = function (publicKey, privateKey) {
        // note: secp256k1 v3 doesn't allow optional parameter
        return Buffer.from(secp256k1$2.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
    };
    exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
        // ecdhUnsafe method is not part of secp256k1 v4 package
        // this implementation is based on v3
        // ensure valid publicKey length
        if (publicKey.length !== 33 && publicKey.length !== 65) {
            throw new RangeError('public key length is invalid');
        }
        // ensure valid privateKey length
        if (privateKey.length !== 32) {
            throw new RangeError('private key length is invalid');
        }
        return Buffer.from(secp256k1v3Lib.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
    };

    });

    /**
     * Pads a `String` to have an even length
     * @param {String} value
     * @return {String} output
     */
    function padToEven(value) {
      var a = value; // eslint-disable-line

      if (typeof a !== 'string') {
        throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
      }

      if (a.length % 2) {
        a = '0' + a;
      }

      return a;
    }

    /**
     * Converts a `Number` into a hex `String`
     * @param {Number} i
     * @return {String}
     */
    function intToHex(i) {
      var hex = i.toString(16); // eslint-disable-line

      return '0x' + hex;
    }

    /**
     * Converts an `Number` to a `Buffer`
     * @param {Number} i
     * @return {Buffer}
     */
    function intToBuffer(i) {
      var hex = intToHex(i);

      return new Buffer(padToEven(hex.slice(2)), 'hex');
    }

    /**
     * Get the binary size of a string
     * @param {String} str
     * @return {Number}
     */
    function getBinarySize(str) {
      if (typeof str !== 'string') {
        throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
      }

      return Buffer.byteLength(str, 'utf8');
    }

    /**
     * Returns TRUE if the first specified array contains all elements
     * from the second one. FALSE otherwise.
     *
     * @param {array} superset
     * @param {array} subset
     *
     * @returns {boolean}
     */
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
      }
      if (Array.isArray(subset) !== true) {
        throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
      }

      return subset[Boolean(some) && 'some' || 'every'](function (value) {
        return superset.indexOf(value) >= 0;
      });
    }

    /**
     * Should be called to get utf8 from it's hex representation
     *
     * @method toUtf8
     * @param {String} string in hex
     * @returns {String} ascii string representation of hex value
     */
    function toUtf8(hex) {
      var bufferValue = new Buffer(padToEven(src$1(hex).replace(/^0+|0+$/g, '')), 'hex');

      return bufferValue.toString('utf8');
    }

    /**
     * Should be called to get ascii from it's hex representation
     *
     * @method toAscii
     * @param {String} string in hex
     * @returns {String} ascii string representation of hex value
     */
    function toAscii$1(hex) {
      var str = ''; // eslint-disable-line
      var i = 0,
          l = hex.length; // eslint-disable-line

      if (hex.substring(0, 2) === '0x') {
        i = 2;
      }

      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }

      return str;
    }

    /**
     * Should be called to get hex representation (prefixed by 0x) of utf8 string
     *
     * @method fromUtf8
     * @param {String} string
     * @param {Number} optional padding
     * @returns {String} hex representation of input string
     */
    function fromUtf8(stringValue) {
      var str = new Buffer(stringValue, 'utf8');

      return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
    }

    /**
     * Should be called to get hex representation (prefixed by 0x) of ascii string
     *
     * @method fromAscii
     * @param {String} string
     * @param {Number} optional padding
     * @returns {String} hex representation of input string
     */
    function fromAscii$1(stringValue) {
      var hex = ''; // eslint-disable-line
      for (var i = 0; i < stringValue.length; i++) {
        // eslint-disable-line
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
      }

      return '0x' + hex;
    }

    /**
     * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
     *
     * @method getKeys get specific key from inner object array of objects
     * @param {String} params
     * @param {String} key
     * @param {Boolean} allowEmpty
     * @returns {Array} output just a simple array of output keys
     */
    function getKeys(params, key, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
      }
      if (typeof key !== 'string') {
        throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
      }

      var result = []; // eslint-disable-line

      for (var i = 0; i < params.length; i++) {
        // eslint-disable-line
        var value = params[i][key]; // eslint-disable-line
        if (allowEmpty && !value) {
          value = '';
        } else if (typeof value !== 'string') {
          throw new Error('invalid abi');
        }
        result.push(value);
      }

      return result;
    }

    /**
     * Is the string a hex string.
     *
     * @method check if string is hex string of specific length
     * @param {String} value
     * @param {Number} length
     * @returns {Boolean} output the string is a hex string
     */
    function isHexString$1(value, length) {
      if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }

      if (length && value.length !== 2 + 2 * length) {
        return false;
      }

      return true;
    }

    var lib$i = {
      arrayContainsArray: arrayContainsArray,
      intToBuffer: intToBuffer,
      getBinarySize: getBinarySize,
      isHexPrefixed: src,
      stripHexPrefix: src$1,
      padToEven: padToEven,
      intToHex: intToHex,
      fromAscii: fromAscii$1,
      fromUtf8: fromUtf8,
      toAscii: toAscii$1,
      toUtf8: toUtf8,
      getKeys: getKeys,
      isHexString: isHexString$1
    };

    var dist$2 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLength = exports.decode = exports.encode = void 0;

    /**
     * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
     * This function takes in a data, convert it to buffer if not, and a length for recursion
     * @param input - will be converted to buffer
     * @returns returns buffer of encoded data
     **/
    function encode(input) {
        if (Array.isArray(input)) {
            var output = [];
            for (var i = 0; i < input.length; i++) {
                output.push(encode(input[i]));
            }
            var buf = Buffer.concat(output);
            return Buffer.concat([encodeLength(buf.length, 192), buf]);
        }
        else {
            var inputBuf = toBuffer(input);
            return inputBuf.length === 1 && inputBuf[0] < 128
                ? inputBuf
                : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
        }
    }
    exports.encode = encode;
    /**
     * Parse integers. Check if there is no leading zeros
     * @param v The value to parse
     * @param base The base to parse the integer into
     */
    function safeParseInt(v, base) {
        if (v.slice(0, 2) === '00') {
            throw new Error('invalid RLP: extra zeros');
        }
        return parseInt(v, base);
    }
    function encodeLength(len, offset) {
        if (len < 56) {
            return Buffer.from([len + offset]);
        }
        else {
            var hexLength = intToHex(len);
            var lLength = hexLength.length / 2;
            var firstByte = intToHex(offset + 55 + lLength);
            return Buffer.from(firstByte + hexLength, 'hex');
        }
    }
    function decode(input, stream) {
        if (stream === void 0) { stream = false; }
        if (!input || input.length === 0) {
            return Buffer.from([]);
        }
        var inputBuffer = toBuffer(input);
        var decoded = _decode(inputBuffer);
        if (stream) {
            return decoded;
        }
        if (decoded.remainder.length !== 0) {
            throw new Error('invalid remainder');
        }
        return decoded.data;
    }
    exports.decode = decode;
    /**
     * Get the length of the RLP input
     * @param input
     * @returns The length of the input or an empty Buffer if no input
     */
    function getLength(input) {
        if (!input || input.length === 0) {
            return Buffer.from([]);
        }
        var inputBuffer = toBuffer(input);
        var firstByte = inputBuffer[0];
        if (firstByte <= 0x7f) {
            return inputBuffer.length;
        }
        else if (firstByte <= 0xb7) {
            return firstByte - 0x7f;
        }
        else if (firstByte <= 0xbf) {
            return firstByte - 0xb6;
        }
        else if (firstByte <= 0xf7) {
            // a list between  0-55 bytes long
            return firstByte - 0xbf;
        }
        else {
            // a list  over 55 bytes long
            var llength = firstByte - 0xf6;
            var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
            return llength + length;
        }
    }
    exports.getLength = getLength;
    /** Decode an input with RLP */
    function _decode(input) {
        var length, llength, data, innerRemainder, d;
        var decoded = [];
        var firstByte = input[0];
        if (firstByte <= 0x7f) {
            // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
            return {
                data: input.slice(0, 1),
                remainder: input.slice(1),
            };
        }
        else if (firstByte <= 0xb7) {
            // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
            // The range of the first byte is [0x80, 0xb7]
            length = firstByte - 0x7f;
            // set 0x80 null to 0
            if (firstByte === 0x80) {
                data = Buffer.from([]);
            }
            else {
                data = input.slice(1, length);
            }
            if (length === 2 && data[0] < 0x80) {
                throw new Error('invalid rlp encoding: byte must be less 0x80');
            }
            return {
                data: data,
                remainder: input.slice(length),
            };
        }
        else if (firstByte <= 0xbf) {
            // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
            // followed by the length, followed by the string
            llength = firstByte - 0xb6;
            if (input.length - 1 < llength) {
                throw new Error('invalid RLP: not enough bytes for string length');
            }
            length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
            if (length <= 55) {
                throw new Error('invalid RLP: expected string length to be greater than 55');
            }
            data = input.slice(llength, length + llength);
            if (data.length < length) {
                throw new Error('invalid RLP: not enough bytes for string');
            }
            return {
                data: data,
                remainder: input.slice(length + llength),
            };
        }
        else if (firstByte <= 0xf7) {
            // a list between  0-55 bytes long
            length = firstByte - 0xbf;
            innerRemainder = input.slice(1, length);
            while (innerRemainder.length) {
                d = _decode(innerRemainder);
                decoded.push(d.data);
                innerRemainder = d.remainder;
            }
            return {
                data: decoded,
                remainder: input.slice(length),
            };
        }
        else {
            // a list  over 55 bytes long
            llength = firstByte - 0xf6;
            length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
            var totalLength = llength + length;
            if (totalLength > input.length) {
                throw new Error('invalid rlp: total length is larger than the data');
            }
            innerRemainder = input.slice(llength, totalLength);
            if (innerRemainder.length === 0) {
                throw new Error('invalid rlp, List has a invalid length');
            }
            while (innerRemainder.length) {
                d = _decode(innerRemainder);
                decoded.push(d.data);
                innerRemainder = d.remainder;
            }
            return {
                data: decoded,
                remainder: input.slice(totalLength),
            };
        }
    }
    /** Check if a string is prefixed by 0x */
    function isHexPrefixed(str) {
        return str.slice(0, 2) === '0x';
    }
    /** Removes 0x from a given String */
    function stripHexPrefix(str) {
        if (typeof str !== 'string') {
            return str;
        }
        return isHexPrefixed(str) ? str.slice(2) : str;
    }
    /** Transform an integer into its hexadecimal value */
    function intToHex(integer) {
        if (integer < 0) {
            throw new Error('Invalid integer as argument, must be unsigned!');
        }
        var hex = integer.toString(16);
        return hex.length % 2 ? "0" + hex : hex;
    }
    /** Pad a string to be even */
    function padToEven(a) {
        return a.length % 2 ? "0" + a : a;
    }
    /** Transform an integer into a Buffer */
    function intToBuffer(integer) {
        var hex = intToHex(integer);
        return Buffer.from(hex, 'hex');
    }
    /** Transform anything into a Buffer */
    function toBuffer(v) {
        if (!isBuffer(v)) {
            if (typeof v === 'string') {
                if (isHexPrefixed(v)) {
                    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
                }
                else {
                    return Buffer.from(v);
                }
            }
            else if (typeof v === 'number' || typeof v === 'bigint') {
                if (!v) {
                    return Buffer.from([]);
                }
                else {
                    return intToBuffer(v);
                }
            }
            else if (v === null || v === undefined) {
                return Buffer.from([]);
            }
            else if (v instanceof Uint8Array) {
                return Buffer.from(v);
            }
            else if (bn$2.isBN(v)) {
                // converts a BN to a Buffer
                return Buffer.from(v.toArray());
            }
            else {
                throw new Error('invalid type');
            }
        }
        return v;
    }

    });

    var constants$5 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;

    /**
     * The max integer that this VM can handle
     */
    exports.MAX_INTEGER = new bn$2('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
    /**
     * 2^256
     */
    exports.TWO_POW256 = new bn$2('10000000000000000000000000000000000000000000000000000000000000000', 16);
    /**
     * Keccak-256 hash of null
     */
    exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    /**
     * Keccak-256 hash of null
     */
    exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
    /**
     * Keccak-256 of an RLP of an empty array
     */
    exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
    /**
     * Keccak-256 of an RLP of an empty array
     */
    exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
    /**
     * Keccak-256 hash of the RLP of null
     */
    exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
    /**
     * Keccak-256 hash of the RLP of null
     */
    exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

    });

    function compare$1(a, b) {
      if (a === b) {
        return 0;
      }

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var hasOwn = Object.prototype.hasOwnProperty;

    var objectKeys$3 = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }
      return keys;
    };
    var pSlice = Array.prototype.slice;
    var _functionsHaveNames;
    function functionsHaveNames() {
      if (typeof _functionsHaveNames !== 'undefined') {
        return _functionsHaveNames;
      }
      return _functionsHaveNames = (function () {
        return function foo() {}.name === 'foo';
      }());
    }
    function pToString (obj) {
      return Object.prototype.toString.call(obj);
    }
    function isView(arrbuf) {
      if (buffer$1.isBuffer(arrbuf)) {
        return false;
      }
      if (typeof global$1.ArrayBuffer !== 'function') {
        return false;
      }
      if (typeof ArrayBuffer.isView === 'function') {
        return ArrayBuffer.isView(arrbuf);
      }
      if (!arrbuf) {
        return false;
      }
      if (arrbuf instanceof DataView) {
        return true;
      }
      if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
        return true;
      }
      return false;
    }
    // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.

    function assert$b(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }

    // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })

    var regex = /\s*function\s+([^\(\s]*)\s*/;
    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
    function getName(func) {
      if (!util.isFunction(func)) {
        return;
      }
      if (functionsHaveNames()) {
        return func.name;
      }
      var str = func.toString();
      var match = str.match(regex);
      return match && match[1];
    }
    assert$b.AssertionError = AssertionError;
    function AssertionError(options) {
      this.name = 'AssertionError';
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();
        if (err.stack) {
          var out = err.stack;

          // try to strip useless frames
          var fn_name = getName(stackStartFunction);
          var idx = out.indexOf('\n' + fn_name);
          if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);
            out = out.substring(next_line + 1);
          }

          this.stack = out;
        }
      }
    }

    // assert.AssertionError instanceof Error
    util.inherits(AssertionError, Error);

    function truncate(s, n) {
      if (typeof s === 'string') {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }
    function inspect$2(something) {
      if (functionsHaveNames() || !util.isFunction(something)) {
        return util.inspect(something);
      }
      var rawname = getName(something);
      var name = rawname ? ': ' + rawname : '';
      return '[Function' +  name + ']';
    }
    function getMessage(self) {
      return truncate(inspect$2(self.actual), 128) + ' ' +
             self.operator + ' ' +
             truncate(inspect$2(self.expected), 128);
    }

    // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.

    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.

    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }

    // EXTENSION! allows for well behaved errors defined elsewhere.
    assert$b.fail = fail;

    // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.

    function ok(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }
    assert$b.ok = ok;

    // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);
    assert$b.equal = equal;
    function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', equal);
    }

    // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);
    assert$b.notEqual = notEqual;
    function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', notEqual);
      }
    }

    // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);
    assert$b.deepEqual = deepEqual;
    function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'deepEqual', deepEqual);
      }
    }
    assert$b.deepStrictEqual = deepStrictEqual;
    function deepStrictEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
      }
    }

    function _deepEqual(actual, expected, strict, memos) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (buffer$1.isBuffer(actual) && buffer$1.isBuffer(expected)) {
        return compare$1(actual, expected) === 0;

      // 7.2. If the expected value is a Date object, the actual value is
      // equivalent if it is also a Date object that refers to the same time.
      } else if (util.isDate(actual) && util.isDate(expected)) {
        return actual.getTime() === expected.getTime();

      // 7.3 If the expected value is a RegExp object, the actual value is
      // equivalent if it is also a RegExp object with the same source and
      // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
        return actual.source === expected.source &&
               actual.global === expected.global &&
               actual.multiline === expected.multiline &&
               actual.lastIndex === expected.lastIndex &&
               actual.ignoreCase === expected.ignoreCase;

      // 7.4. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if ((actual === null || typeof actual !== 'object') &&
                 (expected === null || typeof expected !== 'object')) {
        return strict ? actual === expected : actual == expected;

      // If both values are instances of typed arrays, wrap their underlying
      // ArrayBuffers in a Buffer each to increase performance
      // This optimization requires the arrays to have the same type as checked by
      // Object.prototype.toString (aka pToString). Never perform binary
      // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
      // bit patterns are not identical.
      } else if (isView(actual) && isView(expected) &&
                 pToString(actual) === pToString(expected) &&
                 !(actual instanceof Float32Array ||
                   actual instanceof Float64Array)) {
        return compare$1(new Uint8Array(actual.buffer),
                       new Uint8Array(expected.buffer)) === 0;

      // 7.5 For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else if (buffer$1.isBuffer(actual) !== buffer$1.isBuffer(expected)) {
        return false;
      } else {
        memos = memos || {actual: [], expected: []};

        var actualIndex = memos.actual.indexOf(actual);
        if (actualIndex !== -1) {
          if (actualIndex === memos.expected.indexOf(expected)) {
            return true;
          }
        }

        memos.actual.push(actual);
        memos.expected.push(expected);

        return objEquiv(actual, expected, strict, memos);
      }
    }

    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }

    function objEquiv(a, b, strict, actualVisitedObjects) {
      if (a === null || a === undefined || b === null || b === undefined)
        return false;
      // if one is a primitive, the other must be same
      if (util.isPrimitive(a) || util.isPrimitive(b))
        return a === b;
      if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
        return false;
      var aIsArgs = isArguments(a);
      var bIsArgs = isArguments(b);
      if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
        return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b, strict);
      }
      var ka = objectKeys$3(a);
      var kb = objectKeys$3(b);
      var key, i;
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length !== kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] !== kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
          return false;
      }
      return true;
    }

    // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);
    assert$b.notDeepEqual = notDeepEqual;
    function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
      }
    }

    assert$b.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
      }
    }


    // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);
    assert$b.strictEqual = strictEqual;
    function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', strictEqual);
      }
    }

    // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
    assert$b.notStrictEqual = notStrictEqual;
    function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', notStrictEqual);
      }
    }

    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }

      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      }

      try {
        if (actual instanceof expected) {
          return true;
        }
      } catch (e) {
        // Ignore.  The instanceof check doesn't work for arrow functions.
      }

      if (Error.isPrototypeOf(expected)) {
        return false;
      }

      return expected.call({}, actual) === true;
    }

    function _tryBlock(block) {
      var error;
      try {
        block();
      } catch (e) {
        error = e;
      }
      return error;
    }

    function _throws(shouldThrow, block, expected, message) {
      var actual;

      if (typeof block !== 'function') {
        throw new TypeError('"block" argument must be a function');
      }

      if (typeof expected === 'string') {
        message = expected;
        expected = null;
      }

      actual = _tryBlock(block);

      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                (message ? ' ' + message : '.');

      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }

      var userProvidedMessage = typeof message === 'string';
      var isUnwantedException = !shouldThrow && util.isError(actual);
      var isUnexpectedException = !shouldThrow && actual && !expected;

      if ((isUnwantedException &&
          userProvidedMessage &&
          expectedException(actual, expected)) ||
          isUnexpectedException) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }

      if ((shouldThrow && actual && expected &&
          !expectedException(actual, expected)) || (!shouldThrow && actual)) {
        throw actual;
      }
    }

    // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);
    assert$b.throws = throws;
    function throws(block, /*optional*/error, /*optional*/message) {
      _throws(true, block, error, message);
    }

    // EXTENSION! This is annoying to write outside this module.
    assert$b.doesNotThrow = doesNotThrow;
    function doesNotThrow(block, /*optional*/error, /*optional*/message) {
      _throws(false, block, error, message);
    }

    assert$b.ifError = ifError;
    function ifError(err) {
      if (err) throw err;
    }

    var bytes$1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;


    /**
     * Returns a buffer filled with 0s.
     * @param bytes the number of bytes the buffer should be
     */
    exports.zeros = function (bytes) {
        return Buffer.allocUnsafe(bytes).fill(0);
    };
    /**
     * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
     * Or it truncates the beginning if it exceeds.
     * @param msg the value to pad (Buffer|Array)
     * @param length the number of bytes the output should be
     * @param right whether to start padding form the left or right
     * @return (Buffer|Array)
     */
    exports.setLengthLeft = function (msg, length, right) {
        if (right === void 0) { right = false; }
        var buf = exports.zeros(length);
        msg = exports.toBuffer(msg);
        if (right) {
            if (msg.length < length) {
                msg.copy(buf);
                return buf;
            }
            return msg.slice(0, length);
        }
        else {
            if (msg.length < length) {
                msg.copy(buf, length - msg.length);
                return buf;
            }
            return msg.slice(-length);
        }
    };
    exports.setLength = exports.setLengthLeft;
    /**
     * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
     * Or it truncates the beginning if it exceeds.
     * @param msg the value to pad (Buffer|Array)
     * @param length the number of bytes the output should be
     * @return (Buffer|Array)
     */
    exports.setLengthRight = function (msg, length) {
        return exports.setLength(msg, length, true);
    };
    /**
     * Trims leading zeros from a `Buffer` or an `Array`.
     * @param a (Buffer|Array|String)
     * @return (Buffer|Array|String)
     */
    exports.unpad = function (a) {
        a = lib$i.stripHexPrefix(a);
        var first = a[0];
        while (a.length > 0 && first.toString() === '0') {
            a = a.slice(1);
            first = a[0];
        }
        return a;
    };
    exports.stripZeros = exports.unpad;
    /**
     * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
     * @param v the value
     */
    exports.toBuffer = function (v) {
        if (!isBuffer(v)) {
            if (Array.isArray(v)) {
                v = Buffer.from(v);
            }
            else if (typeof v === 'string') {
                if (lib$i.isHexString(v)) {
                    v = Buffer.from(lib$i.padToEven(lib$i.stripHexPrefix(v)), 'hex');
                }
                else {
                    throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
                }
            }
            else if (typeof v === 'number') {
                v = lib$i.intToBuffer(v);
            }
            else if (v === null || v === undefined) {
                v = Buffer.allocUnsafe(0);
            }
            else if (bn$2.isBN(v)) {
                v = v.toArrayLike(Buffer);
            }
            else if (v.toArray) {
                // converts a BN to a Buffer
                v = Buffer.from(v.toArray());
            }
            else {
                throw new Error('invalid type');
            }
        }
        return v;
    };
    /**
     * Converts a `Buffer` to a `Number`.
     * @param buf `Buffer` object to convert
     * @throws If the input number exceeds 53 bits.
     */
    exports.bufferToInt = function (buf) {
        return new bn$2(exports.toBuffer(buf)).toNumber();
    };
    /**
     * Converts a `Buffer` into a `0x`-prefixed hex `String`.
     * @param buf `Buffer` object to convert
     */
    exports.bufferToHex = function (buf) {
        buf = exports.toBuffer(buf);
        return '0x' + buf.toString('hex');
    };
    /**
     * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
     * @param num Signed integer value
     */
    exports.fromSigned = function (num) {
        return new bn$2(num).fromTwos(256);
    };
    /**
     * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
     * @param num
     */
    exports.toUnsigned = function (num) {
        return Buffer.from(num.toTwos(256).toArray());
    };
    /**
     * Adds "0x" to a given `String` if it does not already start with "0x".
     */
    exports.addHexPrefix = function (str) {
        if (typeof str !== 'string') {
            return str;
        }
        return lib$i.isHexPrefixed(str) ? str : '0x' + str;
    };
    /**
     * Converts a `Buffer` or `Array` to JSON.
     * @param ba (Buffer|Array)
     * @return (Array|String|null)
     */
    exports.baToJSON = function (ba) {
        if (isBuffer(ba)) {
            return "0x" + ba.toString('hex');
        }
        else if (ba instanceof Array) {
            var array = [];
            for (var i = 0; i < ba.length; i++) {
                array.push(exports.baToJSON(ba[i]));
            }
            return array;
        }
    };

    });

    var hashUtils = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
        return function (msg) {
            var hash = hashConstructor();
            hash.update(msg);
            return Buffer.from(hash.digest());
        };
    }
    exports.createHashFunction = createHashFunction;

    });

    const { Transform: Transform$5 } = Stream;

    var keccak$2 = (KeccakState) => class Keccak extends Transform$5 {
      constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
        super(options);

        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._hashBitLength = hashBitLength;
        this._options = options;

        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }

      _transform (chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }

        callback(error);
      }

      _flush (callback) {
        let error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }

        callback(error);
      }

      update (data, encoding) {
        if (!isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
        if (this._finalized) throw new Error('Digest already called')
        if (!isBuffer(data)) data = Buffer.from(data, encoding);

        this._state.absorb(data);

        return this
      }

      digest (encoding) {
        if (this._finalized) throw new Error('Digest already called')
        this._finalized = true;

        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
        let digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== undefined) digest = digest.toString(encoding);

        this._resetState();

        return digest
      }

      // remove result from memory
      _resetState () {
        this._state.initialize(this._rate, this._capacity);
        return this
      }

      // because sometimes we need hash right now and little later
      _clone () {
        const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;

        return clone
      }
    };

    const { Transform: Transform$6 } = Stream;

    var shake = (KeccakState) => class Shake extends Transform$6 {
      constructor (rate, capacity, delimitedSuffix, options) {
        super(options);

        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._options = options;

        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }

      _transform (chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }

        callback(error);
      }

      _flush () {}

      _read (size) {
        this.push(this.squeeze(size));
      }

      update (data, encoding) {
        if (!isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
        if (this._finalized) throw new Error('Squeeze already called')
        if (!isBuffer(data)) data = Buffer.from(data, encoding);

        this._state.absorb(data);

        return this
      }

      squeeze (dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }

        let data = this._state.squeeze(dataByteLength);
        if (encoding !== undefined) data = data.toString(encoding);

        return data
      }

      _resetState () {
        this._state.initialize(this._rate, this._capacity);
        return this
      }

      _clone () {
        const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;

        return clone
      }
    };

    var api = function (KeccakState) {
      const Keccak = keccak$2(KeccakState);
      const Shake = shake(KeccakState);

      return function (algorithm, options) {
        const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
        switch (hash) {
          case 'keccak224': return new Keccak(1152, 448, null, 224, options)
          case 'keccak256': return new Keccak(1088, 512, null, 256, options)
          case 'keccak384': return new Keccak(832, 768, null, 384, options)
          case 'keccak512': return new Keccak(576, 1024, null, 512, options)

          case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
          case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
          case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
          case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

          case 'shake128': return new Shake(1344, 256, 0x1f, options)
          case 'shake256': return new Shake(1088, 512, 0x1f, options)

          default: throw new Error('Invald algorithm: ' + algorithm)
        }
      }
    };

    const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

    var p1600 = function (s) {
      for (let round = 0; round < 24; ++round) {
        // theta
        const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        const t1slo0 = s[0] ^ lo;
        const t1shi0 = s[1] ^ hi;
        const t1slo5 = s[10] ^ lo;
        const t1shi5 = s[11] ^ hi;
        const t1slo10 = s[20] ^ lo;
        const t1shi10 = s[21] ^ hi;
        const t1slo15 = s[30] ^ lo;
        const t1shi15 = s[31] ^ hi;
        const t1slo20 = s[40] ^ lo;
        const t1shi20 = s[41] ^ hi;
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        const t1slo1 = s[2] ^ lo;
        const t1shi1 = s[3] ^ hi;
        const t1slo6 = s[12] ^ lo;
        const t1shi6 = s[13] ^ hi;
        const t1slo11 = s[22] ^ lo;
        const t1shi11 = s[23] ^ hi;
        const t1slo16 = s[32] ^ lo;
        const t1shi16 = s[33] ^ hi;
        const t1slo21 = s[42] ^ lo;
        const t1shi21 = s[43] ^ hi;
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        const t1slo2 = s[4] ^ lo;
        const t1shi2 = s[5] ^ hi;
        const t1slo7 = s[14] ^ lo;
        const t1shi7 = s[15] ^ hi;
        const t1slo12 = s[24] ^ lo;
        const t1shi12 = s[25] ^ hi;
        const t1slo17 = s[34] ^ lo;
        const t1shi17 = s[35] ^ hi;
        const t1slo22 = s[44] ^ lo;
        const t1shi22 = s[45] ^ hi;
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        const t1slo3 = s[6] ^ lo;
        const t1shi3 = s[7] ^ hi;
        const t1slo8 = s[16] ^ lo;
        const t1shi8 = s[17] ^ hi;
        const t1slo13 = s[26] ^ lo;
        const t1shi13 = s[27] ^ hi;
        const t1slo18 = s[36] ^ lo;
        const t1shi18 = s[37] ^ hi;
        const t1slo23 = s[46] ^ lo;
        const t1shi23 = s[47] ^ hi;
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        const t1slo4 = s[8] ^ lo;
        const t1shi4 = s[9] ^ hi;
        const t1slo9 = s[18] ^ lo;
        const t1shi9 = s[19] ^ hi;
        const t1slo14 = s[28] ^ lo;
        const t1shi14 = s[29] ^ hi;
        const t1slo19 = s[38] ^ lo;
        const t1shi19 = s[39] ^ hi;
        const t1slo24 = s[48] ^ lo;
        const t1shi24 = s[49] ^ hi;

        // rho & pi
        const t2slo0 = t1slo0;
        const t2shi0 = t1shi0;
        const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28);
        const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28);
        const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29);
        const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29);
        const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23);
        const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23);
        const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14);
        const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14);
        const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31);
        const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31);
        const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20);
        const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20);
        const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22);
        const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22);
        const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19);
        const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19);
        const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30);
        const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30);
        const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2);
        const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2);
        const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26);
        const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26);
        const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21);
        const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21);
        const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17);
        const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17);
        const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3);
        const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3);
        const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4);
        const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4);
        const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9);
        const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9);
        const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7);
        const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7);
        const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11);
        const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11);
        const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8);
        const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8);
        const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5);
        const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5);
        const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12);
        const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12);
        const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25);
        const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25);
        const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24);
        const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24);
        const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18);
        const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18);

        // chi
        s[0] = t2slo0 ^ (~t2slo1 & t2slo2);
        s[1] = t2shi0 ^ (~t2shi1 & t2shi2);
        s[10] = t2slo5 ^ (~t2slo6 & t2slo7);
        s[11] = t2shi5 ^ (~t2shi6 & t2shi7);
        s[20] = t2slo10 ^ (~t2slo11 & t2slo12);
        s[21] = t2shi10 ^ (~t2shi11 & t2shi12);
        s[30] = t2slo15 ^ (~t2slo16 & t2slo17);
        s[31] = t2shi15 ^ (~t2shi16 & t2shi17);
        s[40] = t2slo20 ^ (~t2slo21 & t2slo22);
        s[41] = t2shi20 ^ (~t2shi21 & t2shi22);
        s[2] = t2slo1 ^ (~t2slo2 & t2slo3);
        s[3] = t2shi1 ^ (~t2shi2 & t2shi3);
        s[12] = t2slo6 ^ (~t2slo7 & t2slo8);
        s[13] = t2shi6 ^ (~t2shi7 & t2shi8);
        s[22] = t2slo11 ^ (~t2slo12 & t2slo13);
        s[23] = t2shi11 ^ (~t2shi12 & t2shi13);
        s[32] = t2slo16 ^ (~t2slo17 & t2slo18);
        s[33] = t2shi16 ^ (~t2shi17 & t2shi18);
        s[42] = t2slo21 ^ (~t2slo22 & t2slo23);
        s[43] = t2shi21 ^ (~t2shi22 & t2shi23);
        s[4] = t2slo2 ^ (~t2slo3 & t2slo4);
        s[5] = t2shi2 ^ (~t2shi3 & t2shi4);
        s[14] = t2slo7 ^ (~t2slo8 & t2slo9);
        s[15] = t2shi7 ^ (~t2shi8 & t2shi9);
        s[24] = t2slo12 ^ (~t2slo13 & t2slo14);
        s[25] = t2shi12 ^ (~t2shi13 & t2shi14);
        s[34] = t2slo17 ^ (~t2slo18 & t2slo19);
        s[35] = t2shi17 ^ (~t2shi18 & t2shi19);
        s[44] = t2slo22 ^ (~t2slo23 & t2slo24);
        s[45] = t2shi22 ^ (~t2shi23 & t2shi24);
        s[6] = t2slo3 ^ (~t2slo4 & t2slo0);
        s[7] = t2shi3 ^ (~t2shi4 & t2shi0);
        s[16] = t2slo8 ^ (~t2slo9 & t2slo5);
        s[17] = t2shi8 ^ (~t2shi9 & t2shi5);
        s[26] = t2slo13 ^ (~t2slo14 & t2slo10);
        s[27] = t2shi13 ^ (~t2shi14 & t2shi10);
        s[36] = t2slo18 ^ (~t2slo19 & t2slo15);
        s[37] = t2shi18 ^ (~t2shi19 & t2shi15);
        s[46] = t2slo23 ^ (~t2slo24 & t2slo20);
        s[47] = t2shi23 ^ (~t2shi24 & t2shi20);
        s[8] = t2slo4 ^ (~t2slo0 & t2slo1);
        s[9] = t2shi4 ^ (~t2shi0 & t2shi1);
        s[18] = t2slo9 ^ (~t2slo5 & t2slo6);
        s[19] = t2shi9 ^ (~t2shi5 & t2shi6);
        s[28] = t2slo14 ^ (~t2slo10 & t2slo11);
        s[29] = t2shi14 ^ (~t2shi10 & t2shi11);
        s[38] = t2slo19 ^ (~t2slo15 & t2slo16);
        s[39] = t2shi19 ^ (~t2shi15 & t2shi16);
        s[48] = t2slo24 ^ (~t2slo20 & t2slo21);
        s[49] = t2shi24 ^ (~t2shi20 & t2shi21);

        // iota
        s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
        s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
      }
    };

    var keccakStateUnroll = {
    	p1600: p1600
    };

    function Keccak$2 () {
      // much faster than `new Array(50)`
      this.state = [
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0
      ];

      this.blockSize = null;
      this.count = 0;
      this.squeezing = false;
    }

    Keccak$2.prototype.initialize = function (rate, capacity) {
      for (let i = 0; i < 50; ++i) this.state[i] = 0;
      this.blockSize = rate / 8;
      this.count = 0;
      this.squeezing = false;
    };

    Keccak$2.prototype.absorb = function (data) {
      for (let i = 0; i < data.length; ++i) {
        this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4));
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakStateUnroll.p1600(this.state);
          this.count = 0;
        }
      }
    };

    Keccak$2.prototype.absorbLastFewBits = function (bits) {
      this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4));
      if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakStateUnroll.p1600(this.state);
      this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4));
      keccakStateUnroll.p1600(this.state);
      this.count = 0;
      this.squeezing = true;
    };

    Keccak$2.prototype.squeeze = function (length) {
      if (!this.squeezing) this.absorbLastFewBits(0x01);

      const output = Buffer.alloc(length);
      for (let i = 0; i < length; ++i) {
        output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff;
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakStateUnroll.p1600(this.state);
          this.count = 0;
        }
      }

      return output
    };

    Keccak$2.prototype.copy = function (dest) {
      for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
      dest.blockSize = this.blockSize;
      dest.count = this.count;
      dest.squeezing = this.squeezing;
    };

    var keccak$3 = Keccak$2;

    var js = api(keccak$3);

    var keccak$4 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });


    exports.keccak224 = hashUtils.createHashFunction(function () {
        return js("keccak224");
    });
    exports.keccak256 = hashUtils.createHashFunction(function () {
        return js("keccak256");
    });
    exports.keccak384 = hashUtils.createHashFunction(function () {
        return js("keccak384");
    });
    exports.keccak512 = hashUtils.createHashFunction(function () {
        return js("keccak512");
    });

    });

    var hash$4 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
    var keccak224 = keccak$4.keccak224, keccak384 = keccak$4.keccak384, k256 = keccak$4.keccak256, keccak512 = keccak$4.keccak512;




    /**
     * Creates Keccak hash of the input
     * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
     * it's interpreted as hexadecimal, otherwise as utf8.
     * @param bits The Keccak width
     */
    exports.keccak = function (a, bits) {
        if (bits === void 0) { bits = 256; }
        if (typeof a === 'string' && !lib$i.isHexString(a)) {
            a = Buffer.from(a, 'utf8');
        }
        else {
            a = bytes$1.toBuffer(a);
        }
        if (!bits)
            bits = 256;
        switch (bits) {
            case 224: {
                return keccak224(a);
            }
            case 256: {
                return k256(a);
            }
            case 384: {
                return keccak384(a);
            }
            case 512: {
                return keccak512(a);
            }
            default: {
                throw new Error("Invald algorithm: keccak" + bits);
            }
        }
    };
    /**
     * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
     * @param a The input data (Buffer|Array|String|Number)
     */
    exports.keccak256 = function (a) {
        return exports.keccak(a);
    };
    /**
     * Creates SHA256 hash of the input.
     * @param a The input data (Buffer|Array|String|Number)
     */
    exports.sha256 = function (a) {
        a = bytes$1.toBuffer(a);
        return browser$6('sha256')
            .update(a)
            .digest();
    };
    /**
     * Creates RIPEMD160 hash of the input.
     * @param a The input data (Buffer|Array|String|Number)
     * @param padded Whether it should be padded to 256 bits or not
     */
    exports.ripemd160 = function (a, padded) {
        a = bytes$1.toBuffer(a);
        var hash = browser$6('rmd160')
            .update(a)
            .digest();
        if (padded === true) {
            return bytes$1.setLength(hash, 32);
        }
        else {
            return hash;
        }
    };
    /**
     * Creates SHA-3 hash of the RLP encoded version of the input.
     * @param a The input data
     */
    exports.rlphash = function (a) {
        return exports.keccak(dist$2.encode(a));
    };

    });

    var account$1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;






    /**
     * Returns a zero address.
     */
    exports.zeroAddress = function () {
        var addressLength = 20;
        var addr = bytes$1.zeros(addressLength);
        return bytes$1.bufferToHex(addr);
    };
    /**
     * Checks if the address is a valid. Accepts checksummed addresses too.
     */
    exports.isValidAddress = function (address) {
        return /^0x[0-9a-fA-F]{40}$/.test(address);
    };
    /**
     * Checks if a given address is a zero address.
     */
    exports.isZeroAddress = function (address) {
        var zeroAddr = exports.zeroAddress();
        return zeroAddr === bytes$1.addHexPrefix(address);
    };
    /**
     * Returns a checksummed address.
     *
     * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
     * has the effect of checksummed addresses for one chain having invalid checksums for others.
     * For more details, consult EIP-1191.
     *
     * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
     * used variation in Ethereum was without the chainId. This may change in the future.
     */
    exports.toChecksumAddress = function (address, eip1191ChainId) {
        address = lib$i.stripHexPrefix(address).toLowerCase();
        var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
        var hash = hash$4.keccak(prefix + address).toString('hex');
        var ret = '0x';
        for (var i = 0; i < address.length; i++) {
            if (parseInt(hash[i], 16) >= 8) {
                ret += address[i].toUpperCase();
            }
            else {
                ret += address[i];
            }
        }
        return ret;
    };
    /**
     * Checks if the address is a valid checksummed address.
     *
     * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
     */
    exports.isValidChecksumAddress = function (address, eip1191ChainId) {
        return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
    };
    /**
     * Generates an address of a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */
    exports.generateAddress = function (from, nonce) {
        from = bytes$1.toBuffer(from);
        var nonceBN = new bn$2(nonce);
        if (nonceBN.isZero()) {
            // in RLP we want to encode null in the case of zero nonce
            // read the RLP documentation for an answer if you dare
            return hash$4.rlphash([from, null]).slice(-20);
        }
        // Only take the lower 160bits of the hash
        return hash$4.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */
    exports.generateAddress2 = function (from, salt, initCode) {
        var fromBuf = bytes$1.toBuffer(from);
        var saltBuf = bytes$1.toBuffer(salt);
        var initCodeBuf = bytes$1.toBuffer(initCode);
        assert$b(fromBuf.length === 20);
        assert$b(saltBuf.length === 32);
        var address = hash$4.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash$4.keccak256(initCodeBuf)]));
        return address.slice(-20);
    };
    /**
     * Returns true if the supplied address belongs to a precompiled account (Byzantium).
     */
    exports.isPrecompiled = function (address) {
        var a = bytes$1.unpad(address);
        return a.length === 1 && a[0] >= 1 && a[0] <= 8;
    };
    /**
     * Checks if the private key satisfies the rules of the curve secp256k1.
     */
    exports.isValidPrivate = function (privateKey) {
        return secp256k1v3Adapter.privateKeyVerify(privateKey);
    };
    /**
     * Checks if the public key satisfies the rules of the curve secp256k1
     * and the requirements of Ethereum.
     * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
     * @param sanitize Accept public keys in other formats
     */
    exports.isValidPublic = function (publicKey, sanitize) {
        if (sanitize === void 0) { sanitize = false; }
        if (publicKey.length === 64) {
            // Convert to SEC1 for secp256k1
            return secp256k1v3Adapter.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
        }
        if (!sanitize) {
            return false;
        }
        return secp256k1v3Adapter.publicKeyVerify(publicKey);
    };
    /**
     * Returns the ethereum address of a given public key.
     * Accepts "Ethereum public keys" and SEC1 encoded keys.
     * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
     * @param sanitize Accept public keys in other formats
     */
    exports.pubToAddress = function (pubKey, sanitize) {
        if (sanitize === void 0) { sanitize = false; }
        pubKey = bytes$1.toBuffer(pubKey);
        if (sanitize && pubKey.length !== 64) {
            pubKey = secp256k1v3Adapter.publicKeyConvert(pubKey, false).slice(1);
        }
        assert$b(pubKey.length === 64);
        // Only take the lower 160bits of the hash
        return hash$4.keccak(pubKey).slice(-20);
    };
    exports.publicToAddress = exports.pubToAddress;
    /**
     * Returns the ethereum address of a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    exports.privateToAddress = function (privateKey) {
        return exports.publicToAddress(exports.privateToPublic(privateKey));
    };
    /**
     * Returns the ethereum public key of a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    exports.privateToPublic = function (privateKey) {
        privateKey = bytes$1.toBuffer(privateKey);
        // skip the type flag and use the X, Y points
        return secp256k1v3Adapter.publicKeyCreate(privateKey, false).slice(1);
    };
    /**
     * Converts a public key to the Ethereum format.
     */
    exports.importPublic = function (publicKey) {
        publicKey = bytes$1.toBuffer(publicKey);
        if (publicKey.length !== 64) {
            publicKey = secp256k1v3Adapter.publicKeyConvert(publicKey, false).slice(1);
        }
        return publicKey;
    };

    });

    var signature$3 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;




    /**
     * Returns the ECDSA signature of a message hash.
     */
    exports.ecsign = function (msgHash, privateKey, chainId) {
        var sig = secp256k1v3Adapter.sign(msgHash, privateKey);
        var recovery = sig.recovery;
        var ret = {
            r: sig.signature.slice(0, 32),
            s: sig.signature.slice(32, 64),
            v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
        };
        return ret;
    };
    /**
     * ECDSA public key recovery from signature.
     * @returns Recovered public key
     */
    exports.ecrecover = function (msgHash, v, r, s, chainId) {
        var signature = Buffer.concat([bytes$1.setLength(r, 32), bytes$1.setLength(s, 32)], 64);
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        var senderPubKey = secp256k1v3Adapter.recover(msgHash, signature, recovery);
        return secp256k1v3Adapter.publicKeyConvert(senderPubKey, false).slice(1);
    };
    /**
     * Convert signature parameters into the format of `eth_sign` RPC method.
     * @returns Signature
     */
    exports.toRpcSig = function (v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
        return bytes$1.bufferToHex(Buffer.concat([bytes$1.setLengthLeft(r, 32), bytes$1.setLengthLeft(s, 32), bytes$1.toBuffer(v)]));
    };
    /**
     * Convert signature format of the `eth_sign` RPC method to signature parameters
     * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
     */
    exports.fromRpcSig = function (sig) {
        var buf = bytes$1.toBuffer(sig);
        // NOTE: with potential introduction of chainId this might need to be updated
        if (buf.length !== 65) {
            throw new Error('Invalid signature length');
        }
        var v = buf[64];
        // support both versions of `eth_sign` responses
        if (v < 27) {
            v += 27;
        }
        return {
            v: v,
            r: buf.slice(0, 32),
            s: buf.slice(32, 64),
        };
    };
    /**
     * Validate a ECDSA signature.
     * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
     */
    exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
        if (homesteadOrLater === void 0) { homesteadOrLater = true; }
        var SECP256K1_N_DIV_2 = new bn$2('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
        var SECP256K1_N = new bn$2('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
        if (r.length !== 32 || s.length !== 32) {
            return false;
        }
        if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
            return false;
        }
        var rBN = new bn$2(r);
        var sBN = new bn$2(s);
        if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
            return false;
        }
        if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
            return false;
        }
        return true;
    };
    /**
     * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
     * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
     * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
     * used to produce the signature.
     */
    exports.hashPersonalMessage = function (message) {
        var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
        return hash$4.keccak(Buffer.concat([prefix, message]));
    };
    function calculateSigRecovery(v, chainId) {
        return chainId ? v - (2 * chainId + 35) : v - 27;
    }
    function isValidSigRecovery(recovery) {
        return recovery === 0 || recovery === 1;
    }

    });

    var object = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = void 0;




    /**
     * Defines properties on a `Object`. It make the assumption that underlying data is binary.
     * @param self the `Object` to define properties on
     * @param fields an array fields to define. Fields can contain:
     * * `name` - the name of the properties
     * * `length` - the number of bytes the field can have
     * * `allowLess` - if the field can be less than the length
     * * `allowEmpty`
     * @param data data to be validated against the definitions
     * @deprecated
     */
    exports.defineProperties = function (self, fields, data) {
        self.raw = [];
        self._fields = [];
        // attach the `toJSON`
        self.toJSON = function (label) {
            if (label === void 0) { label = false; }
            if (label) {
                var obj_1 = {};
                self._fields.forEach(function (field) {
                    obj_1[field] = "0x" + self[field].toString('hex');
                });
                return obj_1;
            }
            return bytes$1.baToJSON(self.raw);
        };
        self.serialize = function serialize() {
            return dist$2.encode(self.raw);
        };
        fields.forEach(function (field, i) {
            self._fields.push(field.name);
            function getter() {
                return self.raw[i];
            }
            function setter(v) {
                v = bytes$1.toBuffer(v);
                if (v.toString('hex') === '00' && !field.allowZero) {
                    v = Buffer.allocUnsafe(0);
                }
                if (field.allowLess && field.length) {
                    v = bytes$1.stripZeros(v);
                    assert$b(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
                }
                else if (!(field.allowZero && v.length === 0) && field.length) {
                    assert$b(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
                }
                self.raw[i] = v;
            }
            Object.defineProperty(self, field.name, {
                enumerable: true,
                configurable: true,
                get: getter,
                set: setter,
            });
            if (field.default) {
                self[field.name] = field.default;
            }
            // attach alias
            if (field.alias) {
                Object.defineProperty(self, field.alias, {
                    enumerable: false,
                    configurable: true,
                    set: setter,
                    get: getter,
                });
            }
        });
        // if the constuctor is passed data
        if (data) {
            if (typeof data === 'string') {
                data = Buffer.from(lib$i.stripHexPrefix(data), 'hex');
            }
            if (isBuffer(data)) {
                data = dist$2.decode(data);
            }
            if (Array.isArray(data)) {
                if (data.length > self._fields.length) {
                    throw new Error('wrong number of fields in data');
                }
                // make sure all the items are buffers
                data.forEach(function (d, i) {
                    self[self._fields[i]] = bytes$1.toBuffer(d);
                });
            }
            else if (typeof data === 'object') {
                var keys_1 = Object.keys(data);
                fields.forEach(function (field) {
                    if (keys_1.indexOf(field.name) !== -1)
                        self[field.name] = data[field.name];
                    if (keys_1.indexOf(field.alias) !== -1)
                        self[field.alias] = data[field.alias];
                });
            }
            else {
                throw new Error('invalid data');
            }
        }
    };

    });

    var dist$3 = createCommonjsModule(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.secp256k1 = exports.rlp = exports.BN = void 0;

    exports.secp256k1 = secp256k1v3Adapter;


    exports.BN = bn$2;

    exports.rlp = dist$2;
    Object.assign(exports, lib$i);
    /**
     * Constants
     */
    __exportStar(constants$5, exports);
    /**
     * Public-key cryptography (secp256k1) and addresses
     */
    __exportStar(account$1, exports);
    /**
     * Hash functions
     */
    __exportStar(hash$4, exports);
    /**
     * ECDSA signature
     */
    __exportStar(signature$3, exports);
    /**
     * Utilities for manipulating Buffers, byte arrays, etc.
     */
    __exportStar(bytes$1, exports);
    /**
     * Function for definining properties on an object
     */
    __exportStar(object, exports);

    });

    var name$4 = "mainnet";
    var chainId = 1;
    var networkId = 1;
    var comment = "The Ethereum main chain";
    var url$2 = "https://ethstats.net/";
    var genesis = {
    	hash: "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
    	timestamp: null,
    	gasLimit: 5000,
    	difficulty: 17179869184,
    	nonce: "0x0000000000000042",
    	extraData: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
    	stateRoot: "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"
    };
    var hardforks = [
    	{
    		name: "chainstart",
    		block: 0,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "homestead",
    		block: 1150000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "dao",
    		block: 1920000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "tangerineWhistle",
    		block: 2463000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "spuriousDragon",
    		block: 2675000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "byzantium",
    		block: 4370000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "constantinople",
    		block: 7280000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "petersburg",
    		block: 7280000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "istanbul",
    		block: 9069000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "muirGlacier",
    		block: 9200000,
    		consensus: "pow",
    		finality: null
    	}
    ];
    var bootstrapNodes = [
    	{
    		ip: "18.138.108.67",
    		port: 30303,
    		id: "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
    		location: "ap-southeast-1-001",
    		comment: "bootnode-aws-ap-southeast-1-001"
    	},
    	{
    		ip: "3.209.45.79",
    		port: 30303,
    		id: "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
    		location: "us-east-1-001",
    		comment: "bootnode-aws-us-east-1-001"
    	},
    	{
    		ip: "34.255.23.113",
    		port: 30303,
    		id: "ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758",
    		location: "eu-west-1-001",
    		comment: "bootnode-aws-eu-west-1-001"
    	},
    	{
    		ip: "35.158.244.151",
    		port: 30303,
    		id: "279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8",
    		location: "eu-central-1-001",
    		comment: "bootnode-aws-eu-central-1-001"
    	},
    	{
    		ip: "52.187.207.27",
    		port: 30303,
    		id: "8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a",
    		location: "australiaeast-001",
    		comment: "bootnode-azure-australiaeast-001"
    	},
    	{
    		ip: "191.234.162.198",
    		port: 30303,
    		id: "103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1",
    		location: "brazilsouth-001",
    		comment: "bootnode-azure-brazilsouth-001"
    	},
    	{
    		ip: "52.231.165.108",
    		port: 30303,
    		id: "715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8",
    		location: "koreasouth-001",
    		comment: "bootnode-azure-koreasouth-001"
    	},
    	{
    		ip: "104.42.217.25",
    		port: 30303,
    		id: "5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f",
    		location: "westus-001",
    		comment: "bootnode-azure-westus-001"
    	}
    ];
    var mainnet = {
    	name: name$4,
    	chainId: chainId,
    	networkId: networkId,
    	comment: comment,
    	url: url$2,
    	genesis: genesis,
    	hardforks: hardforks,
    	bootstrapNodes: bootstrapNodes
    };

    var mainnet$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$4,
        chainId: chainId,
        networkId: networkId,
        comment: comment,
        url: url$2,
        genesis: genesis,
        hardforks: hardforks,
        bootstrapNodes: bootstrapNodes,
        'default': mainnet
    });

    var name$5 = "ropsten";
    var chainId$1 = 3;
    var networkId$1 = 3;
    var comment$1 = "PoW test network";
    var url$3 = "https://github.com/ethereum/ropsten";
    var genesis$1 = {
    	hash: "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d",
    	timestamp: null,
    	gasLimit: 16777216,
    	difficulty: 1048576,
    	nonce: "0x0000000000000042",
    	extraData: "0x3535353535353535353535353535353535353535353535353535353535353535",
    	stateRoot: "0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"
    };
    var hardforks$1 = [
    	{
    		name: "chainstart",
    		block: 0,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "homestead",
    		block: 0,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "dao",
    		block: null,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "tangerineWhistle",
    		block: 0,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "spuriousDragon",
    		block: 10,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "byzantium",
    		block: 1700000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "constantinople",
    		block: 4230000,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "petersburg",
    		block: 4939394,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "istanbul",
    		block: 6485846,
    		consensus: "pow",
    		finality: null
    	},
    	{
    		name: "muirGlacier",
    		block: 7117117,
    		consensus: "pow",
    		finality: null
    	}
    ];
    var bootstrapNodes$1 = [
    	{
    		ip: "52.176.7.10",
    		port: 30303,
    		id: "30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",
    		location: "",
    		comment: "US-Azure geth"
    	},
    	{
    		ip: "52.176.100.77",
    		port: 30303,
    		id: "865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",
    		location: "",
    		comment: "US-Azure parity"
    	},
    	{
    		ip: "52.232.243.152",
    		port: 30303,
    		id: "6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",
    		location: "",
    		comment: "Parity"
    	},
    	{
    		ip: "192.81.208.223",
    		port: 30303,
    		id: "94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",
    		location: "",
    		comment: "@gpip"
    	}
    ];
    var ropsten = {
    	name: name$5,
    	chainId: chainId$1,
    	networkId: networkId$1,
    	comment: comment$1,
    	url: url$3,
    	genesis: genesis$1,
    	hardforks: hardforks$1,
    	bootstrapNodes: bootstrapNodes$1
    };

    var ropsten$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$5,
        chainId: chainId$1,
        networkId: networkId$1,
        comment: comment$1,
        url: url$3,
        genesis: genesis$1,
        hardforks: hardforks$1,
        bootstrapNodes: bootstrapNodes$1,
        'default': ropsten
    });

    var name$6 = "rinkeby";
    var chainId$2 = 4;
    var networkId$2 = 4;
    var comment$2 = "PoA test network";
    var url$4 = "https://www.rinkeby.io";
    var genesis$2 = {
    	hash: "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177",
    	timestamp: "0x58ee40ba",
    	gasLimit: 4700000,
    	difficulty: 1,
    	nonce: "0x0000000000000000",
    	extraData: "0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    	stateRoot: "0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"
    };
    var hardforks$2 = [
    	{
    		name: "chainstart",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "homestead",
    		block: 1,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "dao",
    		block: null,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "tangerineWhistle",
    		block: 2,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "spuriousDragon",
    		block: 3,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "byzantium",
    		block: 1035301,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "constantinople",
    		block: 3660663,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "petersburg",
    		block: 4321234,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "istanbul",
    		block: 5435345,
    		consensus: "poa",
    		finality: null
    	}
    ];
    var bootstrapNodes$2 = [
    	{
    		ip: "52.169.42.101",
    		port: 30303,
    		id: "a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",
    		location: "",
    		comment: "IE"
    	},
    	{
    		ip: "52.3.158.184",
    		port: 30303,
    		id: "343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",
    		location: "",
    		comment: "INFURA"
    	},
    	{
    		ip: "159.89.28.211",
    		port: 30303,
    		id: "b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",
    		location: "",
    		comment: "AKASHA"
    	}
    ];
    var rinkeby = {
    	name: name$6,
    	chainId: chainId$2,
    	networkId: networkId$2,
    	comment: comment$2,
    	url: url$4,
    	genesis: genesis$2,
    	hardforks: hardforks$2,
    	bootstrapNodes: bootstrapNodes$2
    };

    var rinkeby$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$6,
        chainId: chainId$2,
        networkId: networkId$2,
        comment: comment$2,
        url: url$4,
        genesis: genesis$2,
        hardforks: hardforks$2,
        bootstrapNodes: bootstrapNodes$2,
        'default': rinkeby
    });

    var name$7 = "kovan";
    var chainId$3 = 42;
    var networkId$3 = 42;
    var comment$3 = "Parity PoA test network";
    var url$5 = "https://kovan-testnet.github.io/website/";
    var genesis$3 = {
    	hash: "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9",
    	timestamp: null,
    	gasLimit: 6000000,
    	difficulty: 131072,
    	nonce: "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    	extraData: "0x",
    	stateRoot: "0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"
    };
    var hardforks$3 = [
    	{
    		name: "chainstart",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "homestead",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "dao",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "tangerineWhistle",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "spuriousDragon",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "byzantium",
    		block: 5067000,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "constantinople",
    		block: 9200000,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "petersburg",
    		block: 10255201,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "istanbul",
    		block: 14111141,
    		consensus: "poa",
    		finality: null
    	}
    ];
    var bootstrapNodes$3 = [
    	{
    		ip: "116.203.116.241",
    		port: 30303,
    		id: "16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45",
    		location: "",
    		comment: "1"
    	},
    	{
    		ip: "3.217.96.11",
    		port: 30303,
    		id: "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
    		location: "",
    		comment: "2"
    	},
    	{
    		ip: "108.61.170.124",
    		port: 30303,
    		id: "740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c",
    		location: "",
    		comment: "3"
    	},
    	{
    		ip: "157.230.31.163",
    		port: 30303,
    		id: "2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",
    		location: "",
    		comment: "4"
    	}
    ];
    var kovan = {
    	name: name$7,
    	chainId: chainId$3,
    	networkId: networkId$3,
    	comment: comment$3,
    	url: url$5,
    	genesis: genesis$3,
    	hardforks: hardforks$3,
    	bootstrapNodes: bootstrapNodes$3
    };

    var kovan$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$7,
        chainId: chainId$3,
        networkId: networkId$3,
        comment: comment$3,
        url: url$5,
        genesis: genesis$3,
        hardforks: hardforks$3,
        bootstrapNodes: bootstrapNodes$3,
        'default': kovan
    });

    var name$8 = "goerli";
    var chainId$4 = 5;
    var networkId$4 = 5;
    var comment$4 = "Cross-client PoA test network";
    var url$6 = "https://github.com/goerli/testnet";
    var genesis$4 = {
    	hash: "0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a",
    	timestamp: "0x5c51a607",
    	gasLimit: 10485760,
    	difficulty: 1,
    	nonce: "0x0000000000000000",
    	extraData: "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    	stateRoot: "0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"
    };
    var hardforks$4 = [
    	{
    		name: "chainstart",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "homestead",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "dao",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "tangerineWhistle",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "spuriousDragon",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "byzantium",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "constantinople",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "petersburg",
    		block: 0,
    		consensus: "poa",
    		finality: null
    	},
    	{
    		name: "istanbul",
    		block: 1561651,
    		consensus: "poa",
    		finality: null
    	}
    ];
    var bootstrapNodes$4 = [
    	{
    		ip: "51.141.78.53",
    		port: 30303,
    		id: "011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",
    		location: "",
    		comment: "Upstream bootnode 1"
    	},
    	{
    		ip: "13.93.54.137",
    		port: 30303,
    		id: "176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",
    		location: "",
    		comment: "Upstream bootnode 2"
    	},
    	{
    		ip: "94.237.54.114",
    		port: 30313,
    		id: "46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",
    		location: "",
    		comment: "Upstream bootnode 3"
    	},
    	{
    		ip: "52.64.155.147",
    		port: 30303,
    		id: "c1f8b7c2ac4453271fa07d8e9ecf9a2e8285aa0bd0c07df0131f47153306b0736fd3db8924e7a9bf0bed6b1d8d4f87362a71b033dc7c64547728d953e43e59b2",
    		location: "",
    		comment: "Upstream bootnode 4"
    	},
    	{
    		ip: "213.186.16.82",
    		port: 30303,
    		id: "f4a9c6ee28586009fb5a96c8af13a58ed6d8315a9eee4772212c1d4d9cebe5a8b8a78ea4434f318726317d04a3f531a1ef0420cf9752605a562cfe858c46e263",
    		location: "",
    		comment: "Upstream bootnode 5"
    	},
    	{
    		ip: "3.11.147.67",
    		port: 30303,
    		id: "a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",
    		location: "",
    		comment: "Ethereum Foundation bootnode"
    	}
    ];
    var goerli = {
    	name: name$8,
    	chainId: chainId$4,
    	networkId: networkId$4,
    	comment: comment$4,
    	url: url$6,
    	genesis: genesis$4,
    	hardforks: hardforks$4,
    	bootstrapNodes: bootstrapNodes$4
    };

    var goerli$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$8,
        chainId: chainId$4,
        networkId: networkId$4,
        comment: comment$4,
        url: url$6,
        genesis: genesis$4,
        hardforks: hardforks$4,
        bootstrapNodes: bootstrapNodes$4,
        'default': goerli
    });

    var require$$0$3 = getCjsExportFromNamespace(mainnet$1);

    var require$$1$1 = getCjsExportFromNamespace(ropsten$1);

    var require$$2 = getCjsExportFromNamespace(rinkeby$1);

    var require$$3 = getCjsExportFromNamespace(kovan$1);

    var require$$4 = getCjsExportFromNamespace(goerli$1);

    var chains = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chains = void 0;
    exports.chains = {
        names: {
            '1': 'mainnet',
            '3': 'ropsten',
            '4': 'rinkeby',
            '42': 'kovan',
            '5': 'goerli',
        },
        mainnet: require$$0$3,
        ropsten: require$$1$1,
        rinkeby: require$$2,
        kovan: require$$3,
        goerli: require$$4,
    };

    });

    var name$9 = "chainstart";
    var comment$5 = "Start of the Ethereum main chain";
    var eip = {
    	url: "",
    	status: ""
    };
    var status = "";
    var gasConfig = {
    	minGasLimit: {
    		v: 5000,
    		d: "Minimum the gas limit may ever be"
    	},
    	gasLimitBoundDivisor: {
    		v: 1024,
    		d: "The bound divisor of the gas limit, used in update calculations"
    	}
    };
    var gasPrices = {
    	base: {
    		v: 2,
    		d: "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
    	},
    	tierStep: {
    		v: [
    			0,
    			2,
    			3,
    			5,
    			8,
    			10,
    			20
    		],
    		d: "Once per operation, for a selection of them"
    	},
    	exp: {
    		v: 10,
    		d: "Once per EXP instuction"
    	},
    	expByte: {
    		v: 10,
    		d: "Times ceil(log256(exponent)) for the EXP instruction"
    	},
    	sha3: {
    		v: 30,
    		d: "Once per SHA3 operation"
    	},
    	sha3Word: {
    		v: 6,
    		d: "Once per word of the SHA3 operation's data"
    	},
    	sload: {
    		v: 50,
    		d: "Once per SLOAD operation"
    	},
    	sstoreSet: {
    		v: 20000,
    		d: "Once per SSTORE operation if the zeroness changes from zero"
    	},
    	sstoreReset: {
    		v: 5000,
    		d: "Once per SSTORE operation if the zeroness does not change from zero"
    	},
    	sstoreRefund: {
    		v: 15000,
    		d: "Once per SSTORE operation if the zeroness changes to zero"
    	},
    	jumpdest: {
    		v: 1,
    		d: "Refunded gas, once per SSTORE operation if the zeroness changes to zero"
    	},
    	log: {
    		v: 375,
    		d: "Per LOG* operation"
    	},
    	logData: {
    		v: 8,
    		d: "Per byte in a LOG* operation's data"
    	},
    	logTopic: {
    		v: 375,
    		d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
    	},
    	create: {
    		v: 32000,
    		d: "Once per CREATE operation & contract-creation transaction"
    	},
    	call: {
    		v: 40,
    		d: "Once per CALL operation & message call transaction"
    	},
    	callStipend: {
    		v: 2300,
    		d: "Free gas given at beginning of call"
    	},
    	callValueTransfer: {
    		v: 9000,
    		d: "Paid for CALL when the value transfor is non-zero"
    	},
    	callNewAccount: {
    		v: 25000,
    		d: "Paid for CALL when the destination address didn't exist prior"
    	},
    	selfdestructRefund: {
    		v: 24000,
    		d: "Refunded following a selfdestruct operation"
    	},
    	memory: {
    		v: 3,
    		d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
    	},
    	quadCoeffDiv: {
    		v: 512,
    		d: "Divisor for the quadratic particle of the memory cost equation"
    	},
    	createData: {
    		v: 200,
    		d: ""
    	},
    	tx: {
    		v: 21000,
    		d: "Per transaction. NOTE: Not payable on data of calls between transactions"
    	},
    	txCreation: {
    		v: 32000,
    		d: "The cost of creating a contract via tx"
    	},
    	txDataZero: {
    		v: 4,
    		d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
    	},
    	txDataNonZero: {
    		v: 68,
    		d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
    	},
    	copy: {
    		v: 3,
    		d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
    	},
    	ecRecover: {
    		v: 3000,
    		d: ""
    	},
    	sha256: {
    		v: 60,
    		d: ""
    	},
    	sha256Word: {
    		v: 12,
    		d: ""
    	},
    	ripemd160: {
    		v: 600,
    		d: ""
    	},
    	ripemd160Word: {
    		v: 120,
    		d: ""
    	},
    	identity: {
    		v: 15,
    		d: ""
    	},
    	identityWord: {
    		v: 3,
    		d: ""
    	}
    };
    var vm = {
    	stackLimit: {
    		v: 1024,
    		d: "Maximum size of VM stack allowed"
    	},
    	callCreateDepth: {
    		v: 1024,
    		d: "Maximum depth of call/create stack"
    	},
    	maxExtraDataSize: {
    		v: 32,
    		d: "Maximum size extra data may be after Genesis"
    	}
    };
    var pow = {
    	minimumDifficulty: {
    		v: 131072,
    		d: "The minimum that the difficulty may ever be"
    	},
    	difficultyBoundDivisor: {
    		v: 2048,
    		d: "The bound divisor of the difficulty, used in the update calculations"
    	},
    	durationLimit: {
    		v: 13,
    		d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
    	},
    	epochDuration: {
    		v: 30000,
    		d: "Duration between proof-of-work epochs"
    	},
    	timebombPeriod: {
    		v: 100000,
    		d: "Exponential difficulty timebomb period"
    	},
    	minerReward: {
    		v: "5000000000000000000",
    		d: "the amount a miner get rewarded for mining a block"
    	}
    };
    var casper = {
    };
    var sharding = {
    };
    var chainstart = {
    	name: name$9,
    	comment: comment$5,
    	eip: eip,
    	status: status,
    	gasConfig: gasConfig,
    	gasPrices: gasPrices,
    	vm: vm,
    	pow: pow,
    	casper: casper,
    	sharding: sharding
    };

    var chainstart$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$9,
        comment: comment$5,
        eip: eip,
        status: status,
        gasConfig: gasConfig,
        gasPrices: gasPrices,
        vm: vm,
        pow: pow,
        casper: casper,
        sharding: sharding,
        'default': chainstart
    });

    var name$a = "homestead";
    var comment$6 = "Homestead hardfork with protocol and network changes";
    var eip$1 = {
    	url: "https://eips.ethereum.org/EIPS/eip-606",
    	status: "Final"
    };
    var gasConfig$1 = {
    };
    var gasPrices$1 = {
    };
    var vm$1 = {
    };
    var pow$1 = {
    };
    var casper$1 = {
    };
    var sharding$1 = {
    };
    var homestead = {
    	name: name$a,
    	comment: comment$6,
    	eip: eip$1,
    	gasConfig: gasConfig$1,
    	gasPrices: gasPrices$1,
    	vm: vm$1,
    	pow: pow$1,
    	casper: casper$1,
    	sharding: sharding$1
    };

    var homestead$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$a,
        comment: comment$6,
        eip: eip$1,
        gasConfig: gasConfig$1,
        gasPrices: gasPrices$1,
        vm: vm$1,
        pow: pow$1,
        casper: casper$1,
        sharding: sharding$1,
        'default': homestead
    });

    var name$b = "dao";
    var comment$7 = "DAO rescue hardfork";
    var eip$2 = {
    	url: "https://eips.ethereum.org/EIPS/eip-779",
    	status: "Final"
    };
    var gasConfig$2 = {
    };
    var gasPrices$2 = {
    };
    var vm$2 = {
    };
    var pow$2 = {
    };
    var casper$2 = {
    };
    var sharding$2 = {
    };
    var dao = {
    	name: name$b,
    	comment: comment$7,
    	eip: eip$2,
    	gasConfig: gasConfig$2,
    	gasPrices: gasPrices$2,
    	vm: vm$2,
    	pow: pow$2,
    	casper: casper$2,
    	sharding: sharding$2
    };

    var dao$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$b,
        comment: comment$7,
        eip: eip$2,
        gasConfig: gasConfig$2,
        gasPrices: gasPrices$2,
        vm: vm$2,
        pow: pow$2,
        casper: casper$2,
        sharding: sharding$2,
        'default': dao
    });

    var name$c = "tangerineWhistle";
    var comment$8 = "Hardfork with gas cost changes for IO-heavy operations";
    var eip$3 = {
    	url: "https://eips.ethereum.org/EIPS/eip-608",
    	status: "Final"
    };
    var gasConfig$3 = {
    };
    var gasPrices$3 = {
    	sload: {
    		v: 200,
    		d: "Once per SLOAD operation"
    	},
    	call: {
    		v: 700,
    		d: "Once per CALL operation & message call transaction"
    	}
    };
    var vm$3 = {
    };
    var pow$3 = {
    };
    var casper$3 = {
    };
    var sharding$3 = {
    };
    var tangerineWhistle = {
    	name: name$c,
    	comment: comment$8,
    	eip: eip$3,
    	gasConfig: gasConfig$3,
    	gasPrices: gasPrices$3,
    	vm: vm$3,
    	pow: pow$3,
    	casper: casper$3,
    	sharding: sharding$3
    };

    var tangerineWhistle$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$c,
        comment: comment$8,
        eip: eip$3,
        gasConfig: gasConfig$3,
        gasPrices: gasPrices$3,
        vm: vm$3,
        pow: pow$3,
        casper: casper$3,
        sharding: sharding$3,
        'default': tangerineWhistle
    });

    var name$d = "spuriousDragon";
    var comment$9 = "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit";
    var eip$4 = {
    	url: "https://eips.ethereum.org/EIPS/eip-607",
    	status: "Final"
    };
    var gasConfig$4 = {
    };
    var gasPrices$4 = {
    	expByte: {
    		v: 50,
    		d: "Times ceil(log256(exponent)) for the EXP instruction"
    	}
    };
    var vm$4 = {
    	maxCodeSize: {
    		v: 24576,
    		d: "Maximum length of contract code"
    	}
    };
    var pow$4 = {
    };
    var casper$4 = {
    };
    var sharding$4 = {
    };
    var spuriousDragon = {
    	name: name$d,
    	comment: comment$9,
    	eip: eip$4,
    	gasConfig: gasConfig$4,
    	gasPrices: gasPrices$4,
    	vm: vm$4,
    	pow: pow$4,
    	casper: casper$4,
    	sharding: sharding$4
    };

    var spuriousDragon$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$d,
        comment: comment$9,
        eip: eip$4,
        gasConfig: gasConfig$4,
        gasPrices: gasPrices$4,
        vm: vm$4,
        pow: pow$4,
        casper: casper$4,
        sharding: sharding$4,
        'default': spuriousDragon
    });

    var name$e = "byzantium";
    var comment$a = "Hardfork with new precompiles, instructions and other protocol changes";
    var eip$5 = {
    	url: "https://eips.ethereum.org/EIPS/eip-609",
    	status: "Final"
    };
    var gasConfig$5 = {
    };
    var gasPrices$5 = {
    	modexpGquaddivisor: {
    		v: 20,
    		d: "Gquaddivisor from modexp precompile for gas calculation"
    	},
    	ecAdd: {
    		v: 500,
    		d: "Gas costs for curve addition precompile"
    	},
    	ecMul: {
    		v: 40000,
    		d: "Gas costs for curve multiplication precompile"
    	},
    	ecPairing: {
    		v: 100000,
    		d: "Base gas costs for curve pairing precompile"
    	},
    	ecPairingWord: {
    		v: 80000,
    		d: "Gas costs regarding curve pairing precompile input length"
    	}
    };
    var vm$5 = {
    };
    var pow$5 = {
    	minerReward: {
    		v: "3000000000000000000",
    		d: "the amount a miner get rewarded for mining a block"
    	}
    };
    var casper$5 = {
    };
    var sharding$5 = {
    };
    var byzantium = {
    	name: name$e,
    	comment: comment$a,
    	eip: eip$5,
    	gasConfig: gasConfig$5,
    	gasPrices: gasPrices$5,
    	vm: vm$5,
    	pow: pow$5,
    	casper: casper$5,
    	sharding: sharding$5
    };

    var byzantium$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$e,
        comment: comment$a,
        eip: eip$5,
        gasConfig: gasConfig$5,
        gasPrices: gasPrices$5,
        vm: vm$5,
        pow: pow$5,
        casper: casper$5,
        sharding: sharding$5,
        'default': byzantium
    });

    var name$f = "constantinople";
    var comment$b = "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)";
    var eip$6 = {
    	url: "https://eips.ethereum.org/EIPS/eip-1013",
    	status: "Final"
    };
    var gasConfig$6 = {
    };
    var gasPrices$6 = {
    	netSstoreNoopGas: {
    		v: 200,
    		d: "Once per SSTORE operation if the value doesn't change"
    	},
    	netSstoreInitGas: {
    		v: 20000,
    		d: "Once per SSTORE operation from clean zero"
    	},
    	netSstoreCleanGas: {
    		v: 5000,
    		d: "Once per SSTORE operation from clean non-zero"
    	},
    	netSstoreDirtyGas: {
    		v: 200,
    		d: "Once per SSTORE operation from dirty"
    	},
    	netSstoreClearRefund: {
    		v: 15000,
    		d: "Once per SSTORE operation for clearing an originally existing storage slot"
    	},
    	netSstoreResetRefund: {
    		v: 4800,
    		d: "Once per SSTORE operation for resetting to the original non-zero value"
    	},
    	netSstoreResetClearRefund: {
    		v: 19800,
    		d: "Once per SSTORE operation for resetting to the original zero value"
    	}
    };
    var vm$6 = {
    };
    var pow$6 = {
    	minerReward: {
    		v: "2000000000000000000",
    		d: "The amount a miner gets rewarded for mining a block"
    	}
    };
    var casper$6 = {
    };
    var sharding$6 = {
    };
    var constantinople = {
    	name: name$f,
    	comment: comment$b,
    	eip: eip$6,
    	gasConfig: gasConfig$6,
    	gasPrices: gasPrices$6,
    	vm: vm$6,
    	pow: pow$6,
    	casper: casper$6,
    	sharding: sharding$6
    };

    var constantinople$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$f,
        comment: comment$b,
        eip: eip$6,
        gasConfig: gasConfig$6,
        gasPrices: gasPrices$6,
        vm: vm$6,
        pow: pow$6,
        casper: casper$6,
        sharding: sharding$6,
        'default': constantinople
    });

    var name$g = "petersburg";
    var comment$c = "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople";
    var eip$7 = {
    	url: "https://eips.ethereum.org/EIPS/eip-1716",
    	status: "Draft"
    };
    var gasConfig$7 = {
    };
    var gasPrices$7 = {
    	netSstoreNoopGas: {
    		v: null,
    		d: "Removed along EIP-1283"
    	},
    	netSstoreInitGas: {
    		v: null,
    		d: "Removed along EIP-1283"
    	},
    	netSstoreCleanGas: {
    		v: null,
    		d: "Removed along EIP-1283"
    	},
    	netSstoreDirtyGas: {
    		v: null,
    		d: "Removed along EIP-1283"
    	},
    	netSstoreClearRefund: {
    		v: null,
    		d: "Removed along EIP-1283"
    	},
    	netSstoreResetRefund: {
    		v: null,
    		d: "Removed along EIP-1283"
    	},
    	netSstoreResetClearRefund: {
    		v: null,
    		d: "Removed along EIP-1283"
    	}
    };
    var vm$7 = {
    };
    var pow$7 = {
    };
    var casper$7 = {
    };
    var sharding$7 = {
    };
    var petersburg = {
    	name: name$g,
    	comment: comment$c,
    	eip: eip$7,
    	gasConfig: gasConfig$7,
    	gasPrices: gasPrices$7,
    	vm: vm$7,
    	pow: pow$7,
    	casper: casper$7,
    	sharding: sharding$7
    };

    var petersburg$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$g,
        comment: comment$c,
        eip: eip$7,
        gasConfig: gasConfig$7,
        gasPrices: gasPrices$7,
        vm: vm$7,
        pow: pow$7,
        casper: casper$7,
        sharding: sharding$7,
        'default': petersburg
    });

    var name$h = "istanbul";
    var comment$d = "HF targeted for December 2019 following the Constantinople/Petersburg HF";
    var eip$8 = {
    	url: "https://eips.ethereum.org/EIPS/eip-1679",
    	status: "Draft"
    };
    var gasConfig$8 = {
    };
    var gasPrices$8 = {
    	blake2Round: {
    		v: 1,
    		d: "Gas cost per round for the Blake2 F precompile"
    	},
    	ecAdd: {
    		v: 150,
    		d: "Gas costs for curve addition precompile"
    	},
    	ecMul: {
    		v: 6000,
    		d: "Gas costs for curve multiplication precompile"
    	},
    	ecPairing: {
    		v: 45000,
    		d: "Base gas costs for curve pairing precompile"
    	},
    	ecPairingWord: {
    		v: 34000,
    		d: "Gas costs regarding curve pairing precompile input length"
    	},
    	txDataNonZero: {
    		v: 16,
    		d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
    	},
    	sstoreSentryGasEIP2200: {
    		v: 2300,
    		d: "Minimum gas required to be present for an SSTORE call, not consumed"
    	},
    	sstoreNoopGasEIP2200: {
    		v: 800,
    		d: "Once per SSTORE operation if the value doesn't change"
    	},
    	sstoreDirtyGasEIP2200: {
    		v: 800,
    		d: "Once per SSTORE operation if a dirty value is changed"
    	},
    	sstoreInitGasEIP2200: {
    		v: 20000,
    		d: "Once per SSTORE operation from clean zero to non-zero"
    	},
    	sstoreInitRefundEIP2200: {
    		v: 19200,
    		d: "Once per SSTORE operation for resetting to the original zero value"
    	},
    	sstoreCleanGasEIP2200: {
    		v: 5000,
    		d: "Once per SSTORE operation from clean non-zero to something else"
    	},
    	sstoreCleanRefundEIP2200: {
    		v: 4200,
    		d: "Once per SSTORE operation for resetting to the original non-zero value"
    	},
    	sstoreClearRefundEIP2200: {
    		v: 15000,
    		d: "Once per SSTORE operation for clearing an originally existing storage slot"
    	}
    };
    var vm$8 = {
    };
    var pow$8 = {
    };
    var casper$8 = {
    };
    var sharding$8 = {
    };
    var istanbul = {
    	name: name$h,
    	comment: comment$d,
    	eip: eip$8,
    	gasConfig: gasConfig$8,
    	gasPrices: gasPrices$8,
    	vm: vm$8,
    	pow: pow$8,
    	casper: casper$8,
    	sharding: sharding$8
    };

    var istanbul$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$h,
        comment: comment$d,
        eip: eip$8,
        gasConfig: gasConfig$8,
        gasPrices: gasPrices$8,
        vm: vm$8,
        pow: pow$8,
        casper: casper$8,
        sharding: sharding$8,
        'default': istanbul
    });

    var name$i = "muirGlacier";
    var comment$e = "HF to delay the difficulty bomb";
    var eip$9 = {
    	url: "https://eips.ethereum.org/EIPS/eip-2384",
    	status: "Last Call"
    };
    var gasConfig$9 = {
    };
    var gasPrices$9 = {
    };
    var vm$9 = {
    };
    var pow$9 = {
    };
    var casper$9 = {
    };
    var sharding$9 = {
    };
    var muirGlacier = {
    	name: name$i,
    	comment: comment$e,
    	eip: eip$9,
    	gasConfig: gasConfig$9,
    	gasPrices: gasPrices$9,
    	vm: vm$9,
    	pow: pow$9,
    	casper: casper$9,
    	sharding: sharding$9
    };

    var muirGlacier$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$i,
        comment: comment$e,
        eip: eip$9,
        gasConfig: gasConfig$9,
        gasPrices: gasPrices$9,
        vm: vm$9,
        pow: pow$9,
        casper: casper$9,
        sharding: sharding$9,
        'default': muirGlacier
    });

    var require$$0$4 = getCjsExportFromNamespace(chainstart$1);

    var require$$1$2 = getCjsExportFromNamespace(homestead$1);

    var require$$2$1 = getCjsExportFromNamespace(dao$1);

    var require$$3$1 = getCjsExportFromNamespace(tangerineWhistle$1);

    var require$$4$1 = getCjsExportFromNamespace(spuriousDragon$1);

    var require$$5 = getCjsExportFromNamespace(byzantium$1);

    var require$$6 = getCjsExportFromNamespace(constantinople$1);

    var require$$7 = getCjsExportFromNamespace(petersburg$1);

    var require$$8 = getCjsExportFromNamespace(istanbul$1);

    var require$$9 = getCjsExportFromNamespace(muirGlacier$1);

    var hardforks$5 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hardforks = void 0;
    exports.hardforks = [
        ['chainstart', require$$0$4],
        ['homestead', require$$1$2],
        ['dao', require$$2$1],
        ['tangerineWhistle', require$$3$1],
        ['spuriousDragon', require$$4$1],
        ['byzantium', require$$5],
        ['constantinople', require$$6],
        ['petersburg', require$$7],
        ['istanbul', require$$8],
        ['muirGlacier', require$$9],
    ];

    });

    var dist$4 = createCommonjsModule(function (module, exports) {
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });


    /**
     * Common class to access chain and hardfork parameters
     */
    var Common = /** @class */ (function () {
        /**
         * @constructor
         * @param chain String ('mainnet') or Number (1) chain
         * @param hardfork String identifier ('byzantium') for hardfork (optional)
         * @param supportedHardforks Limit parameter returns to the given hardforks (optional)
         */
        function Common(chain, hardfork, supportedHardforks) {
            this._chainParams = this.setChain(chain);
            this._hardfork = null;
            this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;
            if (hardfork) {
                this.setHardfork(hardfork);
            }
        }
        /**
         * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]
         * params from [[baseChain]] except the ones overridden in [[customChainParams]].
         *
         * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom
         * chain params on.
         * @param customChainParams The custom parameters of the chain.
         * @param hardfork String identifier ('byzantium') for hardfork (optional)
         * @param supportedHardforks Limit parameter returns to the given hardforks (optional)
         */
        Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {
            var standardChainParams = Common._getChainParams(baseChain);
            return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);
        };
        Common._getChainParams = function (chain) {
            if (typeof chain === 'number') {
                if (chains.chains['names'][chain]) {
                    return chains.chains[chains.chains['names'][chain]];
                }
                throw new Error("Chain with ID " + chain + " not supported");
            }
            if (chains.chains[chain]) {
                return chains.chains[chain];
            }
            throw new Error("Chain with name " + chain + " not supported");
        };
        /**
         * Sets the chain
         * @param chain String ('mainnet') or Number (1) chain
         *     representation. Or, a Dictionary of chain parameters for a private network.
         * @returns The dictionary with parameters set as chain
         */
        Common.prototype.setChain = function (chain) {
            if (typeof chain === 'number' || typeof chain === 'string') {
                this._chainParams = Common._getChainParams(chain);
            }
            else if (typeof chain === 'object') {
                var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
                for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {
                    var param = required_1[_i];
                    if (chain[param] === undefined) {
                        throw new Error("Missing required chain parameter: " + param);
                    }
                }
                this._chainParams = chain;
            }
            else {
                throw new Error('Wrong input format');
            }
            return this._chainParams;
        };
        /**
         * Sets the hardfork to get params for
         * @param hardfork String identifier ('byzantium')
         */
        Common.prototype.setHardfork = function (hardfork) {
            if (!this._isSupportedHardfork(hardfork)) {
                throw new Error("Hardfork " + hardfork + " not set as supported in supportedHardforks");
            }
            var changed = false;
            for (var _i = 0, hardforkChanges_1 = hardforks$5.hardforks; _i < hardforkChanges_1.length; _i++) {
                var hfChanges = hardforkChanges_1[_i];
                if (hfChanges[0] === hardfork) {
                    this._hardfork = hardfork;
                    changed = true;
                }
            }
            if (!changed) {
                throw new Error("Hardfork with name " + hardfork + " not supported");
            }
        };
        /**
         * Internal helper function to choose between hardfork set and hardfork provided as param
         * @param hardfork Hardfork given to function as a parameter
         * @returns Hardfork chosen to be used
         */
        Common.prototype._chooseHardfork = function (hardfork, onlySupported) {
            onlySupported = onlySupported === undefined ? true : onlySupported;
            if (!hardfork) {
                if (!this._hardfork) {
                    throw new Error('Method called with neither a hardfork set nor provided by param');
                }
                else {
                    hardfork = this._hardfork;
                }
            }
            else if (onlySupported && !this._isSupportedHardfork(hardfork)) {
                throw new Error("Hardfork " + hardfork + " not set as supported in supportedHardforks");
            }
            return hardfork;
        };
        /**
         * Internal helper function, returns the params for the given hardfork for the chain set
         * @param hardfork Hardfork name
         * @returns Dictionary with hardfork params
         */
        Common.prototype._getHardfork = function (hardfork) {
            var hfs = this.hardforks();
            for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {
                var hf = hfs_1[_i];
                if (hf['name'] === hardfork)
                    return hf;
            }
            throw new Error("Hardfork " + hardfork + " not defined for chain " + this.chainName());
        };
        /**
         * Internal helper function to check if a hardfork is set to be supported by the library
         * @param hardfork Hardfork name
         * @returns True if hardfork is supported
         */
        Common.prototype._isSupportedHardfork = function (hardfork) {
            if (this._supportedHardforks.length > 0) {
                for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {
                    var supportedHf = _a[_i];
                    if (hardfork === supportedHf)
                        return true;
                }
            }
            else {
                return true;
            }
            return false;
        };
        /**
         * Returns the parameter corresponding to a hardfork
         * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')
         * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
         * @param hardfork Hardfork name, optional if hardfork set
         */
        Common.prototype.param = function (topic, name, hardfork) {
            hardfork = this._chooseHardfork(hardfork);
            var value;
            for (var _i = 0, hardforkChanges_2 = hardforks$5.hardforks; _i < hardforkChanges_2.length; _i++) {
                var hfChanges = hardforkChanges_2[_i];
                if (!hfChanges[1][topic]) {
                    throw new Error("Topic " + topic + " not defined");
                }
                if (hfChanges[1][topic][name] !== undefined) {
                    value = hfChanges[1][topic][name].v;
                }
                if (hfChanges[0] === hardfork)
                    break;
            }
            if (value === undefined) {
                throw new Error(topic + " value for " + name + " not found");
            }
            return value;
        };
        /**
         * Returns a parameter for the hardfork active on block number
         * @param topic Parameter topic
         * @param name Parameter name
         * @param blockNumber Block number
         */
        Common.prototype.paramByBlock = function (topic, name, blockNumber) {
            var activeHfs = this.activeHardforks(blockNumber);
            var hardfork = activeHfs[activeHfs.length - 1]['name'];
            return this.param(topic, name, hardfork);
        };
        /**
         * Checks if set or provided hardfork is active on block number
         * @param hardfork Hardfork name or null (for HF set)
         * @param blockNumber
         * @param opts Hardfork options (onlyActive unused)
         * @returns True if HF is active on block number
         */
        Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {
            opts = opts !== undefined ? opts : {};
            var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;
            hardfork = this._chooseHardfork(hardfork, onlySupported);
            var hfBlock = this.hardforkBlock(hardfork);
            if (hfBlock !== null && blockNumber >= hfBlock)
                return true;
            return false;
        };
        /**
         * Alias to hardforkIsActiveOnBlock when hardfork is set
         * @param blockNumber
         * @param opts Hardfork options (onlyActive unused)
         * @returns True if HF is active on block number
         */
        Common.prototype.activeOnBlock = function (blockNumber, opts) {
            return this.hardforkIsActiveOnBlock(null, blockNumber, opts);
        };
        /**
         * Sequence based check if given or set HF1 is greater than or equal HF2
         * @param hardfork1 Hardfork name or null (if set)
         * @param hardfork2 Hardfork name
         * @param opts Hardfork options
         * @returns True if HF1 gte HF2
         */
        Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {
            opts = opts !== undefined ? opts : {};
            var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;
            hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);
            var hardforks;
            if (onlyActive) {
                hardforks = this.activeHardforks(null, opts);
            }
            else {
                hardforks = this.hardforks();
            }
            var posHf1 = -1, posHf2 = -1;
            var index = 0;
            for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {
                var hf = hardforks_2[_i];
                if (hf['name'] === hardfork1)
                    posHf1 = index;
                if (hf['name'] === hardfork2)
                    posHf2 = index;
                index += 1;
            }
            return posHf1 >= posHf2;
        };
        /**
         * Alias to hardforkGteHardfork when hardfork is set
         * @param hardfork Hardfork name
         * @param opts Hardfork options
         * @returns True if hardfork set is greater than hardfork provided
         */
        Common.prototype.gteHardfork = function (hardfork, opts) {
            return this.hardforkGteHardfork(null, hardfork, opts);
        };
        /**
         * Checks if given or set hardfork is active on the chain
         * @param hardfork Hardfork name, optional if HF set
         * @param opts Hardfork options (onlyActive unused)
         * @returns True if hardfork is active on the chain
         */
        Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {
            opts = opts !== undefined ? opts : {};
            var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;
            hardfork = this._chooseHardfork(hardfork, onlySupported);
            for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {
                var hf = _a[_i];
                if (hf['name'] === hardfork && hf['block'] !== null)
                    return true;
            }
            return false;
        };
        /**
         * Returns the active hardfork switches for the current chain
         * @param blockNumber up to block if provided, otherwise for the whole chain
         * @param opts Hardfork options (onlyActive unused)
         * @return Array with hardfork arrays
         */
        Common.prototype.activeHardforks = function (blockNumber, opts) {
            opts = opts !== undefined ? opts : {};
            var activeHardforks = [];
            var hfs = this.hardforks();
            for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {
                var hf = hfs_2[_i];
                if (hf['block'] === null)
                    continue;
                if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])
                    break;
                if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))
                    continue;
                activeHardforks.push(hf);
            }
            return activeHardforks;
        };
        /**
         * Returns the latest active hardfork name for chain or block or throws if unavailable
         * @param blockNumber up to block if provided, otherwise for the whole chain
         * @param opts Hardfork options (onlyActive unused)
         * @return Hardfork name
         */
        Common.prototype.activeHardfork = function (blockNumber, opts) {
            opts = opts !== undefined ? opts : {};
            var activeHardforks = this.activeHardforks(blockNumber, opts);
            if (activeHardforks.length > 0) {
                return activeHardforks[activeHardforks.length - 1]['name'];
            }
            else {
                throw new Error("No (supported) active hardfork found");
            }
        };
        /**
         * Returns the hardfork change block for hardfork provided or set
         * @param hardfork Hardfork name, optional if HF set
         * @returns Block number
         */
        Common.prototype.hardforkBlock = function (hardfork) {
            hardfork = this._chooseHardfork(hardfork, false);
            return this._getHardfork(hardfork)['block'];
        };
        /**
         * True if block number provided is the hardfork (given or set) change block of the current chain
         * @param blockNumber Number of the block to check
         * @param hardfork Hardfork name, optional if HF set
         * @returns True if blockNumber is HF block
         */
        Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {
            hardfork = this._chooseHardfork(hardfork, false);
            if (this.hardforkBlock(hardfork) === blockNumber) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Provide the consensus type for the hardfork set or provided as param
         * @param hardfork Hardfork name, optional if hardfork set
         * @returns Consensus type (e.g. 'pow', 'poa')
         */
        Common.prototype.consensus = function (hardfork) {
            hardfork = this._chooseHardfork(hardfork);
            return this._getHardfork(hardfork)['consensus'];
        };
        /**
         * Provide the finality type for the hardfork set or provided as param
         * @param {String} hardfork Hardfork name, optional if hardfork set
         * @returns {String} Finality type (e.g. 'pos', null of no finality)
         */
        Common.prototype.finality = function (hardfork) {
            hardfork = this._chooseHardfork(hardfork);
            return this._getHardfork(hardfork)['finality'];
        };
        /**
         * Returns the Genesis parameters of current chain
         * @returns Genesis dictionary
         */
        Common.prototype.genesis = function () {
            return this._chainParams['genesis'];
        };
        /**
         * Returns the hardforks for current chain
         * @returns {Array} Array with arrays of hardforks
         */
        Common.prototype.hardforks = function () {
            return this._chainParams['hardforks'];
        };
        /**
         * Returns bootstrap nodes for the current chain
         * @returns {Dictionary} Dict with bootstrap nodes
         */
        Common.prototype.bootstrapNodes = function () {
            return this._chainParams['bootstrapNodes'];
        };
        /**
         * Returns the hardfork set
         * @returns Hardfork name
         */
        Common.prototype.hardfork = function () {
            return this._hardfork;
        };
        /**
         * Returns the Id of current chain
         * @returns chain Id
         */
        Common.prototype.chainId = function () {
            return this._chainParams['chainId'];
        };
        /**
         * Returns the name of current chain
         * @returns chain name (lower case)
         */
        Common.prototype.chainName = function () {
            return chains.chains['names'][this.chainId()] || this._chainParams['name'];
        };
        /**
         * Returns the Id of current network
         * @returns network Id
         */
        Common.prototype.networkId = function () {
            return this._chainParams['networkId'];
        };
        return Common;
    }());
    exports.default = Common;

    });

    var transaction = createCommonjsModule(function (module, exports) {
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });



    // secp256k1n/2
    var N_DIV_2 = new dist$3.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    /**
     * An Ethereum transaction.
     */
    var Transaction = /** @class */ (function () {
        /**
         * Creates a new transaction from an object with its fields' values.
         *
         * @param data - A transaction can be initialized with its rlp representation, an array containing
         * the value of its fields in order, or an object containing them by name.
         *
         * @param opts - The transaction's options, used to indicate the chain and hardfork the
         * transactions belongs to.
         *
         * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's
         * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious
         * Dragon.)
         *
         * @example
         * ```js
         * const txData = {
         *   nonce: '0x00',
         *   gasPrice: '0x09184e72a000',
         *   gasLimit: '0x2710',
         *   to: '0x0000000000000000000000000000000000000000',
         *   value: '0x00',
         *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',
         *   v: '0x1c',
         *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
         *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
         * };
         * const tx = new Transaction(txData);
         * ```
         */
        function Transaction(data, opts) {
            if (data === void 0) { data = {}; }
            if (opts === void 0) { opts = {}; }
            // instantiate Common class instance based on passed options
            if (opts.common) {
                if (opts.chain || opts.hardfork) {
                    throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');
                }
                this._common = opts.common;
            }
            else {
                var chain = opts.chain ? opts.chain : 'mainnet';
                var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';
                this._common = new dist$4.default(chain, hardfork);
            }
            // Define Properties
            var fields = [
                {
                    name: 'nonce',
                    length: 32,
                    allowLess: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'gasPrice',
                    length: 32,
                    allowLess: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'gasLimit',
                    alias: 'gas',
                    length: 32,
                    allowLess: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'to',
                    allowZero: true,
                    length: 20,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'value',
                    length: 32,
                    allowLess: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'data',
                    alias: 'input',
                    allowZero: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'v',
                    allowZero: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 'r',
                    length: 32,
                    allowZero: true,
                    allowLess: true,
                    default: new buffer.Buffer([]),
                },
                {
                    name: 's',
                    length: 32,
                    allowZero: true,
                    allowLess: true,
                    default: new buffer.Buffer([]),
                },
            ];
            // attached serialize
            dist$3.defineProperties(this, fields, data);
            /**
             * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
             * @name from
             * @memberof Transaction
             */
            Object.defineProperty(this, 'from', {
                enumerable: true,
                configurable: true,
                get: this.getSenderAddress.bind(this),
            });
            this._validateV(this.v);
            this._overrideVSetterWithValidation();
        }
        /**
         * If the tx's `to` is to the creation address
         */
        Transaction.prototype.toCreationAddress = function () {
            return this.to.toString('hex') === '';
        };
        /**
         * Computes a sha3-256 hash of the serialized tx
         * @param includeSignature - Whether or not to include the signature
         */
        Transaction.prototype.hash = function (includeSignature) {
            if (includeSignature === void 0) { includeSignature = true; }
            var items;
            if (includeSignature) {
                items = this.raw;
            }
            else {
                if (this._implementsEIP155()) {
                    items = this.raw.slice(0, 6).concat([
                        dist$3.toBuffer(this.getChainId()),
                        // TODO: stripping zeros should probably be a responsibility of the rlp module
                        dist$3.stripZeros(dist$3.toBuffer(0)),
                        dist$3.stripZeros(dist$3.toBuffer(0)),
                    ]);
                }
                else {
                    items = this.raw.slice(0, 6);
                }
            }
            // create hash
            return dist$3.rlphash(items);
        };
        /**
         * returns chain ID
         */
        Transaction.prototype.getChainId = function () {
            return this._common.chainId();
        };
        /**
         * returns the sender's address
         */
        Transaction.prototype.getSenderAddress = function () {
            if (this._from) {
                return this._from;
            }
            var pubkey = this.getSenderPublicKey();
            this._from = dist$3.publicToAddress(pubkey);
            return this._from;
        };
        /**
         * returns the public key of the sender
         */
        Transaction.prototype.getSenderPublicKey = function () {
            if (!this.verifySignature()) {
                throw new Error('Invalid Signature');
            }
            // If the signature was verified successfully the _senderPubKey field is defined
            return this._senderPubKey;
        };
        /**
         * Determines if the signature is valid
         */
        Transaction.prototype.verifySignature = function () {
            var msgHash = this.hash(false);
            // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
            if (this._common.gteHardfork('homestead') && new dist$3.BN(this.s).cmp(N_DIV_2) === 1) {
                return false;
            }
            try {
                var v = dist$3.bufferToInt(this.v);
                var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');
                this._senderPubKey = dist$3.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);
            }
            catch (e) {
                return false;
            }
            return !!this._senderPubKey;
        };
        /**
         * sign a transaction with a given private key
         * @param privateKey - Must be 32 bytes in length
         */
        Transaction.prototype.sign = function (privateKey) {
            // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give
            // different results if this tx was already signed.
            this.v = new buffer.Buffer([]);
            this.s = new buffer.Buffer([]);
            this.r = new buffer.Buffer([]);
            var msgHash = this.hash(false);
            var sig = dist$3.ecsign(msgHash, privateKey);
            if (this._implementsEIP155()) {
                sig.v += this.getChainId() * 2 + 8;
            }
            Object.assign(this, sig);
        };
        /**
         * The amount of gas paid for the data in this tx
         */
        Transaction.prototype.getDataFee = function () {
            var data = this.raw[5];
            var cost = new dist$3.BN(0);
            for (var i = 0; i < data.length; i++) {
                data[i] === 0
                    ? cost.iaddn(this._common.param('gasPrices', 'txDataZero'))
                    : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));
            }
            return cost;
        };
        /**
         * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
         */
        Transaction.prototype.getBaseFee = function () {
            var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));
            if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {
                fee.iaddn(this._common.param('gasPrices', 'txCreation'));
            }
            return fee;
        };
        /**
         * the up front amount that an account must have for this transaction to be valid
         */
        Transaction.prototype.getUpfrontCost = function () {
            return new dist$3.BN(this.gasLimit).imul(new dist$3.BN(this.gasPrice)).iadd(new dist$3.BN(this.value));
        };
        Transaction.prototype.validate = function (stringError) {
            if (stringError === void 0) { stringError = false; }
            var errors = [];
            if (!this.verifySignature()) {
                errors.push('Invalid Signature');
            }
            if (this.getBaseFee().cmp(new dist$3.BN(this.gasLimit)) > 0) {
                errors.push(["gas limit is too low. Need at least " + this.getBaseFee()]);
            }
            if (stringError === false) {
                return errors.length === 0;
            }
            else {
                return errors.join(' ');
            }
        };
        /**
         * Returns the rlp encoding of the transaction
         */
        Transaction.prototype.serialize = function () {
            // Note: This never gets executed, defineProperties overwrites it.
            return dist$3.rlp.encode(this.raw);
        };
        /**
         * Returns the transaction in JSON format
         * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}
         */
        Transaction.prototype.toJSON = function (labels) {
            // Note: This never gets executed, defineProperties overwrites it.
            return {};
        };
        Transaction.prototype._validateV = function (v) {
            if (v === undefined || v.length === 0) {
                return;
            }
            if (!this._common.gteHardfork('spuriousDragon')) {
                return;
            }
            var vInt = dist$3.bufferToInt(v);
            if (vInt === 27 || vInt === 28) {
                return;
            }
            var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;
            if (!isValidEIP155V) {
                throw new Error("Incompatible EIP155-based V " + vInt + " and chain id " + this.getChainId() + ". See the second parameter of the Transaction constructor to set the chain id.");
            }
        };
        Transaction.prototype._isSigned = function () {
            return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;
        };
        Transaction.prototype._overrideVSetterWithValidation = function () {
            var _this = this;
            var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');
            Object.defineProperty(this, 'v', __assign({}, vDescriptor, { set: function (v) {
                    if (v !== undefined) {
                        _this._validateV(dist$3.toBuffer(v));
                    }
                    vDescriptor.set(v);
                } }));
        };
        Transaction.prototype._implementsEIP155 = function () {
            var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');
            if (!this._isSigned()) {
                // We sign with EIP155 all unsigned transactions after spuriousDragon
                return onEIP155BlockOrLater;
            }
            // EIP155 spec:
            // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing
            // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six
            // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by
            // CHAIN_ID, r = 0 and s = 0.
            var v = dist$3.bufferToInt(this.v);
            var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;
            return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;
        };
        return Transaction;
    }());
    exports.default = Transaction;

    });

    var fake = createCommonjsModule(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(exports, "__esModule", { value: true });



    /**
     * Creates a new transaction object that doesn't need to be signed.
     *
     * @param data - A transaction can be initialized with its rlp representation, an array containing
     * the value of its fields in order, or an object containing them by name.
     *
     * @param opts - The transaction's options, used to indicate the chain and hardfork the
     * transactions belongs to.
     *
     * @see Transaction
     */
    var FakeTransaction = /** @class */ (function (_super) {
        __extends(FakeTransaction, _super);
        function FakeTransaction(data, opts) {
            if (data === void 0) { data = {}; }
            if (opts === void 0) { opts = {}; }
            var _this = _super.call(this, data, opts) || this;
            Object.defineProperty(_this, 'from', {
                enumerable: true,
                configurable: true,
                get: function () { return _this.getSenderAddress(); },
                set: function (val) {
                    if (val) {
                        _this._from = dist$3.toBuffer(val);
                    }
                },
            });
            var txData = data;
            if (txData.from) {
                _this.from = dist$3.toBuffer(txData.from);
            }
            return _this;
        }
        /**
         * Computes a sha3-256 hash of the serialized tx, using the sender address to generate a fake
         * signature.
         *
         * @param includeSignature - Whether or not to include the signature
         */
        FakeTransaction.prototype.hash = function (includeSignature) {
            if (includeSignature === void 0) { includeSignature = true; }
            if (includeSignature && this._from && this._from.toString('hex') !== '') {
                // include a fake signature using the from address as a private key
                var fakeKey = buffer.Buffer.concat([this._from, this._from.slice(0, 12)]);
                this.sign(fakeKey);
            }
            return _super.prototype.hash.call(this, includeSignature);
        };
        return FakeTransaction;
    }(transaction.default));
    exports.default = FakeTransaction;

    });

    var dist$5 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    exports.Transaction = transaction.default;

    exports.FakeTransaction = fake.default;

    });

    // jshint ignore:line
     // jshint ignore:line
    var cryp = (typeof commonjsGlobal === 'undefined') ? cryptoBrowserify : require$$1;




    var Transaction = dist$5.Transaction;
    var Common = dist$4.default;
    var isNot = function (value) {
        return (underscore.isUndefined(value) || underscore.isNull(value));
    };
    var Accounts = function Accounts() {
        var _this = this;
        // sets _requestmanager
        lib$b.packageInit(this, arguments);
        // remove unecessary core functions
        delete this.BatchRequest;
        delete this.extend;
        var _ethereumCall = [
            new lib$a({
                name: 'getNetworkId',
                call: 'net_version',
                params: 0,
                outputFormatter: parseInt
            }),
            new lib$a({
                name: 'getChainId',
                call: 'eth_chainId',
                params: 0,
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'getGasPrice',
                call: 'eth_gasPrice',
                params: 0
            }),
            new lib$a({
                name: 'getTransactionCount',
                call: 'eth_getTransactionCount',
                params: 2,
                inputFormatter: [function (address) {
                        if (lib$1.isAddress(address)) {
                            return address;
                        }
                        else {
                            throw new Error('Address ' + address + ' is not a valid address to get the "transactionCount".');
                        }
                    }, function () {
                        return 'latest';
                    }]
            })
        ];
        // attach methods to this._ethereumCall
        this._ethereumCall = {};
        underscore.each(_ethereumCall, function (method) {
            method.attachToObject(_this._ethereumCall);
            method.setRequestManager(_this._requestManager);
        });
        this.wallet = new Wallet(this);
    };
    Accounts.prototype._addAccountFunctions = function (account) {
        var _this = this;
        // add sign functions
        account.signTransaction = function signTransaction(tx, callback) {
            return _this.signTransaction(tx, account.privateKey, callback);
        };
        account.sign = function sign(data) {
            return _this.sign(data, account.privateKey);
        };
        account.encrypt = function encrypt(password, options) {
            return _this.encrypt(account.privateKey, password, options);
        };
        return account;
    };
    Accounts.prototype.create = function create(entropy) {
        return this._addAccountFunctions(account.create(entropy || lib$1.randomHex(32)));
    };
    Accounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey, ignoreLength) {
        if (!privateKey.startsWith('0x')) {
            privateKey = '0x' + privateKey;
        }
        // 64 hex characters + hex-prefix
        if (!ignoreLength && privateKey.length !== 66) {
            throw new Error("Private key must be 32 bytes long");
        }
        return this._addAccountFunctions(account.fromPrivate(privateKey));
    };
    Accounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {
        var _this = this, error = false, transactionOptions = {}, hasTxSigningOptions = !!(tx && ((tx.chain && tx.hardfork) || tx.common));
        callback = callback || function () {
        };
        if (!tx) {
            error = new Error('No transaction object given!');
            callback(error);
            return Promise.reject(error);
        }
        function signed(tx) {
            const error = _validateTransactionForSigning(tx);
            if (error) {
                callback(error);
                return Promise.reject(error);
            }
            try {
                var transaction = lib$3.formatters.inputCallFormatter(underscore.clone(tx));
                transaction.to = transaction.to || '0x';
                transaction.data = transaction.data || '0x';
                transaction.value = transaction.value || '0x';
                transaction.chainId = lib$1.numberToHex(transaction.chainId);
                // Because tx has no ethereumjs-tx signing options we use fetched vals.
                if (!hasTxSigningOptions) {
                    transactionOptions.common = Common.forCustomChain('mainnet', {
                        name: 'custom-network',
                        networkId: transaction.networkId,
                        chainId: transaction.chainId
                    }, 'petersburg');
                    delete transaction.networkId;
                }
                else {
                    if (transaction.common) {
                        transactionOptions.common = Common.forCustomChain(transaction.common.baseChain || 'mainnet', {
                            name: transaction.common.customChain.name || 'custom-network',
                            networkId: transaction.common.customChain.networkId,
                            chainId: transaction.common.customChain.chainId
                        }, transaction.common.hardfork || 'petersburg');
                        delete transaction.common;
                    }
                    if (transaction.chain) {
                        transactionOptions.chain = transaction.chain;
                        delete transaction.chain;
                    }
                    if (transaction.hardfork) {
                        transactionOptions.hardfork = transaction.hardfork;
                        delete transaction.hardfork;
                    }
                }
                if (privateKey.startsWith('0x')) {
                    privateKey = privateKey.substring(2);
                }
                var ethTx = new Transaction(transaction, transactionOptions);
                ethTx.sign(Buffer.from(privateKey, 'hex'));
                var validationResult = ethTx.validate(true);
                if (validationResult !== '') {
                    throw new Error('Signer Error: ' + validationResult);
                }
                var rlpEncoded = ethTx.serialize().toString('hex');
                var rawTransaction = '0x' + rlpEncoded;
                var transactionHash = lib$1.keccak256(rawTransaction);
                var result = {
                    messageHash: '0x' + Buffer.from(ethTx.hash(false)).toString('hex'),
                    v: '0x' + Buffer.from(ethTx.v).toString('hex'),
                    r: '0x' + Buffer.from(ethTx.r).toString('hex'),
                    s: '0x' + Buffer.from(ethTx.s).toString('hex'),
                    rawTransaction: rawTransaction,
                    transactionHash: transactionHash
                };
                callback(null, result);
                return result;
            }
            catch (e) {
                callback(e);
                return Promise.reject(e);
            }
        }
        // Resolve immediately if nonce, chainId, price and signing options are provided
        if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined && hasTxSigningOptions) {
            return Promise.resolve(signed(tx));
        }
        // Otherwise, get the missing info from the Ethereum Node
        return Promise.all([
            isNot(tx.chainId) ? _this._ethereumCall.getChainId() : tx.chainId,
            isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,
            isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce,
            isNot(hasTxSigningOptions) ? _this._ethereumCall.getNetworkId() : 1
        ]).then(function (args) {
            if (isNot(args[0]) || isNot(args[1]) || isNot(args[2]) || isNot(args[3])) {
                throw new Error('One of the values "chainId", "networkId", "gasPrice", or "nonce" couldn\'t be fetched: ' + JSON.stringify(args));
            }
            return signed(underscore.extend(tx, { chainId: args[0], gasPrice: args[1], nonce: args[2], networkId: args[3] }));
        });
    };
    function _validateTransactionForSigning(tx) {
        if (tx.common && (tx.chain && tx.hardfork)) {
            return new Error('Please provide the ethereumjs-common object or the chain and hardfork property but not all together.');
        }
        if ((tx.chain && !tx.hardfork) || (tx.hardfork && !tx.chain)) {
            return new Error('When specifying chain and hardfork, both values must be defined. ' +
                'Received "chain": ' + tx.chain + ', "hardfork": ' + tx.hardfork);
        }
        if (!tx.gas && !tx.gasLimit) {
            return new Error('"gas" is missing');
        }
        if (tx.nonce < 0 ||
            tx.gas < 0 ||
            tx.gasPrice < 0 ||
            tx.chainId < 0) {
            return new Error('Gas, gasPrice, nonce or chainId is lower than 0');
        }
        return;
    }
    /* jshint ignore:start */
    Accounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {
        var values = rlp$2.decode(rawTx);
        var signature = account.encodeSignature(values.slice(6, 9));
        var recovery = bytes.toNumber(values[6]);
        var extraData = recovery < 35 ? [] : [bytes.fromNumber((recovery - 35) >> 1), '0x', '0x'];
        var signingData = values.slice(0, 6).concat(extraData);
        var signingDataHex = rlp$2.encode(signingData);
        return account.recover(hash$2.keccak256(signingDataHex), signature);
    };
    /* jshint ignore:end */
    Accounts.prototype.hashMessage = function hashMessage(data) {
        var messageHex = lib$1.isHexStrict(data) ? data : lib$1.utf8ToHex(data);
        var messageBytes = lib$1.hexToBytes(messageHex);
        var messageBuffer = Buffer.from(messageBytes);
        var preamble = '\x19Ethereum Signed Message:\n' + messageBytes.length;
        var preambleBuffer = Buffer.from(preamble);
        var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
        return hash$2.keccak256s(ethMessage);
    };
    Accounts.prototype.sign = function sign(data, privateKey) {
        if (!privateKey.startsWith('0x')) {
            privateKey = '0x' + privateKey;
        }
        // 64 hex characters + hex-prefix
        if (privateKey.length !== 66) {
            throw new Error("Private key must be 32 bytes long");
        }
        var hash = this.hashMessage(data);
        var signature = account.sign(hash, privateKey);
        var vrs = account.decodeSignature(signature);
        return {
            message: data,
            messageHash: hash,
            v: vrs[0],
            r: vrs[1],
            s: vrs[2],
            signature: signature
        };
    };
    Accounts.prototype.recover = function recover(message, signature, preFixed) {
        var args = [].slice.apply(arguments);
        if (underscore.isObject(message)) {
            return this.recover(message.messageHash, account.encodeSignature([message.v, message.r, message.s]), true);
        }
        if (!preFixed) {
            message = this.hashMessage(message);
        }
        if (args.length >= 4) {
            preFixed = args.slice(-1)[0];
            preFixed = underscore.isBoolean(preFixed) ? !!preFixed : false;
            return this.recover(message, account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s
        }
        return account.recover(message, signature);
    };
    // Taken from https://github.com/ethereumjs/ethereumjs-wallet
    Accounts.prototype.decrypt = function (v3Keystore, password, nonStrict) {
        /* jshint maxcomplexity: 10 */
        if (!underscore.isString(password)) {
            throw new Error('No password given.');
        }
        var json = (underscore.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);
        if (json.version !== 3) {
            throw new Error('Not a valid V3 wallet');
        }
        var derivedKey;
        var kdfparams;
        if (json.crypto.kdf === 'scrypt') {
            kdfparams = json.crypto.kdfparams;
            // FIXME: support progress reporting callback
            derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        }
        else if (json.crypto.kdf === 'pbkdf2') {
            kdfparams = json.crypto.kdfparams;
            if (kdfparams.prf !== 'hmac-sha256') {
                throw new Error('Unsupported parameters to PBKDF2');
            }
            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
        }
        else {
            throw new Error('Unsupported key derivation scheme');
        }
        var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');
        var mac = lib$1.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '');
        if (mac !== json.crypto.mac) {
            throw new Error('Key derivation failed - possibly wrong password');
        }
        var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));
        var seed = '0x' + Buffer.from([...decipher.update(ciphertext), ...decipher.final()]).toString('hex');
        return this.privateKeyToAccount(seed, true);
    };
    Accounts.prototype.encrypt = function (privateKey, password, options) {
        /* jshint maxcomplexity: 20 */
        var account = this.privateKeyToAccount(privateKey, true);
        options = options || {};
        var salt = options.salt || cryp.randomBytes(32);
        var iv = options.iv || cryp.randomBytes(16);
        var derivedKey;
        var kdf = options.kdf || 'scrypt';
        var kdfparams = {
            dklen: options.dklen || 32,
            salt: salt.toString('hex')
        };
        if (kdf === 'pbkdf2') {
            kdfparams.c = options.c || 262144;
            kdfparams.prf = 'hmac-sha256';
            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
        }
        else if (kdf === 'scrypt') {
            // FIXME: support progress reporting callback
            kdfparams.n = options.n || 8192; // 2048 4096 8192 16384
            kdfparams.r = options.r || 8;
            kdfparams.p = options.p || 1;
            derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
        }
        else {
            throw new Error('Unsupported kdf');
        }
        var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
        if (!cipher) {
            throw new Error('Unsupported cipher');
        }
        var ciphertext = Buffer.from([
            ...cipher.update(Buffer.from(account.privateKey.replace('0x', ''), 'hex')),
            ...cipher.final()
        ]);
        var mac = lib$1.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '');
        return {
            version: 3,
            id: uuid_1.v4({ random: options.uuid || cryp.randomBytes(16) }),
            address: account.address.toLowerCase().replace('0x', ''),
            crypto: {
                ciphertext: ciphertext.toString('hex'),
                cipherparams: {
                    iv: iv.toString('hex')
                },
                cipher: options.cipher || 'aes-128-ctr',
                kdf: kdf,
                kdfparams: kdfparams,
                mac: mac.toString('hex')
            }
        };
    };
    // Note: this is trying to follow closely the specs on
    // http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html
    function Wallet(accounts) {
        this._accounts = accounts;
        this.length = 0;
        this.defaultKeyName = 'web3js_wallet';
    }
    Wallet.prototype._findSafeIndex = function (pointer) {
        pointer = pointer || 0;
        if (underscore.has(this, pointer)) {
            return this._findSafeIndex(pointer + 1);
        }
        else {
            return pointer;
        }
    };
    Wallet.prototype._currentIndexes = function () {
        var keys = Object.keys(this);
        var indexes = keys
            .map(function (key) {
            return parseInt(key);
        })
            .filter(function (n) {
            return (n < 9e20);
        });
        return indexes;
    };
    Wallet.prototype.create = function (numberOfAccounts, entropy) {
        for (var i = 0; i < numberOfAccounts; ++i) {
            this.add(this._accounts.create(entropy).privateKey);
        }
        return this;
    };
    Wallet.prototype.add = function (account) {
        if (underscore.isString(account)) {
            account = this._accounts.privateKeyToAccount(account);
        }
        if (!this[account.address]) {
            account = this._accounts.privateKeyToAccount(account.privateKey);
            account.index = this._findSafeIndex();
            this[account.index] = account;
            this[account.address] = account;
            this[account.address.toLowerCase()] = account;
            this.length++;
            return account;
        }
        else {
            return this[account.address];
        }
    };
    Wallet.prototype.remove = function (addressOrIndex) {
        var account = this[addressOrIndex];
        if (account && account.address) {
            // address
            this[account.address].privateKey = null;
            delete this[account.address];
            // address lowercase
            this[account.address.toLowerCase()].privateKey = null;
            delete this[account.address.toLowerCase()];
            // index
            this[account.index].privateKey = null;
            delete this[account.index];
            this.length--;
            return true;
        }
        else {
            return false;
        }
    };
    Wallet.prototype.clear = function () {
        var _this = this;
        var indexes = this._currentIndexes();
        indexes.forEach(function (index) {
            _this.remove(index);
        });
        return this;
    };
    Wallet.prototype.encrypt = function (password, options) {
        var _this = this;
        var indexes = this._currentIndexes();
        var accounts = indexes.map(function (index) {
            return _this[index].encrypt(password, options);
        });
        return accounts;
    };
    Wallet.prototype.decrypt = function (encryptedWallet, password) {
        var _this = this;
        encryptedWallet.forEach(function (keystore) {
            var account = _this._accounts.decrypt(keystore, password);
            if (account) {
                _this.add(account);
            }
            else {
                throw new Error('Couldn\'t decrypt accounts. Password wrong?');
            }
        });
        return this;
    };
    Wallet.prototype.save = function (password, keyName) {
        localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));
        return true;
    };
    Wallet.prototype.load = function (password, keyName) {
        var keystore = localStorage.getItem(keyName || this.defaultKeyName);
        if (keystore) {
            try {
                keystore = JSON.parse(keystore);
            }
            catch (e) {
            }
        }
        return this.decrypt(keystore || [], password);
    };
    if (!storageAvailable('localStorage')) {
        delete Wallet.prototype.save;
        delete Wallet.prototype.load;
    }
    /**
     * Checks whether a storage type is available or not
     * For more info on how this works, please refer to MDN documentation
     * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage
     *
     * @method storageAvailable
     * @param {String} type the type of storage ('localStorage', 'sessionStorage')
     * @returns {Boolean} a boolean indicating whether the specified storage is available or not
     */
    function storageAvailable(type) {
        var storage;
        try {
            storage = window[type];
            var x = '__storage_test__';
            storage.setItem(x, x);
            storage.removeItem(x);
            return true;
        }
        catch (e) {
            return e && (
            // everything except Firefox
            e.code === 22 ||
                // Firefox
                e.code === 1014 ||
                // test name field too, because code might not be present
                // everything except Firefox
                e.name === 'QuotaExceededError' ||
                // Firefox
                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
                // acknowledge QuotaExceededError only if there's something already stored
                (storage && storage.length !== 0);
        }
    }
    var lib$j = Accounts;

    var getNetworkType = function (callback) {
        var _this = this, id;
        return this.net.getId()
            .then(function (givenId) {
            id = givenId;
            return _this.getBlock(0);
        })
            .then(function (genesis) {
            var returnValue = 'private';
            if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&
                id === 1) {
                returnValue = 'main';
            }
            if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&
                id === 2) {
                returnValue = 'morden';
            }
            if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&
                id === 3) {
                returnValue = 'ropsten';
            }
            if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&
                id === 4) {
                returnValue = 'rinkeby';
            }
            if (genesis.hash === '0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a' &&
                id === 5) {
                returnValue = 'goerli';
            }
            if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&
                id === 42) {
                returnValue = 'kovan';
            }
            if (underscore.isFunction(callback)) {
                callback(null, returnValue);
            }
            return returnValue;
        })
            .catch(function (err) {
            if (underscore.isFunction(callback)) {
                callback(err);
            }
            else {
                throw err;
            }
        });
    };
    var getNetworkType_1 = getNetworkType;

    var Subscriptions$2 = lib$9.subscriptions;










    var formatter = lib$3.formatters;
    var blockCall = function (args) {
        return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
    };
    var transactionFromBlockCall = function (args) {
        return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
    };
    var uncleCall = function (args) {
        return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
    };
    var getBlockTransactionCountCall = function (args) {
        return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
    };
    var uncleCountCall = function (args) {
        return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
    };
    var Eth = function Eth() {
        var _this = this;
        // sets _requestmanager
        lib$b.packageInit(this, arguments);
        // overwrite package setRequestManager
        var setRequestManager = this.setRequestManager;
        this.setRequestManager = function (manager) {
            setRequestManager(manager);
            _this.net.setRequestManager(manager);
            _this.personal.setRequestManager(manager);
            _this.accounts.setRequestManager(manager);
            _this.Contract._requestManager = _this._requestManager;
            _this.Contract.currentProvider = _this._provider;
            return true;
        };
        // overwrite setProvider
        var setProvider = this.setProvider;
        this.setProvider = function () {
            setProvider.apply(_this, arguments);
            _this.setRequestManager(_this._requestManager);
            // Set detectedAddress/lastSyncCheck back to null because the provider could be connected to a different chain now
            _this.ens._detectedAddress = null;
            _this.ens._lastSyncCheck = null;
        };
        var handleRevert = false;
        var defaultAccount = null;
        var defaultBlock = 'latest';
        var transactionBlockTimeout = 50;
        var transactionConfirmationBlocks = 24;
        var transactionPollingTimeout = 750;
        var maxListenersWarningThreshold = 100;
        var defaultChain, defaultHardfork, defaultCommon;
        Object.defineProperty(this, 'handleRevert', {
            get: function () {
                return handleRevert;
            },
            set: function (val) {
                handleRevert = val;
                // also set on the Contract object
                _this.Contract.handleRevert = handleRevert;
                // update handleRevert
                methods.forEach(function (method) {
                    method.handleRevert = handleRevert;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultCommon', {
            get: function () {
                return defaultCommon;
            },
            set: function (val) {
                defaultCommon = val;
                // also set on the Contract object
                _this.Contract.defaultCommon = defaultCommon;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultCommon = defaultCommon;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultHardfork', {
            get: function () {
                return defaultHardfork;
            },
            set: function (val) {
                defaultHardfork = val;
                // also set on the Contract object
                _this.Contract.defaultHardfork = defaultHardfork;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultHardfork = defaultHardfork;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultChain', {
            get: function () {
                return defaultChain;
            },
            set: function (val) {
                defaultChain = val;
                // also set on the Contract object
                _this.Contract.defaultChain = defaultChain;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultChain = defaultChain;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'transactionPollingTimeout', {
            get: function () {
                return transactionPollingTimeout;
            },
            set: function (val) {
                transactionPollingTimeout = val;
                // also set on the Contract object
                _this.Contract.transactionPollingTimeout = transactionPollingTimeout;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.transactionPollingTimeout = transactionPollingTimeout;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'transactionConfirmationBlocks', {
            get: function () {
                return transactionConfirmationBlocks;
            },
            set: function (val) {
                transactionConfirmationBlocks = val;
                // also set on the Contract object
                _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.transactionConfirmationBlocks = transactionConfirmationBlocks;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'transactionBlockTimeout', {
            get: function () {
                return transactionBlockTimeout;
            },
            set: function (val) {
                transactionBlockTimeout = val;
                // also set on the Contract object
                _this.Contract.transactionBlockTimeout = transactionBlockTimeout;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.transactionBlockTimeout = transactionBlockTimeout;
                });
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultAccount', {
            get: function () {
                return defaultAccount;
            },
            set: function (val) {
                if (val) {
                    defaultAccount = lib$1.toChecksumAddress(formatter.inputAddressFormatter(val));
                }
                // also set on the Contract object
                _this.Contract.defaultAccount = defaultAccount;
                _this.personal.defaultAccount = defaultAccount;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultAccount = defaultAccount;
                });
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'defaultBlock', {
            get: function () {
                return defaultBlock;
            },
            set: function (val) {
                defaultBlock = val;
                // also set on the Contract object
                _this.Contract.defaultBlock = defaultBlock;
                _this.personal.defaultBlock = defaultBlock;
                // update defaultBlock
                methods.forEach(function (method) {
                    method.defaultBlock = defaultBlock;
                });
                return val;
            },
            enumerable: true
        });
        Object.defineProperty(this, 'maxListenersWarningThreshold', {
            get: function () {
                return maxListenersWarningThreshold;
            },
            set: function (val) {
                if (_this.currentProvider && _this.currentProvider.setMaxListeners) {
                    maxListenersWarningThreshold = val;
                    _this.currentProvider.setMaxListeners(val);
                }
            },
            enumerable: true
        });
        this.clearSubscriptions = _this._requestManager.clearSubscriptions.bind(_this._requestManager);
        // add net
        this.net = new lib$c(this);
        // add chain detection
        this.net.getNetworkType = getNetworkType_1.bind(this);
        // add accounts
        this.accounts = new lib$j(this);
        // add personal
        this.personal = new lib$g(this);
        this.personal.defaultAccount = this.defaultAccount;
        // set warnings threshold
        this.maxListenersWarningThreshold = maxListenersWarningThreshold;
        // create a proxy Contract type for this instance, as a Contract's provider
        // is stored as a class member rather than an instance variable. If we do
        // not create this proxy type, changing the provider in one instance of
        // web3-eth would subsequently change the provider for _all_ contract
        // instances!
        var self = this;
        var Contract = function Contract() {
            lib$e.apply(this, arguments);
            // when Eth.setProvider is called, call packageInit
            // on all contract instances instantiated via this Eth
            // instances. This will update the currentProvider for
            // the contract instances
            var _this = this;
            var setProvider = self.setProvider;
            self.setProvider = function () {
                setProvider.apply(self, arguments);
                lib$b.packageInit(_this, [self]);
            };
        };
        Contract.setProvider = function () {
            lib$e.setProvider.apply(this, arguments);
        };
        // make our proxy Contract inherit from web3-eth-contract so that it has all
        // the right functionality and so that instanceof and friends work properly
        Contract.prototype = Object.create(lib$e.prototype);
        Contract.prototype.constructor = Contract;
        // add contract
        this.Contract = Contract;
        this.Contract.defaultAccount = this.defaultAccount;
        this.Contract.defaultBlock = this.defaultBlock;
        this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;
        this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;
        this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;
        this.Contract.handleRevert = this.handleRevert;
        this.Contract._requestManager = this._requestManager;
        this.Contract._ethAccounts = this.accounts;
        this.Contract.currentProvider = this._requestManager.provider;
        // add IBAN
        this.Iban = lib$2;
        // add ABI
        this.abi = lib$d;
        // add ENS
        this.ens = new lib$f(this);
        var methods = [
            new lib$a({
                name: 'getNodeInfo',
                call: 'web3_clientVersion'
            }),
            new lib$a({
                name: 'getProtocolVersion',
                call: 'eth_protocolVersion',
                params: 0
            }),
            new lib$a({
                name: 'getCoinbase',
                call: 'eth_coinbase',
                params: 0
            }),
            new lib$a({
                name: 'isMining',
                call: 'eth_mining',
                params: 0
            }),
            new lib$a({
                name: 'getHashrate',
                call: 'eth_hashrate',
                params: 0,
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'isSyncing',
                call: 'eth_syncing',
                params: 0,
                outputFormatter: formatter.outputSyncingFormatter
            }),
            new lib$a({
                name: 'getGasPrice',
                call: 'eth_gasPrice',
                params: 0,
                outputFormatter: formatter.outputBigNumberFormatter
            }),
            new lib$a({
                name: 'getAccounts',
                call: 'eth_accounts',
                params: 0,
                outputFormatter: lib$1.toChecksumAddress
            }),
            new lib$a({
                name: 'getBlockNumber',
                call: 'eth_blockNumber',
                params: 0,
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'getBalance',
                call: 'eth_getBalance',
                params: 2,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
                outputFormatter: formatter.outputBigNumberFormatter
            }),
            new lib$a({
                name: 'getStorageAt',
                call: 'eth_getStorageAt',
                params: 3,
                inputFormatter: [formatter.inputAddressFormatter, lib$1.numberToHex, formatter.inputDefaultBlockNumberFormatter]
            }),
            new lib$a({
                name: 'getCode',
                call: 'eth_getCode',
                params: 2,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]
            }),
            new lib$a({
                name: 'getBlock',
                call: blockCall,
                params: 2,
                inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],
                outputFormatter: formatter.outputBlockFormatter
            }),
            new lib$a({
                name: 'getUncle',
                call: uncleCall,
                params: 2,
                inputFormatter: [formatter.inputBlockNumberFormatter, lib$1.numberToHex],
                outputFormatter: formatter.outputBlockFormatter,
            }),
            new lib$a({
                name: 'getBlockTransactionCount',
                call: getBlockTransactionCountCall,
                params: 1,
                inputFormatter: [formatter.inputBlockNumberFormatter],
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'getBlockUncleCount',
                call: uncleCountCall,
                params: 1,
                inputFormatter: [formatter.inputBlockNumberFormatter],
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'getTransaction',
                call: 'eth_getTransactionByHash',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatter.outputTransactionFormatter
            }),
            new lib$a({
                name: 'getTransactionFromBlock',
                call: transactionFromBlockCall,
                params: 2,
                inputFormatter: [formatter.inputBlockNumberFormatter, lib$1.numberToHex],
                outputFormatter: formatter.outputTransactionFormatter
            }),
            new lib$a({
                name: 'getTransactionReceipt',
                call: 'eth_getTransactionReceipt',
                params: 1,
                inputFormatter: [null],
                outputFormatter: formatter.outputTransactionReceiptFormatter
            }),
            new lib$a({
                name: 'getTransactionCount',
                call: 'eth_getTransactionCount',
                params: 2,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'sendSignedTransaction',
                call: 'eth_sendRawTransaction',
                params: 1,
                inputFormatter: [null],
                abiCoder: lib$d
            }),
            new lib$a({
                name: 'signTransaction',
                call: 'eth_signTransaction',
                params: 1,
                inputFormatter: [formatter.inputTransactionFormatter]
            }),
            new lib$a({
                name: 'sendTransaction',
                call: 'eth_sendTransaction',
                params: 1,
                inputFormatter: [formatter.inputTransactionFormatter],
                abiCoder: lib$d
            }),
            new lib$a({
                name: 'sign',
                call: 'eth_sign',
                params: 2,
                inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],
                transformPayload: function (payload) {
                    payload.params.reverse();
                    return payload;
                }
            }),
            new lib$a({
                name: 'call',
                call: 'eth_call',
                params: 2,
                inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter],
                abiCoder: lib$d
            }),
            new lib$a({
                name: 'estimateGas',
                call: 'eth_estimateGas',
                params: 1,
                inputFormatter: [formatter.inputCallFormatter],
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'submitWork',
                call: 'eth_submitWork',
                params: 3
            }),
            new lib$a({
                name: 'getWork',
                call: 'eth_getWork',
                params: 0
            }),
            new lib$a({
                name: 'getPastLogs',
                call: 'eth_getLogs',
                params: 1,
                inputFormatter: [formatter.inputLogFormatter],
                outputFormatter: formatter.outputLogFormatter
            }),
            new lib$a({
                name: 'getChainId',
                call: 'eth_chainId',
                params: 0,
                outputFormatter: lib$1.hexToNumber
            }),
            new lib$a({
                name: 'requestAccounts',
                call: 'eth_requestAccounts',
                params: 0,
                outputFormatter: lib$1.toChecksumAddress
            }),
            new lib$a({
                name: 'getProof',
                call: 'eth_getProof',
                params: 3,
                inputFormatter: [formatter.inputAddressFormatter, formatter.inputStorageKeysFormatter, formatter.inputDefaultBlockNumberFormatter],
                outputFormatter: formatter.outputProofFormatter
            }),
            new lib$a({
                name: 'getPendingTransactions',
                call: 'eth_pendingTransactions',
                params: 0,
                outputFormatter: formatter.outputTransactionFormatter
            }),
            // subscriptions
            new Subscriptions$2({
                name: 'subscribe',
                type: 'eth',
                subscriptions: {
                    'newBlockHeaders': {
                        // TODO rename on RPC side?
                        subscriptionName: 'newHeads',
                        params: 0,
                        outputFormatter: formatter.outputBlockFormatter
                    },
                    'pendingTransactions': {
                        subscriptionName: 'newPendingTransactions',
                        params: 0
                    },
                    'logs': {
                        params: 1,
                        inputFormatter: [formatter.inputLogFormatter],
                        outputFormatter: formatter.outputLogFormatter,
                        // DUBLICATE, also in web3-eth-contract
                        subscriptionHandler: function (output) {
                            if (output.removed) {
                                this.emit('changed', output);
                            }
                            else {
                                this.emit('data', output);
                            }
                            if (underscore.isFunction(this.callback)) {
                                this.callback(null, output, this);
                            }
                        }
                    },
                    'syncing': {
                        params: 0,
                        outputFormatter: formatter.outputSyncingFormatter,
                        subscriptionHandler: function (output) {
                            var _this = this;
                            // fire TRUE at start
                            if (this._isSyncing !== true) {
                                this._isSyncing = true;
                                this.emit('changed', _this._isSyncing);
                                if (underscore.isFunction(this.callback)) {
                                    this.callback(null, _this._isSyncing, this);
                                }
                                setTimeout(function () {
                                    _this.emit('data', output);
                                    if (underscore.isFunction(_this.callback)) {
                                        _this.callback(null, output, _this);
                                    }
                                }, 0);
                                // fire sync status
                            }
                            else {
                                this.emit('data', output);
                                if (underscore.isFunction(_this.callback)) {
                                    this.callback(null, output, this);
                                }
                                // wait for some time before fireing the FALSE
                                clearTimeout(this._isSyncingTimeout);
                                this._isSyncingTimeout = setTimeout(function () {
                                    if (output.currentBlock > output.highestBlock - 200) {
                                        _this._isSyncing = false;
                                        _this.emit('changed', _this._isSyncing);
                                        if (underscore.isFunction(_this.callback)) {
                                            _this.callback(null, _this._isSyncing, _this);
                                        }
                                    }
                                }, 500);
                            }
                        }
                    }
                }
            })
        ];
        methods.forEach(function (method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager, _this.accounts); // second param is the eth.accounts module (necessary for signing transactions locally)
            method.defaultBlock = _this.defaultBlock;
            method.defaultAccount = _this.defaultAccount;
            method.transactionBlockTimeout = _this.transactionBlockTimeout;
            method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;
            method.transactionPollingTimeout = _this.transactionPollingTimeout;
            method.handleRevert = _this.handleRevert;
        });
    };
    // Adds the static givenProvider and providers property to the Eth module
    lib$b.addProviders(Eth);
    var lib$k = Eth;

    var Subscriptions$3 = lib$9.subscriptions;

    // var formatters = require('web3-core-helpers').formatters;

    var Shh = function Shh() {
        var _this = this;
        // sets _requestmanager
        lib$b.packageInit(this, arguments);
        // overwrite package setRequestManager
        var setRequestManager = this.setRequestManager;
        this.setRequestManager = function (manager) {
            setRequestManager(manager);
            _this.net.setRequestManager(manager);
            return true;
        };
        // overwrite setProvider
        var setProvider = this.setProvider;
        this.setProvider = function () {
            setProvider.apply(_this, arguments);
            _this.setRequestManager(_this._requestManager);
        };
        this.net = new lib$c(this);
        [
            new Subscriptions$3({
                name: 'subscribe',
                type: 'shh',
                subscriptions: {
                    'messages': {
                        params: 1
                        // inputFormatter: [formatters.inputPostFormatter],
                        // outputFormatter: formatters.outputPostFormatter
                    }
                }
            }),
            new lib$a({
                name: 'getVersion',
                call: 'shh_version',
                params: 0
            }),
            new lib$a({
                name: 'getInfo',
                call: 'shh_info',
                params: 0
            }),
            new lib$a({
                name: 'setMaxMessageSize',
                call: 'shh_setMaxMessageSize',
                params: 1
            }),
            new lib$a({
                name: 'setMinPoW',
                call: 'shh_setMinPoW',
                params: 1
            }),
            new lib$a({
                name: 'markTrustedPeer',
                call: 'shh_markTrustedPeer',
                params: 1
            }),
            new lib$a({
                name: 'newKeyPair',
                call: 'shh_newKeyPair',
                params: 0
            }),
            new lib$a({
                name: 'addPrivateKey',
                call: 'shh_addPrivateKey',
                params: 1
            }),
            new lib$a({
                name: 'deleteKeyPair',
                call: 'shh_deleteKeyPair',
                params: 1
            }),
            new lib$a({
                name: 'hasKeyPair',
                call: 'shh_hasKeyPair',
                params: 1
            }),
            new lib$a({
                name: 'getPublicKey',
                call: 'shh_getPublicKey',
                params: 1
            }),
            new lib$a({
                name: 'getPrivateKey',
                call: 'shh_getPrivateKey',
                params: 1
            }),
            new lib$a({
                name: 'newSymKey',
                call: 'shh_newSymKey',
                params: 0
            }),
            new lib$a({
                name: 'addSymKey',
                call: 'shh_addSymKey',
                params: 1
            }),
            new lib$a({
                name: 'generateSymKeyFromPassword',
                call: 'shh_generateSymKeyFromPassword',
                params: 1
            }),
            new lib$a({
                name: 'hasSymKey',
                call: 'shh_hasSymKey',
                params: 1
            }),
            new lib$a({
                name: 'getSymKey',
                call: 'shh_getSymKey',
                params: 1
            }),
            new lib$a({
                name: 'deleteSymKey',
                call: 'shh_deleteSymKey',
                params: 1
            }),
            new lib$a({
                name: 'newMessageFilter',
                call: 'shh_newMessageFilter',
                params: 1
            }),
            new lib$a({
                name: 'getFilterMessages',
                call: 'shh_getFilterMessages',
                params: 1
            }),
            new lib$a({
                name: 'deleteMessageFilter',
                call: 'shh_deleteMessageFilter',
                params: 1
            }),
            new lib$a({
                name: 'post',
                call: 'shh_post',
                params: 1,
                inputFormatter: [null]
            }),
            new lib$a({
                name: 'unsubscribe',
                call: 'shh_unsubscribe',
                params: 1
            })
        ].forEach(function (method) {
            method.attachToObject(_this);
            method.setRequestManager(_this._requestManager);
        });
    };
    Shh.prototype.clearSubscriptions = function () {
        this._requestManager.clearSubscriptions();
    };
    lib$b.addProviders(Shh);
    var lib$l = Shh;

    var strictUriEncode = function (str) {
    	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
    		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    	});
    };

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty$1.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols) {
    			symbols = getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    var token = '%[a-f0-9]{2}';
    var singleMatcher = new RegExp(token, 'gi');
    var multiMatcher = new RegExp('(' + token + ')+', 'gi');

    function decodeComponents(components, split) {
    	try {
    		// Try to decode the entire string first
    		return decodeURIComponent(components.join(''));
    	} catch (err) {
    		// Do nothing
    	}

    	if (components.length === 1) {
    		return components;
    	}

    	split = split || 1;

    	// Split the array in 2 parts
    	var left = components.slice(0, split);
    	var right = components.slice(split);

    	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }

    function decode$7(input) {
    	try {
    		return decodeURIComponent(input);
    	} catch (err) {
    		var tokens = input.match(singleMatcher);

    		for (var i = 1; i < tokens.length; i++) {
    			input = decodeComponents(tokens, i).join('');

    			tokens = input.match(singleMatcher);
    		}

    		return input;
    	}
    }

    function customDecodeURIComponent(input) {
    	// Keep track of all the replacements and prefill the map with the `BOM`
    	var replaceMap = {
    		'%FE%FF': '\uFFFD\uFFFD',
    		'%FF%FE': '\uFFFD\uFFFD'
    	};

    	var match = multiMatcher.exec(input);
    	while (match) {
    		try {
    			// Decode as big chunks as possible
    			replaceMap[match[0]] = decodeURIComponent(match[0]);
    		} catch (err) {
    			var result = decode$7(match[0]);

    			if (result !== match[0]) {
    				replaceMap[match[0]] = result;
    			}
    		}

    		match = multiMatcher.exec(input);
    	}

    	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    	replaceMap['%C2'] = '\uFFFD';

    	var entries = Object.keys(replaceMap);

    	for (var i = 0; i < entries.length; i++) {
    		// Replace all decoded components
    		var key = entries[i];
    		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    	}

    	return input;
    }

    var decodeUriComponent = function (encodedURI) {
    	if (typeof encodedURI !== 'string') {
    		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    	}

    	try {
    		encodedURI = encodedURI.replace(/\+/g, ' ');

    		// Try the built in decoder first
    		return decodeURIComponent(encodedURI);
    	} catch (err) {
    		// Fallback to a more advanced decoder
    		return customDecodeURIComponent(encodedURI);
    	}
    };

    function encoderForArrayFormat(opts) {
    	switch (opts.arrayFormat) {
    		case 'index':
    			return function (key, value, index) {
    				return value === null ? [
    					encode$8(key, opts),
    					'[',
    					index,
    					']'
    				].join('') : [
    					encode$8(key, opts),
    					'[',
    					encode$8(index, opts),
    					']=',
    					encode$8(value, opts)
    				].join('');
    			};

    		case 'bracket':
    			return function (key, value) {
    				return value === null ? encode$8(key, opts) : [
    					encode$8(key, opts),
    					'[]=',
    					encode$8(value, opts)
    				].join('');
    			};

    		default:
    			return function (key, value) {
    				return value === null ? encode$8(key, opts) : [
    					encode$8(key, opts),
    					'=',
    					encode$8(value, opts)
    				].join('');
    			};
    	}
    }

    function parserForArrayFormat(opts) {
    	var result;

    	switch (opts.arrayFormat) {
    		case 'index':
    			return function (key, value, accumulator) {
    				result = /\[(\d*)\]$/.exec(key);

    				key = key.replace(/\[\d*\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = {};
    				}

    				accumulator[key][result[1]] = value;
    			};

    		case 'bracket':
    			return function (key, value, accumulator) {
    				result = /(\[\])$/.exec(key);
    				key = key.replace(/\[\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				} else if (accumulator[key] === undefined) {
    					accumulator[key] = [value];
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};

    		default:
    			return function (key, value, accumulator) {
    				if (accumulator[key] === undefined) {
    					accumulator[key] = value;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};
    	}
    }

    function encode$8(value, opts) {
    	if (opts.encode) {
    		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
    	}

    	return value;
    }

    function keysSorter(input) {
    	if (Array.isArray(input)) {
    		return input.sort();
    	} else if (typeof input === 'object') {
    		return keysSorter(Object.keys(input)).sort(function (a, b) {
    			return Number(a) - Number(b);
    		}).map(function (key) {
    			return input[key];
    		});
    	}

    	return input;
    }

    function extract(str) {
    	var queryStart = str.indexOf('?');
    	if (queryStart === -1) {
    		return '';
    	}
    	return str.slice(queryStart + 1);
    }

    function parse$3(str, opts) {
    	opts = objectAssign({arrayFormat: 'none'}, opts);

    	var formatter = parserForArrayFormat(opts);

    	// Create an object with no prototype
    	// https://github.com/sindresorhus/query-string/issues/47
    	var ret = Object.create(null);

    	if (typeof str !== 'string') {
    		return ret;
    	}

    	str = str.trim().replace(/^[?#&]/, '');

    	if (!str) {
    		return ret;
    	}

    	str.split('&').forEach(function (param) {
    		var parts = param.replace(/\+/g, ' ').split('=');
    		// Firefox (pre 40) decodes `%3D` to `=`
    		// https://github.com/sindresorhus/query-string/pull/37
    		var key = parts.shift();
    		var val = parts.length > 0 ? parts.join('=') : undefined;

    		// missing `=` should be `null`:
    		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    		val = val === undefined ? null : decodeUriComponent(val);

    		formatter(decodeUriComponent(key), val, ret);
    	});

    	return Object.keys(ret).sort().reduce(function (result, key) {
    		var val = ret[key];
    		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
    			// Sort object keys, not values
    			result[key] = keysSorter(val);
    		} else {
    			result[key] = val;
    		}

    		return result;
    	}, Object.create(null));
    }

    var extract_1 = extract;
    var parse_1 = parse$3;

    var stringify$1 = function (obj, opts) {
    	var defaults = {
    		encode: true,
    		strict: true,
    		arrayFormat: 'none'
    	};

    	opts = objectAssign(defaults, opts);

    	if (opts.sort === false) {
    		opts.sort = function () {};
    	}

    	var formatter = encoderForArrayFormat(opts);

    	return obj ? Object.keys(obj).sort(opts.sort).map(function (key) {
    		var val = obj[key];

    		if (val === undefined) {
    			return '';
    		}

    		if (val === null) {
    			return encode$8(key, opts);
    		}

    		if (Array.isArray(val)) {
    			var result = [];

    			val.slice().forEach(function (val2) {
    				if (val2 === undefined) {
    					return;
    				}

    				result.push(formatter(key, val2, result.length));
    			});

    			return result.join('&');
    		}

    		return encode$8(key, opts) + '=' + encode$8(val, opts);
    	}).filter(function (x) {
    		return x.length > 0;
    	}).join('&') : '';
    };

    var parseUrl = function (str, opts) {
    	return {
    		url: str.split('?')[0] || '',
    		query: parse$3(extract(str), opts)
    	};
    };

    var queryString = {
    	extract: extract_1,
    	parse: parse_1,
    	stringify: stringify$1,
    	parseUrl: parseUrl
    };

    var urlSetQuery_1 = urlSetQuery;
    function urlSetQuery (url, query) {
      if (query) {
        // remove optional leading symbols
        query = query.trim().replace(/^(\?|#|&)/, '');

        // don't append empty query
        query = query ? ('?' + query) : query;

        var parts = url.split(/[\?\#]/);
        var start = parts[0];
        if (query && /\:\/\/[^\/]*$/.test(start)) {
          // e.g. http://foo.com -> http://foo.com/
          start = start + '/';
        }
        var match = url.match(/(\#.*)$/);
        url = start + query;
        if (match) { // add hash back in
          url = url + match[0];
        }
      }
      return url
    }

    var ensureHeader_1 = ensureHeader;
    function ensureHeader (headers, key, value) {
      var lower = key.toLowerCase();
      if (!headers[key] && !headers[lower]) {
        headers[key] = value;
      }
    }

    var win;

    if (typeof window !== "undefined") {
        win = window;
    } else if (typeof commonjsGlobal !== "undefined") {
        win = commonjsGlobal;
    } else if (typeof self !== "undefined"){
        win = self;
    } else {
        win = {};
    }

    var window_1 = win;

    var isFunction_1 = isFunction$1;

    var toString$3 = Object.prototype.toString;

    function isFunction$1 (fn) {
      if (!fn) {
        return false
      }
      var string = toString$3.call(fn);
      return string === '[object Function]' ||
        (typeof fn === 'function' && string !== '[object RegExp]') ||
        (typeof window !== 'undefined' &&
         // IE8 and below
         (fn === window.setTimeout ||
          fn === window.alert ||
          fn === window.confirm ||
          fn === window.prompt))
    }

    var trim = function(string) {
      return string.replace(/^\s+|\s+$/g, '');
    }
      , isArray$2 = function(arg) {
          return Object.prototype.toString.call(arg) === '[object Array]';
        };

    var parseHeaders = function (headers) {
      if (!headers)
        return {}

      var result = {};

      var headersArr = trim(headers).split('\n');

      for (var i = 0; i < headersArr.length; i++) {
        var row = headersArr[i];
        var index = row.indexOf(':')
        , key = trim(row.slice(0, index)).toLowerCase()
        , value = trim(row.slice(index + 1));

        if (typeof(result[key]) === 'undefined') {
          result[key] = value;
        } else if (isArray$2(result[key])) {
          result[key].push(value);
        } else {
          result[key] = [ result[key], value ];
        }
      }

      return result
    };

    var immutable = extend$1;

    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function extend$1() {
        var target = {};

        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (hasOwnProperty$2.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }

        return target
    }

    var xhr$1 = createXHR;
    // Allow use of default import syntax in TypeScript
    var _default = createXHR;
    createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop$6;
    createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window_1.XDomainRequest;

    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
        createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
            options = initParams(uri, options, callback);
            options.method = method.toUpperCase();
            return _createXHR(options)
        };
    });

    function forEachArray(array, iterator) {
        for (var i = 0; i < array.length; i++) {
            iterator(array[i]);
        }
    }

    function isEmpty(obj){
        for(var i in obj){
            if(obj.hasOwnProperty(i)) return false
        }
        return true
    }

    function initParams(uri, options, callback) {
        var params = uri;

        if (isFunction_1(options)) {
            callback = options;
            if (typeof uri === "string") {
                params = {uri:uri};
            }
        } else {
            params = immutable(options, {uri: uri});
        }

        params.callback = callback;
        return params
    }

    function createXHR(uri, options, callback) {
        options = initParams(uri, options, callback);
        return _createXHR(options)
    }

    function _createXHR(options) {
        if(typeof options.callback === "undefined"){
            throw new Error("callback argument missing")
        }

        var called = false;
        var callback = function cbOnce(err, response, body){
            if(!called){
                called = true;
                options.callback(err, response, body);
            }
        };

        function readystatechange() {
            if (xhr.readyState === 4) {
                setTimeout(loadFunc, 0);
            }
        }

        function getBody() {
            // Chrome with requestType=blob throws errors arround when even testing access to responseText
            var body = undefined;

            if (xhr.response) {
                body = xhr.response;
            } else {
                body = xhr.responseText || getXml(xhr);
            }

            if (isJson) {
                try {
                    body = JSON.parse(body);
                } catch (e) {}
            }

            return body
        }

        function errorFunc(evt) {
            clearTimeout(timeoutTimer);
            if(!(evt instanceof Error)){
                evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") );
            }
            evt.statusCode = 0;
            return callback(evt, failureResponse)
        }

        // will load the data & process the response in a special response object
        function loadFunc() {
            if (aborted) return
            var status;
            clearTimeout(timeoutTimer);
            if(options.useXDR && xhr.status===undefined) {
                //IE8 CORS GET successful response doesn't have a status field, but body is fine
                status = 200;
            } else {
                status = (xhr.status === 1223 ? 204 : xhr.status);
            }
            var response = failureResponse;
            var err = null;

            if (status !== 0){
                response = {
                    body: getBody(),
                    statusCode: status,
                    method: method,
                    headers: {},
                    url: uri,
                    rawRequest: xhr
                };
                if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                    response.headers = parseHeaders(xhr.getAllResponseHeaders());
                }
            } else {
                err = new Error("Internal XMLHttpRequest Error");
            }
            return callback(err, response, response.body)
        }

        var xhr = options.xhr || null;

        if (!xhr) {
            if (options.cors || options.useXDR) {
                xhr = new createXHR.XDomainRequest();
            }else {
                xhr = new createXHR.XMLHttpRequest();
            }
        }

        var key;
        var aborted;
        var uri = xhr.url = options.uri || options.url;
        var method = xhr.method = options.method || "GET";
        var body = options.body || options.data;
        var headers = xhr.headers = options.headers || {};
        var sync = !!options.sync;
        var isJson = false;
        var timeoutTimer;
        var failureResponse = {
            body: undefined,
            headers: {},
            statusCode: 0,
            method: method,
            url: uri,
            rawRequest: xhr
        };

        if ("json" in options && options.json !== false) {
            isJson = true;
            headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
            if (method !== "GET" && method !== "HEAD") {
                headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
                body = JSON.stringify(options.json === true ? body : options.json);
            }
        }

        xhr.onreadystatechange = readystatechange;
        xhr.onload = loadFunc;
        xhr.onerror = errorFunc;
        // IE9 must have onprogress be set to a unique function.
        xhr.onprogress = function () {
            // IE must die
        };
        xhr.onabort = function(){
            aborted = true;
        };
        xhr.ontimeout = errorFunc;
        xhr.open(method, uri, !sync, options.username, options.password);
        //has to be after open
        if(!sync) {
            xhr.withCredentials = !!options.withCredentials;
        }
        // Cannot set timeout with sync request
        // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
        // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
        if (!sync && options.timeout > 0 ) {
            timeoutTimer = setTimeout(function(){
                if (aborted) return
                aborted = true;//IE9 may still call readystatechange
                xhr.abort("timeout");
                var e = new Error("XMLHttpRequest timeout");
                e.code = "ETIMEDOUT";
                errorFunc(e);
            }, options.timeout );
        }

        if (xhr.setRequestHeader) {
            for(key in headers){
                if(headers.hasOwnProperty(key)){
                    xhr.setRequestHeader(key, headers[key]);
                }
            }
        } else if (options.headers && !isEmpty(options.headers)) {
            throw new Error("Headers cannot be set on an XDomainRequest object")
        }

        if ("responseType" in options) {
            xhr.responseType = options.responseType;
        }

        if ("beforeSend" in options &&
            typeof options.beforeSend === "function"
        ) {
            options.beforeSend(xhr);
        }

        // Microsoft Edge browser sends "undefined" when send is called with undefined value.
        // XMLHttpRequest spec says to pass null as body to indicate no body
        // See https://github.com/naugtur/xhr/issues/100.
        xhr.send(body || null);

        return xhr


    }

    function getXml(xhr) {
        // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
        // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
        try {
            if (xhr.responseType === "document") {
                return xhr.responseXML
            }
            var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
            if (xhr.responseType === "" && !firefoxBugTakenEffect) {
                return xhr.responseXML
            }
        } catch (e) {}

        return null
    }

    function noop$6() {}
    xhr$1.default = _default;

    var normalizeResponse = getResponse;
    function getResponse (opt, resp) {
      if (!resp) return null
      return {
        statusCode: resp.statusCode,
        headers: resp.headers,
        method: opt.method,
        url: opt.url,
        // the XHR object in browser, http response in Node
        rawRequest: resp.rawRequest ? resp.rawRequest : resp
      }
    }

    var noop$7 = function () {};

    var requestBrowser = xhrRequest;
    function xhrRequest (opt, cb) {
      delete opt.uri;

      // for better JSON.parse error handling than xhr module
      var useJson = false;
      if (opt.responseType === 'json') {
        opt.responseType = 'text';
        useJson = true;
      }

      var req = xhr$1(opt, function xhrRequestResult (err, resp, body) {
        if (useJson && !err) {
          try {
            var text = resp.rawRequest.responseText;
            body = JSON.parse(text);
          } catch (e) {
            err = e;
          }
        }

        resp = normalizeResponse(opt, resp);
        if (err) cb(err, null, resp);
        else cb(err, body, resp);
        cb = noop$7;
      });

      // Patch abort() so that it also calls the callback, but with an error
      var onabort = req.onabort;
      req.onabort = function () {
        var ret = onabort.apply(req, Array.prototype.slice.call(arguments));
        cb(new Error('XHR Aborted'));
        cb = noop$7;
        return ret
      };

      return req
    }

    // this is replaced in the browser


    var mimeTypeJson = 'application/json';
    var noop$8 = function () {};

    var xhrRequest_1 = xhrRequest$1;
    function xhrRequest$1 (url, opt, cb) {
      if (!url || typeof url !== 'string') {
        throw new TypeError('must specify a URL')
      }
      if (typeof opt === 'function') {
        cb = opt;
        opt = {};
      }
      if (cb && typeof cb !== 'function') {
        throw new TypeError('expected cb to be undefined or a function')
      }

      cb = cb || noop$8;
      opt = opt || {};

      var defaultResponse = opt.json ? 'json' : 'text';
      opt = objectAssign({ responseType: defaultResponse }, opt);

      var headers = opt.headers || {};
      var method = (opt.method || 'GET').toUpperCase();
      var query = opt.query;
      if (query) {
        if (typeof query !== 'string') {
          query = queryString.stringify(query);
        }
        url = urlSetQuery_1(url, query);
      }

      // allow json response
      if (opt.responseType === 'json') {
        ensureHeader_1(headers, 'Accept', mimeTypeJson);
      }

      // if body content is json
      if (opt.json && method !== 'GET' && method !== 'HEAD') {
        ensureHeader_1(headers, 'Content-Type', mimeTypeJson);
        opt.body = JSON.stringify(opt.body);
      }

      opt.method = method;
      opt.url = url;
      opt.headers = headers;
      delete opt.query;
      delete opt.json;

      return requestBrowser(opt, cb)
    }

    var at$1 = function at(bytes, index) {
      return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
    };

    var random$2 = function random(bytes) {
      var rnd = void 0;
      if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof commonjsRequire !== "undefined") rnd = commonjsRequire().randomBytes(bytes);else throw "Safe random numbers not available.";
      var hex = "0x";
      for (var i = 0; i < bytes; ++i) {
        hex += ("00" + rnd[i].toString(16)).slice(-2);
      }return hex;
    };

    var length$2 = function length(a) {
      return (a.length - 2) / 2;
    };

    var flatten$1 = function flatten(a) {
      return "0x" + a.reduce(function (r, s) {
        return r + s.slice(2);
      }, "");
    };

    var slice$1 = function slice(i, j, bs) {
      return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
    };

    var reverse$1 = function reverse(hex) {
      var rev = "0x";
      for (var i = 0, l = length$2(hex); i < l; ++i) {
        rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
      }
      return rev;
    };

    var pad$1 = function pad(l, hex) {
      return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
    };

    var padRight$1 = function padRight(l, hex) {
      return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
    };

    var toArray$3 = function toArray(hex) {
      var arr = [];
      for (var i = 2, l = hex.length; i < l; i += 2) {
        arr.push(parseInt(hex.slice(i, i + 2), 16));
      }return arr;
    };

    var fromArray$2 = function fromArray(arr) {
      var hex = "0x";
      for (var i = 0, l = arr.length; i < l; ++i) {
        var b = arr[i];
        hex += (b < 16 ? "0" : "") + b.toString(16);
      }
      return hex;
    };

    var toUint8Array$1 = function toUint8Array(hex) {
      return new Uint8Array(toArray$3(hex));
    };

    var fromUint8Array$1 = function fromUint8Array(arr) {
      return fromArray$2([].slice.call(arr, 0));
    };

    var fromNumber$2 = function fromNumber(num) {
      var hex = num.toString(16);
      return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
    };

    var toNumber$2 = function toNumber(hex) {
      return parseInt(hex.slice(2), 16);
    };

    var concat$2 = function concat(a, b) {
      return a.concat(b.slice(2));
    };

    var fromNat$1 = function fromNat(bn) {
      return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
    };

    var toNat$1 = function toNat(bn) {
      return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
    };

    var fromAscii$2 = function fromAscii(ascii) {
      var hex = "0x";
      for (var i = 0; i < ascii.length; ++i) {
        hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
      }return hex;
    };

    var toAscii$2 = function toAscii(hex) {
      var ascii = "";
      for (var i = 2; i < hex.length; i += 2) {
        ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
      }return ascii;
    };

    // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
    var fromString$3 = function fromString(s) {
      var makeByte = function makeByte(uint8) {
        var b = uint8.toString(16);
        return b.length < 2 ? "0" + b : b;
      };
      var bytes = "0x";
      for (var ci = 0; ci != s.length; ci++) {
        var c = s.charCodeAt(ci);
        if (c < 128) {
          bytes += makeByte(c);
          continue;
        }
        if (c < 2048) {
          bytes += makeByte(c >> 6 | 192);
        } else {
          if (c > 0xd7ff && c < 0xdc00) {
            if (++ci == s.length) return null;
            var c2 = s.charCodeAt(ci);
            if (c2 < 0xdc00 || c2 > 0xdfff) return null;
            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            bytes += makeByte(c >> 18 | 240);
            bytes += makeByte(c >> 12 & 63 | 128);
          } else {
            // c <= 0xffff
            bytes += makeByte(c >> 12 | 224);
          }
          bytes += makeByte(c >> 6 & 63 | 128);
        }
        bytes += makeByte(c & 63 | 128);
      }
      return bytes;
    };

    var toString$4 = function toString(bytes) {
      var s = '';
      var i = 0;
      var l = length$2(bytes);
      while (i < l) {
        var c = at$1(bytes, i++);
        if (c > 127) {
          if (c > 191 && c < 224) {
            if (i >= l) return null;
            c = (c & 31) << 6 | at$1(bytes, i) & 63;
          } else if (c > 223 && c < 240) {
            if (i + 1 >= l) return null;
            c = (c & 15) << 12 | (at$1(bytes, i) & 63) << 6 | at$1(bytes, ++i) & 63;
          } else if (c > 239 && c < 248) {
            if (i + 2 >= l) return null;
            c = (c & 7) << 18 | (at$1(bytes, i) & 63) << 12 | (at$1(bytes, ++i) & 63) << 6 | at$1(bytes, ++i) & 63;
          } else return null;
          ++i;
        }
        if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
          c -= 0x10000;
          s += String.fromCharCode(c >> 10 | 0xd800);
          s += String.fromCharCode(c & 0x3FF | 0xdc00);
        } else return null;
      }
      return s;
    };

    var bytes$2 = {
      random: random$2,
      length: length$2,
      concat: concat$2,
      flatten: flatten$1,
      slice: slice$1,
      reverse: reverse$1,
      pad: pad$1,
      padRight: padRight$1,
      fromAscii: fromAscii$2,
      toAscii: toAscii$2,
      fromString: fromString$3,
      toString: toString$4,
      fromNumber: fromNumber$2,
      toNumber: toNumber$2,
      fromNat: fromNat$1,
      toNat: toNat$1,
      fromArray: fromArray$2,
      toArray: toArray$3,
      fromUint8Array: fromUint8Array$1,
      toUint8Array: toUint8Array$1
    };

    // This was ported from https://github.com/emn178/js-sha3, with some minor
    // modifications and pruning. It is licensed under MIT:
    //
    // Copyright 2015-2016 Chen, Yi-Cyuan
    //  
    // Permission is hereby granted, free of charge, to any person obtaining
    // a copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to
    // permit persons to whom the Software is furnished to do so, subject to
    // the following conditions:
    // 
    // The above copyright notice and this permission notice shall be
    // included in all copies or substantial portions of the Software.
    // 
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    var HEX_CHARS$2 = '0123456789abcdef'.split('');
    var KECCAK_PADDING$2 = [1, 256, 65536, 16777216];
    var SHIFT$2 = [0, 8, 16, 24];
    var RC$2 = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

    var Keccak$3 = function Keccak(bits) {
      return {
        blocks: [],
        reset: true,
        block: 0,
        start: 0,
        blockCount: 1600 - (bits << 1) >> 5,
        outputBlocks: bits >> 5,
        s: function (s) {
          return [].concat(s, s, s, s, s);
        }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
      };
    };

    var update$3 = function update(state, message) {
      var length = message.length,
          blocks = state.blocks,
          byteCount = state.blockCount << 2,
          blockCount = state.blockCount,
          outputBlocks = state.outputBlocks,
          s = state.s,
          index = 0,
          i,
          code;

      // update
      while (index < length) {
        if (state.reset) {
          state.reset = false;
          blocks[0] = state.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (typeof message !== "string") {
          for (i = state.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT$2[i++ & 3];
          }
        } else {
          for (i = state.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT$2[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT$2[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$2[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT$2[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT$2[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$2[i++ & 3];
            } else {
              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT$2[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT$2[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT$2[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT$2[i++ & 3];
            }
          }
        }
        state.lastByteIndex = i;
        if (i >= byteCount) {
          state.start = i - byteCount;
          state.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f$3(s);
          state.reset = true;
        } else {
          state.start = i;
        }
      }

      // finalize
      i = state.lastByteIndex;
      blocks[i >> 2] |= KECCAK_PADDING$2[i & 3];
      if (state.lastByteIndex === byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f$3(s);

      // toString
      var hex = '',
          i = 0,
          j = 0,
          block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS$2[block >> 4 & 0x0F] + HEX_CHARS$2[block & 0x0F] + HEX_CHARS$2[block >> 12 & 0x0F] + HEX_CHARS$2[block >> 8 & 0x0F] + HEX_CHARS$2[block >> 20 & 0x0F] + HEX_CHARS$2[block >> 16 & 0x0F] + HEX_CHARS$2[block >> 28 & 0x0F] + HEX_CHARS$2[block >> 24 & 0x0F];
        }
        if (j % blockCount === 0) {
          f$3(s);
          i = 0;
        }
      }
      return "0x" + hex;
    };

    var f$3 = function f(s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;

        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;

        s[0] ^= RC$2[n];
        s[1] ^= RC$2[n + 1];
      }
    };

    var keccak$5 = function keccak(bits) {
      return function (str) {
        var msg;
        if (str.slice(0, 2) === "0x") {
          msg = [];
          for (var i = 2, l = str.length; i < l; i += 2) {
            msg.push(parseInt(str.slice(i, i + 2), 16));
          }
        } else {
          msg = str;
        }
        return update$3(Keccak$3(bits), msg);
      };
    };

    var hash$5 = {
      keccak256: keccak$5(256),
      keccak512: keccak$5(512),
      keccak256s: keccak$5(256),
      keccak512s: keccak$5(512)
    };

    // Thanks https://github.com/axic/swarmhash
    var keccak$6 = hash$5.keccak256;



    var swarmHashBlock = function swarmHashBlock(length, data) {
      var lengthEncoded = bytes$2.reverse(bytes$2.pad(6, bytes$2.fromNumber(length)));
      var bytes = bytes$2.flatten([lengthEncoded, "0x0000", data]);
      return keccak$6(bytes).slice(2);
    }; // (Bytes | Uint8Array | String) -> String


    var swarmHash = function swarmHash(data) {
      if (typeof data === "string" && data.slice(0, 2) !== "0x") {
        data = bytes$2.fromString(data);
      } else if (typeof data !== "string" && data.length !== undefined) {
        data = bytes$2.fromUint8Array(data);
      }

      var length = bytes$2.length(data);

      if (length <= 4096) {
        return swarmHashBlock(length, data);
      }

      var maxSize = 4096;

      while (maxSize * (4096 / 32) < length) {
        maxSize *= 4096 / 32;
      }

      var innerNodes = [];

      for (var i = 0; i < length; i += maxSize) {
        var size = maxSize < length - i ? maxSize : length - i;
        innerNodes.push(swarmHash(bytes$2.slice(data, i, i + size)));
      }

      return swarmHashBlock(length, bytes$2.flatten(innerNodes));
    };

    var swarmHash_1 = swarmHash;

    var picker = function picker(type) {
      return function () {
        return new Promise(function (resolve, reject) {
          var fileLoader = function fileLoader(e) {
            var directory = {};
            var totalFiles = e.target.files.length;
            var loadedFiles = 0;
            [].map.call(e.target.files, function (file) {
              var reader = new FileReader();

              reader.onload = function (e) {
                var data = new Uint8Array(e.target.result);

                if (type === "directory") {
                  var path = file.webkitRelativePath;
                  directory[path.slice(path.indexOf("/") + 1)] = {
                    type: "text/plain",
                    data: data
                  };
                  if (++loadedFiles === totalFiles) resolve(directory);
                } else if (type === "file") {
                  var _path = file.webkitRelativePath;
                  resolve({
                    "type": mimetype.lookup(_path),
                    "data": data
                  });
                } else {
                  resolve(data);
                }
              };

              reader.readAsArrayBuffer(file);
            });
          };

          var fileInput;

          if (type === "directory") {
            fileInput = document.createElement("input");
            fileInput.addEventListener("change", fileLoader);
            fileInput.type = "file";
            fileInput.webkitdirectory = true;
            fileInput.mozdirectory = true;
            fileInput.msdirectory = true;
            fileInput.odirectory = true;
            fileInput.directory = true;
          } else {
            fileInput = document.createElement("input");
            fileInput.addEventListener("change", fileLoader);
            fileInput.type = "file";
          }
          var mouseEvent = document.createEvent("MouseEvents");
          mouseEvent.initEvent("click", true, false);
          fileInput.dispatchEvent(mouseEvent);
        });
      };
    };

    var pick = {
      data: picker("data"),
      file: picker("file"),
      directory: picker("directory")
    };

    // TODO: this is a temporary fix to hide those libraries from the browser. A
    // slightly better long-term solution would be to split this file into two,
    // separating the functions that are used on Node.js from the functions that
    // are used only on the browser.
    var swarm = function (_ref) {
      var fs = _ref.fs,
          files = _ref.files,
          os = _ref.os,
          path = _ref.path,
          child_process = _ref.child_process,
          mimetype = _ref.mimetype,
          defaultArchives = _ref.defaultArchives,
          request = _ref.request,
          downloadUrl = _ref.downloadUrl,
          bytes = _ref.bytes,
          hash = _ref.hash,
          pick = _ref.pick;

      // ∀ a . String -> JSON -> Map String a -o Map String a
      //   Inserts a key/val pair in an object impurely.
      var impureInsert = function impureInsert(key) {
        return function (val) {
          return function (map) {
            return map[key] = val, map;
          };
        };
      }; // String -> JSON -> Map String JSON
      //   Merges an array of keys and an array of vals into an object.


      var toMap = function toMap(keys) {
        return function (vals) {
          var map = {};

          for (var i = 0, l = keys.length; i < l; ++i) {
            map[keys[i]] = vals[i];
          }

          return map;
        };
      }; // ∀ a . Map String a -> Map String a -> Map String a
      //   Merges two maps into one.


      var merge = function merge(a) {
        return function (b) {
          var map = {};

          for (var key in a) {
            map[key] = a[key];
          }

          for (var _key in b) {
            map[_key] = b[_key];
          }

          return map;
        };
      }; // ∀ a . [a] -> [a] -> Bool


      var rawUrl = function rawUrl(swarmUrl) {
        return function (hash) {
          return "".concat(swarmUrl, "/bzz-raw:/").concat(hash);
        };
      }; // String -> String -> Promise Uint8Array
      //   Gets the raw contents of a Swarm hash address.


      var downloadData = function downloadData(swarmUrl) {
        return function (hash) {
          return new Promise(function (resolve, reject) {
            request(rawUrl(swarmUrl)(hash), {
              responseType: "arraybuffer"
            }, function (err, arrayBuffer, response) {
              if (err) {
                return reject(err);
              }

              if (response.statusCode >= 400) {
                return reject(new Error("Error ".concat(response.statusCode, ".")));
              }

              return resolve(new Uint8Array(arrayBuffer));
            });
          });
        };
      }; // type Entry = {"type": String, "hash": String}
      // type File = {"type": String, "data": Uint8Array}
      // String -> String -> Promise (Map String Entry)
      //   Solves the manifest of a Swarm address recursively.
      //   Returns a map from full paths to entries.


      var downloadEntries = function downloadEntries(swarmUrl) {
        return function (hash) {
          var search = function search(hash) {
            return function (path) {
              return function (routes) {
                // Formats an entry to the Swarm.js type.
                var format = function format(entry) {
                  return {
                    type: entry.contentType,
                    hash: entry.hash
                  };
                }; // To download a single entry:
                //   if type is bzz-manifest, go deeper
                //   if not, add it to the routing table


                var downloadEntry = function downloadEntry(entry) {
                  if (entry.path === undefined) {
                    return Promise.resolve();
                  } else {
                    return entry.contentType === "application/bzz-manifest+json" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));
                  }
                }; // Downloads the initial manifest and then each entry.


                return downloadData(swarmUrl)(hash).then(function (text) {
                  return JSON.parse(toString(text)).entries;
                }).then(function (entries) {
                  return Promise.all(entries.map(downloadEntry));
                }).then(function () {
                  return routes;
                });
              };
            };
          };

          return search(hash)("")({});
        };
      }; // String -> String -> Promise (Map String String)
      //   Same as `downloadEntries`, but returns only hashes (no types).


      var downloadRoutes = function downloadRoutes(swarmUrl) {
        return function (hash) {
          return downloadEntries(swarmUrl)(hash).then(function (entries) {
            return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {
              return entries[route].hash;
            }));
          });
        };
      }; // String -> String -> Promise (Map String File)
      //   Gets the entire directory tree in a Swarm address.
      //   Returns a promise mapping paths to file contents.


      var downloadDirectory = function downloadDirectory(swarmUrl) {
        return function (hash) {
          return downloadEntries(swarmUrl)(hash).then(function (entries) {
            var paths = Object.keys(entries);
            var hashs = paths.map(function (path) {
              return entries[path].hash;
            });
            var types = paths.map(function (path) {
              return entries[path].type;
            });
            var datas = hashs.map(downloadData(swarmUrl));

            var files = function files(datas) {
              return datas.map(function (data, i) {
                return {
                  type: types[i],
                  data: data
                };
              });
            };

            return Promise.all(datas).then(function (datas) {
              return toMap(paths)(files(datas));
            });
          });
        };
      }; // String -> String -> String -> Promise String
      //   Gets the raw contents of a Swarm hash address.
      //   Returns a promise with the downloaded file path.


      var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {
        return function (hash) {
          return function (filePath) {
            return files.download(rawUrl(swarmUrl)(hash))(filePath);
          };
        };
      }; // String -> String -> String -> Promise (Map String String)
      //   Gets the entire directory tree in a Swarm address.
      //   Returns a promise mapping paths to file contents.


      var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {
        return function (hash) {
          return function (dirPath) {
            return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {
              var downloads = [];

              for (var route in routingTable) {
                if (route.length > 0) {
                  var filePath = path.join(dirPath, route);
                  downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));
                }
              }
              return Promise.all(downloads).then(function () {
                return dirPath;
              });
            });
          };
        };
      }; // String -> Uint8Array -> Promise String
      //   Uploads raw data to Swarm.
      //   Returns a promise with the uploaded hash.


      var uploadData = function uploadData(swarmUrl) {
        return function (data) {
          return new Promise(function (resolve, reject) {
            var params = {
              body: typeof data === "string" ? fromString(data) : data,
              method: "POST"
            };
            request("".concat(swarmUrl, "/bzz-raw:/"), params, function (err, data) {
              if (err) {
                return reject(err);
              }

              return resolve(data);
            });
          });
        };
      }; // String -> String -> String -> File -> Promise String
      //   Uploads a file to the Swarm manifest at a given hash, under a specific
      //   route. Returns a promise containing the uploaded hash.
      //   FIXME: for some reasons Swarm-Gateways is sometimes returning
      //   error 404 (bad request), so we retry up to 3 times. Why?


      var uploadToManifest = function uploadToManifest(swarmUrl) {
        return function (hash) {
          return function (route) {
            return function (file) {
              var attempt = function attempt(n) {
                var slashRoute = route[0] === "/" ? route : "/" + route;
                var url = "".concat(swarmUrl, "/bzz:/").concat(hash).concat(slashRoute);
                var opt = {
                  method: "PUT",
                  headers: {
                    "Content-Type": file.type
                  },
                  body: file.data
                };
                return new Promise(function (resolve, reject) {
                  request(url, opt, function (err, data) {
                    if (err) {
                      return reject(err);
                    }

                    if (data.indexOf("error") !== -1) {
                      return reject(data);
                    }

                    return resolve(data);
                  });
                })["catch"](function (e) {
                  return n > 0 && attempt(n - 1);
                });
              };

              return attempt(3);
            };
          };
        };
      }; // String -> {type: String, data: Uint8Array} -> Promise String


      var uploadFile = function uploadFile(swarmUrl) {
        return function (file) {
          return uploadDirectory(swarmUrl)({
            "": file
          });
        };
      }; // String -> String -> Promise String


      var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {
        return function (filePath) {
          return fs.readFile(filePath).then(function (data) {
            return uploadFile(swarmUrl)({
              type: mimetype.lookup(filePath),
              data: data
            });
          });
        };
      }; // String -> Map String File -> Promise String
      //   Uploads a directory to Swarm. The directory is
      //   represented as a map of routes and files.
      //   A default path is encoded by having a "" route.


      var uploadDirectory = function uploadDirectory(swarmUrl) {
        return function (directory) {
          return uploadData(swarmUrl)("{}").then(function (hash) {
            var uploadRoute = function uploadRoute(route) {
              return function (hash) {
                return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);
              };
            };

            var uploadToHash = function uploadToHash(hash, route) {
              return hash.then(uploadRoute(route));
            };

            return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));
          });
        };
      }; // String -> Promise String


      var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {
        return function (filePath) {
          return fs.readFile(filePath).then(uploadData(swarmUrl));
        };
      }; // String -> Nullable String -> String -> Promise String


      var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {
        return function (defaultPath) {
          return function (dirPath) {
            return files.directoryTree(dirPath).then(function (fullPaths) {
              return Promise.all(fullPaths.map(function (path) {
                return fs.readFile(path);
              })).then(function (datas) {
                var paths = fullPaths.map(function (path) {
                  return path.slice(dirPath.length);
                });
                var types = fullPaths.map(function (path) {
                  return mimetype.lookup(path) || "text/plain";
                });
                return toMap(paths)(datas.map(function (data, i) {
                  return {
                    type: types[i],
                    data: data
                  };
                }));
              });
            }).then(function (directory) {
              return merge(defaultPath ? {
                "": directory[defaultPath]
              } : {})(directory);
            }).then(uploadDirectory(swarmUrl));
          };
        };
      }; // String -> UploadInfo -> Promise String
      //   Simplified multi-type upload which calls the correct
      //   one based on the type of the argument given.


      var _upload = function upload(swarmUrl) {
        return function (arg) {
          // Upload raw data from browser
          if (arg.pick === "data") {
            return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser
          } else if (arg.pick === "file") {
            return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser
          } else if (arg.pick === "directory") {
            return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk
          } else if (arg.path) {
            switch (arg.kind) {
              case "data":
                return uploadDataFromDisk(swarmUrl)(arg.path);

              case "file":
                return uploadFileFromDisk(swarmUrl)(arg.path);

              case "directory":
                return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);
            }
          } else if (arg.length || typeof arg === "string") {
            return uploadData(swarmUrl)(arg); // Upload directory with JSON
          } else if (arg instanceof Object) {
            return uploadDirectory(swarmUrl)(arg);
          }

          return Promise.reject(new Error("Bad arguments"));
        };
      }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)
      //   Simplified multi-type download which calls the correct function based on
      //   the type of the argument given, and on whether the Swwarm address has a
      //   directory or a file.


      var _download = function download(swarmUrl) {
        return function (hash) {
          return function (path) {
            return isDirectory(swarmUrl)(hash).then(function (isDir) {
              if (isDir) {
                return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);
              } else {
                return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);
              }
            });
          };
        };
      }; // String -> Promise String
      //   Downloads the Swarm binaries into a path. Returns a promise that only
      //   resolves when the exact Swarm file is there, and verified to be correct.
      //   If it was already there to begin with, skips the download.


      var downloadBinary = function downloadBinary(path, archives) {
        var system = os.platform().replace("win32", "windows") + "-" + (os.arch() === "x64" ? "amd64" : "386");
        var archive = (archives || defaultArchives)[system];
        var archiveUrl = downloadUrl + archive.archive + ".tar.gz";
        var archiveMD5 = archive.archiveMD5;
        var binaryMD5 = archive.binaryMD5;
        return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);
      }; // type SwarmSetup = {
      //   account : String,
      //   password : String,
      //   dataDir : String,
      //   binPath : String,
      //   ensApi : String,
      //   onDownloadProgress : Number ~> (),
      //   archives : [{
      //     archive: String,
      //     binaryMD5: String,
      //     archiveMD5: String
      //   }]
      // }
      // SwarmSetup ~> Promise Process
      //   Starts the Swarm process.


      var startProcess = function startProcess(swarmSetup) {
        return new Promise(function (resolve, reject) {
          var spawn = child_process.spawn;

          var hasString = function hasString(str) {
            return function (buffer) {
              return ('' + buffer).indexOf(str) !== -1;
            };
          };

          var account = swarmSetup.account,
              password = swarmSetup.password,
              dataDir = swarmSetup.dataDir,
              ensApi = swarmSetup.ensApi,
              privateKey = swarmSetup.privateKey;
          var WAITING_PASSWORD = 0;
          var STARTING = 1;
          var LISTENING = 2;
          var PASSWORD_PROMPT_HOOK = "Passphrase";
          var LISTENING_HOOK = "Swarm http proxy started";
          var state = WAITING_PASSWORD;
          var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);

          var handleProcessOutput = function handleProcessOutput(data) {
            if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {
              setTimeout(function () {
                state = STARTING;
                swarmProcess.stdin.write(password + '\n');
              }, 500);
            } else if (hasString(LISTENING_HOOK)(data)) {
              state = LISTENING;
              clearTimeout(timeout);
              resolve(swarmProcess);
            }
          };

          swarmProcess.stdout.on('data', handleProcessOutput);
          swarmProcess.stderr.on('data', handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));

          var error = function error() {
            return reject(new Error("Couldn't start swarm process."));
          };

          var timeout = setTimeout(error, 20000);
        });
      }; // Process ~> Promise ()
      //   Stops the Swarm process.


      var stopProcess = function stopProcess(process) {
        return new Promise(function (resolve, reject) {
          process.stderr.removeAllListeners('data');
          process.stdout.removeAllListeners('data');
          process.stdin.removeAllListeners('error');
          process.removeAllListeners('error');
          process.removeAllListeners('exit');
          process.kill('SIGINT');
          var killTimeout = setTimeout(function () {
            return process.kill('SIGKILL');
          }, 8000);
          process.once('close', function () {
            clearTimeout(killTimeout);
            resolve();
          });
        });
      }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()
      //   Receives a Swarm configuration object and a callback function. It then
      //   checks if a local Swarm node is running. If no local Swarm is found, it
      //   downloads the Swarm binaries to the dataDir (if not there), checksums,
      //   starts the Swarm process and calls the callback function with an API
      //   object using the local node. That callback must return a promise which
      //   will resolve when it is done using the API, so that this function can
      //   close the Swarm process properly. Returns a promise that resolves when the
      //   user is done with the API and the Swarm process is closed.
      //   TODO: check if Swarm process is already running (improve `isAvailable`)


      var local = function local(swarmSetup) {
        return function (useAPI) {
          return _isAvailable("http://localhost:8500").then(function (isAvailable) {
            return isAvailable ? useAPI(at("http://localhost:8500")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {
              return (swarmSetup.onProgress || function () {})(data.length);
            }).then(function () {
              return startProcess(swarmSetup);
            }).then(function (process) {
              return useAPI(at("http://localhost:8500")).then(function () {
                return process;
              });
            }).then(stopProcess);
          });
        };
      }; // String ~> Promise Bool
      //   Returns true if Swarm is available on `url`.
      //   Perfoms a test upload to determine that.
      //   TODO: improve this?


      var _isAvailable = function isAvailable(swarmUrl) {
        var testFile = "test";
        var testHash = "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7";
        return uploadData(swarmUrl)(testFile).then(function (hash) {
          return hash === testHash;
        })["catch"](function () {
          return false;
        });
      }; // String -> String ~> Promise Bool
      //   Returns a Promise which is true if that Swarm address is a directory.
      //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.
      //   TODO: improve this?


      var isDirectory = function isDirectory(swarmUrl) {
        return function (hash) {
          return downloadData(swarmUrl)(hash).then(function (data) {
            try {
              return !!JSON.parse(toString(data)).entries;
            } catch (e) {
              return false;
            }
          });
        };
      }; // Uncurries a function; used to allow the f(x,y,z) style on exports.


      var uncurry = function uncurry(f) {
        return function (a, b, c, d, e) {
          var p; // Hardcoded because efficiency (`arguments` is very slow).

          if (typeof a !== "undefined") p = f(a);
          if (typeof b !== "undefined") p = f(b);
          if (typeof c !== "undefined") p = f(c);
          if (typeof d !== "undefined") p = f(d);
          if (typeof e !== "undefined") p = f(e);
          return p;
        };
      }; // () -> Promise Bool


      var toString = function toString(uint8Array) {
        return bytes.toString(bytes.fromUint8Array(uint8Array));
      }; // String -> Uint8Array


      var fromString = function fromString(string) {
        return bytes.toUint8Array(bytes.fromString(string));
      }; // String -> SwarmAPI
      //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.


      var at = function at(swarmUrl) {
        return {
          download: function download(hash, path) {
            return _download(swarmUrl)(hash)(path);
          },
          downloadData: uncurry(downloadData(swarmUrl)),
          downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),
          downloadDirectory: uncurry(downloadDirectory(swarmUrl)),
          downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),
          downloadEntries: uncurry(downloadEntries(swarmUrl)),
          downloadRoutes: uncurry(downloadRoutes(swarmUrl)),
          isAvailable: function isAvailable() {
            return _isAvailable(swarmUrl);
          },
          upload: function upload(arg) {
            return _upload(swarmUrl)(arg);
          },
          uploadData: uncurry(uploadData(swarmUrl)),
          uploadFile: uncurry(uploadFile(swarmUrl)),
          uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),
          uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),
          uploadDirectory: uncurry(uploadDirectory(swarmUrl)),
          uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),
          uploadToManifest: uncurry(uploadToManifest(swarmUrl)),
          pick: pick,
          hash: hash,
          fromString: fromString,
          toString: toString
        };
      };

      return {
        at: at,
        local: local,
        download: _download,
        downloadBinary: downloadBinary,
        downloadData: downloadData,
        downloadDataToDisk: downloadDataToDisk,
        downloadDirectory: downloadDirectory,
        downloadDirectoryToDisk: downloadDirectoryToDisk,
        downloadEntries: downloadEntries,
        downloadRoutes: downloadRoutes,
        isAvailable: _isAvailable,
        startProcess: startProcess,
        stopProcess: stopProcess,
        upload: _upload,
        uploadData: uploadData,
        uploadDataFromDisk: uploadDataFromDisk,
        uploadFile: uploadFile,
        uploadFileFromDisk: uploadFileFromDisk,
        uploadDirectory: uploadDirectory,
        uploadDirectoryFromDisk: uploadDirectoryFromDisk,
        uploadToManifest: uploadToManifest,
        pick: pick,
        hash: hash,
        fromString: fromString,
        toString: toString
      };
    };

    var unavailable = function unavailable() {
      throw "This swarm.js function isn't available on the browser.";
    };

    var fs = {
      readFile: unavailable
    };
    var files$1 = {
      download: unavailable,
      safeDownloadArchived: unavailable,
      directoryTree: unavailable
    };
    var os$1 = {
      platform: unavailable,
      arch: unavailable
    };
    var path$2 = {
      join: unavailable,
      slice: unavailable
    };
    var child_process = {
      spawn: unavailable
    };
    var mimetype$1 = {
      lookup: unavailable
    };
    var defaultArchives = {};
    var downloadUrl = null;











    var apiBrowser = swarm({
      fs: fs,
      files: files$1,
      os: os$1,
      path: path$2,
      child_process: child_process,
      defaultArchives: defaultArchives,
      mimetype: mimetype$1,
      request: xhrRequest_1,
      downloadUrl: downloadUrl,
      bytes: bytes$2,
      hash: swarmHash_1,
      pick: pick
    });

    var Bzz = function Bzz(provider) {
        this.givenProvider = Bzz.givenProvider;
        if (provider && provider._requestManager) {
            provider = provider.currentProvider;
        }
        // only allow file picker when in browser
        if (typeof document !== 'undefined') {
            this.pick = apiBrowser.pick;
        }
        this.setProvider(provider);
    };
    // set default ethereum provider
    /* jshint ignore:start */
    Bzz.givenProvider = null;
    if (typeof ethereum !== 'undefined' && ethereum.bzz) {
        Bzz.givenProvider = ethereum.bzz;
    }
    /* jshint ignore:end */
    Bzz.prototype.setProvider = function (provider) {
        // is ethereum provider
        if (underscore.isObject(provider) && underscore.isString(provider.bzz)) {
            provider = provider.bzz;
            // is no string, set default
        }
        // else if(!_.isString(provider)) {
        //      provider = 'http://swarm-gateways.net'; // default to gateway
        // }
        if (underscore.isString(provider)) {
            this.currentProvider = provider;
        }
        else {
            this.currentProvider = null;
            var noProviderError = new Error('No provider set, please set one using bzz.setProvider().');
            this.download = this.upload = this.isAvailable = function () {
                throw noProviderError;
            };
            return false;
        }
        // add functions
        this.download = apiBrowser.at(provider).download;
        this.upload = apiBrowser.at(provider).upload;
        this.isAvailable = apiBrowser.at(provider).isAvailable;
        return true;
    };
    var lib$m = Bzz;

    var require$$0$5 = getCjsExportFromNamespace(_package$1);

    var version$g = require$$0$5.version;







    var Web3 = function Web3() {
        var _this = this;
        // sets _requestmanager etc
        lib$b.packageInit(this, arguments);
        this.version = version$g;
        this.utils = lib$1;
        this.eth = new lib$k(this);
        this.shh = new lib$l(this);
        this.bzz = new lib$m(this);
        // overwrite package setProvider
        var setProvider = this.setProvider;
        this.setProvider = function (provider, net) {
            /*jshint unused: false */
            setProvider.apply(_this, arguments);
            _this.eth.setRequestManager(_this._requestManager);
            _this.shh.setRequestManager(_this._requestManager);
            _this.bzz.setProvider(provider);
            return true;
        };
    };
    Web3.version = version$g;
    Web3.utils = lib$1;
    Web3.modules = {
        Eth: lib$k,
        Net: lib$c,
        Personal: lib$g,
        Shh: lib$l,
        Bzz: lib$m
    };
    lib$b.addProviders(Web3);
    var lib$n = Web3;

    let web3;

    if(typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {
        // We are on the browser and metamask is running.
        web3 = new lib$n(window.web3.currentProvider);
    } else {
        //We are on the server *OR* the user is not running metamask
        const provider = new lib$n.providers.HttpProvider(
            'https://rinkeby.infura.io/v3/820016ca8d424b44b0963749e303bd1c'
        );
        web3 = new lib$n(provider);
    }

    var web3$1 = web3;

    var contractName = "InteractiveNFT";
    var abi = [
    	{
    		inputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "constructor"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "approved",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "Approval",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "bool",
    				name: "approved",
    				type: "bool"
    			}
    		],
    		name: "ApprovalForAll",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "previousOwner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "newOwner",
    				type: "address"
    			}
    		],
    		name: "OwnershipTransferred",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "Transfer",
    		type: "event"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "approve",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			}
    		],
    		name: "balanceOf",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    		],
    		name: "baseURI",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "getApproved",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			}
    		],
    		name: "isApprovedForAll",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    		],
    		name: "name",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    		],
    		name: "owner",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "ownerOf",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    		],
    		name: "renounceOwnership",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "safeTransferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			},
    			{
    				internalType: "bytes",
    				name: "_data",
    				type: "bytes"
    			}
    		],
    		name: "safeTransferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			},
    			{
    				internalType: "bool",
    				name: "approved",
    				type: "bool"
    			}
    		],
    		name: "setApprovalForAll",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "bytes4",
    				name: "interfaceId",
    				type: "bytes4"
    			}
    		],
    		name: "supportsInterface",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    		],
    		name: "symbol",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "index",
    				type: "uint256"
    			}
    		],
    		name: "tokenByIndex",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "index",
    				type: "uint256"
    			}
    		],
    		name: "tokenOfOwnerByIndex",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "tokenURI",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    		],
    		name: "totalSupply",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function",
    		constant: true
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "transferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "newOwner",
    				type: "address"
    			}
    		],
    		name: "transferOwnership",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "_to",
    				type: "address"
    			},
    			{
    				internalType: "string",
    				name: "_tokenURI",
    				type: "string"
    			}
    		],
    		name: "mint",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "_tokenURI",
    				type: "string"
    			}
    		],
    		name: "mint",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	}
    ];
    var metadata = "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/hydr063n/dev/interactive-nfts/ethereum/contracts/InteractiveNFT.sol\":\"InteractiveNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/hydr063n/dev/interactive-nfts/ethereum/contracts/InteractiveNFT.sol\":{\"keccak256\":\"0x01016781c35c159e5f93e1c66b1a879c366c2ca0690a65638aab3840ad4d0ebe\",\"urls\":[\"bzz-raw://e89f73d88b68a0dccd0dd537448690a9d0d9b6355a6aca7ce792cabcf16daf9f\",\"dweb:/ipfs/QmQuNKhUggKrQyEh9ZuDbFvdHL7iizUfq64PS2SPk3n4DU\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"urls\":[\"bzz-raw://840b14ce0315c47d49ba328f1f9fa7654ded1c9e1559e6c5e777a7b2dc28bf0a\",\"dweb:/ipfs/QmTLLabn4wcfGro9LEmUXUN2nwKqZSotXMvjDCLXEnLtZP\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"urls\":[\"bzz-raw://8f9f711fb8d0d92aeea1c327e3845d13ca1fa8f142e47f8723cd5b3106fb29a3\",\"dweb:/ipfs/QmVQUReDW9f4zGqhizwHnyU8EntMs95tbASdqkGncnikba\"]},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xb046d18f9d09683ca1c0ed6d80c61da8a8a7d9b30bad70a17b898538683eff74\",\"urls\":[\"bzz-raw://4728713afa6ae36cc9e92c7107c796a313add3ec20f813be2cde76c814486b2a\",\"dweb:/ipfs/QmUJBTXvYaGDF5PVnd5pUvYerc9DRXvqANDzgCzAp3FkkA\"]},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\",\"urls\":[\"bzz-raw://5127b264994adab88fae419b1c493efc5acd07134c19ee5c0397e50018291ebf\",\"dweb:/ipfs/QmWwJZVhvdmvUCdimbb6R2Jiu59zjPqm6XTMchM6LaEHAp\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xfc398838759c3248bdca40f7bc060e789c8d715df22f9eee7494bcafe14fa1b8\",\"urls\":[\"bzz-raw://ca2e28a5681be0558b2de6a24c107299925f8bd9e3244e9a70b033d6eab782c8\",\"dweb:/ipfs/QmX5kRT4Gwq4GQYfEdxVsE7PALpGfQEuQJhsfpCap9inKm\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xaf936da92f3a9a4f98b237323b5eb1d813fb86c4d07a184beba7027cf0509ba3\",\"urls\":[\"bzz-raw://aaa210e132e06975eb9f20060db6ba7dee78f6fce691a1c2489525584de521c0\",\"dweb:/ipfs/QmRwzi4nUW3UWBwhY5ik2xW3JZo9NMLN5UyGi1xPpMQYrh\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x3636662804cd8f474536b2875a9038a4c3fb91879f1bbff48af5c3f140fcd2f0\",\"urls\":[\"bzz-raw://9fab8521263fa581544000cb57335a3f2e6bcdfbb5579d3ceaa5acf741c67c4f\",\"dweb:/ipfs/QmZfXnMom7JSNtfyie5yGPN1SUC4SmHbz4ScVBH88URmA7\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xe7f984cedc00a138dc27f263c73c32ba9a4b2fd23b6c34ac46f46c074b943538\",\"urls\":[\"bzz-raw://0f4acda12f076fe7584921241ddbb5b460ca7cad6cb8a42252ac7f2a9f539127\",\"dweb:/ipfs/QmQmfhkEv9GrhdWe67QtXnU19AMuoEmy31QnHPkucdYLjZ\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x321ee37ef4925020aa818a03ec7fe48e057561f65ab009a84f6c20c86026ade7\",\"urls\":[\"bzz-raw://01f9d74a17a56024984251b97e428e24c9d3abffbae5bd290f0ec263c82e9694\",\"dweb:/ipfs/QmRryCuuXu2ukrDmatB8TqdEhPLiK6NBRt41RiPUaX1qKy\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"urls\":[\"bzz-raw://774e78a9ff32792cc95db4d2ceaf3a7965bb7f0bea5e6cb7cff182b450d44b37\",\"dweb:/ipfs/QmRRMC4uj7eAcLW7chynA3sNEYULMFazdLwQHKHQPyzAbA\"]},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"keccak256\":\"0x244e4b74b17716120cf28e58636f11c699b8c0c94628bd952a95cee038d7e32b\",\"urls\":[\"bzz-raw://198d566157120c526bd6b5086b32cae85a11389b8a538f533ba9f9447915da0e\",\"dweb:/ipfs/QmeE6d8KWERx7f1FVS5tMnitNJxBm2yWXRSEUBF7R6voLh\"]},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"urls\":[\"bzz-raw://8651649cf0b9efa18c3b01c030276fa320d41adbdc286833417e7f36e357b2f3\",\"dweb:/ipfs/QmafhM2Nd1aP43QVB1eRRZaqRXQKswNfQcWi8U8xjrxCfN\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x79484115dbfa737054f73e041009a02eeb434dd81be5d684bf4255ad3b5ab558\",\"urls\":[\"bzz-raw://12c119699463450c2544f5b9d8709b5e9e9164c62948a79c3ec53423a051d969\",\"dweb:/ipfs/QmPJduzSAaekq447QeFqAp3E7dc8CnNk5ajofckJ4ahA7Q\"]}},\"version\":1}";
    var bytecode = "0x60806040523480156200001157600080fd5b506040518060400160405280600e81526020017f496e7465726163746976654e46540000000000000000000000000000000000008152506040518060400160405280600481526020017f494e465400000000000000000000000000000000000000000000000000000000815250600062000090620001c860201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620001466301ffc9a760e01b620001d060201b60201c565b81600790805190602001906200015e929190620002d9565b50806008908051906020019062000177929190620002d9565b50620001906380ac58cd60e01b620001d060201b60201c565b620001a8635b5e139f60e01b620001d060201b60201c565b620001c063780e9d6360e01b620001d060201b60201c565b505062000388565b600033905090565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156200026d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200031c57805160ff19168380011785556200034d565b828001600101855582156200034d579182015b828111156200034c5782518255916020019190600101906200032f565b5b5090506200035c919062000360565b5090565b6200038591905b808211156200038157600081600090555060010162000367565b5090565b90565b61317080620003986000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063b88d4fde1161007c578063b88d4fde146106f9578063c87b56dd146107fe578063d0def521146108a5578063d85d3d271461093e578063e985e9c5146109b7578063f2fde38b14610a3357610142565b806370a082311461057a578063715018a6146105d25780638da5cb5b146105dc57806395d89b4114610626578063a22cb465146106a957610142565b806323b872dd1161010a57806323b872dd146103095780632f745c591461037757806342842e0e146103d95780634f6ccce7146104475780636352211e146104895780636c0360eb146104f757610142565b806301ffc9a71461014757806306fdde03146101ac578063081812fc1461022f578063095ea7b31461029d57806318160ddd146102eb575b600080fd5b6101926004803603602081101561015d57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610a77565b604051808215151515815260200191505060405180910390f35b6101b4610adf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f45780820151818401526020810190506101d9565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61025b6004803603602081101561024557600080fd5b8101908080359060200190929190505050610b81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102e9600480360360408110156102b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c1c565b005b6102f3610d60565b6040518082815260200191505060405180910390f35b6103756004803603606081101561031f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d71565b005b6103c36004803603604081101561038d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de7565b6040518082815260200191505060405180910390f35b610445600480360360608110156103ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e42565b005b6104736004803603602081101561045d57600080fd5b8101908080359060200190929190505050610e62565b6040518082815260200191505060405180910390f35b6104b56004803603602081101561049f57600080fd5b8101908080359060200190929190505050610e85565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104ff610ebc565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561053f578082015181840152602081019050610524565b50505050905090810190601f16801561056c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105bc6004803603602081101561059057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5e565b6040518082815260200191505060405180910390f35b6105da611033565b005b6105e46111bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61062e6111e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066e578082015181840152602081019050610653565b50505050905090810190601f16801561069b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106f7600480360360408110156106bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611286565b005b6107fc6004803603608081101561070f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561077657600080fd5b82018360208201111561078857600080fd5b803590602001918460018302840111640100000000831117156107aa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061143e565b005b61082a6004803603602081101561081457600080fd5b81019080803590602001909291905050506114b6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561086a57808201518184015260208101905061084f565b50505050905090810190601f1680156108975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61093c600480360360408110156108bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156108f857600080fd5b82018360208201111561090a57600080fd5b8035906020019184600183028401116401000000008311171561092c57600080fd5b909192939192939050505061179f565b005b6109b56004803603602081101561095457600080fd5b810190808035906020019064010000000081111561097157600080fd5b82018360208201111561098357600080fd5b803590602001918460018302840111640100000000831117156109a557600080fd5b9091929391929390505050611809565b005b610a19600480360360408110156109cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611879565b604051808215151515815260200191505060405180910390f35b610a7560048036036020811015610a4957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061190d565b005b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b775780601f10610b4c57610100808354040283529160200191610b77565b820191906000526020600020905b815481529060010190602001808311610b5a57829003601f168201915b5050505050905090565b6000610b8c82611b1a565b610be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613039602c913960400191505060405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c2782610e85565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806130e96021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ccd611b37565b73ffffffffffffffffffffffffffffffffffffffff161480610cfc5750610cfb81610cf6611b37565b611879565b5b610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180612f8c6038913960400191505060405180910390fd5b610d5b8383611b3f565b505050565b6000610d6c6003611bf8565b905090565b610d82610d7c611b37565b82611c0d565b610dd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061310a6031913960400191505060405180910390fd5b610de2838383611d01565b505050565b6000610e3a82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f4490919063ffffffff16565b905092915050565b610e5d8383836040518060200160405280600081525061143e565b505050565b600080610e79836003611f5e90919063ffffffff16565b50905080915050919050565b6000610eb582604051806060016040528060298152602001612fee602991396003611f8d9092919063ffffffff16565b9050919050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f545780601f10610f2957610100808354040283529160200191610f54565b820191906000526020600020905b815481529060010190602001808311610f3757829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612fc4602a913960400191505060405180910390fd5b61102c600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611fac565b9050919050565b61103b611b37565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561127c5780601f106112515761010080835404028352916020019161127c565b820191906000526020600020905b81548152906001019060200180831161125f57829003601f168201915b5050505050905090565b61128e611b37565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561132f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b806006600061133c611b37565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166113e9611b37565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b61144f611449611b37565b83611c0d565b6114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061310a6031913960400191505060405180910390fd5b6114b084848484611fc1565b50505050565b60606114c182611b1a565b611516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806130ba602f913960400191505060405180910390fd5b6060600960008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115bf5780601f10611594576101008083540402835291602001916115bf565b820191906000526020600020905b8154815290600101906020018083116115a257829003601f168201915b505050505090506000600a80546001816001161561010002031660029004905014156115ee578091505061179a565b6000815111156116c757600a8160405160200180838054600181600116156101000203166002900480156116595780601f10611637576101008083540402835291820191611659565b820191906000526020600020905b815481529060010190602001808311611645575b505082805190602001908083835b6020831061168a5780518252602082019150602081019050602083039250611667565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061179a565b600a6116d284612033565b60405160200180838054600181600116156101000203166002900480156117305780601f1061170e576101008083540402835291820191611730565b820191906000526020600020905b81548152906001019060200180831161171c575b505082805190602001908083835b60208310611761578051825260208201915060208101905060208303925061173e565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150505b919050565b60006117a9610d60565b90506117b58482612163565b6118038184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612181565b50505050565b6000611813610d60565b9050611826611820611b37565b82612163565b6118748184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612181565b505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611915611b37565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612f166026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611b3082600361220b90919063ffffffff16565b9050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611bb283610e85565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c0682600001612225565b9050919050565b6000611c1882611b1a565b611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612f60602c913960400191505060405180910390fd5b6000611c7883610e85565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ce757508373ffffffffffffffffffffffffffffffffffffffff16611ccf84610b81565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cf85750611cf78185611879565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d2182610e85565b73ffffffffffffffffffffffffffffffffffffffff1614611d8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806130916029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612f3c6024913960400191505060405180910390fd5b611e1e838383612236565b611e29600082611b3f565b611e7a81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061223b90919063ffffffff16565b50611ecc81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061225590919063ffffffff16565b50611ee38183600361226f9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000611f5383600001836122a4565b60001c905092915050565b600080600080611f718660000186612327565b915091508160001c8160001c8090509350935050509250929050565b6000611fa0846000018460001b846123c0565b60001c90509392505050565b6000611fba826000016124b6565b9050919050565b611fcc848484611d01565b611fd8848484846124c7565b61202d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180612ee46032913960400191505060405180910390fd5b50505050565b6060600082141561207b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061215e565b600082905060005b600082146120a5578080600101915050600a828161209d57fe5b049150612083565b6060816040519080825280601f01601f1916602001820160405280156120da5781602001600182028038833980820191505090505b50905060006001830390508593505b6000841461215657600a84816120fb57fe5b0660300160f81b8282806001900393508151811061211557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161214e57fe5b0493506120e9565b819450505050505b919050565b61217d82826040518060200160405280600081525061270c565b5050565b61218a82611b1a565b6121df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613065602c913960400191505060405180910390fd5b80600960008481526020019081526020016000209080519060200190612206929190612e1c565b505050565b600061221d836000018360001b61277d565b905092915050565b600081600001805490509050919050565b505050565b600061224d836000018360001b6127a0565b905092915050565b6000612267836000018360001b612888565b905092915050565b600061229b846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b6128f8565b90509392505050565b600081836000018054905011612305576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612ec26022913960400191505060405180910390fd5b82600001828154811061231457fe5b9060005260206000200154905092915050565b60008082846000018054905011612389576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806130176022913960400191505060405180910390fd5b600084600001848154811061239a57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390612487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561244c578082015181840152602081019050612431565b50505050905090810190601f1680156124795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061249a57fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006124e88473ffffffffffffffffffffffffffffffffffffffff166129d4565b6124f55760019050612704565b606061268b63150b7a0260e01b61250a611b37565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156125ba57808201518184015260208101905061259f565b50505050905090810190601f1680156125e75780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001612ee4603291398773ffffffffffffffffffffffffffffffffffffffff166129e79092919063ffffffff16565b905060008180602001905160208110156126a457600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b61271683836129ff565b61272360008484846124c7565b612778576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180612ee46032913960400191505060405180910390fd5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461287c57600060018203905060006001866000018054905003905060008660000182815481106127eb57fe5b906000526020600020015490508087600001848154811061280857fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061284057fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612882565b60009150505b92915050565b60006128948383612bf3565b6128ed5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506128f2565b600090505b92915050565b600080846001016000858152602001908152602001600020549050600081141561299f578460000160405180604001604052808681526020018581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505084600001805490508560010160008681526020019081526020016000208190555060019150506129cd565b828560000160018303815481106129b257fe5b90600052602060002090600202016001018190555060009150505b9392505050565b600080823b905060008111915050919050565b60606129f68484600085612c16565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612aa2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612aab81611b1a565b15612b1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b612b2a60008383612236565b612b7b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061225590919063ffffffff16565b50612b928183600361226f9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080836001016000848152602001908152602001600020541415905092915050565b6060612c21856129d4565b612c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612ce35780518252602082019150602081019050602083039250612cc0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612d45576040519150601f19603f3d011682016040523d82523d6000602084013e612d4a565b606091505b50915091508115612d5f578092505050612e14565b600081511115612d725780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dd9578082015181840152602081019050612dbe565b50505050905090810190601f168015612e065780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e5d57805160ff1916838001178555612e8b565b82800160010185558215612e8b579182015b82811115612e8a578251825591602001919060010190612e6f565b5b509050612e989190612e9c565b5090565b612ebe91905b80821115612eba576000816000905550600101612ea2565b5090565b9056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220416728cc0d4c7d95407ef302c2d367fe23706423402b21d60b1ea96bbcfa665f64736f6c63430006020033";
    var deployedBytecode = "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063b88d4fde1161007c578063b88d4fde146106f9578063c87b56dd146107fe578063d0def521146108a5578063d85d3d271461093e578063e985e9c5146109b7578063f2fde38b14610a3357610142565b806370a082311461057a578063715018a6146105d25780638da5cb5b146105dc57806395d89b4114610626578063a22cb465146106a957610142565b806323b872dd1161010a57806323b872dd146103095780632f745c591461037757806342842e0e146103d95780634f6ccce7146104475780636352211e146104895780636c0360eb146104f757610142565b806301ffc9a71461014757806306fdde03146101ac578063081812fc1461022f578063095ea7b31461029d57806318160ddd146102eb575b600080fd5b6101926004803603602081101561015d57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610a77565b604051808215151515815260200191505060405180910390f35b6101b4610adf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f45780820151818401526020810190506101d9565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61025b6004803603602081101561024557600080fd5b8101908080359060200190929190505050610b81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102e9600480360360408110156102b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c1c565b005b6102f3610d60565b6040518082815260200191505060405180910390f35b6103756004803603606081101561031f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d71565b005b6103c36004803603604081101561038d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de7565b6040518082815260200191505060405180910390f35b610445600480360360608110156103ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e42565b005b6104736004803603602081101561045d57600080fd5b8101908080359060200190929190505050610e62565b6040518082815260200191505060405180910390f35b6104b56004803603602081101561049f57600080fd5b8101908080359060200190929190505050610e85565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104ff610ebc565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561053f578082015181840152602081019050610524565b50505050905090810190601f16801561056c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105bc6004803603602081101561059057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5e565b6040518082815260200191505060405180910390f35b6105da611033565b005b6105e46111bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61062e6111e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066e578082015181840152602081019050610653565b50505050905090810190601f16801561069b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106f7600480360360408110156106bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611286565b005b6107fc6004803603608081101561070f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561077657600080fd5b82018360208201111561078857600080fd5b803590602001918460018302840111640100000000831117156107aa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061143e565b005b61082a6004803603602081101561081457600080fd5b81019080803590602001909291905050506114b6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561086a57808201518184015260208101905061084f565b50505050905090810190601f1680156108975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61093c600480360360408110156108bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156108f857600080fd5b82018360208201111561090a57600080fd5b8035906020019184600183028401116401000000008311171561092c57600080fd5b909192939192939050505061179f565b005b6109b56004803603602081101561095457600080fd5b810190808035906020019064010000000081111561097157600080fd5b82018360208201111561098357600080fd5b803590602001918460018302840111640100000000831117156109a557600080fd5b9091929391929390505050611809565b005b610a19600480360360408110156109cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611879565b604051808215151515815260200191505060405180910390f35b610a7560048036036020811015610a4957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061190d565b005b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b775780601f10610b4c57610100808354040283529160200191610b77565b820191906000526020600020905b815481529060010190602001808311610b5a57829003601f168201915b5050505050905090565b6000610b8c82611b1a565b610be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613039602c913960400191505060405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c2782610e85565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806130e96021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ccd611b37565b73ffffffffffffffffffffffffffffffffffffffff161480610cfc5750610cfb81610cf6611b37565b611879565b5b610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180612f8c6038913960400191505060405180910390fd5b610d5b8383611b3f565b505050565b6000610d6c6003611bf8565b905090565b610d82610d7c611b37565b82611c0d565b610dd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061310a6031913960400191505060405180910390fd5b610de2838383611d01565b505050565b6000610e3a82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f4490919063ffffffff16565b905092915050565b610e5d8383836040518060200160405280600081525061143e565b505050565b600080610e79836003611f5e90919063ffffffff16565b50905080915050919050565b6000610eb582604051806060016040528060298152602001612fee602991396003611f8d9092919063ffffffff16565b9050919050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f545780601f10610f2957610100808354040283529160200191610f54565b820191906000526020600020905b815481529060010190602001808311610f3757829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612fc4602a913960400191505060405180910390fd5b61102c600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611fac565b9050919050565b61103b611b37565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561127c5780601f106112515761010080835404028352916020019161127c565b820191906000526020600020905b81548152906001019060200180831161125f57829003601f168201915b5050505050905090565b61128e611b37565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561132f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b806006600061133c611b37565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166113e9611b37565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b61144f611449611b37565b83611c0d565b6114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061310a6031913960400191505060405180910390fd5b6114b084848484611fc1565b50505050565b60606114c182611b1a565b611516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806130ba602f913960400191505060405180910390fd5b6060600960008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115bf5780601f10611594576101008083540402835291602001916115bf565b820191906000526020600020905b8154815290600101906020018083116115a257829003601f168201915b505050505090506000600a80546001816001161561010002031660029004905014156115ee578091505061179a565b6000815111156116c757600a8160405160200180838054600181600116156101000203166002900480156116595780601f10611637576101008083540402835291820191611659565b820191906000526020600020905b815481529060010190602001808311611645575b505082805190602001908083835b6020831061168a5780518252602082019150602081019050602083039250611667565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505061179a565b600a6116d284612033565b60405160200180838054600181600116156101000203166002900480156117305780601f1061170e576101008083540402835291820191611730565b820191906000526020600020905b81548152906001019060200180831161171c575b505082805190602001908083835b60208310611761578051825260208201915060208101905060208303925061173e565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150505b919050565b60006117a9610d60565b90506117b58482612163565b6118038184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612181565b50505050565b6000611813610d60565b9050611826611820611b37565b82612163565b6118748184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612181565b505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611915611b37565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612f166026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611b3082600361220b90919063ffffffff16565b9050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611bb283610e85565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c0682600001612225565b9050919050565b6000611c1882611b1a565b611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612f60602c913960400191505060405180910390fd5b6000611c7883610e85565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ce757508373ffffffffffffffffffffffffffffffffffffffff16611ccf84610b81565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cf85750611cf78185611879565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d2182610e85565b73ffffffffffffffffffffffffffffffffffffffff1614611d8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806130916029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612f3c6024913960400191505060405180910390fd5b611e1e838383612236565b611e29600082611b3f565b611e7a81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061223b90919063ffffffff16565b50611ecc81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061225590919063ffffffff16565b50611ee38183600361226f9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000611f5383600001836122a4565b60001c905092915050565b600080600080611f718660000186612327565b915091508160001c8160001c8090509350935050509250929050565b6000611fa0846000018460001b846123c0565b60001c90509392505050565b6000611fba826000016124b6565b9050919050565b611fcc848484611d01565b611fd8848484846124c7565b61202d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180612ee46032913960400191505060405180910390fd5b50505050565b6060600082141561207b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061215e565b600082905060005b600082146120a5578080600101915050600a828161209d57fe5b049150612083565b6060816040519080825280601f01601f1916602001820160405280156120da5781602001600182028038833980820191505090505b50905060006001830390508593505b6000841461215657600a84816120fb57fe5b0660300160f81b8282806001900393508151811061211557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161214e57fe5b0493506120e9565b819450505050505b919050565b61217d82826040518060200160405280600081525061270c565b5050565b61218a82611b1a565b6121df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613065602c913960400191505060405180910390fd5b80600960008481526020019081526020016000209080519060200190612206929190612e1c565b505050565b600061221d836000018360001b61277d565b905092915050565b600081600001805490509050919050565b505050565b600061224d836000018360001b6127a0565b905092915050565b6000612267836000018360001b612888565b905092915050565b600061229b846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b6128f8565b90509392505050565b600081836000018054905011612305576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612ec26022913960400191505060405180910390fd5b82600001828154811061231457fe5b9060005260206000200154905092915050565b60008082846000018054905011612389576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806130176022913960400191505060405180910390fd5b600084600001848154811061239a57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390612487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561244c578082015181840152602081019050612431565b50505050905090810190601f1680156124795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061249a57fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006124e88473ffffffffffffffffffffffffffffffffffffffff166129d4565b6124f55760019050612704565b606061268b63150b7a0260e01b61250a611b37565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156125ba57808201518184015260208101905061259f565b50505050905090810190601f1680156125e75780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001612ee4603291398773ffffffffffffffffffffffffffffffffffffffff166129e79092919063ffffffff16565b905060008180602001905160208110156126a457600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b61271683836129ff565b61272360008484846124c7565b612778576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180612ee46032913960400191505060405180910390fd5b505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461287c57600060018203905060006001866000018054905003905060008660000182815481106127eb57fe5b906000526020600020015490508087600001848154811061280857fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061284057fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612882565b60009150505b92915050565b60006128948383612bf3565b6128ed5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506128f2565b600090505b92915050565b600080846001016000858152602001908152602001600020549050600081141561299f578460000160405180604001604052808681526020018581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505084600001805490508560010160008681526020019081526020016000208190555060019150506129cd565b828560000160018303815481106129b257fe5b90600052602060002090600202016001018190555060009150505b9392505050565b600080823b905060008111915050919050565b60606129f68484600085612c16565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612aa2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612aab81611b1a565b15612b1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b612b2a60008383612236565b612b7b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061225590919063ffffffff16565b50612b928183600361226f9092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080836001016000848152602001908152602001600020541415905092915050565b6060612c21856129d4565b612c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612ce35780518252602082019150602081019050602083039250612cc0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612d45576040519150601f19603f3d011682016040523d82523d6000602084013e612d4a565b606091505b50915091508115612d5f578092505050612e14565b600081511115612d725780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dd9578082015181840152602081019050612dbe565b50505050905090810190601f168015612e065780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e5d57805160ff1916838001178555612e8b565b82800160010185558215612e8b579182015b82811115612e8a578251825591602001919060010190612e6f565b5b509050612e989190612e9c565b5090565b612ebe91905b80821115612eba576000816000905550600101612ea2565b5090565b9056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220416728cc0d4c7d95407ef302c2d367fe23706423402b21d60b1ea96bbcfa665f64736f6c63430006020033";
    var sourceMap = "170:481:0:-:0;;;219:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;219:56:0;3567:365:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;865:17:2;885:12;:10;;;:12;;:::i;:::-;865:32;;916:9;907:6;;:18;;;;;;;;;;;;;;;;;;973:9;940:43;;969:1;940:43;;;;;;;;;;;;831:159;751:40:3;418:10;770:20;;751:18;;;:40;;:::i;:::-;3647:4:6;3639:5;:12;;;;;;;;;;;;:::i;:::-;;3671:6;3661:7;:16;;;;;;;;;;;;:::i;:::-;;3765:40;2732:10;3784:20;;3765:18;;;:40;;:::i;:::-;3815:49;3064:10;3834:29;;3815:18;;;:49;;:::i;:::-;3874:51;3437:10;3893:31;;3874:18;;;:51;;:::i;:::-;3567:365;;170:481:0;;590:104:1;643:15;677:10;670:17;;590:104;:::o;1482:198:3:-;1580:10;1565:25;;:11;:25;;;;;1557:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1669:4;1633:20;:33;1654:11;1633:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1482:198;:::o;170:481:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;";
    var deployedSourceMap = "170:481:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;170:481:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;948:140:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;948:140:3;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4488:90:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4488:90:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7095:209;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7095:209:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6653:381;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6653:381:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6163:200;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7943:300;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7943:300:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5940:152;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5940:152:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8309:149;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8309:149:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6435:161;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6435:161:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4259:167;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4259:167:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5774:87;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5774:87:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3991:211;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3991:211:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1689:145:2;;;:::i;:::-;;1066:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4642:94:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4642:94:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7371:290;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7371:290:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8524:282;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;8524:282:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8524:282:6;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8524:282:6;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8524:282:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8524:282:6;;;;;;;;;;;;;;;:::i;:::-;;4802:740;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4802:740:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4802:740:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;281:183:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;281:183:0;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;281:183:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;281:183:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;281:183:0;;;;;;;;;;;;:::i;:::-;;470:179;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;470:179:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;470:179:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;470:179:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;470:179:0;;;;;;;;;;;;:::i;:::-;;7727:154:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7727:154:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1983:240:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1983:240:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;948:140:3;1025:4;1048:20;:33;1069:11;1048:33;;;;;;;;;;;;;;;;;;;;;;;;;;;1041:40;;948:140;;;:::o;4488:90:6:-;4534:13;4566:5;4559:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4488:90;:::o;7095:209::-;7163:7;7190:16;7198:7;7190;:16::i;:::-;7182:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7273:15;:24;7289:7;7273:24;;;;;;;;;;;;;;;;;;;;;7266:31;;7095:209;;;:::o;6653:381::-;6733:13;6749:16;6757:7;6749;:16::i;:::-;6733:32;;6789:5;6783:11;;:2;:11;;;;6775:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6867:5;6851:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;6876:37;6893:5;6900:12;:10;:12::i;:::-;6876:16;:37::i;:::-;6851:62;6843:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7006:21;7015:2;7019:7;7006:8;:21::i;:::-;6653:381;;;:::o;6163:200::-;6216:7;6335:21;:12;:19;:21::i;:::-;6328:28;;6163:200;:::o;7943:300::-;8102:41;8121:12;:10;:12::i;:::-;8135:7;8102:18;:41::i;:::-;8094:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8208:28;8218:4;8224:2;8228:7;8208:9;:28::i;:::-;7943:300;;;:::o;5940:152::-;6029:7;6055:30;6079:5;6055:13;:20;6069:5;6055:20;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;6048:37;;5940:152;;;;:::o;8309:149::-;8412:39;8429:4;8435:2;8439:7;8412:39;;;;;;;;;;;;:16;:39::i;:::-;8309:149;;;:::o;6435:161::-;6502:7;6522:15;6543:22;6559:5;6543:12;:15;;:22;;;;:::i;:::-;6521:44;;;6582:7;6575:14;;;6435:161;;;:::o;4259:167::-;4323:7;4349:70;4366:7;4349:70;;;;;;;;;;;;;;;;;:12;:16;;:70;;;;;:::i;:::-;4342:77;;4259:167;;;:::o;5774:87::-;5814:13;5846:8;5839:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5774:87;:::o;3991:211::-;4055:7;4099:1;4082:19;;:5;:19;;;;4074:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4166:29;:13;:20;4180:5;4166:20;;;;;;;;;;;;;;;:27;:29::i;:::-;4159:36;;3991:211;;;:::o;1689:145:2:-;1280:12;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1795:1:::1;1758:40;;1779:6;::::0;::::1;;;;;;;;;1758:40;;;;;;;;;;;;1825:1;1808:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1689:145::o:0;1066:77::-;1104:7;1130:6;;;;;;;;;;;1123:13;;1066:77;:::o;4642:94:6:-;4690:13;4722:7;4715:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4642:94;:::o;7371:290::-;7485:12;:10;:12::i;:::-;7473:24;;:8;:24;;;;7465:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7583:8;7538:18;:32;7557:12;:10;:12::i;:::-;7538:32;;;;;;;;;;;;;;;:42;7571:8;7538:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;7635:8;7606:48;;7621:12;:10;:12::i;:::-;7606:48;;;7645:8;7606:48;;;;;;;;;;;;;;;;;;;;;;7371:290;;:::o;8524:282::-;8655:41;8674:12;:10;:12::i;:::-;8688:7;8655:18;:41::i;:::-;8647:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8760:39;8774:4;8780:2;8784:7;8793:5;8760:13;:39::i;:::-;8524:282;;;;:::o;4802:740::-;4867:13;4900:16;4908:7;4900;:16::i;:::-;4892:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4979:23;5005:10;:19;5016:7;5005:19;;;;;;;;;;;4979:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5123:1;5103:8;5097:22;;;;;;;;;;;;;;;;:27;5093:74;;;5147:9;5140:16;;;;;5093:74;5295:1;5275:9;5269:23;:27;5265:110;;;5343:8;5353:9;5326:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5326:37:6;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5326:37:6;;;5312:52;;;;;5265:110;5505:8;5515:18;:7;:16;:18::i;:::-;5488:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5488:46:6;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5488:46:6;;;5474:61;;;4802:740;;;;:::o;281:183:0:-;354:14;371:13;:11;:13::i;:::-;354:30;;394:22;404:3;409:6;394:9;:22::i;:::-;426:31;439:6;447:9;;426:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;426:31:0;;;;;;:12;:31::i;:::-;281:183;;;;:::o;470:179::-;530:14;547:13;:11;:13::i;:::-;530:30;;570:31;580:12;:10;:12::i;:::-;594:6;570:9;:31::i;:::-;611;624:6;632:9;;611:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;611:31:0;;;;;;:12;:31::i;:::-;470:179;;;:::o;7727:154:6:-;7816:4;7839:18;:25;7858:5;7839:25;;;;;;;;;;;;;;;:35;7865:8;7839:35;;;;;;;;;;;;;;;;;;;;;;;;;7832:42;;7727:154;;;;:::o;1983:240:2:-;1280:12;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2091:1:::1;2071:22;;:8;:22;;;;2063:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2180:8;2151:38;;2172:6;::::0;::::1;;;;;;;;;2151:38;;;;;;;;;;;;2208:8;2199:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;1983:240:::0;:::o;10240:117:6:-;10297:4;10320:30;10342:7;10320:12;:21;;:30;;;;:::i;:::-;10313:37;;10240:117;;;:::o;590:104:1:-;643:15;677:10;670:17;;590:104;:::o;15896:155:6:-;15988:2;15961:15;:24;15977:7;15961:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;16036:7;16032:2;16005:39;;16014:16;16022:7;16014;:16::i;:::-;16005:39;;;;;;;;;;;;15896:155;;:::o;7023:121:12:-;7092:7;7118:19;7126:3;:10;;7118:7;:19::i;:::-;7111:26;;7023:121;;;:::o;10515:329:6:-;10600:4;10624:16;10632:7;10624;:16::i;:::-;10616:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10699:13;10715:16;10723:7;10715;:16::i;:::-;10699:32;;10760:5;10749:16;;:7;:16;;;:51;;;;10793:7;10769:31;;:20;10781:7;10769:11;:20::i;:::-;:31;;;10749:51;:87;;;;10804:32;10821:5;10828:7;10804:16;:32::i;:::-;10749:87;10741:96;;;10515:329;;;;:::o;13509:559::-;13626:4;13606:24;;:16;13614:7;13606;:16::i;:::-;:24;;;13598:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13708:1;13694:16;;:2;:16;;;;13686:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13762:39;13783:4;13789:2;13793:7;13762:20;:39::i;:::-;13863:29;13880:1;13884:7;13863:8;:29::i;:::-;13903:35;13930:7;13903:13;:19;13917:4;13903:19;;;;;;;;;;;;;;;:26;;:35;;;;:::i;:::-;;13948:30;13970:7;13948:13;:17;13962:2;13948:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;13989:29;14006:7;14015:2;13989:12;:16;;:29;;;;;:::i;:::-;;14053:7;14049:2;14034:27;;14043:4;14034:27;;;;;;;;;;;;13509:559;;;:::o;7649:135:13:-;7720:7;7754:22;7758:3;:10;;7770:5;7754:3;:22::i;:::-;7746:31;;7739:38;;7649:135;;;;:::o;7472:224:12:-;7552:7;7561;7581:11;7594:13;7611:22;7615:3;:10;;7627:5;7611:3;:22::i;:::-;7580:53;;;;7659:3;7651:12;;7681:5;7673:14;;7643:46;;;;;;;;;7472:224;;;;;:::o;8115:202::-;8222:7;8264:44;8269:3;:10;;8289:3;8281:12;;8295;8264:4;:44::i;:::-;8256:53;;8241:69;;8115:202;;;;;:::o;7205:112:13:-;7265:7;7291:19;7299:3;:10;;7291:7;:19::i;:::-;7284:26;;7205:112;;;:::o;9668:269:6:-;9781:28;9791:4;9797:2;9801:7;9781:9;:28::i;:::-;9827:48;9850:4;9856:2;9860:7;9869:5;9827:22;:48::i;:::-;9819:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9668:269;;;;:::o;202:723:14:-;258:13;484:1;475:5;:10;471:51;;;501:10;;;;;;;;;;;;;;;;;;;;;471:51;531:12;546:5;531:20;;561:14;585:75;600:1;592:4;:9;585:75;;617:8;;;;;;;647:2;639:10;;;;;;;;;585:75;;;669:19;701:6;691:17;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;691:17:14;;;;669:39;;718:13;743:1;734:6;:10;718:26;;761:5;754:12;;776:112;791:1;783:4;:9;776:112;;849:2;842:4;:9;;;;;;837:2;:14;826:27;;808:6;815:7;;;;;;;808:15;;;;;;;;;;;:45;;;;;;;;;;;875:2;867:10;;;;;;;;;776:112;;;911:6;897:21;;;;;;202:723;;;;:::o;11175:108:6:-;11250:26;11260:2;11264:7;11250:26;;;;;;;;;;;;:9;:26::i;:::-;11175:108;;:::o;14215:212::-;14314:16;14322:7;14314;:16::i;:::-;14306:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14411:9;14389:10;:19;14400:7;14389:19;;;;;;;;;;;:31;;;;;;;;;;;;:::i;:::-;;14215:212;;:::o;6791:149:12:-;6875:4;6898:35;6908:3;:10;;6928:3;6920:12;;6898:9;:35::i;:::-;6891:42;;6791:149;;;;:::o;4483:108::-;4539:7;4565:3;:12;;:19;;;;4558:26;;4483:108;;;:::o;16647:93:6:-;;;;:::o;6764:135:13:-;6834:4;6857:35;6865:3;:10;;6885:5;6877:14;;6857:7;:35::i;:::-;6850:42;;6764:135;;;;:::o;6467:129::-;6534:4;6557:32;6562:3;:10;;6582:5;6574:14;;6557:4;:32::i;:::-;6550:39;;6467:129;;;;:::o;6239:174:12:-;6328:4;6351:55;6356:3;:10;;6376:3;6368:12;;6398:5;6390:14;;6382:23;;6351:4;:55::i;:::-;6344:62;;6239:174;;;;;:::o;4423:201:13:-;4490:7;4538:5;4517:3;:11;;:18;;;;:26;4509:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4599:3;:11;;4611:5;4599:18;;;;;;;;;;;;;;;;4592:25;;4423:201;;;;:::o;4934:274:12:-;5001:7;5010;5059:5;5037:3;:12;;:19;;;;:27;5029:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5114:22;5139:3;:12;;5152:5;5139:19;;;;;;;;;;;;;;;;;;5114:44;;5176:5;:10;;;5188:5;:12;;;5168:33;;;;;4934:274;;;;;:::o;5615:315::-;5709:7;5728:16;5747:3;:12;;:17;5760:3;5747:17;;;;;;;;;;;;5728:36;;5794:1;5782:8;:13;;5797:12;5774:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5774:36:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5863:3;:12;;5887:1;5876:8;:12;5863:26;;;;;;;;;;;;;;;;;;:33;;;5856:40;;;5615:315;;;;;:::o;3984:107:13:-;4040:7;4066:3;:11;;:18;;;;4059:25;;3984:107;;;:::o;15301:589:6:-;15421:4;15446:15;:2;:13;;;:15::i;:::-;15441:58;;15484:4;15477:11;;;;15441:58;15508:23;15534:246;15586:45;;;15645:12;:10;:12::i;:::-;15671:4;15689:7;15710:5;15550:175;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15550:175:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;15550:175:6;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;15550:175:6;15534:246;;;;;;;;;;;;;;;;;:2;:15;;;;:246;;;;;:::i;:::-;15508:272;;15790:13;15817:10;15806:32;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15806:32:6;;;;;;;;;;;;;;;;15790:48;;1068:10;15866:16;;15856:26;;;:6;:26;;;;15848:35;;;;15301:589;;;;;;;:::o;11504:247::-;11599:18;11605:2;11609:7;11599:5;:18::i;:::-;11635:54;11666:1;11670:2;11674:7;11683:5;11635:22;:54::i;:::-;11627:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11504:247;;;:::o;4270:123:12:-;4341:4;4385:1;4364:3;:12;;:17;4377:3;4364:17;;;;;;;;;;;;:22;;4357:29;;4270:123;;;;:::o;2183:1512:13:-;2249:4;2365:18;2386:3;:12;;:19;2399:5;2386:19;;;;;;;;;;;;2365:40;;2434:1;2420:10;:15;2416:1273;;2777:21;2814:1;2801:10;:14;2777:38;;2829:17;2870:1;2849:3;:11;;:18;;;;:22;2829:42;;3111:17;3131:3;:11;;3143:9;3131:22;;;;;;;;;;;;;;;;3111:42;;3274:9;3245:3;:11;;3257:13;3245:26;;;;;;;;;;;;;;;:38;;;;3391:1;3375:13;:17;3349:3;:12;;:23;3362:9;3349:23;;;;;;;;;;;:43;;;;3498:3;:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;3590:3;:12;;:19;3603:5;3590:19;;;;;;;;;;;3583:26;;;3631:4;3624:11;;;;;;;;2416:1273;3673:5;3666:12;;;2183:1512;;;;;:::o;1611:404::-;1674:4;1695:21;1705:3;1710:5;1695:9;:21::i;:::-;1690:319;;1732:3;:11;;1749:5;1732:23;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1732:23:13;;;;;;;;;;;;;;;;;;;1912:3;:11;;:18;;;;1890:3;:12;;:19;1903:5;1890:19;;;;;;;;;;;:40;;;;1951:4;1944:11;;;;1690:319;1993:5;1986:12;;1611:404;;;;;:::o;1828:678:12:-;1904:4;2018:16;2037:3;:12;;:17;2050:3;2037:17;;;;;;;;;;;;2018:36;;2081:1;2069:8;:13;2065:435;;;2135:3;:12;;2153:38;;;;;;;;2170:3;2153:38;;;;2183:5;2153:38;;;2135:57;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2135:57:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2347:3;:12;;:19;;;;2327:3;:12;;:17;2340:3;2327:17;;;;;;;;;;;:39;;;;2387:4;2380:11;;;;;2065:435;2458:5;2422:3;:12;;2446:1;2435:8;:12;2422:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;2484:5;2477:12;;;1828:678;;;;;;:::o;718:413:11:-;778:4;981:12;1090:7;1078:20;1070:28;;1123:1;1116:4;:8;1109:15;;;718:413;;;:::o;3573:194::-;3676:12;3707:53;3730:6;3738:4;3744:1;3747:12;3707:22;:53::i;:::-;3700:60;;3573:194;;;;;:::o;12073:393:6:-;12166:1;12152:16;;:2;:16;;;;12144:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12224:16;12232:7;12224;:16::i;:::-;12223:17;12215:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12284:45;12313:1;12317:2;12321:7;12284:20;:45::i;:::-;12340:30;12362:7;12340:13;:17;12354:2;12340:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;12381:29;12398:7;12407:2;12381:12;:16;;:29;;;;;:::i;:::-;;12451:7;12447:2;12426:33;;12443:1;12426:33;;;;;;;;;;;;12073:393;;:::o;3776:127:13:-;3849:4;3895:1;3872:3;:12;;:19;3885:5;3872:19;;;;;;;;;;;;:24;;3865:31;;3776:127;;;;:::o;4920:958:11:-;5050:12;5082:18;5093:6;5082:10;:18::i;:::-;5074:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5205:12;5219:23;5246:6;:11;;5266:8;5277:4;5246:36;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5246:36:11;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;5204:78:11;;;;5296:7;5292:580;;;5326:10;5319:17;;;;;;5292:580;5457:1;5437:10;:17;:21;5433:429;;;5695:10;5689:17;5755:15;5742:10;5738:2;5734:19;5727:44;5644:145;5834:12;5827:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5827:20:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4920:958;;;;;;;:::o;170:481:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o";
    var source = "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract InteractiveNFT is Ownable, ERC721 {\n    constructor() public ERC721(\"InteractiveNFT\", \"INFT\") {}\n\n    function mint(address _to, string calldata _tokenURI) external {\n        uint256 nextId = totalSupply();\n        _safeMint(_to, nextId);\n        _setTokenURI(nextId, _tokenURI);\n    }\n\n    function mint(string calldata _tokenURI) external {\n        uint256 nextId = totalSupply();\n        _safeMint(_msgSender(), nextId);\n        _setTokenURI(nextId, _tokenURI);\n    }\n}\n\n";
    var sourcePath = "/home/hydr063n/dev/interactive-nfts/ethereum/contracts/InteractiveNFT.sol";
    var ast = {
    	absolutePath: "/home/hydr063n/dev/interactive-nfts/ethereum/contracts/InteractiveNFT.sol",
    	exportedSymbols: {
    		InteractiveNFT: [
    			61
    		]
    	},
    	id: 62,
    	nodeType: "SourceUnit",
    	nodes: [
    		{
    			id: 1,
    			literals: [
    				"solidity",
    				"^",
    				"0.6",
    				".2"
    			],
    			nodeType: "PragmaDirective",
    			src: "33:23:0"
    		},
    		{
    			absolutePath: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
    			file: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
    			id: 2,
    			nodeType: "ImportDirective",
    			scope: 62,
    			sourceUnit: 1339,
    			src: "58:57:0",
    			symbolAliases: [
    			],
    			unitAlias: ""
    		},
    		{
    			absolutePath: "@openzeppelin/contracts/access/Ownable.sol",
    			file: "@openzeppelin/contracts/access/Ownable.sol",
    			id: 3,
    			nodeType: "ImportDirective",
    			scope: 62,
    			sourceUnit: 188,
    			src: "116:52:0",
    			symbolAliases: [
    			],
    			unitAlias: ""
    		},
    		{
    			abstract: false,
    			baseContracts: [
    				{
    					"arguments": null,
    					baseName: {
    						contractScope: null,
    						id: 4,
    						name: "Ownable",
    						nodeType: "UserDefinedTypeName",
    						referencedDeclaration: 187,
    						src: "197:7:0",
    						typeDescriptions: {
    							typeIdentifier: "t_contract$_Ownable_$187",
    							typeString: "contract Ownable"
    						}
    					},
    					id: 5,
    					nodeType: "InheritanceSpecifier",
    					src: "197:7:0"
    				},
    				{
    					"arguments": null,
    					baseName: {
    						contractScope: null,
    						id: 6,
    						name: "ERC721",
    						nodeType: "UserDefinedTypeName",
    						referencedDeclaration: 1338,
    						src: "206:6:0",
    						typeDescriptions: {
    							typeIdentifier: "t_contract$_ERC721_$1338",
    							typeString: "contract ERC721"
    						}
    					},
    					id: 7,
    					nodeType: "InheritanceSpecifier",
    					src: "206:6:0"
    				}
    			],
    			contractDependencies: [
    				84,
    				187,
    				240,
    				250,
    				1338,
    				1441,
    				1468,
    				1491
    			],
    			contractKind: "contract",
    			documentation: null,
    			fullyImplemented: true,
    			id: 61,
    			linearizedBaseContracts: [
    				61,
    				1338,
    				1468,
    				1491,
    				1441,
    				240,
    				250,
    				187,
    				84
    			],
    			name: "InteractiveNFT",
    			nodeType: "ContractDefinition",
    			nodes: [
    				{
    					body: {
    						id: 14,
    						nodeType: "Block",
    						src: "273:2:0",
    						statements: [
    						]
    					},
    					documentation: null,
    					id: 15,
    					implemented: true,
    					kind: "constructor",
    					modifiers: [
    						{
    							"arguments": [
    								{
    									argumentTypes: null,
    									hexValue: "496e7465726163746976654e4654",
    									id: 10,
    									isConstant: false,
    									isLValue: false,
    									isPure: true,
    									kind: "string",
    									lValueRequested: false,
    									nodeType: "Literal",
    									src: "247:16:0",
    									subdenomination: null,
    									typeDescriptions: {
    										typeIdentifier: "t_stringliteral_5b7359bf3c8caa59a0c357ade06323311da403a477d4ea980eb266284687fc52",
    										typeString: "literal_string \"InteractiveNFT\""
    									},
    									value: "InteractiveNFT"
    								},
    								{
    									argumentTypes: null,
    									hexValue: "494e4654",
    									id: 11,
    									isConstant: false,
    									isLValue: false,
    									isPure: true,
    									kind: "string",
    									lValueRequested: false,
    									nodeType: "Literal",
    									src: "265:6:0",
    									subdenomination: null,
    									typeDescriptions: {
    										typeIdentifier: "t_stringliteral_ddbfdd591ff9339a8f40ca7af5e497b1afdc57cf1e7c540c22d95f7ff355f951",
    										typeString: "literal_string \"INFT\""
    									},
    									value: "INFT"
    								}
    							],
    							id: 12,
    							modifierName: {
    								argumentTypes: null,
    								id: 9,
    								name: "ERC721",
    								nodeType: "Identifier",
    								overloadedDeclarations: [
    								],
    								referencedDeclaration: 1338,
    								src: "240:6:0",
    								typeDescriptions: {
    									typeIdentifier: "t_type$_t_contract$_ERC721_$1338_$",
    									typeString: "type(contract ERC721)"
    								}
    							},
    							nodeType: "ModifierInvocation",
    							src: "240:32:0"
    						}
    					],
    					name: "",
    					nodeType: "FunctionDefinition",
    					overrides: null,
    					parameters: {
    						id: 8,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "230:2:0"
    					},
    					returnParameters: {
    						id: 13,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "273:0:0"
    					},
    					scope: 61,
    					src: "219:56:0",
    					stateMutability: "nonpayable",
    					virtual: false,
    					visibility: "public"
    				},
    				{
    					body: {
    						id: 37,
    						nodeType: "Block",
    						src: "344:120:0",
    						statements: [
    							{
    								assignments: [
    									23
    								],
    								declarations: [
    									{
    										constant: false,
    										id: 23,
    										name: "nextId",
    										nodeType: "VariableDeclaration",
    										overrides: null,
    										scope: 37,
    										src: "354:14:0",
    										stateVariable: false,
    										storageLocation: "default",
    										typeDescriptions: {
    											typeIdentifier: "t_uint256",
    											typeString: "uint256"
    										},
    										typeName: {
    											id: 22,
    											name: "uint256",
    											nodeType: "ElementaryTypeName",
    											src: "354:7:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										value: null,
    										visibility: "internal"
    									}
    								],
    								id: 26,
    								initialValue: {
    									argumentTypes: null,
    									"arguments": [
    									],
    									expression: {
    										argumentTypes: [
    										],
    										id: 24,
    										name: "totalSupply",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 698,
    										src: "371:11:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_view$__$returns$_t_uint256_$",
    											typeString: "function () view returns (uint256)"
    										}
    									},
    									id: 25,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "371:13:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_uint256",
    										typeString: "uint256"
    									}
    								},
    								nodeType: "VariableDeclarationStatement",
    								src: "354:30:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											id: 28,
    											name: "_to",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 17,
    											src: "404:3:0",
    											typeDescriptions: {
    												typeIdentifier: "t_address",
    												typeString: "address"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 29,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 23,
    											src: "409:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_address",
    												typeString: "address"
    											},
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										],
    										id: 27,
    										name: "_safeMint",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    											994,
    											1022
    										],
    										referencedDeclaration: 994,
    										src: "394:9:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
    											typeString: "function (address,uint256)"
    										}
    									},
    									id: 30,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "394:22:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 31,
    								nodeType: "ExpressionStatement",
    								src: "394:22:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											id: 33,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 23,
    											src: "439:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 34,
    											name: "_tokenURI",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 19,
    											src: "447:9:0",
    											typeDescriptions: {
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											},
    											{
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										],
    										id: 32,
    										name: "_setTokenURI",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 1238,
    										src: "426:12:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
    											typeString: "function (uint256,string memory)"
    										}
    									},
    									id: 35,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "426:31:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 36,
    								nodeType: "ExpressionStatement",
    								src: "426:31:0"
    							}
    						]
    					},
    					documentation: null,
    					functionSelector: "d0def521",
    					id: 38,
    					implemented: true,
    					kind: "function",
    					modifiers: [
    					],
    					name: "mint",
    					nodeType: "FunctionDefinition",
    					overrides: null,
    					parameters: {
    						id: 20,
    						nodeType: "ParameterList",
    						parameters: [
    							{
    								constant: false,
    								id: 17,
    								name: "_to",
    								nodeType: "VariableDeclaration",
    								overrides: null,
    								scope: 38,
    								src: "295:11:0",
    								stateVariable: false,
    								storageLocation: "default",
    								typeDescriptions: {
    									typeIdentifier: "t_address",
    									typeString: "address"
    								},
    								typeName: {
    									id: 16,
    									name: "address",
    									nodeType: "ElementaryTypeName",
    									src: "295:7:0",
    									stateMutability: "nonpayable",
    									typeDescriptions: {
    										typeIdentifier: "t_address",
    										typeString: "address"
    									}
    								},
    								value: null,
    								visibility: "internal"
    							},
    							{
    								constant: false,
    								id: 19,
    								name: "_tokenURI",
    								nodeType: "VariableDeclaration",
    								overrides: null,
    								scope: 38,
    								src: "308:25:0",
    								stateVariable: false,
    								storageLocation: "calldata",
    								typeDescriptions: {
    									typeIdentifier: "t_string_calldata_ptr",
    									typeString: "string"
    								},
    								typeName: {
    									id: 18,
    									name: "string",
    									nodeType: "ElementaryTypeName",
    									src: "308:6:0",
    									typeDescriptions: {
    										typeIdentifier: "t_string_storage_ptr",
    										typeString: "string"
    									}
    								},
    								value: null,
    								visibility: "internal"
    							}
    						],
    						src: "294:40:0"
    					},
    					returnParameters: {
    						id: 21,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "344:0:0"
    					},
    					scope: 61,
    					src: "281:183:0",
    					stateMutability: "nonpayable",
    					virtual: false,
    					visibility: "external"
    				},
    				{
    					body: {
    						id: 59,
    						nodeType: "Block",
    						src: "520:129:0",
    						statements: [
    							{
    								assignments: [
    									44
    								],
    								declarations: [
    									{
    										constant: false,
    										id: 44,
    										name: "nextId",
    										nodeType: "VariableDeclaration",
    										overrides: null,
    										scope: 59,
    										src: "530:14:0",
    										stateVariable: false,
    										storageLocation: "default",
    										typeDescriptions: {
    											typeIdentifier: "t_uint256",
    											typeString: "uint256"
    										},
    										typeName: {
    											id: 43,
    											name: "uint256",
    											nodeType: "ElementaryTypeName",
    											src: "530:7:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										value: null,
    										visibility: "internal"
    									}
    								],
    								id: 47,
    								initialValue: {
    									argumentTypes: null,
    									"arguments": [
    									],
    									expression: {
    										argumentTypes: [
    										],
    										id: 45,
    										name: "totalSupply",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 698,
    										src: "547:11:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_view$__$returns$_t_uint256_$",
    											typeString: "function () view returns (uint256)"
    										}
    									},
    									id: 46,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "547:13:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_uint256",
    										typeString: "uint256"
    									}
    								},
    								nodeType: "VariableDeclarationStatement",
    								src: "530:30:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											"arguments": [
    											],
    											expression: {
    												argumentTypes: [
    												],
    												id: 49,
    												name: "_msgSender",
    												nodeType: "Identifier",
    												overloadedDeclarations: [
    												],
    												referencedDeclaration: 72,
    												src: "580:10:0",
    												typeDescriptions: {
    													typeIdentifier: "t_function_internal_view$__$returns$_t_address_payable_$",
    													typeString: "function () view returns (address payable)"
    												}
    											},
    											id: 50,
    											isConstant: false,
    											isLValue: false,
    											isPure: false,
    											kind: "functionCall",
    											lValueRequested: false,
    											names: [
    											],
    											nodeType: "FunctionCall",
    											src: "580:12:0",
    											tryCall: false,
    											typeDescriptions: {
    												typeIdentifier: "t_address_payable",
    												typeString: "address payable"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 51,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 44,
    											src: "594:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_address_payable",
    												typeString: "address payable"
    											},
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										],
    										id: 48,
    										name: "_safeMint",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    											994,
    											1022
    										],
    										referencedDeclaration: 994,
    										src: "570:9:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
    											typeString: "function (address,uint256)"
    										}
    									},
    									id: 52,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "570:31:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 53,
    								nodeType: "ExpressionStatement",
    								src: "570:31:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											id: 55,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 44,
    											src: "624:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 56,
    											name: "_tokenURI",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 40,
    											src: "632:9:0",
    											typeDescriptions: {
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											},
    											{
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										],
    										id: 54,
    										name: "_setTokenURI",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 1238,
    										src: "611:12:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
    											typeString: "function (uint256,string memory)"
    										}
    									},
    									id: 57,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "611:31:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 58,
    								nodeType: "ExpressionStatement",
    								src: "611:31:0"
    							}
    						]
    					},
    					documentation: null,
    					functionSelector: "d85d3d27",
    					id: 60,
    					implemented: true,
    					kind: "function",
    					modifiers: [
    					],
    					name: "mint",
    					nodeType: "FunctionDefinition",
    					overrides: null,
    					parameters: {
    						id: 41,
    						nodeType: "ParameterList",
    						parameters: [
    							{
    								constant: false,
    								id: 40,
    								name: "_tokenURI",
    								nodeType: "VariableDeclaration",
    								overrides: null,
    								scope: 60,
    								src: "484:25:0",
    								stateVariable: false,
    								storageLocation: "calldata",
    								typeDescriptions: {
    									typeIdentifier: "t_string_calldata_ptr",
    									typeString: "string"
    								},
    								typeName: {
    									id: 39,
    									name: "string",
    									nodeType: "ElementaryTypeName",
    									src: "484:6:0",
    									typeDescriptions: {
    										typeIdentifier: "t_string_storage_ptr",
    										typeString: "string"
    									}
    								},
    								value: null,
    								visibility: "internal"
    							}
    						],
    						src: "483:27:0"
    					},
    					returnParameters: {
    						id: 42,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "520:0:0"
    					},
    					scope: 61,
    					src: "470:179:0",
    					stateMutability: "nonpayable",
    					virtual: false,
    					visibility: "external"
    				}
    			],
    			scope: 62,
    			src: "170:481:0"
    		}
    	],
    	src: "33:620:0"
    };
    var legacyAST = {
    	absolutePath: "/home/hydr063n/dev/interactive-nfts/ethereum/contracts/InteractiveNFT.sol",
    	exportedSymbols: {
    		InteractiveNFT: [
    			61
    		]
    	},
    	id: 62,
    	nodeType: "SourceUnit",
    	nodes: [
    		{
    			id: 1,
    			literals: [
    				"solidity",
    				"^",
    				"0.6",
    				".2"
    			],
    			nodeType: "PragmaDirective",
    			src: "33:23:0"
    		},
    		{
    			absolutePath: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
    			file: "@openzeppelin/contracts/token/ERC721/ERC721.sol",
    			id: 2,
    			nodeType: "ImportDirective",
    			scope: 62,
    			sourceUnit: 1339,
    			src: "58:57:0",
    			symbolAliases: [
    			],
    			unitAlias: ""
    		},
    		{
    			absolutePath: "@openzeppelin/contracts/access/Ownable.sol",
    			file: "@openzeppelin/contracts/access/Ownable.sol",
    			id: 3,
    			nodeType: "ImportDirective",
    			scope: 62,
    			sourceUnit: 188,
    			src: "116:52:0",
    			symbolAliases: [
    			],
    			unitAlias: ""
    		},
    		{
    			abstract: false,
    			baseContracts: [
    				{
    					"arguments": null,
    					baseName: {
    						contractScope: null,
    						id: 4,
    						name: "Ownable",
    						nodeType: "UserDefinedTypeName",
    						referencedDeclaration: 187,
    						src: "197:7:0",
    						typeDescriptions: {
    							typeIdentifier: "t_contract$_Ownable_$187",
    							typeString: "contract Ownable"
    						}
    					},
    					id: 5,
    					nodeType: "InheritanceSpecifier",
    					src: "197:7:0"
    				},
    				{
    					"arguments": null,
    					baseName: {
    						contractScope: null,
    						id: 6,
    						name: "ERC721",
    						nodeType: "UserDefinedTypeName",
    						referencedDeclaration: 1338,
    						src: "206:6:0",
    						typeDescriptions: {
    							typeIdentifier: "t_contract$_ERC721_$1338",
    							typeString: "contract ERC721"
    						}
    					},
    					id: 7,
    					nodeType: "InheritanceSpecifier",
    					src: "206:6:0"
    				}
    			],
    			contractDependencies: [
    				84,
    				187,
    				240,
    				250,
    				1338,
    				1441,
    				1468,
    				1491
    			],
    			contractKind: "contract",
    			documentation: null,
    			fullyImplemented: true,
    			id: 61,
    			linearizedBaseContracts: [
    				61,
    				1338,
    				1468,
    				1491,
    				1441,
    				240,
    				250,
    				187,
    				84
    			],
    			name: "InteractiveNFT",
    			nodeType: "ContractDefinition",
    			nodes: [
    				{
    					body: {
    						id: 14,
    						nodeType: "Block",
    						src: "273:2:0",
    						statements: [
    						]
    					},
    					documentation: null,
    					id: 15,
    					implemented: true,
    					kind: "constructor",
    					modifiers: [
    						{
    							"arguments": [
    								{
    									argumentTypes: null,
    									hexValue: "496e7465726163746976654e4654",
    									id: 10,
    									isConstant: false,
    									isLValue: false,
    									isPure: true,
    									kind: "string",
    									lValueRequested: false,
    									nodeType: "Literal",
    									src: "247:16:0",
    									subdenomination: null,
    									typeDescriptions: {
    										typeIdentifier: "t_stringliteral_5b7359bf3c8caa59a0c357ade06323311da403a477d4ea980eb266284687fc52",
    										typeString: "literal_string \"InteractiveNFT\""
    									},
    									value: "InteractiveNFT"
    								},
    								{
    									argumentTypes: null,
    									hexValue: "494e4654",
    									id: 11,
    									isConstant: false,
    									isLValue: false,
    									isPure: true,
    									kind: "string",
    									lValueRequested: false,
    									nodeType: "Literal",
    									src: "265:6:0",
    									subdenomination: null,
    									typeDescriptions: {
    										typeIdentifier: "t_stringliteral_ddbfdd591ff9339a8f40ca7af5e497b1afdc57cf1e7c540c22d95f7ff355f951",
    										typeString: "literal_string \"INFT\""
    									},
    									value: "INFT"
    								}
    							],
    							id: 12,
    							modifierName: {
    								argumentTypes: null,
    								id: 9,
    								name: "ERC721",
    								nodeType: "Identifier",
    								overloadedDeclarations: [
    								],
    								referencedDeclaration: 1338,
    								src: "240:6:0",
    								typeDescriptions: {
    									typeIdentifier: "t_type$_t_contract$_ERC721_$1338_$",
    									typeString: "type(contract ERC721)"
    								}
    							},
    							nodeType: "ModifierInvocation",
    							src: "240:32:0"
    						}
    					],
    					name: "",
    					nodeType: "FunctionDefinition",
    					overrides: null,
    					parameters: {
    						id: 8,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "230:2:0"
    					},
    					returnParameters: {
    						id: 13,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "273:0:0"
    					},
    					scope: 61,
    					src: "219:56:0",
    					stateMutability: "nonpayable",
    					virtual: false,
    					visibility: "public"
    				},
    				{
    					body: {
    						id: 37,
    						nodeType: "Block",
    						src: "344:120:0",
    						statements: [
    							{
    								assignments: [
    									23
    								],
    								declarations: [
    									{
    										constant: false,
    										id: 23,
    										name: "nextId",
    										nodeType: "VariableDeclaration",
    										overrides: null,
    										scope: 37,
    										src: "354:14:0",
    										stateVariable: false,
    										storageLocation: "default",
    										typeDescriptions: {
    											typeIdentifier: "t_uint256",
    											typeString: "uint256"
    										},
    										typeName: {
    											id: 22,
    											name: "uint256",
    											nodeType: "ElementaryTypeName",
    											src: "354:7:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										value: null,
    										visibility: "internal"
    									}
    								],
    								id: 26,
    								initialValue: {
    									argumentTypes: null,
    									"arguments": [
    									],
    									expression: {
    										argumentTypes: [
    										],
    										id: 24,
    										name: "totalSupply",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 698,
    										src: "371:11:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_view$__$returns$_t_uint256_$",
    											typeString: "function () view returns (uint256)"
    										}
    									},
    									id: 25,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "371:13:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_uint256",
    										typeString: "uint256"
    									}
    								},
    								nodeType: "VariableDeclarationStatement",
    								src: "354:30:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											id: 28,
    											name: "_to",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 17,
    											src: "404:3:0",
    											typeDescriptions: {
    												typeIdentifier: "t_address",
    												typeString: "address"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 29,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 23,
    											src: "409:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_address",
    												typeString: "address"
    											},
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										],
    										id: 27,
    										name: "_safeMint",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    											994,
    											1022
    										],
    										referencedDeclaration: 994,
    										src: "394:9:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
    											typeString: "function (address,uint256)"
    										}
    									},
    									id: 30,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "394:22:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 31,
    								nodeType: "ExpressionStatement",
    								src: "394:22:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											id: 33,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 23,
    											src: "439:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 34,
    											name: "_tokenURI",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 19,
    											src: "447:9:0",
    											typeDescriptions: {
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											},
    											{
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										],
    										id: 32,
    										name: "_setTokenURI",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 1238,
    										src: "426:12:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
    											typeString: "function (uint256,string memory)"
    										}
    									},
    									id: 35,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "426:31:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 36,
    								nodeType: "ExpressionStatement",
    								src: "426:31:0"
    							}
    						]
    					},
    					documentation: null,
    					functionSelector: "d0def521",
    					id: 38,
    					implemented: true,
    					kind: "function",
    					modifiers: [
    					],
    					name: "mint",
    					nodeType: "FunctionDefinition",
    					overrides: null,
    					parameters: {
    						id: 20,
    						nodeType: "ParameterList",
    						parameters: [
    							{
    								constant: false,
    								id: 17,
    								name: "_to",
    								nodeType: "VariableDeclaration",
    								overrides: null,
    								scope: 38,
    								src: "295:11:0",
    								stateVariable: false,
    								storageLocation: "default",
    								typeDescriptions: {
    									typeIdentifier: "t_address",
    									typeString: "address"
    								},
    								typeName: {
    									id: 16,
    									name: "address",
    									nodeType: "ElementaryTypeName",
    									src: "295:7:0",
    									stateMutability: "nonpayable",
    									typeDescriptions: {
    										typeIdentifier: "t_address",
    										typeString: "address"
    									}
    								},
    								value: null,
    								visibility: "internal"
    							},
    							{
    								constant: false,
    								id: 19,
    								name: "_tokenURI",
    								nodeType: "VariableDeclaration",
    								overrides: null,
    								scope: 38,
    								src: "308:25:0",
    								stateVariable: false,
    								storageLocation: "calldata",
    								typeDescriptions: {
    									typeIdentifier: "t_string_calldata_ptr",
    									typeString: "string"
    								},
    								typeName: {
    									id: 18,
    									name: "string",
    									nodeType: "ElementaryTypeName",
    									src: "308:6:0",
    									typeDescriptions: {
    										typeIdentifier: "t_string_storage_ptr",
    										typeString: "string"
    									}
    								},
    								value: null,
    								visibility: "internal"
    							}
    						],
    						src: "294:40:0"
    					},
    					returnParameters: {
    						id: 21,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "344:0:0"
    					},
    					scope: 61,
    					src: "281:183:0",
    					stateMutability: "nonpayable",
    					virtual: false,
    					visibility: "external"
    				},
    				{
    					body: {
    						id: 59,
    						nodeType: "Block",
    						src: "520:129:0",
    						statements: [
    							{
    								assignments: [
    									44
    								],
    								declarations: [
    									{
    										constant: false,
    										id: 44,
    										name: "nextId",
    										nodeType: "VariableDeclaration",
    										overrides: null,
    										scope: 59,
    										src: "530:14:0",
    										stateVariable: false,
    										storageLocation: "default",
    										typeDescriptions: {
    											typeIdentifier: "t_uint256",
    											typeString: "uint256"
    										},
    										typeName: {
    											id: 43,
    											name: "uint256",
    											nodeType: "ElementaryTypeName",
    											src: "530:7:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										value: null,
    										visibility: "internal"
    									}
    								],
    								id: 47,
    								initialValue: {
    									argumentTypes: null,
    									"arguments": [
    									],
    									expression: {
    										argumentTypes: [
    										],
    										id: 45,
    										name: "totalSupply",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 698,
    										src: "547:11:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_view$__$returns$_t_uint256_$",
    											typeString: "function () view returns (uint256)"
    										}
    									},
    									id: 46,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "547:13:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_uint256",
    										typeString: "uint256"
    									}
    								},
    								nodeType: "VariableDeclarationStatement",
    								src: "530:30:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											"arguments": [
    											],
    											expression: {
    												argumentTypes: [
    												],
    												id: 49,
    												name: "_msgSender",
    												nodeType: "Identifier",
    												overloadedDeclarations: [
    												],
    												referencedDeclaration: 72,
    												src: "580:10:0",
    												typeDescriptions: {
    													typeIdentifier: "t_function_internal_view$__$returns$_t_address_payable_$",
    													typeString: "function () view returns (address payable)"
    												}
    											},
    											id: 50,
    											isConstant: false,
    											isLValue: false,
    											isPure: false,
    											kind: "functionCall",
    											lValueRequested: false,
    											names: [
    											],
    											nodeType: "FunctionCall",
    											src: "580:12:0",
    											tryCall: false,
    											typeDescriptions: {
    												typeIdentifier: "t_address_payable",
    												typeString: "address payable"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 51,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 44,
    											src: "594:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_address_payable",
    												typeString: "address payable"
    											},
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										],
    										id: 48,
    										name: "_safeMint",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    											994,
    											1022
    										],
    										referencedDeclaration: 994,
    										src: "570:9:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
    											typeString: "function (address,uint256)"
    										}
    									},
    									id: 52,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "570:31:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 53,
    								nodeType: "ExpressionStatement",
    								src: "570:31:0"
    							},
    							{
    								expression: {
    									argumentTypes: null,
    									"arguments": [
    										{
    											argumentTypes: null,
    											id: 55,
    											name: "nextId",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 44,
    											src: "624:6:0",
    											typeDescriptions: {
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											}
    										},
    										{
    											argumentTypes: null,
    											id: 56,
    											name: "_tokenURI",
    											nodeType: "Identifier",
    											overloadedDeclarations: [
    											],
    											referencedDeclaration: 40,
    											src: "632:9:0",
    											typeDescriptions: {
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										}
    									],
    									expression: {
    										argumentTypes: [
    											{
    												typeIdentifier: "t_uint256",
    												typeString: "uint256"
    											},
    											{
    												typeIdentifier: "t_string_calldata_ptr",
    												typeString: "string calldata"
    											}
    										],
    										id: 54,
    										name: "_setTokenURI",
    										nodeType: "Identifier",
    										overloadedDeclarations: [
    										],
    										referencedDeclaration: 1238,
    										src: "611:12:0",
    										typeDescriptions: {
    											typeIdentifier: "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
    											typeString: "function (uint256,string memory)"
    										}
    									},
    									id: 57,
    									isConstant: false,
    									isLValue: false,
    									isPure: false,
    									kind: "functionCall",
    									lValueRequested: false,
    									names: [
    									],
    									nodeType: "FunctionCall",
    									src: "611:31:0",
    									tryCall: false,
    									typeDescriptions: {
    										typeIdentifier: "t_tuple$__$",
    										typeString: "tuple()"
    									}
    								},
    								id: 58,
    								nodeType: "ExpressionStatement",
    								src: "611:31:0"
    							}
    						]
    					},
    					documentation: null,
    					functionSelector: "d85d3d27",
    					id: 60,
    					implemented: true,
    					kind: "function",
    					modifiers: [
    					],
    					name: "mint",
    					nodeType: "FunctionDefinition",
    					overrides: null,
    					parameters: {
    						id: 41,
    						nodeType: "ParameterList",
    						parameters: [
    							{
    								constant: false,
    								id: 40,
    								name: "_tokenURI",
    								nodeType: "VariableDeclaration",
    								overrides: null,
    								scope: 60,
    								src: "484:25:0",
    								stateVariable: false,
    								storageLocation: "calldata",
    								typeDescriptions: {
    									typeIdentifier: "t_string_calldata_ptr",
    									typeString: "string"
    								},
    								typeName: {
    									id: 39,
    									name: "string",
    									nodeType: "ElementaryTypeName",
    									src: "484:6:0",
    									typeDescriptions: {
    										typeIdentifier: "t_string_storage_ptr",
    										typeString: "string"
    									}
    								},
    								value: null,
    								visibility: "internal"
    							}
    						],
    						src: "483:27:0"
    					},
    					returnParameters: {
    						id: 42,
    						nodeType: "ParameterList",
    						parameters: [
    						],
    						src: "520:0:0"
    					},
    					scope: 61,
    					src: "470:179:0",
    					stateMutability: "nonpayable",
    					virtual: false,
    					visibility: "external"
    				}
    			],
    			scope: 62,
    			src: "170:481:0"
    		}
    	],
    	src: "33:620:0"
    };
    var compiler = {
    	name: "solc",
    	version: "0.6.2+commit.bacdbe57.Emscripten.clang"
    };
    var networks = {
    	"1602429498240": {
    		events: {
    			"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "approved",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "tokenId",
    						type: "uint256"
    					}
    				],
    				name: "Approval",
    				type: "event"
    			},
    			"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "owner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "operator",
    						type: "address"
    					},
    					{
    						indexed: false,
    						internalType: "bool",
    						name: "approved",
    						type: "bool"
    					}
    				],
    				name: "ApprovalForAll",
    				type: "event"
    			},
    			"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "previousOwner",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "newOwner",
    						type: "address"
    					}
    				],
    				name: "OwnershipTransferred",
    				type: "event"
    			},
    			"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
    				anonymous: false,
    				inputs: [
    					{
    						indexed: true,
    						internalType: "address",
    						name: "from",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "address",
    						name: "to",
    						type: "address"
    					},
    					{
    						indexed: true,
    						internalType: "uint256",
    						name: "tokenId",
    						type: "uint256"
    					}
    				],
    				name: "Transfer",
    				type: "event"
    			}
    		},
    		links: {
    		},
    		address: "0x9cA20D6241d6bcB645716aD4AbF687238404a407",
    		transactionHash: "0x4adae4159afd5fe97b27eeb31e30bead2013bc636909d3b91bfb6b4c5c6e5b10"
    	}
    };
    var schemaVersion = "3.2.3";
    var updatedAt = "2020-10-11T15:18:52.366Z";
    var networkType = "ethereum";
    var devdoc = {
    	methods: {
    		"approve(address,uint256)": {
    			details: "See {IERC721-approve}."
    		},
    		"balanceOf(address)": {
    			details: "See {IERC721-balanceOf}."
    		},
    		"baseURI()": {
    			details: "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
    		},
    		"getApproved(uint256)": {
    			details: "See {IERC721-getApproved}."
    		},
    		"isApprovedForAll(address,address)": {
    			details: "See {IERC721-isApprovedForAll}."
    		},
    		"name()": {
    			details: "See {IERC721Metadata-name}."
    		},
    		"owner()": {
    			details: "Returns the address of the current owner."
    		},
    		"ownerOf(uint256)": {
    			details: "See {IERC721-ownerOf}."
    		},
    		"renounceOwnership()": {
    			details: "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    		},
    		"safeTransferFrom(address,address,uint256)": {
    			details: "See {IERC721-safeTransferFrom}."
    		},
    		"safeTransferFrom(address,address,uint256,bytes)": {
    			details: "See {IERC721-safeTransferFrom}."
    		},
    		"setApprovalForAll(address,bool)": {
    			details: "See {IERC721-setApprovalForAll}."
    		},
    		"supportsInterface(bytes4)": {
    			details: "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
    		},
    		"symbol()": {
    			details: "See {IERC721Metadata-symbol}."
    		},
    		"tokenByIndex(uint256)": {
    			details: "See {IERC721Enumerable-tokenByIndex}."
    		},
    		"tokenOfOwnerByIndex(address,uint256)": {
    			details: "See {IERC721Enumerable-tokenOfOwnerByIndex}."
    		},
    		"tokenURI(uint256)": {
    			details: "See {IERC721Metadata-tokenURI}."
    		},
    		"totalSupply()": {
    			details: "See {IERC721Enumerable-totalSupply}."
    		},
    		"transferFrom(address,address,uint256)": {
    			details: "See {IERC721-transferFrom}."
    		},
    		"transferOwnership(address)": {
    			details: "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    		}
    	}
    };
    var userdoc = {
    	methods: {
    	}
    };
    var InteractiveNFT = {
    	contractName: contractName,
    	abi: abi,
    	metadata: metadata,
    	bytecode: bytecode,
    	deployedBytecode: deployedBytecode,
    	sourceMap: sourceMap,
    	deployedSourceMap: deployedSourceMap,
    	source: source,
    	sourcePath: sourcePath,
    	ast: ast,
    	legacyAST: legacyAST,
    	compiler: compiler,
    	networks: networks,
    	schemaVersion: schemaVersion,
    	updatedAt: updatedAt,
    	networkType: networkType,
    	devdoc: devdoc,
    	userdoc: userdoc
    };

    const instance$1 = new web3$1.eth.Contract(
        InteractiveNFT.abi,
        '0x782A050fAA63b4Dbb83Dc9D37a1d84DB7be5A237'
    );

    /* src\App.svelte generated by Svelte v3.29.0 */

    const { console: console_1$1 } = globals;
    const file$1 = "src\\App.svelte";

    function create_fragment$1(ctx) {
    	let button;
    	let t0;
    	let t1;
    	let t2;
    	let sketch0;
    	let t3;
    	let sketch1;
    	let t4;
    	let sketch2;
    	let current;
    	let mounted;
    	let dispose;

    	sketch0 = new Sketch({
    			props: { id: "sketch1", sketch: whiteBox },
    			$$inline: true
    		});

    	sketch1 = new Sketch({
    			props: { id: "sketch3", sketch: line },
    			$$inline: true
    		});

    	sketch2 = new Sketch({
    			props: { id: "sketch3", sketch: clock },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(/*count*/ ctx[0]);
    			t1 = text(" tokens minted");
    			t2 = space();
    			create_component(sketch0.$$.fragment);
    			t3 = space();
    			create_component(sketch1.$$.fragment);
    			t4 = space();
    			create_component(sketch2.$$.fragment);
    			add_location(button, file$1, 25, 0, 534);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			insert_dev(target, t2, anchor);
    			mount_component(sketch0, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(sketch1, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(sketch2, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mintEmpty*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*count*/ 1) set_data_dev(t0, /*count*/ ctx[0]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sketch0.$$.fragment, local);
    			transition_in(sketch1.$$.fragment, local);
    			transition_in(sketch2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sketch0.$$.fragment, local);
    			transition_out(sketch1.$$.fragment, local);
    			transition_out(sketch2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t2);
    			destroy_component(sketch0, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(sketch1, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(sketch2, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	let count = 0;

    	async function mintEmpty() {
    		try {
    			const accounts = await web3$1.eth.getAccounts();
    			await instance$1.methods.mint("").send({ from: accounts[0] });
    			$$invalidate(0, count++, count);
    		} catch(err) {
    			console.log(err);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Sketch,
    		line,
    		clock,
    		whiteBox,
    		web3: web3$1,
    		InteractiveNFT: instance$1,
    		count,
    		mintEmpty
    	});

    	$$self.$inject_state = $$props => {
    		if ("count" in $$props) $$invalidate(0, count = $$props.count);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [count, mintEmpty];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
